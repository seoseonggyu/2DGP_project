//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-DeferredShading" {
Properties {
_LightTexture0 ("", any) = "" { }
_LightTextureB0 ("", 2D) = "" { }
_ShadowMapTexture ("", any) = "" { }
_SrcBlend ("", Float) = 1
_DstBlend ("", Float) = 1
}
SubShader {
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  GpuProgramID 293
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat3.xyz = u_xlat10_3.www * _LightColor.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_5.xyz;
    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat16_5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_12 = max(u_xlat16_12, 0.00200000009);
    u_xlat16_1 = u_xlat16_12 * u_xlat16_12;
    u_xlat7 = u_xlat18 * u_xlat16_1 + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_1 = u_xlat16_1 * 0.318309873;
    u_xlat18 = u_xlat16_1 / u_xlat18;
    u_xlat16_1 = (-u_xlat16_12) + 1.0;
    u_xlat7 = abs(u_xlat6) * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat0.x * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat12 * abs(u_xlat6);
    u_xlat6 = -abs(u_xlat6) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat6 = u_xlat12 * u_xlat6 + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 515
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %511 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %155 DescriptorSet 155 
                                                      OpDecorate %155 Binding 155 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %251 DescriptorSet 251 
                                                      OpDecorate %251 Binding 251 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %511 Location 511 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %10 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %80 = OpConstant 3 
                                              %81 = OpTypePointer Uniform %7 
                                          i32 %86 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                         i32 %125 = OpConstant 4 
                                Private f32* %147 = OpVariable Private 
                                         u32 %151 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %155 = OpVariable UniformConstant 
                              Private f32_3* %161 = OpVariable Private 
                                         i32 %164 = OpConstant 5 
                              Private f32_3* %169 = OpVariable Private 
                                         f32 %190 = OpConstant 3.674022E-40 
                              Private f32_3* %198 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %199 = OpVariable UniformConstant 
                              Private f32_3* %204 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                       f32_3 %207 = OpConstantComposite %206 %206 %206 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_3 %210 = OpConstantComposite %209 %209 %209 
                                Private f32* %212 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %251 = OpVariable UniformConstant 
                              Private f32_4* %255 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %256 = OpVariable UniformConstant 
                                Private f32* %263 = OpVariable Private 
                                Private f32* %268 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
                                Private f32* %275 = OpVariable Private 
                                         f32 %294 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                Private f32* %312 = OpVariable Private 
                              Private f32_3* %323 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %339 = OpConstant 3.674022E-40 
                                         f32 %346 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                              Private f32_3* %357 = OpVariable Private 
                                             %364 = OpTypeBool 
                                             %365 = OpTypePointer Private %364 
                               Private bool* %366 = OpVariable Private 
                                             %370 = OpTypePointer Function %6 
                                Private f32* %388 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                       f32_3 %406 = OpConstantComposite %66 %66 %66 
                                         f32 %449 = OpConstant 3.674022E-40 
                                Private f32* %463 = OpVariable Private 
                              Private f32_4* %503 = OpVariable Private 
                                             %510 = OpTypePointer Output %7 
                               Output f32_4* %511 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %371 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %69 = OpLoad %48 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %9 %75 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %16 %80 %18 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %79 %84 
                                                      OpStore %77 %85 
                               Uniform f32_4* %87 = OpAccessChain %16 %80 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %77 
                                        f32_3 %94 = OpFAdd %92 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 2 6 
                                                      OpStore %9 %96 
                               Uniform f32_4* %97 = OpAccessChain %16 %80 %57 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 2 2 2 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 3 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %9 %107 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                              Uniform f32_4* %110 = OpAccessChain %16 %80 %80 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_3* %119 = OpAccessChain %16 %86 
                                       f32_3 %120 = OpLoad %119 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %117 %121 
                                                      OpStore %77 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %126 = OpAccessChain %16 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %124 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %9 %132 
                                       f32_3 %133 = OpLoad %77 
                                       f32_3 %134 = OpLoad %77 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %48 %135 
                                         f32 %136 = OpLoad %48 
                                         f32 %137 = OpExtInst %1 32 %136 
                                                      OpStore %48 %137 
                                         f32 %138 = OpLoad %48 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_3 %140 = OpLoad %77 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %77 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %143 %145 
                                                      OpStore %48 %146 
                                         f32 %148 = OpLoad %48 
                                         f32 %149 = OpExtInst %1 32 %148 
                                                      OpStore %147 %149 
                                         f32 %150 = OpLoad %48 
                                Uniform f32* %152 = OpAccessChain %16 %125 %151 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %150 %153 
                                                      OpStore %48 %154 
                  read_only Texture2DSampled %156 = OpLoad %155 
                                         f32 %157 = OpLoad %48 
                                       f32_2 %158 = OpCompositeConstruct %157 %157 
                                       f32_4 %159 = OpImageSampleImplicitLod %156 %158 
                                         f32 %160 = OpCompositeExtract %159 3 
                                                      OpStore %48 %160 
                                         f32 %162 = OpLoad %48 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %163 %167 
                                                      OpStore %161 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFNegate %171 
                                         f32 %173 = OpLoad %147 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                                       f32_3 %176 = OpLoad %77 
                                       f32_3 %177 = OpFNegate %176 
                                       f32_3 %178 = OpFAdd %175 %177 
                                                      OpStore %169 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpLoad %147 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %9 %185 
                                       f32_3 %186 = OpLoad %169 
                                       f32_3 %187 = OpLoad %169 
                                         f32 %188 = OpDot %186 %187 
                                                      OpStore %48 %188 
                                         f32 %189 = OpLoad %48 
                                         f32 %191 = OpExtInst %1 40 %189 %190 
                                                      OpStore %48 %191 
                                         f32 %192 = OpLoad %48 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %48 %193 
                                         f32 %194 = OpLoad %48 
                                       f32_3 %195 = OpCompositeConstruct %194 %194 %194 
                                       f32_3 %196 = OpLoad %169 
                                       f32_3 %197 = OpFMul %195 %196 
                                                      OpStore %169 %197 
                  read_only Texture2DSampled %200 = OpLoad %199 
                                       f32_2 %201 = OpLoad %40 
                                       f32_4 %202 = OpImageSampleImplicitLod %200 %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                                      OpStore %198 %203 
                                       f32_3 %205 = OpLoad %198 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %211 = OpFAdd %208 %210 
                                                      OpStore %204 %211 
                                       f32_3 %213 = OpLoad %204 
                                       f32_3 %214 = OpLoad %204 
                                         f32 %215 = OpDot %213 %214 
                                                      OpStore %212 %215 
                                         f32 %216 = OpLoad %212 
                                         f32 %217 = OpExtInst %1 32 %216 
                                                      OpStore %212 %217 
                                         f32 %218 = OpLoad %212 
                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
                                       f32_3 %220 = OpLoad %204 
                                       f32_3 %221 = OpFMul %219 %220 
                                                      OpStore %204 %221 
                                       f32_3 %222 = OpLoad %204 
                                       f32_3 %223 = OpLoad %169 
                                         f32 %224 = OpDot %222 %223 
                                                      OpStore %48 %224 
                                         f32 %225 = OpLoad %48 
                                         f32 %227 = OpExtInst %1 43 %225 %226 %66 
                                                      OpStore %48 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFNegate %229 
                                       f32_3 %231 = OpLoad %169 
                                         f32 %232 = OpDot %230 %231 
                                                      OpStore %147 %232 
                                         f32 %233 = OpLoad %147 
                                         f32 %234 = OpExtInst %1 43 %233 %226 %66 
                                                      OpStore %147 %234 
                                       f32_3 %235 = OpLoad %204 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFNegate %237 
                                         f32 %239 = OpDot %235 %238 
                                Private f32* %240 = OpAccessChain %9 %29 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %29 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 43 %242 %226 %66 
                                Private f32* %244 = OpAccessChain %9 %29 
                                                      OpStore %244 %243 
                                       f32_3 %246 = OpLoad %204 
                                       f32_3 %247 = OpLoad %77 
                                       f32_3 %248 = OpFNegate %247 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %245 %249 
                  read_only Texture2DSampled %252 = OpLoad %251 
                                       f32_2 %253 = OpLoad %40 
                                       f32_4 %254 = OpImageSampleImplicitLod %252 %253 
                                                      OpStore %250 %254 
                  read_only Texture2DSampled %257 = OpLoad %256 
                                       f32_2 %258 = OpLoad %40 
                                       f32_4 %259 = OpImageSampleImplicitLod %257 %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %255 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 2 6 
                                                      OpStore %255 %262 
                                Private f32* %264 = OpAccessChain %250 %151 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %66 
                                                      OpStore %263 %267 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpLoad %263 
                                         f32 %271 = OpFMul %269 %270 
                                                      OpStore %268 %271 
                                         f32 %272 = OpLoad %268 
                                         f32 %274 = OpExtInst %1 40 %272 %273 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %268 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFMul %276 %277 
                                                      OpStore %275 %278 
                                         f32 %279 = OpLoad %48 
                                         f32 %280 = OpLoad %275 
                                         f32 %281 = OpFMul %279 %280 
                                         f32 %282 = OpLoad %48 
                                         f32 %283 = OpFNegate %282 
                                         f32 %284 = OpFAdd %281 %283 
                                Private f32* %285 = OpAccessChain %169 %29 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %169 %29 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpLoad %48 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %66 
                                                      OpStore %48 %290 
                                         f32 %291 = OpLoad %48 
                                         f32 %292 = OpLoad %48 
                                         f32 %293 = OpFMul %291 %292 
                                         f32 %295 = OpFAdd %293 %294 
                                                      OpStore %48 %295 
                                         f32 %296 = OpLoad %275 
                                         f32 %298 = OpFMul %296 %297 
                                                      OpStore %275 %298 
                                         f32 %299 = OpLoad %275 
                                         f32 %300 = OpLoad %48 
                                         f32 %301 = OpFDiv %299 %300 
                                                      OpStore %48 %301 
                                         f32 %302 = OpLoad %268 
                                         f32 %303 = OpFNegate %302 
                                         f32 %304 = OpFAdd %303 %66 
                                                      OpStore %275 %304 
                                         f32 %305 = OpLoad %245 
                                         f32 %306 = OpExtInst %1 4 %305 
                                         f32 %307 = OpLoad %275 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpLoad %268 
                                         f32 %310 = OpFAdd %308 %309 
                                Private f32* %311 = OpAccessChain %169 %29 
                                                      OpStore %311 %310 
                                Private f32* %313 = OpAccessChain %9 %29 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpLoad %275 
                                         f32 %316 = OpFMul %314 %315 
                                         f32 %317 = OpLoad %268 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %312 %318 
                                         f32 %319 = OpLoad %245 
                                         f32 %320 = OpExtInst %1 4 %319 
                                         f32 %321 = OpLoad %312 
                                         f32 %322 = OpFMul %320 %321 
                                                      OpStore %312 %322 
                                         f32 %324 = OpLoad %245 
                                         f32 %325 = OpExtInst %1 4 %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %326 %66 
                                Private f32* %328 = OpAccessChain %323 %29 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %9 %29 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %169 %29 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                         f32 %334 = OpLoad %312 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %245 %335 
                                         f32 %336 = OpLoad %245 
                                         f32 %338 = OpFAdd %336 %337 
                                                      OpStore %245 %338 
                                         f32 %340 = OpLoad %245 
                                         f32 %341 = OpFDiv %339 %340 
                                                      OpStore %245 %341 
                                         f32 %342 = OpLoad %48 
                                         f32 %343 = OpLoad %245 
                                         f32 %344 = OpFMul %342 %343 
                                                      OpStore %245 %344 
                                         f32 %345 = OpLoad %245 
                                         f32 %347 = OpFMul %345 %346 
                                                      OpStore %245 %347 
                                         f32 %348 = OpLoad %245 
                                         f32 %350 = OpExtInst %1 40 %348 %349 
                                                      OpStore %245 %350 
                                         f32 %351 = OpLoad %245 
                                         f32 %352 = OpExtInst %1 31 %351 
                                                      OpStore %245 %352 
                                Private f32* %353 = OpAccessChain %9 %29 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpLoad %245 
                                         f32 %356 = OpFMul %354 %355 
                                                      OpStore %245 %356 
                                       f32_4 %358 = OpLoad %250 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %250 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                         f32 %362 = OpDot %359 %361 
                                Private f32* %363 = OpAccessChain %357 %29 
                                                      OpStore %363 %362 
                                Private f32* %367 = OpAccessChain %357 %29 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdNotEqual %368 %226 
                                                      OpStore %366 %369 
                                        bool %372 = OpLoad %366 
                                                      OpSelectionMerge %374 None 
                                                      OpBranchConditional %372 %373 %375 
                                             %373 = OpLabel 
                                                      OpStore %371 %66 
                                                      OpBranch %374 
                                             %375 = OpLabel 
                                                      OpStore %371 %226 
                                                      OpBranch %374 
                                             %374 = OpLabel 
                                         f32 %376 = OpLoad %371 
                                                      OpStore %48 %376 
                                         f32 %377 = OpLoad %48 
                                         f32 %378 = OpLoad %245 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %245 %379 
                                       f32_3 %380 = OpLoad %161 
                                         f32 %381 = OpLoad %245 
                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
                                       f32_3 %383 = OpFMul %380 %382 
                                                      OpStore %169 %383 
                                         f32 %384 = OpLoad %147 
                                         f32 %385 = OpFNegate %384 
                                         f32 %386 = OpFAdd %385 %66 
                                Private f32* %387 = OpAccessChain %357 %29 
                                                      OpStore %387 %386 
                                Private f32* %389 = OpAccessChain %357 %29 
                                         f32 %390 = OpLoad %389 
                                Private f32* %391 = OpAccessChain %357 %29 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFMul %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpLoad %388 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %388 %396 
                                Private f32* %397 = OpAccessChain %357 %29 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %388 
                                         f32 %400 = OpFMul %398 %399 
                                Private f32* %401 = OpAccessChain %357 %29 
                                                      OpStore %401 %400 
                                       f32_4 %403 = OpLoad %250 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFNegate %404 
                                       f32_3 %407 = OpFAdd %405 %406 
                                                      OpStore %402 %407 
                                       f32_3 %408 = OpLoad %402 
                                       f32_3 %409 = OpLoad %357 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 0 0 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %250 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %411 %413 
                                                      OpStore %357 %414 
                                       f32_3 %415 = OpLoad %169 
                                       f32_3 %416 = OpLoad %357 
                                       f32_3 %417 = OpFMul %415 %416 
                                                      OpStore %77 %417 
                                Private f32* %418 = OpAccessChain %323 %29 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %323 %29 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %357 %29 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %357 %29 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %357 %29 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFMul %425 %427 
                                Private f32* %429 = OpAccessChain %357 %29 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %323 %29 
                                         f32 %431 = OpLoad %430 
                                Private f32* %432 = OpAccessChain %357 %29 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFMul %431 %433 
                                Private f32* %435 = OpAccessChain %323 %29 
                                                      OpStore %435 %434 
                                         f32 %436 = OpLoad %147 
                                         f32 %437 = OpLoad %147 
                                         f32 %438 = OpFAdd %436 %437 
                                Private f32* %439 = OpAccessChain %357 %29 
                                                      OpStore %439 %438 
                                         f32 %440 = OpLoad %147 
                                Private f32* %441 = OpAccessChain %357 %29 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFMul %440 %442 
                                Private f32* %444 = OpAccessChain %357 %29 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %357 %29 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %263 
                                         f32 %448 = OpFMul %446 %447 
                                         f32 %450 = OpFAdd %448 %449 
                                Private f32* %451 = OpAccessChain %357 %29 
                                                      OpStore %451 %450 
                                Private f32* %452 = OpAccessChain %357 %29 
                                         f32 %453 = OpLoad %452 
                                Private f32* %454 = OpAccessChain %323 %29 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFMul %453 %455 
                                         f32 %457 = OpFAdd %456 %66 
                                Private f32* %458 = OpAccessChain %323 %29 
                                                      OpStore %458 %457 
                                Private f32* %459 = OpAccessChain %9 %29 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFNegate %460 
                                         f32 %462 = OpFAdd %461 %66 
                                                      OpStore %388 %462 
                                         f32 %464 = OpLoad %388 
                                         f32 %465 = OpLoad %388 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %463 %466 
                                         f32 %467 = OpLoad %463 
                                         f32 %468 = OpLoad %463 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %463 %469 
                                         f32 %470 = OpLoad %388 
                                         f32 %471 = OpLoad %463 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %388 %472 
                                Private f32* %473 = OpAccessChain %357 %29 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpLoad %388 
                                         f32 %476 = OpFMul %474 %475 
                                         f32 %477 = OpFAdd %476 %66 
                                Private f32* %478 = OpAccessChain %357 %29 
                                                      OpStore %478 %477 
                                Private f32* %479 = OpAccessChain %323 %29 
                                         f32 %480 = OpLoad %479 
                                Private f32* %481 = OpAccessChain %357 %29 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Private f32* %484 = OpAccessChain %323 %29 
                                                      OpStore %484 %483 
                                Private f32* %485 = OpAccessChain %9 %29 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %323 %29 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFMul %486 %488 
                                Private f32* %490 = OpAccessChain %9 %29 
                                                      OpStore %490 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 0 0 
                                       f32_3 %493 = OpLoad %161 
                                       f32_3 %494 = OpFMul %492 %493 
                                                      OpStore %323 %494 
                                       f32_4 %495 = OpLoad %255 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 3 
                                       f32_3 %497 = OpLoad %323 
                                       f32_3 %498 = OpFMul %496 %497 
                                       f32_3 %499 = OpLoad %77 
                                       f32_3 %500 = OpFAdd %498 %499 
                                       f32_4 %501 = OpLoad %9 
                                       f32_4 %502 = OpVectorShuffle %501 %500 4 5 6 3 
                                                      OpStore %9 %502 
                                       f32_4 %504 = OpLoad %9 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFNegate %505 
                                       f32_4 %507 = OpLoad %503 
                                       f32_4 %508 = OpVectorShuffle %507 %506 4 5 6 3 
                                                      OpStore %503 %508 
                                Private f32* %509 = OpAccessChain %503 %151 
                                                      OpStore %509 %209 
                                       f32_4 %512 = OpLoad %503 
                                       f32_4 %513 = OpExtInst %1 29 %512 
                                                      OpStore %511 %513 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat0.xyz) * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
    u_xlat18 = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1;
    u_xlat19 = u_xlat18 * u_xlat16_7 + (-u_xlat18);
    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat18 = u_xlat16_7 / u_xlat18;
    u_xlat0.x = dot(u_xlat16_3.xyz, (-u_xlat0.xyz));
    u_xlat6 = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat16_12 = (-u_xlat16_1) + 1.0;
    u_xlat7 = abs(u_xlat0.x) * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat6 * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = vec3(u_xlat12) * _LightColor.xyz;
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 502
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %498 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %208 DescriptorSet 208 
                                                      OpDecorate %208 Binding 208 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %10 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %80 = OpConstant 3 
                                              %81 = OpTypePointer Uniform %7 
                                          i32 %86 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                         i32 %138 = OpConstant 4 
                                         f32 %155 = OpConstant 3.674022E-40 
                              Private f32_3* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_3* %169 = OpVariable Private 
                                         f32 %171 = OpConstant 3.674022E-40 
                                       f32_3 %172 = OpConstantComposite %171 %171 %171 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                Private f32* %193 = OpVariable Private 
                              Private f32_4* %202 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %203 = OpVariable UniformConstant 
                              Private f32_4* %207 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %208 = OpVariable UniformConstant 
                                Private f32* %215 = OpVariable Private 
                                         u32 %216 = OpConstant 3 
                                Private f32* %221 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %228 = OpVariable Private 
                                Private f32* %232 = OpVariable Private 
                                         f32 %246 = OpConstant 3.674022E-40 
                                         f32 %249 = OpConstant 3.674022E-40 
                                Private f32* %260 = OpVariable Private 
                                Private f32* %269 = OpVariable Private 
                                Private f32* %273 = OpVariable Private 
                                Private f32* %281 = OpVariable Private 
                              Private f32_3* %292 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %310 = OpConstant 3.674022E-40 
                                         f32 %322 = OpConstant 3.674022E-40 
                                         f32 %327 = OpConstant 3.674022E-40 
                              Private f32_3* %339 = OpVariable Private 
                                             %346 = OpTypeBool 
                                             %347 = OpTypePointer Private %346 
                               Private bool* %348 = OpVariable Private 
                                             %352 = OpTypePointer Function %6 
                                         i32 %366 = OpConstant 5 
                                Private f32* %377 = OpVariable Private 
                              Private f32_3* %391 = OpVariable Private 
                                       f32_3 %395 = OpConstantComposite %66 %66 %66 
                                         f32 %423 = OpConstant 3.674022E-40 
                                Private f32* %449 = OpVariable Private 
                              Private f32_4* %490 = OpVariable Private 
                                             %497 = OpTypePointer Output %7 
                               Output f32_4* %498 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %353 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %69 = OpLoad %48 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %9 %75 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %16 %80 %18 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %79 %84 
                                                      OpStore %77 %85 
                               Uniform f32_4* %87 = OpAccessChain %16 %80 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %77 
                                        f32_3 %94 = OpFAdd %92 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 2 6 
                                                      OpStore %9 %96 
                               Uniform f32_4* %97 = OpAccessChain %16 %80 %57 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 2 2 2 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 3 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %9 %107 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                              Uniform f32_4* %110 = OpAccessChain %16 %80 %80 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_3* %119 = OpAccessChain %16 %86 
                                       f32_3 %120 = OpLoad %119 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %117 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %48 %129 
                                         f32 %130 = OpLoad %48 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %48 %131 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFNegate %133 
                                         f32 %135 = OpLoad %48 
                                       f32_3 %136 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %137 = OpFMul %134 %136 
                              Uniform f32_4* %139 = OpAccessChain %16 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFNegate %141 
                                       f32_3 %143 = OpFAdd %137 %142 
                                                      OpStore %77 %143 
                                         f32 %144 = OpLoad %48 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_3 %151 = OpLoad %77 
                                       f32_3 %152 = OpLoad %77 
                                         f32 %153 = OpDot %151 %152 
                                                      OpStore %48 %153 
                                         f32 %154 = OpLoad %48 
                                         f32 %156 = OpExtInst %1 40 %154 %155 
                                                      OpStore %48 %156 
                                         f32 %157 = OpLoad %48 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %48 %158 
                                         f32 %159 = OpLoad %48 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_3 %161 = OpLoad %77 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %77 %162 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_2 %166 = OpLoad %40 
                                       f32_4 %167 = OpImageSampleImplicitLod %165 %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                                      OpStore %163 %168 
                                       f32_3 %170 = OpLoad %163 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %169 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpLoad %169 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %177 %180 
                                         f32 %181 = OpLoad %177 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %177 %182 
                                         f32 %183 = OpLoad %177 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %169 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %169 %186 
                                       f32_3 %187 = OpLoad %169 
                                       f32_3 %188 = OpLoad %77 
                                         f32 %189 = OpDot %187 %188 
                                                      OpStore %48 %189 
                                         f32 %190 = OpLoad %48 
                                         f32 %192 = OpExtInst %1 43 %190 %191 %66 
                                                      OpStore %48 %192 
                              Uniform f32_4* %194 = OpAccessChain %16 %138 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpLoad %77 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %193 %199 
                                         f32 %200 = OpLoad %193 
                                         f32 %201 = OpExtInst %1 43 %200 %191 %66 
                                                      OpStore %193 %201 
                  read_only Texture2DSampled %204 = OpLoad %203 
                                       f32_2 %205 = OpLoad %40 
                                       f32_4 %206 = OpImageSampleImplicitLod %204 %205 
                                                      OpStore %202 %206 
                  read_only Texture2DSampled %209 = OpLoad %208 
                                       f32_2 %210 = OpLoad %40 
                                       f32_4 %211 = OpImageSampleImplicitLod %209 %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_4 %213 = OpLoad %207 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 2 6 
                                                      OpStore %207 %214 
                                Private f32* %217 = OpAccessChain %202 %216 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %219 %66 
                                                      OpStore %215 %220 
                                         f32 %222 = OpLoad %215 
                                         f32 %223 = OpLoad %215 
                                         f32 %224 = OpFMul %222 %223 
                                                      OpStore %221 %224 
                                         f32 %225 = OpLoad %221 
                                         f32 %227 = OpExtInst %1 40 %225 %226 
                                                      OpStore %221 %227 
                                         f32 %229 = OpLoad %221 
                                         f32 %230 = OpLoad %221 
                                         f32 %231 = OpFMul %229 %230 
                                                      OpStore %228 %231 
                                         f32 %233 = OpLoad %48 
                                         f32 %234 = OpLoad %228 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpLoad %48 
                                         f32 %237 = OpFNegate %236 
                                         f32 %238 = OpFAdd %235 %237 
                                                      OpStore %232 %238 
                                         f32 %239 = OpLoad %232 
                                         f32 %240 = OpLoad %48 
                                         f32 %241 = OpFMul %239 %240 
                                         f32 %242 = OpFAdd %241 %66 
                                                      OpStore %48 %242 
                                         f32 %243 = OpLoad %48 
                                         f32 %244 = OpLoad %48 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %48 %247 
                                         f32 %248 = OpLoad %228 
                                         f32 %250 = OpFMul %248 %249 
                                                      OpStore %228 %250 
                                         f32 %251 = OpLoad %228 
                                         f32 %252 = OpLoad %48 
                                         f32 %253 = OpFDiv %251 %252 
                                                      OpStore %48 %253 
                                       f32_3 %254 = OpLoad %169 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFNegate %256 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %9 %29 
                                                      OpStore %259 %258 
                                       f32_3 %261 = OpLoad %169 
                              Uniform f32_4* %262 = OpAccessChain %16 %138 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                         f32 %266 = OpDot %261 %265 
                                                      OpStore %260 %266 
                                         f32 %267 = OpLoad %260 
                                         f32 %268 = OpExtInst %1 43 %267 %191 %66 
                                                      OpStore %260 %268 
                                         f32 %270 = OpLoad %221 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %66 
                                                      OpStore %269 %272 
                                Private f32* %274 = OpAccessChain %9 %29 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpExtInst %1 4 %275 
                                         f32 %277 = OpLoad %269 
                                         f32 %278 = OpFMul %276 %277 
                                         f32 %279 = OpLoad %221 
                                         f32 %280 = OpFAdd %278 %279 
                                                      OpStore %273 %280 
                                         f32 %282 = OpLoad %260 
                                         f32 %283 = OpLoad %269 
                                         f32 %284 = OpFMul %282 %283 
                                         f32 %285 = OpLoad %221 
                                         f32 %286 = OpFAdd %284 %285 
                                                      OpStore %281 %286 
                                         f32 %287 = OpLoad %281 
                                Private f32* %288 = OpAccessChain %9 %29 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 4 %289 
                                         f32 %291 = OpFMul %287 %290 
                                                      OpStore %281 %291 
                                Private f32* %293 = OpAccessChain %9 %29 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpExtInst %1 4 %294 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %66 
                                Private f32* %298 = OpAccessChain %292 %29 
                                                      OpStore %298 %297 
                                         f32 %299 = OpLoad %260 
                                         f32 %300 = OpLoad %273 
                                         f32 %301 = OpFMul %299 %300 
                                         f32 %302 = OpLoad %281 
                                         f32 %303 = OpFAdd %301 %302 
                                Private f32* %304 = OpAccessChain %9 %29 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %9 %29 
                                         f32 %306 = OpLoad %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %29 
                                                      OpStore %309 %308 
                                Private f32* %311 = OpAccessChain %9 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFDiv %310 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %48 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                Private f32* %319 = OpAccessChain %9 %29 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %29 
                                         f32 %321 = OpLoad %320 
                                         f32 %323 = OpFMul %321 %322 
                                Private f32* %324 = OpAccessChain %9 %29 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %9 %29 
                                         f32 %326 = OpLoad %325 
                                         f32 %328 = OpExtInst %1 40 %326 %327 
                                Private f32* %329 = OpAccessChain %9 %29 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %9 %29 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpExtInst %1 31 %331 
                                Private f32* %333 = OpAccessChain %9 %29 
                                                      OpStore %333 %332 
                                         f32 %334 = OpLoad %260 
                                Private f32* %335 = OpAccessChain %9 %29 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %9 %29 
                                                      OpStore %338 %337 
                                       f32_4 %340 = OpLoad %202 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_4 %342 = OpLoad %202 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpDot %341 %343 
                                Private f32* %345 = OpAccessChain %339 %29 
                                                      OpStore %345 %344 
                                Private f32* %349 = OpAccessChain %339 %29 
                                         f32 %350 = OpLoad %349 
                                        bool %351 = OpFOrdNotEqual %350 %191 
                                                      OpStore %348 %351 
                                        bool %354 = OpLoad %348 
                                                      OpSelectionMerge %356 None 
                                                      OpBranchConditional %354 %355 %357 
                                             %355 = OpLabel 
                                                      OpStore %353 %66 
                                                      OpBranch %356 
                                             %357 = OpLabel 
                                                      OpStore %353 %191 
                                                      OpBranch %356 
                                             %356 = OpLabel 
                                         f32 %358 = OpLoad %353 
                                                      OpStore %281 %358 
                                         f32 %359 = OpLoad %281 
                                Private f32* %360 = OpAccessChain %9 %29 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                Private f32* %363 = OpAccessChain %9 %29 
                                                      OpStore %363 %362 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                              Uniform f32_4* %367 = OpAccessChain %16 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 5 6 
                                                      OpStore %9 %372 
                                         f32 %373 = OpLoad %193 
                                         f32 %374 = OpFNegate %373 
                                         f32 %375 = OpFAdd %374 %66 
                                Private f32* %376 = OpAccessChain %339 %29 
                                                      OpStore %376 %375 
                                Private f32* %378 = OpAccessChain %339 %29 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %339 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                                      OpStore %377 %382 
                                         f32 %383 = OpLoad %377 
                                         f32 %384 = OpLoad %377 
                                         f32 %385 = OpFMul %383 %384 
                                                      OpStore %377 %385 
                                Private f32* %386 = OpAccessChain %339 %29 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpLoad %377 
                                         f32 %389 = OpFMul %387 %388 
                                Private f32* %390 = OpAccessChain %339 %29 
                                                      OpStore %390 %389 
                                       f32_4 %392 = OpLoad %202 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFNegate %393 
                                       f32_3 %396 = OpFAdd %394 %395 
                                                      OpStore %391 %396 
                                       f32_3 %397 = OpLoad %391 
                                       f32_3 %398 = OpLoad %339 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 0 0 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %202 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                                      OpStore %339 %403 
                                       f32_4 %404 = OpLoad %9 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 2 3 
                                       f32_3 %406 = OpLoad %339 
                                       f32_3 %407 = OpFMul %405 %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 1 5 6 
                                                      OpStore %9 %409 
                                         f32 %410 = OpLoad %193 
                                         f32 %411 = OpLoad %193 
                                         f32 %412 = OpFAdd %410 %411 
                                Private f32* %413 = OpAccessChain %339 %29 
                                                      OpStore %413 %412 
                                         f32 %414 = OpLoad %193 
                                Private f32* %415 = OpAccessChain %339 %29 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %339 %29 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %339 %29 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpLoad %215 
                                         f32 %422 = OpFMul %420 %421 
                                         f32 %424 = OpFAdd %422 %423 
                                Private f32* %425 = OpAccessChain %339 %29 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %292 %29 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %292 %29 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %377 %430 
                                         f32 %431 = OpLoad %377 
                                         f32 %432 = OpLoad %377 
                                         f32 %433 = OpFMul %431 %432 
                                                      OpStore %377 %433 
                                Private f32* %434 = OpAccessChain %292 %29 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %377 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %292 %29 
                                                      OpStore %438 %437 
                                Private f32* %439 = OpAccessChain %339 %29 
                                         f32 %440 = OpLoad %439 
                                Private f32* %441 = OpAccessChain %292 %29 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFMul %440 %442 
                                         f32 %444 = OpFAdd %443 %66 
                                Private f32* %445 = OpAccessChain %292 %29 
                                                      OpStore %445 %444 
                                         f32 %446 = OpLoad %260 
                                         f32 %447 = OpFNegate %446 
                                         f32 %448 = OpFAdd %447 %66 
                                                      OpStore %377 %448 
                                         f32 %450 = OpLoad %377 
                                         f32 %451 = OpLoad %377 
                                         f32 %452 = OpFMul %450 %451 
                                                      OpStore %449 %452 
                                         f32 %453 = OpLoad %449 
                                         f32 %454 = OpLoad %449 
                                         f32 %455 = OpFMul %453 %454 
                                                      OpStore %449 %455 
                                         f32 %456 = OpLoad %377 
                                         f32 %457 = OpLoad %449 
                                         f32 %458 = OpFMul %456 %457 
                                                      OpStore %377 %458 
                                Private f32* %459 = OpAccessChain %339 %29 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpLoad %377 
                                         f32 %462 = OpFMul %460 %461 
                                         f32 %463 = OpFAdd %462 %66 
                                Private f32* %464 = OpAccessChain %339 %29 
                                                      OpStore %464 %463 
                                Private f32* %465 = OpAccessChain %292 %29 
                                         f32 %466 = OpLoad %465 
                                Private f32* %467 = OpAccessChain %339 %29 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                Private f32* %470 = OpAccessChain %292 %29 
                                                      OpStore %470 %469 
                                         f32 %471 = OpLoad %260 
                                Private f32* %472 = OpAccessChain %292 %29 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                                      OpStore %260 %474 
                                         f32 %475 = OpLoad %260 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                              Uniform f32_4* %477 = OpAccessChain %16 %366 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFMul %476 %479 
                                                      OpStore %292 %480 
                                       f32_4 %481 = OpLoad %207 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 3 
                                       f32_3 %483 = OpLoad %292 
                                       f32_3 %484 = OpFMul %482 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 2 3 
                                       f32_3 %487 = OpFAdd %484 %486 
                                       f32_4 %488 = OpLoad %9 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 6 3 
                                                      OpStore %9 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                       f32_3 %493 = OpFNegate %492 
                                       f32_4 %494 = OpLoad %490 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %490 %495 
                                Private f32* %496 = OpAccessChain %490 %216 
                                                      OpStore %496 %174 
                                       f32_4 %499 = OpLoad %490 
                                       f32_4 %500 = OpExtInst %1 29 %499 
                                                      OpStore %498 %500 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz;
    u_xlat21 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat9 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
    u_xlatb14 = u_xlat0.z<0.0;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.x = u_xlat14 * u_xlat10_2.w;
    u_xlat0.x = u_xlat10_4.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 566
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %562 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %562 Location 562 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %137 = OpConstant 4 
                                Private f32* %145 = OpVariable Private 
                                         u32 %149 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %153 = OpVariable UniformConstant 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %175 = OpConstant 3.674022E-40 
                              Private f32_3* %183 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
                              Private f32_3* %189 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                       f32_3 %192 = OpConstantComposite %191 %191 %191 
                                         f32 %194 = OpConstant 3.674022E-40 
                                       f32_3 %195 = OpConstantComposite %194 %194 %194 
                                Private f32* %197 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
                                Private f32* %219 = OpVariable Private 
                              Private f32_4* %230 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %231 = OpVariable UniformConstant 
                              Private f32_3* %235 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %236 = OpVariable UniformConstant 
                                Private f32* %241 = OpVariable Private 
                                Private f32* %246 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                                Private f32* %253 = OpVariable Private 
                                Private f32* %257 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                Private f32* %289 = OpVariable Private 
                              Private f32_3* %300 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                         f32 %322 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                              Private f32_3* %332 = OpVariable Private 
                                             %339 = OpTypeBool 
                                             %340 = OpTypePointer Private %339 
                               Private bool* %341 = OpVariable Private 
                                             %345 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 6 
                               Private bool* %395 = OpVariable Private 
                                Private f32* %399 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %406 = OpVariable UniformConstant 
                                         f32 %410 = OpConstant 3.674022E-40 
                                         i32 %426 = OpConstant 5 
                                Private f32* %442 = OpVariable Private 
                              Private f32_3* %456 = OpVariable Private 
                                       f32_3 %460 = OpConstantComposite %67 %67 %67 
                                         f32 %503 = OpConstant 3.674022E-40 
                                Private f32* %516 = OpVariable Private 
                              Private f32_4* %554 = OpVariable Private 
                                             %561 = OpTypePointer Output %7 
                               Output f32_4* %562 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %346 = OpVariable Function 
                               Function f32* %400 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                         f32 %129 = OpLoad %49 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpLoad %78 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %78 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_4* %138 = OpAccessChain %17 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFAdd %136 %140 
                                                      OpStore %133 %141 
                                       f32_3 %142 = OpLoad %133 
                                       f32_3 %143 = OpLoad %133 
                                         f32 %144 = OpDot %142 %143 
                                                      OpStore %49 %144 
                                         f32 %146 = OpLoad %49 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %145 %147 
                                         f32 %148 = OpLoad %49 
                                Uniform f32* %150 = OpAccessChain %17 %137 %149 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %148 %151 
                                                      OpStore %49 %152 
                  read_only Texture2DSampled %154 = OpLoad %153 
                                         f32 %155 = OpLoad %49 
                                       f32_2 %156 = OpCompositeConstruct %155 %155 
                                       f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                         f32 %158 = OpCompositeExtract %157 3 
                                                      OpStore %49 %158 
                                       f32_3 %160 = OpLoad %133 
                                         f32 %161 = OpLoad %145 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_3 %164 = OpLoad %78 
                                       f32_3 %165 = OpFNegate %164 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %159 %166 
                                         f32 %167 = OpLoad %145 
                                       f32_3 %168 = OpCompositeConstruct %167 %167 %167 
                                       f32_3 %169 = OpLoad %133 
                                       f32_3 %170 = OpFMul %168 %169 
                                                      OpStore %133 %170 
                                       f32_3 %171 = OpLoad %159 
                                       f32_3 %172 = OpLoad %159 
                                         f32 %173 = OpDot %171 %172 
                                                      OpStore %145 %173 
                                         f32 %174 = OpLoad %145 
                                         f32 %176 = OpExtInst %1 40 %174 %175 
                                                      OpStore %145 %176 
                                         f32 %177 = OpLoad %145 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %145 %178 
                                         f32 %179 = OpLoad %145 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpLoad %159 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %159 %182 
                  read_only Texture2DSampled %185 = OpLoad %184 
                                       f32_2 %186 = OpLoad %41 
                                       f32_4 %187 = OpImageSampleImplicitLod %185 %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                                      OpStore %183 %188 
                                       f32_3 %190 = OpLoad %183 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %196 = OpFAdd %193 %195 
                                                      OpStore %189 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpLoad %189 
                                         f32 %200 = OpDot %198 %199 
                                                      OpStore %197 %200 
                                         f32 %201 = OpLoad %197 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %197 %202 
                                         f32 %203 = OpLoad %197 
                                       f32_3 %204 = OpCompositeConstruct %203 %203 %203 
                                       f32_3 %205 = OpLoad %189 
                                       f32_3 %206 = OpFMul %204 %205 
                                                      OpStore %189 %206 
                                       f32_3 %207 = OpLoad %189 
                                       f32_3 %208 = OpLoad %159 
                                         f32 %209 = OpDot %207 %208 
                                                      OpStore %145 %209 
                                         f32 %210 = OpLoad %145 
                                         f32 %212 = OpExtInst %1 43 %210 %211 %67 
                                                      OpStore %145 %212 
                                       f32_3 %214 = OpLoad %133 
                                       f32_3 %215 = OpLoad %159 
                                         f32 %216 = OpDot %214 %215 
                                                      OpStore %213 %216 
                                         f32 %217 = OpLoad %213 
                                         f32 %218 = OpExtInst %1 43 %217 %211 %67 
                                                      OpStore %213 %218 
                                       f32_3 %220 = OpLoad %189 
                                       f32_3 %221 = OpLoad %133 
                                         f32 %222 = OpDot %220 %221 
                                                      OpStore %219 %222 
                                         f32 %223 = OpLoad %219 
                                         f32 %224 = OpExtInst %1 43 %223 %211 %67 
                                                      OpStore %219 %224 
                                       f32_3 %225 = OpLoad %189 
                                       f32_3 %226 = OpLoad %78 
                                       f32_3 %227 = OpFNegate %226 
                                         f32 %228 = OpDot %225 %227 
                                Private f32* %229 = OpAccessChain %78 %30 
                                                      OpStore %229 %228 
                  read_only Texture2DSampled %232 = OpLoad %231 
                                       f32_2 %233 = OpLoad %41 
                                       f32_4 %234 = OpImageSampleImplicitLod %232 %233 
                                                      OpStore %230 %234 
                  read_only Texture2DSampled %237 = OpLoad %236 
                                       f32_2 %238 = OpLoad %41 
                                       f32_4 %239 = OpImageSampleImplicitLod %237 %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                                      OpStore %235 %240 
                                Private f32* %242 = OpAccessChain %230 %149 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %244 %67 
                                                      OpStore %241 %245 
                                         f32 %247 = OpLoad %241 
                                         f32 %248 = OpLoad %241 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %246 %249 
                                         f32 %250 = OpLoad %246 
                                         f32 %252 = OpExtInst %1 40 %250 %251 
                                                      OpStore %246 %252 
                                         f32 %254 = OpLoad %246 
                                         f32 %255 = OpLoad %246 
                                         f32 %256 = OpFMul %254 %255 
                                                      OpStore %253 %256 
                                         f32 %258 = OpLoad %145 
                                         f32 %259 = OpLoad %253 
                                         f32 %260 = OpFMul %258 %259 
                                         f32 %261 = OpLoad %145 
                                         f32 %262 = OpFNegate %261 
                                         f32 %263 = OpFAdd %260 %262 
                                                      OpStore %257 %263 
                                         f32 %264 = OpLoad %257 
                                         f32 %265 = OpLoad %145 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %67 
                                                      OpStore %145 %267 
                                         f32 %268 = OpLoad %145 
                                         f32 %269 = OpLoad %145 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %145 %272 
                                         f32 %273 = OpLoad %253 
                                         f32 %275 = OpFMul %273 %274 
                                                      OpStore %253 %275 
                                         f32 %276 = OpLoad %253 
                                         f32 %277 = OpLoad %145 
                                         f32 %278 = OpFDiv %276 %277 
                                                      OpStore %145 %278 
                                         f32 %279 = OpLoad %246 
                                         f32 %280 = OpFNegate %279 
                                         f32 %281 = OpFAdd %280 %67 
                                                      OpStore %253 %281 
                                Private f32* %282 = OpAccessChain %78 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 4 %283 
                                         f32 %285 = OpLoad %253 
                                         f32 %286 = OpFMul %284 %285 
                                         f32 %287 = OpLoad %246 
                                         f32 %288 = OpFAdd %286 %287 
                                                      OpStore %257 %288 
                                         f32 %290 = OpLoad %219 
                                         f32 %291 = OpLoad %253 
                                         f32 %292 = OpFMul %290 %291 
                                         f32 %293 = OpLoad %246 
                                         f32 %294 = OpFAdd %292 %293 
                                                      OpStore %289 %294 
                                         f32 %295 = OpLoad %289 
                                Private f32* %296 = OpAccessChain %78 %30 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 4 %297 
                                         f32 %299 = OpFMul %295 %298 
                                                      OpStore %289 %299 
                                Private f32* %301 = OpAccessChain %78 %30 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFAdd %304 %67 
                                Private f32* %306 = OpAccessChain %300 %30 
                                                      OpStore %306 %305 
                                         f32 %307 = OpLoad %219 
                                         f32 %308 = OpLoad %257 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpLoad %289 
                                         f32 %311 = OpFAdd %309 %310 
                                                      OpStore %289 %311 
                                         f32 %312 = OpLoad %289 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %289 %314 
                                         f32 %316 = OpLoad %289 
                                         f32 %317 = OpFDiv %315 %316 
                                                      OpStore %289 %317 
                                         f32 %318 = OpLoad %145 
                                         f32 %319 = OpLoad %289 
                                         f32 %320 = OpFMul %318 %319 
                                                      OpStore %289 %320 
                                         f32 %321 = OpLoad %289 
                                         f32 %323 = OpFMul %321 %322 
                                                      OpStore %289 %323 
                                         f32 %324 = OpLoad %289 
                                         f32 %326 = OpExtInst %1 40 %324 %325 
                                                      OpStore %289 %326 
                                         f32 %327 = OpLoad %289 
                                         f32 %328 = OpExtInst %1 31 %327 
                                                      OpStore %289 %328 
                                         f32 %329 = OpLoad %219 
                                         f32 %330 = OpLoad %289 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %289 %331 
                                       f32_4 %333 = OpLoad %230 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %230 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                         f32 %337 = OpDot %334 %336 
                                Private f32* %338 = OpAccessChain %332 %30 
                                                      OpStore %338 %337 
                                Private f32* %342 = OpAccessChain %332 %30 
                                         f32 %343 = OpLoad %342 
                                        bool %344 = OpFOrdNotEqual %343 %211 
                                                      OpStore %341 %344 
                                        bool %347 = OpLoad %341 
                                                      OpSelectionMerge %349 None 
                                                      OpBranchConditional %347 %348 %350 
                                             %348 = OpLabel 
                                                      OpStore %346 %67 
                                                      OpBranch %349 
                                             %350 = OpLabel 
                                                      OpStore %346 %211 
                                                      OpBranch %349 
                                             %349 = OpLabel 
                                         f32 %351 = OpLoad %346 
                                                      OpStore %145 %351 
                                         f32 %352 = OpLoad %145 
                                         f32 %353 = OpLoad %289 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %289 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 1 1 1 
                              Uniform f32_4* %358 = OpAccessChain %17 %357 %19 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 3 
                                       f32_3 %361 = OpFMul %356 %360 
                                                      OpStore %78 %361 
                              Uniform f32_4* %362 = OpAccessChain %17 %357 %87 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_3 %368 = OpLoad %78 
                                       f32_3 %369 = OpFAdd %367 %368 
                                                      OpStore %78 %369 
                              Uniform f32_4* %370 = OpAccessChain %17 %357 %58 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 3 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 2 2 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %78 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %9 %379 
                                       f32_4 %380 = OpLoad %9 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                              Uniform f32_4* %382 = OpAccessChain %17 %357 %81 
                                       f32_4 %383 = OpLoad %382 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 3 
                                       f32_3 %385 = OpFAdd %381 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_4 %388 = OpLoad %9 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_4 %390 = OpLoad %9 
                                       f32_2 %391 = OpVectorShuffle %390 %390 2 2 
                                       f32_2 %392 = OpFDiv %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 2 3 
                                                      OpStore %9 %394 
                                Private f32* %396 = OpAccessChain %9 %20 
                                         f32 %397 = OpLoad %396 
                                        bool %398 = OpFOrdLessThan %397 %211 
                                                      OpStore %395 %398 
                                        bool %401 = OpLoad %395 
                                                      OpSelectionMerge %403 None 
                                                      OpBranchConditional %401 %402 %404 
                                             %402 = OpLabel 
                                                      OpStore %400 %67 
                                                      OpBranch %403 
                                             %404 = OpLabel 
                                                      OpStore %400 %211 
                                                      OpBranch %403 
                                             %403 = OpLabel 
                                         f32 %405 = OpLoad %400 
                                                      OpStore %399 %405 
                  read_only Texture2DSampled %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 1 
                                       f32_4 %411 = OpImageSampleImplicitLod %407 %409 Bias %7 
                                         f32 %412 = OpCompositeExtract %411 3 
                                Private f32* %413 = OpAccessChain %9 %30 
                                                      OpStore %413 %412 
                                         f32 %414 = OpLoad %399 
                                Private f32* %415 = OpAccessChain %9 %30 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %9 %30 
                                                      OpStore %418 %417 
                                         f32 %419 = OpLoad %49 
                                Private f32* %420 = OpAccessChain %9 %30 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %9 %30 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 0 0 
                              Uniform f32_4* %427 = OpAccessChain %17 %426 
                                       f32_4 %428 = OpLoad %427 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFMul %425 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %9 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                         f32 %435 = OpLoad %289 
                                       f32_3 %436 = OpCompositeConstruct %435 %435 %435 
                                       f32_3 %437 = OpFMul %434 %436 
                                                      OpStore %78 %437 
                                         f32 %438 = OpLoad %213 
                                         f32 %439 = OpFNegate %438 
                                         f32 %440 = OpFAdd %439 %67 
                                Private f32* %441 = OpAccessChain %332 %30 
                                                      OpStore %441 %440 
                                Private f32* %443 = OpAccessChain %332 %30 
                                         f32 %444 = OpLoad %443 
                                Private f32* %445 = OpAccessChain %332 %30 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %444 %446 
                                                      OpStore %442 %447 
                                         f32 %448 = OpLoad %442 
                                         f32 %449 = OpLoad %442 
                                         f32 %450 = OpFMul %448 %449 
                                                      OpStore %442 %450 
                                Private f32* %451 = OpAccessChain %332 %30 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpLoad %442 
                                         f32 %454 = OpFMul %452 %453 
                                Private f32* %455 = OpAccessChain %332 %30 
                                                      OpStore %455 %454 
                                       f32_4 %457 = OpLoad %230 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFNegate %458 
                                       f32_3 %461 = OpFAdd %459 %460 
                                                      OpStore %456 %461 
                                       f32_3 %462 = OpLoad %456 
                                       f32_3 %463 = OpLoad %332 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 0 0 
                                       f32_3 %465 = OpFMul %462 %464 
                                       f32_4 %466 = OpLoad %230 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %465 %467 
                                                      OpStore %332 %468 
                                       f32_3 %469 = OpLoad %78 
                                       f32_3 %470 = OpLoad %332 
                                       f32_3 %471 = OpFMul %469 %470 
                                                      OpStore %78 %471 
                                Private f32* %472 = OpAccessChain %300 %30 
                                         f32 %473 = OpLoad %472 
                                Private f32* %474 = OpAccessChain %300 %30 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpFMul %473 %475 
                                Private f32* %477 = OpAccessChain %332 %30 
                                                      OpStore %477 %476 
                                Private f32* %478 = OpAccessChain %332 %30 
                                         f32 %479 = OpLoad %478 
                                Private f32* %480 = OpAccessChain %332 %30 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpFMul %479 %481 
                                Private f32* %483 = OpAccessChain %332 %30 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %300 %30 
                                         f32 %485 = OpLoad %484 
                                Private f32* %486 = OpAccessChain %332 %30 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFMul %485 %487 
                                Private f32* %489 = OpAccessChain %300 %30 
                                                      OpStore %489 %488 
                                         f32 %490 = OpLoad %213 
                                         f32 %491 = OpLoad %213 
                                         f32 %492 = OpFAdd %490 %491 
                                Private f32* %493 = OpAccessChain %332 %30 
                                                      OpStore %493 %492 
                                         f32 %494 = OpLoad %213 
                                Private f32* %495 = OpAccessChain %332 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Private f32* %498 = OpAccessChain %332 %30 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %332 %30 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpLoad %241 
                                         f32 %502 = OpFMul %500 %501 
                                         f32 %504 = OpFAdd %502 %503 
                                Private f32* %505 = OpAccessChain %332 %30 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %332 %30 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %300 %30 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFMul %507 %509 
                                         f32 %511 = OpFAdd %510 %67 
                                Private f32* %512 = OpAccessChain %300 %30 
                                                      OpStore %512 %511 
                                         f32 %513 = OpLoad %219 
                                         f32 %514 = OpFNegate %513 
                                         f32 %515 = OpFAdd %514 %67 
                                                      OpStore %442 %515 
                                         f32 %517 = OpLoad %442 
                                         f32 %518 = OpLoad %442 
                                         f32 %519 = OpFMul %517 %518 
                                                      OpStore %516 %519 
                                         f32 %520 = OpLoad %516 
                                         f32 %521 = OpLoad %516 
                                         f32 %522 = OpFMul %520 %521 
                                                      OpStore %516 %522 
                                         f32 %523 = OpLoad %442 
                                         f32 %524 = OpLoad %516 
                                         f32 %525 = OpFMul %523 %524 
                                                      OpStore %442 %525 
                                Private f32* %526 = OpAccessChain %332 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpLoad %442 
                                         f32 %529 = OpFMul %527 %528 
                                         f32 %530 = OpFAdd %529 %67 
                                Private f32* %531 = OpAccessChain %332 %30 
                                                      OpStore %531 %530 
                                Private f32* %532 = OpAccessChain %300 %30 
                                         f32 %533 = OpLoad %532 
                                Private f32* %534 = OpAccessChain %332 %30 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFMul %533 %535 
                                Private f32* %537 = OpAccessChain %300 %30 
                                                      OpStore %537 %536 
                                         f32 %538 = OpLoad %219 
                                Private f32* %539 = OpAccessChain %300 %30 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                                      OpStore %49 %541 
                                         f32 %542 = OpLoad %49 
                                       f32_3 %543 = OpCompositeConstruct %542 %542 %542 
                                       f32_4 %544 = OpLoad %9 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %543 %545 
                                                      OpStore %300 %546 
                                       f32_3 %547 = OpLoad %235 
                                       f32_3 %548 = OpLoad %300 
                                       f32_3 %549 = OpFMul %547 %548 
                                       f32_3 %550 = OpLoad %78 
                                       f32_3 %551 = OpFAdd %549 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %9 %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_3 %557 = OpFNegate %556 
                                       f32_4 %558 = OpLoad %554 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
                                                      OpStore %554 %559 
                                Private f32* %560 = OpAccessChain %554 %149 
                                                      OpStore %560 %194 
                                       f32_4 %563 = OpLoad %554 
                                       f32_4 %564 = OpExtInst %1 29 %563 
                                                      OpStore %562 %564 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat4.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz;
    u_xlat21 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_5.xyz, (-u_xlat3.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat9 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xyz, -8.0);
    u_xlat16_0 = u_xlat10_2.w * u_xlat10_4.w;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 549
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %545 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %394 DescriptorSet 394 
                                                      OpDecorate %394 Binding 394 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %545 Location 545 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 4 
                                Private f32* %145 = OpVariable Private 
                                         u32 %149 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %153 = OpVariable UniformConstant 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                              Private f32_3* %184 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %190 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_3 %193 = OpConstantComposite %192 %192 %192 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_3 %196 = OpConstantComposite %195 %195 %195 
                                Private f32* %198 = OpVariable Private 
                                         f32 %212 = OpConstant 3.674022E-40 
                                Private f32* %214 = OpVariable Private 
                                Private f32* %221 = OpVariable Private 
                              Private f32_4* %233 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %234 = OpVariable UniformConstant 
                              Private f32_3* %238 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %239 = OpVariable UniformConstant 
                                Private f32* %244 = OpVariable Private 
                                Private f32* %249 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                Private f32* %256 = OpVariable Private 
                                Private f32* %260 = OpVariable Private 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %277 = OpConstant 3.674022E-40 
                                Private f32* %292 = OpVariable Private 
                              Private f32_3* %303 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %328 = OpConstant 3.674022E-40 
                              Private f32_3* %335 = OpVariable Private 
                                             %342 = OpTypeBool 
                                             %343 = OpTypePointer Private %342 
                               Private bool* %344 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %360 = OpConstant 6 
                                             %391 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                             %393 = OpTypePointer UniformConstant %392 
UniformConstant read_only TextureCubeSampled* %394 = OpVariable UniformConstant 
                                         f32 %398 = OpConstant 3.674022E-40 
                                         i32 %409 = OpConstant 5 
                                Private f32* %425 = OpVariable Private 
                              Private f32_3* %439 = OpVariable Private 
                                       f32_3 %443 = OpConstantComposite %67 %67 %67 
                                         f32 %486 = OpConstant 3.674022E-40 
                                Private f32* %499 = OpVariable Private 
                              Private f32_4* %537 = OpVariable Private 
                                             %544 = OpTypePointer Output %7 
                               Output f32_4* %545 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                         f32 %129 = OpLoad %49 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpLoad %78 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %78 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %17 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                                      OpStore %133 %141 
                                       f32_3 %142 = OpLoad %133 
                                       f32_3 %143 = OpLoad %133 
                                         f32 %144 = OpDot %142 %143 
                                                      OpStore %49 %144 
                                         f32 %146 = OpLoad %49 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %145 %147 
                                         f32 %148 = OpLoad %49 
                                Uniform f32* %150 = OpAccessChain %17 %136 %149 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %148 %151 
                                                      OpStore %49 %152 
                  read_only Texture2DSampled %154 = OpLoad %153 
                                         f32 %155 = OpLoad %49 
                                       f32_2 %156 = OpCompositeConstruct %155 %155 
                                       f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                         f32 %158 = OpCompositeExtract %157 3 
                                                      OpStore %49 %158 
                                       f32_3 %160 = OpLoad %133 
                                       f32_3 %161 = OpFNegate %160 
                                         f32 %162 = OpLoad %145 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                                       f32_3 %164 = OpFMul %161 %163 
                                       f32_3 %165 = OpLoad %78 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFAdd %164 %166 
                                                      OpStore %159 %167 
                                         f32 %168 = OpLoad %145 
                                       f32_3 %169 = OpCompositeConstruct %168 %168 %168 
                                       f32_3 %170 = OpLoad %133 
                                       f32_3 %171 = OpFMul %169 %170 
                                                      OpStore %133 %171 
                                       f32_3 %172 = OpLoad %159 
                                       f32_3 %173 = OpLoad %159 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %145 %174 
                                         f32 %175 = OpLoad %145 
                                         f32 %177 = OpExtInst %1 40 %175 %176 
                                                      OpStore %145 %177 
                                         f32 %178 = OpLoad %145 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %145 %179 
                                         f32 %180 = OpLoad %145 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %159 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %159 %183 
                  read_only Texture2DSampled %186 = OpLoad %185 
                                       f32_2 %187 = OpLoad %41 
                                       f32_4 %188 = OpImageSampleImplicitLod %186 %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore %184 %189 
                                       f32_3 %191 = OpLoad %184 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_3 %197 = OpFAdd %194 %196 
                                                      OpStore %190 %197 
                                       f32_3 %199 = OpLoad %190 
                                       f32_3 %200 = OpLoad %190 
                                         f32 %201 = OpDot %199 %200 
                                                      OpStore %198 %201 
                                         f32 %202 = OpLoad %198 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
                                       f32_3 %206 = OpLoad %190 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %190 %207 
                                       f32_3 %208 = OpLoad %190 
                                       f32_3 %209 = OpLoad %159 
                                         f32 %210 = OpDot %208 %209 
                                                      OpStore %145 %210 
                                         f32 %211 = OpLoad %145 
                                         f32 %213 = OpExtInst %1 43 %211 %212 %67 
                                                      OpStore %145 %213 
                                       f32_3 %215 = OpLoad %133 
                                       f32_3 %216 = OpFNegate %215 
                                       f32_3 %217 = OpLoad %159 
                                         f32 %218 = OpDot %216 %217 
                                                      OpStore %214 %218 
                                         f32 %219 = OpLoad %214 
                                         f32 %220 = OpExtInst %1 43 %219 %212 %67 
                                                      OpStore %214 %220 
                                       f32_3 %222 = OpLoad %190 
                                       f32_3 %223 = OpLoad %133 
                                       f32_3 %224 = OpFNegate %223 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %221 %225 
                                         f32 %226 = OpLoad %221 
                                         f32 %227 = OpExtInst %1 43 %226 %212 %67 
                                                      OpStore %221 %227 
                                       f32_3 %228 = OpLoad %190 
                                       f32_3 %229 = OpLoad %78 
                                       f32_3 %230 = OpFNegate %229 
                                         f32 %231 = OpDot %228 %230 
                                Private f32* %232 = OpAccessChain %78 %30 
                                                      OpStore %232 %231 
                  read_only Texture2DSampled %235 = OpLoad %234 
                                       f32_2 %236 = OpLoad %41 
                                       f32_4 %237 = OpImageSampleImplicitLod %235 %236 
                                                      OpStore %233 %237 
                  read_only Texture2DSampled %240 = OpLoad %239 
                                       f32_2 %241 = OpLoad %41 
                                       f32_4 %242 = OpImageSampleImplicitLod %240 %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                                      OpStore %238 %243 
                                Private f32* %245 = OpAccessChain %233 %149 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %247 %67 
                                                      OpStore %244 %248 
                                         f32 %250 = OpLoad %244 
                                         f32 %251 = OpLoad %244 
                                         f32 %252 = OpFMul %250 %251 
                                                      OpStore %249 %252 
                                         f32 %253 = OpLoad %249 
                                         f32 %255 = OpExtInst %1 40 %253 %254 
                                                      OpStore %249 %255 
                                         f32 %257 = OpLoad %249 
                                         f32 %258 = OpLoad %249 
                                         f32 %259 = OpFMul %257 %258 
                                                      OpStore %256 %259 
                                         f32 %261 = OpLoad %145 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpFMul %261 %262 
                                         f32 %264 = OpLoad %145 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %263 %265 
                                                      OpStore %260 %266 
                                         f32 %267 = OpLoad %260 
                                         f32 %268 = OpLoad %145 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %270 = OpFAdd %269 %67 
                                                      OpStore %145 %270 
                                         f32 %271 = OpLoad %145 
                                         f32 %272 = OpLoad %145 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %145 %275 
                                         f32 %276 = OpLoad %256 
                                         f32 %278 = OpFMul %276 %277 
                                                      OpStore %256 %278 
                                         f32 %279 = OpLoad %256 
                                         f32 %280 = OpLoad %145 
                                         f32 %281 = OpFDiv %279 %280 
                                                      OpStore %145 %281 
                                         f32 %282 = OpLoad %249 
                                         f32 %283 = OpFNegate %282 
                                         f32 %284 = OpFAdd %283 %67 
                                                      OpStore %256 %284 
                                Private f32* %285 = OpAccessChain %78 %30 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 4 %286 
                                         f32 %288 = OpLoad %256 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpLoad %249 
                                         f32 %291 = OpFAdd %289 %290 
                                                      OpStore %260 %291 
                                         f32 %293 = OpLoad %221 
                                         f32 %294 = OpLoad %256 
                                         f32 %295 = OpFMul %293 %294 
                                         f32 %296 = OpLoad %249 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %292 %297 
                                         f32 %298 = OpLoad %292 
                                Private f32* %299 = OpAccessChain %78 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 4 %300 
                                         f32 %302 = OpFMul %298 %301 
                                                      OpStore %292 %302 
                                Private f32* %304 = OpAccessChain %78 %30 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpExtInst %1 4 %305 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %307 %67 
                                Private f32* %309 = OpAccessChain %303 %30 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %221 
                                         f32 %311 = OpLoad %260 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %313 = OpLoad %292 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %292 %314 
                                         f32 %315 = OpLoad %292 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %292 %317 
                                         f32 %319 = OpLoad %292 
                                         f32 %320 = OpFDiv %318 %319 
                                                      OpStore %292 %320 
                                         f32 %321 = OpLoad %145 
                                         f32 %322 = OpLoad %292 
                                         f32 %323 = OpFMul %321 %322 
                                                      OpStore %292 %323 
                                         f32 %324 = OpLoad %292 
                                         f32 %326 = OpFMul %324 %325 
                                                      OpStore %292 %326 
                                         f32 %327 = OpLoad %292 
                                         f32 %329 = OpExtInst %1 40 %327 %328 
                                                      OpStore %292 %329 
                                         f32 %330 = OpLoad %292 
                                         f32 %331 = OpExtInst %1 31 %330 
                                                      OpStore %292 %331 
                                         f32 %332 = OpLoad %221 
                                         f32 %333 = OpLoad %292 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %292 %334 
                                       f32_4 %336 = OpLoad %233 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %233 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %340 = OpDot %337 %339 
                                Private f32* %341 = OpAccessChain %335 %30 
                                                      OpStore %341 %340 
                                Private f32* %345 = OpAccessChain %335 %30 
                                         f32 %346 = OpLoad %345 
                                        bool %347 = OpFOrdNotEqual %346 %212 
                                                      OpStore %344 %347 
                                        bool %350 = OpLoad %344 
                                                      OpSelectionMerge %352 None 
                                                      OpBranchConditional %350 %351 %353 
                                             %351 = OpLabel 
                                                      OpStore %349 %67 
                                                      OpBranch %352 
                                             %353 = OpLabel 
                                                      OpStore %349 %212 
                                                      OpBranch %352 
                                             %352 = OpLabel 
                                         f32 %354 = OpLoad %349 
                                                      OpStore %145 %354 
                                         f32 %355 = OpLoad %145 
                                         f32 %356 = OpLoad %292 
                                         f32 %357 = OpFMul %355 %356 
                                                      OpStore %292 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 1 1 1 
                              Uniform f32_4* %361 = OpAccessChain %17 %360 %19 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFMul %359 %363 
                                                      OpStore %78 %364 
                              Uniform f32_4* %365 = OpAccessChain %17 %360 %87 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_3 %371 = OpLoad %78 
                                       f32_3 %372 = OpFAdd %370 %371 
                                                      OpStore %78 %372 
                              Uniform f32_4* %373 = OpAccessChain %17 %360 %58 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 2 2 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_3 %379 = OpLoad %78 
                                       f32_3 %380 = OpFAdd %378 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                              Uniform f32_4* %385 = OpAccessChain %17 %360 %81 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %384 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %9 %390 
                read_only TextureCubeSampled %395 = OpLoad %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %399 = OpImageSampleImplicitLod %395 %397 Bias %7 
                                         f32 %400 = OpCompositeExtract %399 3 
                                Private f32* %401 = OpAccessChain %9 %30 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %9 %30 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpLoad %49 
                                         f32 %405 = OpFMul %403 %404 
                                Private f32* %406 = OpAccessChain %9 %30 
                                                      OpStore %406 %405 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                              Uniform f32_4* %410 = OpAccessChain %17 %409 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFMul %408 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                         f32 %418 = OpLoad %292 
                                       f32_3 %419 = OpCompositeConstruct %418 %418 %418 
                                       f32_3 %420 = OpFMul %417 %419 
                                                      OpStore %78 %420 
                                         f32 %421 = OpLoad %214 
                                         f32 %422 = OpFNegate %421 
                                         f32 %423 = OpFAdd %422 %67 
                                Private f32* %424 = OpAccessChain %335 %30 
                                                      OpStore %424 %423 
                                Private f32* %426 = OpAccessChain %335 %30 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %335 %30 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %425 %430 
                                         f32 %431 = OpLoad %425 
                                         f32 %432 = OpLoad %425 
                                         f32 %433 = OpFMul %431 %432 
                                                      OpStore %425 %433 
                                Private f32* %434 = OpAccessChain %335 %30 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %425 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %335 %30 
                                                      OpStore %438 %437 
                                       f32_4 %440 = OpLoad %233 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFNegate %441 
                                       f32_3 %444 = OpFAdd %442 %443 
                                                      OpStore %439 %444 
                                       f32_3 %445 = OpLoad %439 
                                       f32_3 %446 = OpLoad %335 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_4 %449 = OpLoad %233 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFAdd %448 %450 
                                                      OpStore %335 %451 
                                       f32_3 %452 = OpLoad %78 
                                       f32_3 %453 = OpLoad %335 
                                       f32_3 %454 = OpFMul %452 %453 
                                                      OpStore %78 %454 
                                Private f32* %455 = OpAccessChain %303 %30 
                                         f32 %456 = OpLoad %455 
                                Private f32* %457 = OpAccessChain %303 %30 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %335 %30 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %335 %30 
                                         f32 %462 = OpLoad %461 
                                Private f32* %463 = OpAccessChain %335 %30 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                Private f32* %466 = OpAccessChain %335 %30 
                                                      OpStore %466 %465 
                                Private f32* %467 = OpAccessChain %303 %30 
                                         f32 %468 = OpLoad %467 
                                Private f32* %469 = OpAccessChain %335 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFMul %468 %470 
                                Private f32* %472 = OpAccessChain %303 %30 
                                                      OpStore %472 %471 
                                         f32 %473 = OpLoad %214 
                                         f32 %474 = OpLoad %214 
                                         f32 %475 = OpFAdd %473 %474 
                                Private f32* %476 = OpAccessChain %335 %30 
                                                      OpStore %476 %475 
                                         f32 %477 = OpLoad %214 
                                Private f32* %478 = OpAccessChain %335 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                Private f32* %481 = OpAccessChain %335 %30 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %335 %30 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %244 
                                         f32 %485 = OpFMul %483 %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %335 %30 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %335 %30 
                                         f32 %490 = OpLoad %489 
                                Private f32* %491 = OpAccessChain %303 %30 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpFMul %490 %492 
                                         f32 %494 = OpFAdd %493 %67 
                                Private f32* %495 = OpAccessChain %303 %30 
                                                      OpStore %495 %494 
                                         f32 %496 = OpLoad %221 
                                         f32 %497 = OpFNegate %496 
                                         f32 %498 = OpFAdd %497 %67 
                                                      OpStore %425 %498 
                                         f32 %500 = OpLoad %425 
                                         f32 %501 = OpLoad %425 
                                         f32 %502 = OpFMul %500 %501 
                                                      OpStore %499 %502 
                                         f32 %503 = OpLoad %499 
                                         f32 %504 = OpLoad %499 
                                         f32 %505 = OpFMul %503 %504 
                                                      OpStore %499 %505 
                                         f32 %506 = OpLoad %425 
                                         f32 %507 = OpLoad %499 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %425 %508 
                                Private f32* %509 = OpAccessChain %335 %30 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %425 
                                         f32 %512 = OpFMul %510 %511 
                                         f32 %513 = OpFAdd %512 %67 
                                Private f32* %514 = OpAccessChain %335 %30 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %303 %30 
                                         f32 %516 = OpLoad %515 
                                Private f32* %517 = OpAccessChain %335 %30 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFMul %516 %518 
                                Private f32* %520 = OpAccessChain %303 %30 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %221 
                                Private f32* %522 = OpAccessChain %303 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                                      OpStore %49 %524 
                                         f32 %525 = OpLoad %49 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_4 %527 = OpLoad %9 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                                      OpStore %303 %529 
                                       f32_3 %530 = OpLoad %238 
                                       f32_3 %531 = OpLoad %303 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_3 %533 = OpLoad %78 
                                       f32_3 %534 = OpFAdd %532 %533 
                                       f32_4 %535 = OpLoad %9 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %9 %536 
                                       f32_4 %538 = OpLoad %9 
                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
                                       f32_3 %540 = OpFNegate %539 
                                       f32_4 %541 = OpLoad %537 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
                                                      OpStore %537 %542 
                                Private f32* %543 = OpAccessChain %537 %149 
                                                      OpStore %543 %195 
                                       f32_4 %546 = OpLoad %537 
                                       f32_4 %547 = OpExtInst %1 29 %546 
                                                      OpStore %545 %547 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat22 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat8 = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat16_4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat16_2 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.xyz = u_xlat10_2.www * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat15 + u_xlat15;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat16_6.x + -0.5;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 535
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %531 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %158 DescriptorSet 158 
                                                      OpDecorate %158 Binding 158 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %202 DescriptorSet 202 
                                                      OpDecorate %202 Binding 202 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %531 Location 531 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %129 = OpVariable Private 
                                         i32 %135 = OpConstant 4 
                                         f32 %149 = OpConstant 3.674022E-40 
                              Private f32_3* %157 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
                              Private f32_3* %163 = OpVariable Private 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_3 %166 = OpConstantComposite %165 %165 %165 
                                         f32 %168 = OpConstant 3.674022E-40 
                                       f32_3 %169 = OpConstantComposite %168 %168 %168 
                                Private f32* %171 = OpVariable Private 
                                         f32 %185 = OpConstant 3.674022E-40 
                                Private f32* %187 = OpVariable Private 
                              Private f32_4* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %197 = OpVariable UniformConstant 
                              Private f32_4* %201 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %202 = OpVariable UniformConstant 
                                Private f32* %209 = OpVariable Private 
                                         u32 %210 = OpConstant 3 
                                Private f32* %215 = OpVariable Private 
                                         f32 %220 = OpConstant 3.674022E-40 
                                Private f32* %222 = OpVariable Private 
                                Private f32* %226 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                Private f32* %253 = OpVariable Private 
                                Private f32* %262 = OpVariable Private 
                              Private f32_3* %266 = OpVariable Private 
                                Private f32* %275 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                              Private f32_3* %325 = OpVariable Private 
                                             %332 = OpTypeBool 
                                             %333 = OpTypePointer Private %332 
                               Private bool* %334 = OpVariable Private 
                                             %338 = OpTypePointer Function %6 
                                         i32 %352 = OpConstant 6 
 UniformConstant read_only Texture2DSampled* %389 = OpVariable UniformConstant 
                                         f32 %393 = OpConstant 3.674022E-40 
                                         i32 %399 = OpConstant 5 
                                Private f32* %415 = OpVariable Private 
                              Private f32_3* %429 = OpVariable Private 
                                       f32_3 %433 = OpConstantComposite %67 %67 %67 
                                         f32 %458 = OpConstant 3.674022E-40 
                                Private f32* %484 = OpVariable Private 
                              Private f32_4* %523 = OpVariable Private 
                                             %530 = OpTypePointer Output %7 
                               Output f32_4* %531 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %339 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                       f32_3 %130 = OpLoad %78 
                                       f32_3 %131 = OpFNegate %130 
                                         f32 %132 = OpLoad %49 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpFMul %131 %133 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpFAdd %134 %139 
                                                      OpStore %129 %140 
                                         f32 %141 = OpLoad %49 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_3 %143 = OpLoad %78 
                                       f32_3 %144 = OpFMul %142 %143 
                                                      OpStore %78 %144 
                                       f32_3 %145 = OpLoad %129 
                                       f32_3 %146 = OpLoad %129 
                                         f32 %147 = OpDot %145 %146 
                                                      OpStore %49 %147 
                                         f32 %148 = OpLoad %49 
                                         f32 %150 = OpExtInst %1 40 %148 %149 
                                                      OpStore %49 %150 
                                         f32 %151 = OpLoad %49 
                                         f32 %152 = OpExtInst %1 32 %151 
                                                      OpStore %49 %152 
                                         f32 %153 = OpLoad %49 
                                       f32_3 %154 = OpCompositeConstruct %153 %153 %153 
                                       f32_3 %155 = OpLoad %129 
                                       f32_3 %156 = OpFMul %154 %155 
                                                      OpStore %129 %156 
                  read_only Texture2DSampled %159 = OpLoad %158 
                                       f32_2 %160 = OpLoad %41 
                                       f32_4 %161 = OpImageSampleImplicitLod %159 %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                                      OpStore %157 %162 
                                       f32_3 %164 = OpLoad %157 
                                       f32_3 %167 = OpFMul %164 %166 
                                       f32_3 %170 = OpFAdd %167 %169 
                                                      OpStore %163 %170 
                                       f32_3 %172 = OpLoad %163 
                                       f32_3 %173 = OpLoad %163 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %171 %174 
                                         f32 %175 = OpLoad %171 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %171 %176 
                                         f32 %177 = OpLoad %171 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpLoad %163 
                                       f32_3 %180 = OpFMul %178 %179 
                                                      OpStore %163 %180 
                                       f32_3 %181 = OpLoad %163 
                                       f32_3 %182 = OpLoad %129 
                                         f32 %183 = OpDot %181 %182 
                                                      OpStore %49 %183 
                                         f32 %184 = OpLoad %49 
                                         f32 %186 = OpExtInst %1 43 %184 %185 %67 
                                                      OpStore %49 %186 
                              Uniform f32_4* %188 = OpAccessChain %17 %135 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFNegate %190 
                                       f32_3 %192 = OpLoad %129 
                                         f32 %193 = OpDot %191 %192 
                                                      OpStore %187 %193 
                                         f32 %194 = OpLoad %187 
                                         f32 %195 = OpExtInst %1 43 %194 %185 %67 
                                                      OpStore %187 %195 
                  read_only Texture2DSampled %198 = OpLoad %197 
                                       f32_2 %199 = OpLoad %41 
                                       f32_4 %200 = OpImageSampleImplicitLod %198 %199 
                                                      OpStore %196 %200 
                  read_only Texture2DSampled %203 = OpLoad %202 
                                       f32_2 %204 = OpLoad %41 
                                       f32_4 %205 = OpImageSampleImplicitLod %203 %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %201 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 6 
                                                      OpStore %201 %208 
                                Private f32* %211 = OpAccessChain %196 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %213 %67 
                                                      OpStore %209 %214 
                                         f32 %216 = OpLoad %209 
                                         f32 %217 = OpLoad %209 
                                         f32 %218 = OpFMul %216 %217 
                                                      OpStore %215 %218 
                                         f32 %219 = OpLoad %215 
                                         f32 %221 = OpExtInst %1 40 %219 %220 
                                                      OpStore %215 %221 
                                         f32 %223 = OpLoad %215 
                                         f32 %224 = OpLoad %215 
                                         f32 %225 = OpFMul %223 %224 
                                                      OpStore %222 %225 
                                         f32 %227 = OpLoad %49 
                                         f32 %228 = OpLoad %222 
                                         f32 %229 = OpFMul %227 %228 
                                         f32 %230 = OpLoad %49 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %229 %231 
                                                      OpStore %226 %232 
                                         f32 %233 = OpLoad %226 
                                         f32 %234 = OpLoad %49 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpFAdd %235 %67 
                                                      OpStore %49 %236 
                                         f32 %237 = OpLoad %49 
                                         f32 %238 = OpLoad %49 
                                         f32 %239 = OpFMul %237 %238 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %49 %241 
                                         f32 %242 = OpLoad %222 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %222 %244 
                                         f32 %245 = OpLoad %222 
                                         f32 %246 = OpLoad %49 
                                         f32 %247 = OpFDiv %245 %246 
                                                      OpStore %49 %247 
                                       f32_3 %248 = OpLoad %163 
                                       f32_3 %249 = OpLoad %78 
                                       f32_3 %250 = OpFNegate %249 
                                         f32 %251 = OpDot %248 %250 
                                Private f32* %252 = OpAccessChain %78 %30 
                                                      OpStore %252 %251 
                                       f32_3 %254 = OpLoad %163 
                              Uniform f32_4* %255 = OpAccessChain %17 %135 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFNegate %257 
                                         f32 %259 = OpDot %254 %258 
                                                      OpStore %253 %259 
                                         f32 %260 = OpLoad %253 
                                         f32 %261 = OpExtInst %1 43 %260 %185 %67 
                                                      OpStore %253 %261 
                                         f32 %263 = OpLoad %215 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpFAdd %264 %67 
                                                      OpStore %262 %265 
                                Private f32* %267 = OpAccessChain %78 %30 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpExtInst %1 4 %268 
                                         f32 %270 = OpLoad %262 
                                         f32 %271 = OpFMul %269 %270 
                                         f32 %272 = OpLoad %215 
                                         f32 %273 = OpFAdd %271 %272 
                                Private f32* %274 = OpAccessChain %266 %30 
                                                      OpStore %274 %273 
                                         f32 %276 = OpLoad %253 
                                         f32 %277 = OpLoad %262 
                                         f32 %278 = OpFMul %276 %277 
                                         f32 %279 = OpLoad %215 
                                         f32 %280 = OpFAdd %278 %279 
                                                      OpStore %275 %280 
                                         f32 %281 = OpLoad %275 
                                Private f32* %282 = OpAccessChain %78 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 4 %283 
                                         f32 %285 = OpFMul %281 %284 
                                                      OpStore %275 %285 
                                Private f32* %287 = OpAccessChain %78 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 4 %288 
                                         f32 %290 = OpFNegate %289 
                                         f32 %291 = OpFAdd %290 %67 
                                Private f32* %292 = OpAccessChain %286 %30 
                                                      OpStore %292 %291 
                                         f32 %293 = OpLoad %253 
                                Private f32* %294 = OpAccessChain %266 %30 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                         f32 %297 = OpLoad %275 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %78 %30 
                                                      OpStore %299 %298 
                                Private f32* %300 = OpAccessChain %78 %30 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFAdd %301 %302 
                                Private f32* %304 = OpAccessChain %78 %30 
                                                      OpStore %304 %303 
                                Private f32* %306 = OpAccessChain %78 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFDiv %305 %307 
                                Private f32* %309 = OpAccessChain %78 %30 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %49 
                                Private f32* %311 = OpAccessChain %78 %30 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                                      OpStore %49 %313 
                                         f32 %314 = OpLoad %49 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %49 %316 
                                         f32 %317 = OpLoad %49 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                                      OpStore %49 %319 
                                         f32 %320 = OpLoad %49 
                                         f32 %321 = OpExtInst %1 31 %320 
                                                      OpStore %49 %321 
                                         f32 %322 = OpLoad %253 
                                         f32 %323 = OpLoad %49 
                                         f32 %324 = OpFMul %322 %323 
                                                      OpStore %49 %324 
                                       f32_4 %326 = OpLoad %196 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_4 %328 = OpLoad %196 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %325 %30 
                                                      OpStore %331 %330 
                                Private f32* %335 = OpAccessChain %325 %30 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdNotEqual %336 %185 
                                                      OpStore %334 %337 
                                        bool %340 = OpLoad %334 
                                                      OpSelectionMerge %342 None 
                                                      OpBranchConditional %340 %341 %343 
                                             %341 = OpLabel 
                                                      OpStore %339 %67 
                                                      OpBranch %342 
                                             %343 = OpLabel 
                                                      OpStore %339 %185 
                                                      OpBranch %342 
                                             %342 = OpLabel 
                                         f32 %344 = OpLoad %339 
                                Private f32* %345 = OpAccessChain %78 %30 
                                                      OpStore %345 %344 
                                         f32 %346 = OpLoad %49 
                                Private f32* %347 = OpAccessChain %78 %30 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                                      OpStore %49 %349 
                                       f32_4 %350 = OpLoad %9 
                                       f32_2 %351 = OpVectorShuffle %350 %350 1 1 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 %19 
                                       f32_4 %354 = OpLoad %353 
                                       f32_2 %355 = OpVectorShuffle %354 %354 0 1 
                                       f32_2 %356 = OpFMul %351 %355 
                                       f32_3 %357 = OpLoad %78 
                                       f32_3 %358 = OpVectorShuffle %357 %356 3 1 4 
                                                      OpStore %78 %358 
                              Uniform f32_4* %359 = OpAccessChain %17 %352 %87 
                                       f32_4 %360 = OpLoad %359 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 1 
                                       f32_4 %362 = OpLoad %9 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 0 
                                       f32_2 %364 = OpFMul %361 %363 
                                       f32_3 %365 = OpLoad %78 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 2 
                                       f32_2 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 2 3 
                                                      OpStore %9 %369 
                              Uniform f32_4* %370 = OpAccessChain %17 %352 %58 
                                       f32_4 %371 = OpLoad %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                                       f32_4 %373 = OpLoad %9 
                                       f32_2 %374 = OpVectorShuffle %373 %373 2 2 
                                       f32_2 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_2 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 2 3 
                                                      OpStore %9 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_2 %382 = OpVectorShuffle %381 %381 0 1 
                              Uniform f32_4* %383 = OpAccessChain %17 %352 %81 
                                       f32_4 %384 = OpLoad %383 
                                       f32_2 %385 = OpVectorShuffle %384 %384 0 1 
                                       f32_2 %386 = OpFAdd %382 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 2 3 
                                                      OpStore %9 %388 
                  read_only Texture2DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %390 %392 Bias %7 
                                         f32 %395 = OpCompositeExtract %394 3 
                                Private f32* %396 = OpAccessChain %9 %30 
                                                      OpStore %396 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 0 0 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %49 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_3 %410 = OpFMul %407 %409 
                                                      OpStore %266 %410 
                                         f32 %411 = OpLoad %187 
                                         f32 %412 = OpFNegate %411 
                                         f32 %413 = OpFAdd %412 %67 
                                Private f32* %414 = OpAccessChain %325 %30 
                                                      OpStore %414 %413 
                                Private f32* %416 = OpAccessChain %325 %30 
                                         f32 %417 = OpLoad %416 
                                Private f32* %418 = OpAccessChain %325 %30 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %415 %420 
                                         f32 %421 = OpLoad %415 
                                         f32 %422 = OpLoad %415 
                                         f32 %423 = OpFMul %421 %422 
                                                      OpStore %415 %423 
                                Private f32* %424 = OpAccessChain %325 %30 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpLoad %415 
                                         f32 %427 = OpFMul %425 %426 
                                Private f32* %428 = OpAccessChain %325 %30 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %196 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFNegate %431 
                                       f32_3 %434 = OpFAdd %432 %433 
                                                      OpStore %429 %434 
                                       f32_3 %435 = OpLoad %429 
                                       f32_3 %436 = OpLoad %325 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_4 %439 = OpLoad %196 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFAdd %438 %440 
                                                      OpStore %325 %441 
                                       f32_3 %442 = OpLoad %266 
                                       f32_3 %443 = OpLoad %325 
                                       f32_3 %444 = OpFMul %442 %443 
                                                      OpStore %129 %444 
                                         f32 %445 = OpLoad %187 
                                         f32 %446 = OpLoad %187 
                                         f32 %447 = OpFAdd %445 %446 
                                Private f32* %448 = OpAccessChain %325 %30 
                                                      OpStore %448 %447 
                                         f32 %449 = OpLoad %187 
                                Private f32* %450 = OpAccessChain %325 %30 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFMul %449 %451 
                                Private f32* %453 = OpAccessChain %325 %30 
                                                      OpStore %453 %452 
                                Private f32* %454 = OpAccessChain %325 %30 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpLoad %209 
                                         f32 %457 = OpFMul %455 %456 
                                         f32 %459 = OpFAdd %457 %458 
                                Private f32* %460 = OpAccessChain %325 %30 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %286 %30 
                                         f32 %462 = OpLoad %461 
                                Private f32* %463 = OpAccessChain %286 %30 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                                      OpStore %415 %465 
                                         f32 %466 = OpLoad %415 
                                         f32 %467 = OpLoad %415 
                                         f32 %468 = OpFMul %466 %467 
                                                      OpStore %415 %468 
                                Private f32* %469 = OpAccessChain %286 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %415 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %286 %30 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %325 %30 
                                         f32 %475 = OpLoad %474 
                                Private f32* %476 = OpAccessChain %286 %30 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                         f32 %479 = OpFAdd %478 %67 
                                Private f32* %480 = OpAccessChain %286 %30 
                                                      OpStore %480 %479 
                                         f32 %481 = OpLoad %253 
                                         f32 %482 = OpFNegate %481 
                                         f32 %483 = OpFAdd %482 %67 
                                                      OpStore %415 %483 
                                         f32 %485 = OpLoad %415 
                                         f32 %486 = OpLoad %415 
                                         f32 %487 = OpFMul %485 %486 
                                                      OpStore %484 %487 
                                         f32 %488 = OpLoad %484 
                                         f32 %489 = OpLoad %484 
                                         f32 %490 = OpFMul %488 %489 
                                                      OpStore %484 %490 
                                         f32 %491 = OpLoad %415 
                                         f32 %492 = OpLoad %484 
                                         f32 %493 = OpFMul %491 %492 
                                                      OpStore %415 %493 
                                Private f32* %494 = OpAccessChain %325 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpLoad %415 
                                         f32 %497 = OpFMul %495 %496 
                                         f32 %498 = OpFAdd %497 %67 
                                Private f32* %499 = OpAccessChain %325 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %286 %30 
                                         f32 %501 = OpLoad %500 
                                Private f32* %502 = OpAccessChain %325 %30 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %501 %503 
                                Private f32* %505 = OpAccessChain %286 %30 
                                                      OpStore %505 %504 
                                         f32 %506 = OpLoad %253 
                                Private f32* %507 = OpAccessChain %286 %30 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFMul %506 %508 
                                                      OpStore %49 %509 
                                         f32 %510 = OpLoad %49 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %9 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                                      OpStore %286 %514 
                                       f32_4 %515 = OpLoad %201 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 3 
                                       f32_3 %517 = OpLoad %286 
                                       f32_3 %518 = OpFMul %516 %517 
                                       f32_3 %519 = OpLoad %129 
                                       f32_3 %520 = OpFAdd %518 %519 
                                       f32_4 %521 = OpLoad %9 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %9 %522 
                                       f32_4 %524 = OpLoad %9 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFNegate %525 
                                       f32_4 %527 = OpLoad %523 
                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
                                                      OpStore %523 %528 
                                Private f32* %529 = OpAccessChain %523 %210 
                                                      OpStore %529 %168 
                                       f32_4 %532 = OpLoad %523 
                                       f32_4 %533 = OpExtInst %1 29 %532 
                                                      OpStore %531 %533 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat10_6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat13 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat13 = float(1.0) / u_xlat13;
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0.x = u_xlat10_6 * u_xlat0.x + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.z) * u_xlat13 + u_xlat6.x;
    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat2.z;
    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat6.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlatb18 = u_xlat6.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat10_3 = texture(_LightTexture0, u_xlat6.xy, -8.0);
    u_xlat6.x = u_xlat18 * u_xlat10_3.w;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = u_xlat12 * _LightPos.w;
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyw = u_xlat0.xxx * _LightColor.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat12) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_12 = inversesqrt(u_xlat16_12);
    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_5.xyz;
    u_xlat12 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1;
    u_xlat8 = u_xlat12 * u_xlat16_7 + (-u_xlat12);
    u_xlat12 = u_xlat8 * u_xlat12 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-007;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat12 = u_xlat16_7 / u_xlat12;
    u_xlat16_7 = (-u_xlat16_1) + 1.0;
    u_xlat8 = abs(u_xlat2.x) * u_xlat16_7 + u_xlat16_1;
    u_xlat1.x = u_xlat19 * u_xlat16_7 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat7 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat19 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyw * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat12 = u_xlat7 * u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat7 * u_xlat12;
    u_xlat1.x = u_xlat13 + u_xlat13;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_5.x + -0.5;
    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat7 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat7 = u_xlat7 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw;
    u_xlat0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 738
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %38 %52 %733 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %38 Location 38 
                                                      OpDecorate %52 Location 52 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %298 DescriptorSet 298 
                                                      OpDecorate %298 Binding 298 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 DescriptorSet 456 
                                                      OpDecorate %456 Binding 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %461 DescriptorSet 461 
                                                      OpDecorate %461 Binding 461 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %733 Location 733 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %737 DescriptorSet 737 
                                                      OpDecorate %737 Binding 737 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypePointer Private %10 
                               Private f32_3* %32 = OpVariable Private 
                                          i32 %33 = OpConstant 1 
                                          u32 %34 = OpConstant 2 
                                              %37 = OpTypePointer Input %10 
                                 Input f32_3* %38 = OpVariable Input 
                                              %39 = OpTypePointer Input %6 
                                              %48 = OpTypeVector %6 2 
                                              %49 = OpTypePointer Private %48 
                               Private f32_2* %50 = OpVariable Private 
                                              %51 = OpTypePointer Input %7 
                                 Input f32_4* %52 = OpVariable Input 
                                 Private f32* %58 = OpVariable Private 
                                              %59 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %60 = OpTypeSampledImage %59 
                                              %61 = OpTypePointer UniformConstant %60 
  UniformConstant read_only Texture2DSampled* %62 = OpVariable UniformConstant 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 1 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %96 = OpConstant 0 
                                         i32 %129 = OpConstant 4 
                                             %158 = OpTypePointer Function %10 
                                Private f32* %167 = OpVariable Private 
                                             %168 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %169 = OpTypeSampledImage %168 
                                             %170 = OpTypePointer UniformConstant %169 
 UniformConstant read_only Texture2DSampled* %171 = OpVariable UniformConstant 
                                         f32 %174 = OpConstant 3.674022E-40 
                                         i32 %187 = OpConstant 6 
                                         u32 %214 = OpConstant 3 
                              Private f32_3* %237 = OpVariable Private 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %251 = OpConstant 9 
                                             %284 = OpTypeBool 
                                             %285 = OpTypePointer Private %284 
                               Private bool* %286 = OpVariable Private 
                                Private f32* %290 = OpVariable Private 
                                             %291 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %298 = OpVariable UniformConstant 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         i32 %314 = OpConstant 7 
                                             %321 = OpTypePointer Uniform %10 
                                Private f32* %331 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %338 = OpVariable UniformConstant 
                                         i32 %357 = OpConstant 8 
                              Private f32_3* %381 = OpVariable Private 
                                Private f32* %394 = OpVariable Private 
                                         f32 %399 = OpConstant 3.674022E-40 
                              Private f32_3* %407 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %408 = OpVariable UniformConstant 
                              Private f32_3* %413 = OpVariable Private 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %415 %415 %415 
                                         f32 %418 = OpConstant 3.674022E-40 
                                       f32_3 %419 = OpConstantComposite %418 %418 %418 
                                Private f32* %421 = OpVariable Private 
                              Private f32_4* %455 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %456 = OpVariable UniformConstant 
                              Private f32_4* %460 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %461 = OpVariable UniformConstant 
                                Private f32* %468 = OpVariable Private 
                                Private f32* %473 = OpVariable Private 
                                         f32 %478 = OpConstant 3.674022E-40 
                                Private f32* %480 = OpVariable Private 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %502 = OpConstant 3.674022E-40 
                                Private f32* %518 = OpVariable Private 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %549 = OpConstant 3.674022E-40 
                                         f32 %561 = OpConstant 3.674022E-40 
                                         f32 %566 = OpConstant 3.674022E-40 
                              Private f32_3* %579 = OpVariable Private 
                               Private bool* %586 = OpVariable Private 
                                Private f32* %610 = OpVariable Private 
                              Private f32_3* %624 = OpVariable Private 
                                       f32_3 %628 = OpConstantComposite %27 %27 %27 
                                         f32 %673 = OpConstant 3.674022E-40 
                                Private f32* %687 = OpVariable Private 
                                             %732 = OpTypePointer Output %7 
                               Output f32_4* %733 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %737 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %159 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %590 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                 Private f32* %30 = OpAccessChain %9 %22 
                                                      OpStore %30 %28 
                                 Uniform f32* %35 = OpAccessChain %19 %33 %34 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %40 = OpAccessChain %38 %34 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFDiv %36 %41 
                                 Private f32* %43 = OpAccessChain %32 %22 
                                                      OpStore %43 %42 
                                        f32_3 %44 = OpLoad %32 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 0 0 
                                        f32_3 %46 = OpLoad %38 
                                        f32_3 %47 = OpFMul %45 %46 
                                                      OpStore %32 %47 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 0 1 
                                        f32_4 %55 = OpLoad %52 
                                        f32_2 %56 = OpVectorShuffle %55 %55 3 3 
                                        f32_2 %57 = OpFDiv %54 %56 
                                                      OpStore %50 %57 
                   read_only Texture2DSampled %63 = OpLoad %62 
                                        f32_2 %64 = OpLoad %50 
                                        f32_4 %65 = OpImageSampleImplicitLod %63 %64 
                                          f32 %66 = OpCompositeExtract %65 0 
                                                      OpStore %58 %66 
                                 Uniform f32* %68 = OpAccessChain %19 %67 %22 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpLoad %58 
                                          f32 %71 = OpFMul %69 %70 
                                 Uniform f32* %73 = OpAccessChain %19 %67 %72 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %71 %74 
                                                      OpStore %58 %75 
                                          f32 %76 = OpLoad %58 
                                          f32 %77 = OpFDiv %27 %76 
                                                      OpStore %58 %77 
                                        f32_3 %79 = OpLoad %32 
                                          f32 %80 = OpLoad %58 
                                        f32_3 %81 = OpCompositeConstruct %80 %80 %80 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %78 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %78 %84 
                                        f32_4 %86 = OpLoad %78 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %19 %88 %33 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %85 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %85 %95 
                               Uniform f32_4* %97 = OpAccessChain %19 %88 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %78 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %85 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %78 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %78 %107 
                              Uniform f32_4* %108 = OpAccessChain %19 %88 %67 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %78 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %78 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %78 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %78 %118 
                                       f32_4 %119 = OpLoad %78 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %19 %88 %88 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %78 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %78 %126 
                                       f32_4 %127 = OpLoad %78 
                                       f32_4 %128 = OpVectorShuffle %127 %127 1 1 1 1 
                              Uniform f32_4* %130 = OpAccessChain %19 %129 %33 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpFMul %128 %131 
                                                      OpStore %85 %132 
                              Uniform f32_4* %133 = OpAccessChain %19 %129 %96 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpLoad %78 
                                       f32_4 %136 = OpVectorShuffle %135 %135 0 0 0 0 
                                       f32_4 %137 = OpFMul %134 %136 
                                       f32_4 %138 = OpLoad %85 
                                       f32_4 %139 = OpFAdd %137 %138 
                                                      OpStore %85 %139 
                              Uniform f32_4* %140 = OpAccessChain %19 %129 %67 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %78 
                                       f32_4 %143 = OpVectorShuffle %142 %142 3 3 3 3 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %85 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %85 %146 
                                       f32_4 %147 = OpLoad %85 
                              Uniform f32_4* %148 = OpAccessChain %19 %129 %88 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpFAdd %147 %149 
                                                      OpStore %85 %150 
                                       f32_4 %151 = OpLoad %85 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %85 
                                       f32_3 %154 = OpVectorShuffle %153 %153 3 3 3 
                                       f32_3 %155 = OpFDiv %152 %154 
                                       f32_4 %156 = OpLoad %85 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %85 %157 
                                       f32_4 %160 = OpLoad %85 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                Private f32* %162 = OpAccessChain %85 %34 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpCompositeExtract %161 0 
                                         f32 %165 = OpCompositeExtract %161 1 
                                       f32_3 %166 = OpCompositeConstruct %164 %165 %163 
                                                      OpStore %159 %166 
                  read_only Texture2DSampled %172 = OpLoad %171 
                                       f32_3 %173 = OpLoad %159 
                                         f32 %175 = OpCompositeExtract %173 2 
                                         f32 %176 = OpImageSampleDrefExplicitLod %172 %173 %175 Lod %6 
                                                      OpStore %167 %176 
                                         f32 %177 = OpLoad %167 
                                Private f32* %178 = OpAccessChain %9 %22 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                Uniform f32* %181 = OpAccessChain %19 %21 %22 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFAdd %180 %182 
                                Private f32* %184 = OpAccessChain %9 %22 
                                                      OpStore %184 %183 
                                       f32_4 %185 = OpLoad %78 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                              Uniform f32_4* %188 = OpAccessChain %19 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFNegate %190 
                                       f32_3 %192 = OpFAdd %186 %191 
                                       f32_4 %193 = OpLoad %85 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %85 %194 
                                       f32_4 %195 = OpLoad %85 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %85 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                         f32 %199 = OpDot %196 %198 
                                Private f32* %200 = OpAccessChain %32 %22 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %32 %22 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpExtInst %1 31 %202 
                                Private f32* %204 = OpAccessChain %32 %22 
                                                      OpStore %204 %203 
                                Private f32* %205 = OpAccessChain %32 %34 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                         f32 %208 = OpLoad %58 
                                         f32 %209 = OpFMul %207 %208 
                                Private f32* %210 = OpAccessChain %32 %22 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFAdd %209 %211 
                                Private f32* %213 = OpAccessChain %32 %22 
                                                      OpStore %213 %212 
                                Uniform f32* %215 = OpAccessChain %19 %187 %214 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %32 %22 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %78 %34 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFAdd %219 %221 
                                Private f32* %223 = OpAccessChain %32 %22 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %32 %22 
                                         f32 %225 = OpLoad %224 
                                Uniform f32* %226 = OpAccessChain %19 %21 %34 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Uniform f32* %229 = OpAccessChain %19 %21 %214 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                Private f32* %232 = OpAccessChain %32 %22 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %32 %22 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpExtInst %1 43 %234 %174 %27 
                                Private f32* %236 = OpAccessChain %32 %22 
                                                      OpStore %236 %235 
                                Private f32* %238 = OpAccessChain %32 %22 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %9 %22 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %239 %241 
                                Private f32* %243 = OpAccessChain %237 %22 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %237 %22 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 43 %245 %174 %27 
                                Private f32* %247 = OpAccessChain %237 %22 
                                                      OpStore %247 %246 
                                       f32_4 %249 = OpLoad %78 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %19 %251 %33 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 3 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %248 %255 
                              Uniform f32_4* %256 = OpAccessChain %19 %251 %96 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 3 
                                       f32_4 %259 = OpLoad %78 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %248 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %248 %263 
                              Uniform f32_4* %264 = OpAccessChain %19 %251 %67 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 3 
                                       f32_4 %267 = OpLoad %78 
                                       f32_3 %268 = OpVectorShuffle %267 %267 3 3 3 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %248 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %248 %271 
                                       f32_3 %272 = OpLoad %248 
                              Uniform f32_4* %273 = OpAccessChain %19 %251 %88 
                                       f32_4 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 3 
                                       f32_3 %276 = OpFAdd %272 %275 
                                                      OpStore %248 %276 
                                       f32_3 %277 = OpLoad %248 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                       f32_3 %279 = OpLoad %248 
                                       f32_2 %280 = OpVectorShuffle %279 %279 2 2 
                                       f32_2 %281 = OpFDiv %278 %280 
                                       f32_3 %282 = OpLoad %248 
                                       f32_3 %283 = OpVectorShuffle %282 %281 3 4 2 
                                                      OpStore %248 %283 
                                Private f32* %287 = OpAccessChain %248 %34 
                                         f32 %288 = OpLoad %287 
                                        bool %289 = OpFOrdLessThan %288 %174 
                                                      OpStore %286 %289 
                                        bool %293 = OpLoad %286 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %296 
                                             %294 = OpLabel 
                                                      OpStore %292 %27 
                                                      OpBranch %295 
                                             %296 = OpLabel 
                                                      OpStore %292 %174 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %297 = OpLoad %292 
                                                      OpStore %290 %297 
                  read_only Texture2DSampled %299 = OpLoad %298 
                                       f32_3 %300 = OpLoad %248 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_4 %303 = OpImageSampleImplicitLod %299 %301 Bias %7 
                                         f32 %304 = OpCompositeExtract %303 3 
                                Private f32* %305 = OpAccessChain %248 %22 
                                                      OpStore %305 %304 
                                         f32 %306 = OpLoad %290 
                                Private f32* %307 = OpAccessChain %248 %22 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                Private f32* %310 = OpAccessChain %248 %22 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %78 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 3 
                                       f32_3 %313 = OpFNegate %312 
                              Uniform f32_4* %315 = OpAccessChain %19 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFAdd %313 %317 
                                                      OpStore %32 %318 
                                       f32_4 %319 = OpLoad %78 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 3 
                              Uniform f32_3* %322 = OpAccessChain %19 %96 
                                       f32_3 %323 = OpLoad %322 
                                       f32_3 %324 = OpFNegate %323 
                                       f32_3 %325 = OpFAdd %320 %324 
                                       f32_4 %326 = OpLoad %78 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %78 %327 
                                       f32_3 %328 = OpLoad %32 
                                       f32_3 %329 = OpLoad %32 
                                         f32 %330 = OpDot %328 %329 
                                                      OpStore %58 %330 
                                         f32 %332 = OpLoad %58 
                                Uniform f32* %333 = OpAccessChain %19 %314 %214 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                                      OpStore %331 %335 
                                         f32 %336 = OpLoad %58 
                                         f32 %337 = OpExtInst %1 32 %336 
                                                      OpStore %58 %337 
                  read_only Texture2DSampled %339 = OpLoad %338 
                                         f32 %340 = OpLoad %331 
                                       f32_2 %341 = OpCompositeConstruct %340 %340 
                                       f32_4 %342 = OpImageSampleImplicitLod %339 %341 
                                         f32 %343 = OpCompositeExtract %342 3 
                                                      OpStore %331 %343 
                                Private f32* %344 = OpAccessChain %248 %22 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpLoad %331 
                                         f32 %347 = OpFMul %345 %346 
                                Private f32* %348 = OpAccessChain %248 %22 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %237 %22 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %248 %22 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %248 %22 
                                                      OpStore %354 %353 
                                       f32_3 %355 = OpLoad %248 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                              Uniform f32_4* %358 = OpAccessChain %19 %357 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFMul %356 %360 
                                       f32_4 %362 = OpLoad %85 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %85 %363 
                                       f32_4 %364 = OpLoad %78 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_4 %366 = OpLoad %78 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                         f32 %368 = OpDot %365 %367 
                                Private f32* %369 = OpAccessChain %248 %22 
                                                      OpStore %369 %368 
                                Private f32* %370 = OpAccessChain %248 %22 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpExtInst %1 32 %371 
                                Private f32* %373 = OpAccessChain %248 %22 
                                                      OpStore %373 %372 
                                       f32_3 %374 = OpLoad %248 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 0 0 
                                       f32_4 %376 = OpLoad %78 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %78 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %78 %380 
                                       f32_3 %382 = OpLoad %32 
                                         f32 %383 = OpLoad %58 
                                       f32_3 %384 = OpCompositeConstruct %383 %383 %383 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %78 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFNegate %387 
                                       f32_3 %389 = OpFAdd %385 %388 
                                                      OpStore %381 %389 
                                       f32_3 %390 = OpLoad %32 
                                         f32 %391 = OpLoad %58 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                                      OpStore %248 %393 
                                       f32_3 %395 = OpLoad %381 
                                       f32_3 %396 = OpLoad %381 
                                         f32 %397 = OpDot %395 %396 
                                                      OpStore %394 %397 
                                         f32 %398 = OpLoad %394 
                                         f32 %400 = OpExtInst %1 40 %398 %399 
                                                      OpStore %394 %400 
                                         f32 %401 = OpLoad %394 
                                         f32 %402 = OpExtInst %1 32 %401 
                                                      OpStore %394 %402 
                                         f32 %403 = OpLoad %394 
                                       f32_3 %404 = OpCompositeConstruct %403 %403 %403 
                                       f32_3 %405 = OpLoad %381 
                                       f32_3 %406 = OpFMul %404 %405 
                                                      OpStore %381 %406 
                  read_only Texture2DSampled %409 = OpLoad %408 
                                       f32_2 %410 = OpLoad %50 
                                       f32_4 %411 = OpImageSampleImplicitLod %409 %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                                      OpStore %407 %412 
                                       f32_3 %414 = OpLoad %407 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_3 %420 = OpFAdd %417 %419 
                                                      OpStore %413 %420 
                                       f32_3 %422 = OpLoad %413 
                                       f32_3 %423 = OpLoad %413 
                                         f32 %424 = OpDot %422 %423 
                                                      OpStore %421 %424 
                                         f32 %425 = OpLoad %421 
                                         f32 %426 = OpExtInst %1 32 %425 
                                                      OpStore %421 %426 
                                         f32 %427 = OpLoad %421 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpLoad %413 
                                       f32_3 %430 = OpFMul %428 %429 
                                                      OpStore %413 %430 
                                       f32_3 %431 = OpLoad %413 
                                       f32_3 %432 = OpLoad %381 
                                         f32 %433 = OpDot %431 %432 
                                                      OpStore %394 %433 
                                         f32 %434 = OpLoad %394 
                                         f32 %435 = OpExtInst %1 43 %434 %174 %27 
                                                      OpStore %394 %435 
                                       f32_3 %436 = OpLoad %248 
                                       f32_3 %437 = OpLoad %381 
                                         f32 %438 = OpDot %436 %437 
                                                      OpStore %58 %438 
                                         f32 %439 = OpLoad %58 
                                         f32 %440 = OpExtInst %1 43 %439 %174 %27 
                                                      OpStore %58 %440 
                                       f32_3 %441 = OpLoad %413 
                                       f32_3 %442 = OpLoad %248 
                                         f32 %443 = OpDot %441 %442 
                                Private f32* %444 = OpAccessChain %248 %22 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %248 %22 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpExtInst %1 43 %446 %174 %27 
                                Private f32* %448 = OpAccessChain %248 %22 
                                                      OpStore %448 %447 
                                       f32_3 %449 = OpLoad %413 
                                       f32_4 %450 = OpLoad %78 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %452 = OpFNegate %451 
                                         f32 %453 = OpDot %449 %452 
                                Private f32* %454 = OpAccessChain %32 %22 
                                                      OpStore %454 %453 
                  read_only Texture2DSampled %457 = OpLoad %456 
                                       f32_2 %458 = OpLoad %50 
                                       f32_4 %459 = OpImageSampleImplicitLod %457 %458 
                                                      OpStore %455 %459 
                  read_only Texture2DSampled %462 = OpLoad %461 
                                       f32_2 %463 = OpLoad %50 
                                       f32_4 %464 = OpImageSampleImplicitLod %462 %463 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %460 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 2 6 
                                                      OpStore %460 %467 
                                Private f32* %469 = OpAccessChain %455 %214 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFNegate %470 
                                         f32 %472 = OpFAdd %471 %27 
                                                      OpStore %468 %472 
                                         f32 %474 = OpLoad %468 
                                         f32 %475 = OpLoad %468 
                                         f32 %476 = OpFMul %474 %475 
                                                      OpStore %473 %476 
                                         f32 %477 = OpLoad %473 
                                         f32 %479 = OpExtInst %1 40 %477 %478 
                                                      OpStore %473 %479 
                                         f32 %481 = OpLoad %473 
                                         f32 %482 = OpLoad %473 
                                         f32 %483 = OpFMul %481 %482 
                                                      OpStore %480 %483 
                                         f32 %484 = OpLoad %394 
                                         f32 %485 = OpLoad %480 
                                         f32 %486 = OpFMul %484 %485 
                                         f32 %487 = OpLoad %394 
                                         f32 %488 = OpFNegate %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %381 %22 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %381 %22 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpLoad %394 
                                         f32 %494 = OpFMul %492 %493 
                                         f32 %495 = OpFAdd %494 %27 
                                                      OpStore %394 %495 
                                         f32 %496 = OpLoad %394 
                                         f32 %497 = OpLoad %394 
                                         f32 %498 = OpFMul %496 %497 
                                         f32 %500 = OpFAdd %498 %499 
                                                      OpStore %394 %500 
                                         f32 %501 = OpLoad %480 
                                         f32 %503 = OpFMul %501 %502 
                                                      OpStore %480 %503 
                                         f32 %504 = OpLoad %480 
                                         f32 %505 = OpLoad %394 
                                         f32 %506 = OpFDiv %504 %505 
                                                      OpStore %394 %506 
                                         f32 %507 = OpLoad %473 
                                         f32 %508 = OpFNegate %507 
                                         f32 %509 = OpFAdd %508 %27 
                                                      OpStore %480 %509 
                                Private f32* %510 = OpAccessChain %32 %22 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpExtInst %1 4 %511 
                                         f32 %513 = OpLoad %480 
                                         f32 %514 = OpFMul %512 %513 
                                         f32 %515 = OpLoad %473 
                                         f32 %516 = OpFAdd %514 %515 
                                Private f32* %517 = OpAccessChain %381 %22 
                                                      OpStore %517 %516 
                                Private f32* %519 = OpAccessChain %248 %22 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpLoad %480 
                                         f32 %522 = OpFMul %520 %521 
                                         f32 %523 = OpLoad %473 
                                         f32 %524 = OpFAdd %522 %523 
                                                      OpStore %518 %524 
                                Private f32* %525 = OpAccessChain %32 %22 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpExtInst %1 4 %526 
                                         f32 %528 = OpLoad %518 
                                         f32 %529 = OpFMul %527 %528 
                                                      OpStore %518 %529 
                                Private f32* %530 = OpAccessChain %32 %22 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpExtInst %1 4 %531 
                                         f32 %533 = OpFNegate %532 
                                         f32 %534 = OpFAdd %533 %27 
                                Private f32* %535 = OpAccessChain %237 %22 
                                                      OpStore %535 %534 
                                Private f32* %536 = OpAccessChain %248 %22 
                                         f32 %537 = OpLoad %536 
                                Private f32* %538 = OpAccessChain %381 %22 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpFMul %537 %539 
                                         f32 %541 = OpLoad %518 
                                         f32 %542 = OpFAdd %540 %541 
                                Private f32* %543 = OpAccessChain %32 %22 
                                                      OpStore %543 %542 
                                Private f32* %544 = OpAccessChain %32 %22 
                                         f32 %545 = OpLoad %544 
                                         f32 %547 = OpFAdd %545 %546 
                                Private f32* %548 = OpAccessChain %32 %22 
                                                      OpStore %548 %547 
                                Private f32* %550 = OpAccessChain %32 %22 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFDiv %549 %551 
                                Private f32* %553 = OpAccessChain %32 %22 
                                                      OpStore %553 %552 
                                         f32 %554 = OpLoad %394 
                                Private f32* %555 = OpAccessChain %32 %22 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFMul %554 %556 
                                Private f32* %558 = OpAccessChain %32 %22 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %32 %22 
                                         f32 %560 = OpLoad %559 
                                         f32 %562 = OpFMul %560 %561 
                                Private f32* %563 = OpAccessChain %32 %22 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %32 %22 
                                         f32 %565 = OpLoad %564 
                                         f32 %567 = OpExtInst %1 40 %565 %566 
                                Private f32* %568 = OpAccessChain %32 %22 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %32 %22 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 31 %570 
                                Private f32* %572 = OpAccessChain %32 %22 
                                                      OpStore %572 %571 
                                Private f32* %573 = OpAccessChain %248 %22 
                                         f32 %574 = OpLoad %573 
                                Private f32* %575 = OpAccessChain %32 %22 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFMul %574 %576 
                                Private f32* %578 = OpAccessChain %32 %22 
                                                      OpStore %578 %577 
                                       f32_4 %580 = OpLoad %455 
                                       f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                       f32_4 %582 = OpLoad %455 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                         f32 %584 = OpDot %581 %583 
                                Private f32* %585 = OpAccessChain %579 %22 
                                                      OpStore %585 %584 
                                Private f32* %587 = OpAccessChain %579 %22 
                                         f32 %588 = OpLoad %587 
                                        bool %589 = OpFOrdNotEqual %588 %174 
                                                      OpStore %586 %589 
                                        bool %591 = OpLoad %586 
                                                      OpSelectionMerge %593 None 
                                                      OpBranchConditional %591 %592 %594 
                                             %592 = OpLabel 
                                                      OpStore %590 %27 
                                                      OpBranch %593 
                                             %594 = OpLabel 
                                                      OpStore %590 %174 
                                                      OpBranch %593 
                                             %593 = OpLabel 
                                         f32 %595 = OpLoad %590 
                                                      OpStore %394 %595 
                                         f32 %596 = OpLoad %394 
                                Private f32* %597 = OpAccessChain %32 %22 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFMul %596 %598 
                                Private f32* %600 = OpAccessChain %32 %22 
                                                      OpStore %600 %599 
                                       f32_4 %601 = OpLoad %85 
                                       f32_3 %602 = OpVectorShuffle %601 %601 0 1 2 
                                       f32_3 %603 = OpLoad %32 
                                       f32_3 %604 = OpVectorShuffle %603 %603 0 0 0 
                                       f32_3 %605 = OpFMul %602 %604 
                                                      OpStore %381 %605 
                                         f32 %606 = OpLoad %58 
                                         f32 %607 = OpFNegate %606 
                                         f32 %608 = OpFAdd %607 %27 
                                Private f32* %609 = OpAccessChain %579 %22 
                                                      OpStore %609 %608 
                                Private f32* %611 = OpAccessChain %579 %22 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %579 %22 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpFMul %612 %614 
                                                      OpStore %610 %615 
                                         f32 %616 = OpLoad %610 
                                         f32 %617 = OpLoad %610 
                                         f32 %618 = OpFMul %616 %617 
                                                      OpStore %610 %618 
                                Private f32* %619 = OpAccessChain %579 %22 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpLoad %610 
                                         f32 %622 = OpFMul %620 %621 
                                Private f32* %623 = OpAccessChain %579 %22 
                                                      OpStore %623 %622 
                                       f32_4 %625 = OpLoad %455 
                                       f32_3 %626 = OpVectorShuffle %625 %625 0 1 2 
                                       f32_3 %627 = OpFNegate %626 
                                       f32_3 %629 = OpFAdd %627 %628 
                                                      OpStore %624 %629 
                                       f32_3 %630 = OpLoad %624 
                                       f32_3 %631 = OpLoad %579 
                                       f32_3 %632 = OpVectorShuffle %631 %631 0 0 0 
                                       f32_3 %633 = OpFMul %630 %632 
                                       f32_4 %634 = OpLoad %455 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFAdd %633 %635 
                                                      OpStore %579 %636 
                                       f32_3 %637 = OpLoad %579 
                                       f32_3 %638 = OpLoad %381 
                                       f32_3 %639 = OpFMul %637 %638 
                                       f32_4 %640 = OpLoad %78 
                                       f32_4 %641 = OpVectorShuffle %640 %639 4 5 6 3 
                                                      OpStore %78 %641 
                                Private f32* %642 = OpAccessChain %237 %22 
                                         f32 %643 = OpLoad %642 
                                Private f32* %644 = OpAccessChain %237 %22 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFMul %643 %645 
                                Private f32* %647 = OpAccessChain %579 %22 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %579 %22 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %579 %22 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                Private f32* %653 = OpAccessChain %579 %22 
                                                      OpStore %653 %652 
                                Private f32* %654 = OpAccessChain %237 %22 
                                         f32 %655 = OpLoad %654 
                                Private f32* %656 = OpAccessChain %579 %22 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFMul %655 %657 
                                Private f32* %659 = OpAccessChain %237 %22 
                                                      OpStore %659 %658 
                                         f32 %660 = OpLoad %58 
                                         f32 %661 = OpLoad %58 
                                         f32 %662 = OpFAdd %660 %661 
                                Private f32* %663 = OpAccessChain %579 %22 
                                                      OpStore %663 %662 
                                         f32 %664 = OpLoad %58 
                                Private f32* %665 = OpAccessChain %579 %22 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFMul %664 %666 
                                Private f32* %668 = OpAccessChain %579 %22 
                                                      OpStore %668 %667 
                                Private f32* %669 = OpAccessChain %579 %22 
                                         f32 %670 = OpLoad %669 
                                         f32 %671 = OpLoad %468 
                                         f32 %672 = OpFMul %670 %671 
                                         f32 %674 = OpFAdd %672 %673 
                                Private f32* %675 = OpAccessChain %579 %22 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %579 %22 
                                         f32 %677 = OpLoad %676 
                                Private f32* %678 = OpAccessChain %237 %22 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFMul %677 %679 
                                         f32 %681 = OpFAdd %680 %27 
                                Private f32* %682 = OpAccessChain %237 %22 
                                                      OpStore %682 %681 
                                Private f32* %683 = OpAccessChain %248 %22 
                                         f32 %684 = OpLoad %683 
                                         f32 %685 = OpFNegate %684 
                                         f32 %686 = OpFAdd %685 %27 
                                                      OpStore %610 %686 
                                         f32 %688 = OpLoad %610 
                                         f32 %689 = OpLoad %610 
                                         f32 %690 = OpFMul %688 %689 
                                                      OpStore %687 %690 
                                         f32 %691 = OpLoad %687 
                                         f32 %692 = OpLoad %687 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %687 %693 
                                         f32 %694 = OpLoad %610 
                                         f32 %695 = OpLoad %687 
                                         f32 %696 = OpFMul %694 %695 
                                                      OpStore %610 %696 
                                Private f32* %697 = OpAccessChain %579 %22 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpLoad %610 
                                         f32 %700 = OpFMul %698 %699 
                                         f32 %701 = OpFAdd %700 %27 
                                Private f32* %702 = OpAccessChain %579 %22 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %237 %22 
                                         f32 %704 = OpLoad %703 
                                Private f32* %705 = OpAccessChain %579 %22 
                                         f32 %706 = OpLoad %705 
                                         f32 %707 = OpFMul %704 %706 
                                Private f32* %708 = OpAccessChain %237 %22 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %248 %22 
                                         f32 %710 = OpLoad %709 
                                Private f32* %711 = OpAccessChain %237 %22 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpFMul %710 %712 
                                Private f32* %714 = OpAccessChain %248 %22 
                                                      OpStore %714 %713 
                                       f32_3 %715 = OpLoad %248 
                                       f32_3 %716 = OpVectorShuffle %715 %715 0 0 0 
                                       f32_4 %717 = OpLoad %85 
                                       f32_3 %718 = OpVectorShuffle %717 %717 0 1 2 
                                       f32_3 %719 = OpFMul %716 %718 
                                                      OpStore %237 %719 
                                       f32_4 %720 = OpLoad %460 
                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 3 
                                       f32_3 %722 = OpLoad %237 
                                       f32_3 %723 = OpFMul %721 %722 
                                       f32_4 %724 = OpLoad %78 
                                       f32_3 %725 = OpVectorShuffle %724 %724 0 1 2 
                                       f32_3 %726 = OpFAdd %723 %725 
                                                      OpStore %248 %726 
                                       f32_3 %727 = OpLoad %248 
                                       f32_3 %728 = OpFNegate %727 
                                       f32_4 %729 = OpLoad %9 
                                       f32_4 %730 = OpVectorShuffle %729 %728 4 5 6 3 
                                                      OpStore %9 %730 
                                Private f32* %731 = OpAccessChain %9 %214 
                                                      OpStore %731 %418 
                                       f32_4 %734 = OpLoad %9 
                                       f32_4 %735 = OpExtInst %1 29 %734 
                                                      OpStore %733 %735 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat16_11;
float u_xlat20;
float u_xlat16_20;
float u_xlat21;
float u_xlat22;
float u_xlat10_22;
bool u_xlatb22;
vec2 u_xlat25;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat33;
float u_xlat10_33;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat30 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat30 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat31 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat10.xyz * vec3(u_xlat31);
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat10_5 = texture(_LightTexture0, u_xlat4.xy, -8.0);
    u_xlatb22 = u_xlat4.z<0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat10_5.w;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat21 = u_xlat22 * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb22 = u_xlat0.x<0.99000001;
    if(u_xlatb22){
        u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
        u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat5.xy = floor(u_xlat5.xy);
        u_xlat4.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat5.xy);
        u_xlat6 = u_xlat4.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat7.xw = u_xlat6.xz * u_xlat6.xz;
        u_xlat25.xy = u_xlat7.xw * vec2(0.5, 0.5) + (-u_xlat4.xy);
        u_xlat6.xz = (-u_xlat4.xy) + vec2(1.0, 1.0);
        u_xlat8.xy = min(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat6.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat6.xz;
        u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + u_xlat6.yw;
        u_xlat8.x = u_xlat25.x;
        u_xlat8.y = u_xlat6.x;
        u_xlat8.z = u_xlat4.x;
        u_xlat8.w = u_xlat7.x;
        u_xlat8 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7.x = u_xlat25.y;
        u_xlat7.y = u_xlat6.z;
        u_xlat7.z = u_xlat4.y;
        u_xlat6 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7 = u_xlat8.ywyw + u_xlat8.xzxz;
        u_xlat9 = u_xlat6.yyww + u_xlat6.xxzz;
        u_xlat4.xy = u_xlat8.yw / u_xlat7.zw;
        u_xlat4.xy = u_xlat4.xy + vec2(-1.5, 0.5);
        u_xlat25.xy = u_xlat6.yw / u_xlat9.yw;
        u_xlat25.xy = u_xlat25.xy + vec2(-1.5, 0.5);
        u_xlat6.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat6.zw = u_xlat25.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat7 = u_xlat7 * u_xlat9;
        u_xlat8 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xzyz;
        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat4.z);
        u_xlat10_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat8.zw,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat33 = u_xlat10_33 * u_xlat7.y;
        u_xlat22 = u_xlat7.x * u_xlat10_22 + u_xlat33;
        u_xlat5 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xwyw;
        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat22 = u_xlat7.z * u_xlat10_33 + u_xlat22;
        vec3 txVec3 = vec3(u_xlat5.zw,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat22 = u_xlat7.w * u_xlat10_33 + u_xlat22;
        u_xlat33 = (-_LightShadowData.x) + 1.0;
        u_xlat22 = u_xlat22 * u_xlat33 + _LightShadowData.x;
    } else {
        u_xlat22 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat22;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat21;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat10.xyz * vec3(u_xlat31) + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, u_xlat16_7.xx);
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat20 = u_xlat20 * u_xlat11;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat11 = -abs(u_xlat30) + 1.0;
    u_xlat21 = u_xlat11 * u_xlat11;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat11 = u_xlat11 * u_xlat21;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat16_20 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_20 = max(u_xlat16_20, 0.00200000009);
    u_xlat16_11 = (-u_xlat16_20) + 1.0;
    u_xlat21 = abs(u_xlat30) * u_xlat16_11 + u_xlat16_20;
    u_xlat11 = u_xlat31 * u_xlat16_11 + u_xlat16_20;
    u_xlat30 = abs(u_xlat30) * u_xlat11;
    u_xlat30 = u_xlat31 * u_xlat21 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-006;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat11 = u_xlat1.x * u_xlat16_20 + (-u_xlat1.x);
    u_xlat1.x = u_xlat11 * u_xlat1.x + 1.0;
    u_xlat16_20 = u_xlat16_20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat20 = u_xlat16_20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-005);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = vec2(u_xlat31) * u_xlat10.xy;
    u_xlat30 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat4.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat31 = u_xlat0.x * u_xlat0.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat0.x = u_xlat0.x * u_xlat31;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 999
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %45 %994 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %27 Location 27 
                                                      OpDecorate %45 Location 45 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %506 DescriptorSet 506 
                                                      OpDecorate %506 Binding 506 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %618 DescriptorSet 618 
                                                      OpDecorate %618 Binding 618 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 DescriptorSet 624 
                                                      OpDecorate %624 Binding 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %629 DescriptorSet 629 
                                                      OpDecorate %629 Binding 629 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %767 RelaxedPrecision 
                                                      OpDecorate %768 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %778 RelaxedPrecision 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %792 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %804 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %848 RelaxedPrecision 
                                                      OpDecorate %849 RelaxedPrecision 
                                                      OpDecorate %854 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %911 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %913 RelaxedPrecision 
                                                      OpDecorate %917 RelaxedPrecision 
                                                      OpDecorate %946 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %948 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %952 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %955 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %959 RelaxedPrecision 
                                                      OpDecorate %960 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %962 RelaxedPrecision 
                                                      OpDecorate %963 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %966 RelaxedPrecision 
                                                      OpDecorate %967 RelaxedPrecision 
                                                      OpDecorate %968 RelaxedPrecision 
                                                      OpDecorate %969 RelaxedPrecision 
                                                      OpDecorate %970 RelaxedPrecision 
                                                      OpDecorate %971 RelaxedPrecision 
                                                      OpDecorate %972 RelaxedPrecision 
                                                      OpDecorate %975 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %980 RelaxedPrecision 
                                                      OpDecorate %981 RelaxedPrecision 
                                                      OpDecorate %994 RelaxedPrecision 
                                                      OpDecorate %994 Location 994 
                                                      OpDecorate %995 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %998 DescriptorSet 998 
                                                      OpDecorate %998 Binding 998 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                                 Input f32_3* %27 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %41 = OpTypeVector %6 2 
                                              %42 = OpTypePointer Private %41 
                               Private f32_2* %43 = OpVariable Private 
                                              %44 = OpTypePointer Input %7 
                                 Input f32_4* %45 = OpVariable Input 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypeSampledImage %52 
                                              %54 = OpTypePointer UniformConstant %53 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 6 
                                         u32 %145 = OpConstant 3 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                Private f32* %164 = OpVariable Private 
                                Private f32* %168 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %178 = OpConstant 9 
                                Private f32* %222 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %223 = OpVariable UniformConstant 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %230 = OpTypeBool 
                                             %231 = OpTypePointer Private %230 
                               Private bool* %232 = OpVariable Private 
                                         f32 %235 = OpConstant 3.674022E-40 
                                Private f32* %237 = OpVariable Private 
                                             %238 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %252 = OpVariable UniformConstant 
                                         i32 %263 = OpConstant 5 
                               Private bool* %275 = OpVariable Private 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         i32 %285 = OpConstant 4 
                              Private f32_4* %314 = OpVariable Private 
                                         i32 %317 = OpConstant 10 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_2 %323 = OpConstantComposite %322 %322 
                              Private f32_4* %344 = OpVariable Private 
                                       f32_4 %347 = OpConstantComposite %322 %69 %322 %69 
                              Private f32_4* %349 = OpVariable Private 
                              Private f32_2* %357 = OpVariable Private 
                                       f32_2 %368 = OpConstantComposite %69 %69 
                              Private f32_4* %372 = OpVariable Private 
                                       f32_2 %375 = OpConstantComposite %235 %235 
                                         f32 %419 = OpConstant 3.674022E-40 
                                         f32 %420 = OpConstant 3.674022E-40 
                                       f32_4 %421 = OpConstantComposite %419 %419 %419 %420 
                              Private f32_4* %439 = OpVariable Private 
                                         f32 %454 = OpConstant 3.674022E-40 
                                       f32_2 %455 = OpConstantComposite %454 %322 
                                             %493 = OpTypePointer Function %10 
                                Private f32* %502 = OpVariable Private 
                                             %503 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %504 = OpTypeSampledImage %503 
                                             %505 = OpTypePointer UniformConstant %504 
 UniformConstant read_only Texture2DSampled* %506 = OpVariable UniformConstant 
                                Private f32* %519 = OpVariable Private 
                                Private f32* %579 = OpVariable Private 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %593 = OpVariable Private 
                                         i32 %610 = OpConstant 8 
                              Private f32_3* %617 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %618 = OpVariable UniformConstant 
                              Private f32_4* %623 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %624 = OpVariable UniformConstant 
                              Private f32_3* %628 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %629 = OpVariable UniformConstant 
                              Private f32_3* %634 = OpVariable Private 
                                         f32 %636 = OpConstant 3.674022E-40 
                                       f32_3 %637 = OpConstantComposite %636 %636 %636 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                              Private f32_4* %642 = OpVariable Private 
                                             %657 = OpTypePointer Uniform %10 
                                         f32 %698 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                Private f32* %752 = OpVariable Private 
                                Private f32* %756 = OpVariable Private 
                                Private f32* %775 = OpVariable Private 
                                Private f32* %796 = OpVariable Private 
                                         f32 %809 = OpConstant 3.674022E-40 
                                Private f32* %812 = OpVariable Private 
                                Private f32* %817 = OpVariable Private 
                                         f32 %841 = OpConstant 3.674022E-40 
                                         f32 %868 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %892 = OpConstant 3.674022E-40 
                                         f32 %897 = OpConstant 3.674022E-40 
                               Private bool* %915 = OpVariable Private 
                              Private f32_3* %946 = OpVariable Private 
                                       f32_3 %964 = OpConstantComposite %69 %69 %69 
                                             %993 = OpTypePointer Output %7 
                               Output f32_4* %994 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %998 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %239 = OpVariable Function 
                             Function f32_3* %494 = OpVariable Function 
                             Function f32_3* %511 = OpVariable Function 
                             Function f32_3* %543 = OpVariable Function 
                             Function f32_3* %561 = OpVariable Function 
                               Function f32* %919 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain %27 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad %27 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %45 
                                        f32_2 %49 = OpVectorShuffle %48 %48 3 3 
                                        f32_2 %50 = OpFDiv %47 %49 
                                                      OpStore %43 %50 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_2 %57 = OpLoad %43 
                                        f32_4 %58 = OpImageSampleImplicitLod %56 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %51 %59 
                                 Uniform f32* %61 = OpAccessChain %19 %60 %32 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %51 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %19 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %51 %68 
                                          f32 %70 = OpLoad %51 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %51 %71 
                                          f32 %73 = OpLoad %51 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %19 %84 %21 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %19 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %19 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %19 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %32 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %32 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %32 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %22 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %51 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %32 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %32 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %19 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %32 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %22 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %32 
                                                      OpStore %154 %153 
                                       f32_4 %156 = OpLoad %72 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 3 
                                       f32_3 %158 = OpFNegate %157 
                              Uniform f32_4* %160 = OpAccessChain %19 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %158 %162 
                                                      OpStore %155 %163 
                                       f32_3 %165 = OpLoad %155 
                                       f32_3 %166 = OpLoad %155 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %164 %167 
                                         f32 %169 = OpLoad %164 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                       f32_3 %171 = OpLoad %155 
                                         f32 %172 = OpLoad %168 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                                                      OpStore %81 %174 
                                       f32_4 %176 = OpLoad %72 
                                       f32_3 %177 = OpVectorShuffle %176 %176 1 1 1 
                              Uniform f32_4* %179 = OpAccessChain %19 %178 %21 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 3 
                                       f32_3 %182 = OpFMul %177 %181 
                                       f32_4 %183 = OpLoad %175 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %175 %184 
                              Uniform f32_4* %185 = OpAccessChain %19 %178 %90 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 3 
                                       f32_4 %188 = OpLoad %72 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 0 0 
                                       f32_3 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %175 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFAdd %190 %192 
                                       f32_4 %194 = OpLoad %175 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %175 %195 
                              Uniform f32_4* %196 = OpAccessChain %19 %178 %60 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 3 
                                       f32_4 %199 = OpLoad %72 
                                       f32_3 %200 = OpVectorShuffle %199 %199 3 3 3 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %175 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFAdd %201 %203 
                                       f32_4 %205 = OpLoad %175 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %175 %206 
                                       f32_4 %207 = OpLoad %175 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_4* %209 = OpAccessChain %19 %178 %84 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 3 
                                       f32_3 %212 = OpFAdd %208 %211 
                                       f32_4 %213 = OpLoad %175 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %175 %214 
                                       f32_4 %215 = OpLoad %175 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 1 
                                       f32_4 %217 = OpLoad %175 
                                       f32_2 %218 = OpVectorShuffle %217 %217 2 2 
                                       f32_2 %219 = OpFDiv %216 %218 
                                       f32_4 %220 = OpLoad %175 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
                                                      OpStore %175 %221 
                  read_only Texture2DSampled %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %175 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_4 %228 = OpImageSampleImplicitLod %224 %226 Bias %7 
                                         f32 %229 = OpCompositeExtract %228 3 
                                                      OpStore %222 %229 
                                Private f32* %233 = OpAccessChain %175 %22 
                                         f32 %234 = OpLoad %233 
                                        bool %236 = OpFOrdLessThan %234 %235 
                                                      OpStore %232 %236 
                                        bool %240 = OpLoad %232 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %243 
                                             %241 = OpLabel 
                                                      OpStore %239 %69 
                                                      OpBranch %242 
                                             %243 = OpLabel 
                                                      OpStore %239 %235 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                         f32 %244 = OpLoad %239 
                                                      OpStore %237 %244 
                                         f32 %245 = OpLoad %222 
                                         f32 %246 = OpLoad %237 
                                         f32 %247 = OpFMul %245 %246 
                                                      OpStore %222 %247 
                                         f32 %248 = OpLoad %164 
                                Uniform f32* %249 = OpAccessChain %19 %159 %145 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                                      OpStore %164 %251 
                  read_only Texture2DSampled %253 = OpLoad %252 
                                         f32 %254 = OpLoad %164 
                                       f32_2 %255 = OpCompositeConstruct %254 %254 
                                       f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                                         f32 %257 = OpCompositeExtract %256 3 
                                                      OpStore %164 %257 
                                         f32 %258 = OpLoad %164 
                                         f32 %259 = OpLoad %222 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %164 %260 
                                Private f32* %261 = OpAccessChain %9 %32 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %19 %263 %22 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %19 %263 %145 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %9 %32 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %9 %32 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %235 %69 
                                Private f32* %274 = OpAccessChain %9 %32 
                                                      OpStore %274 %273 
                                Private f32* %276 = OpAccessChain %9 %32 
                                         f32 %277 = OpLoad %276 
                                        bool %279 = OpFOrdLessThan %277 %278 
                                                      OpStore %275 %279 
                                        bool %280 = OpLoad %275 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %592 
                                             %281 = OpLabel 
                                       f32_4 %283 = OpLoad %72 
                                       f32_4 %284 = OpVectorShuffle %283 %283 1 1 1 1 
                              Uniform f32_4* %286 = OpAccessChain %19 %285 %21 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFMul %284 %287 
                                                      OpStore %175 %288 
                              Uniform f32_4* %289 = OpAccessChain %19 %285 %90 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpLoad %72 
                                       f32_4 %292 = OpVectorShuffle %291 %291 0 0 0 0 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %175 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %175 %295 
                              Uniform f32_4* %296 = OpAccessChain %19 %285 %60 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %72 
                                       f32_4 %299 = OpVectorShuffle %298 %298 3 3 3 3 
                                       f32_4 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %175 
                                       f32_4 %302 = OpFAdd %300 %301 
                                                      OpStore %175 %302 
                                       f32_4 %303 = OpLoad %175 
                              Uniform f32_4* %304 = OpAccessChain %19 %285 %84 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpFAdd %303 %305 
                                                      OpStore %175 %306 
                                       f32_4 %307 = OpLoad %175 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %175 
                                       f32_3 %310 = OpVectorShuffle %309 %309 3 3 3 
                                       f32_3 %311 = OpFDiv %308 %310 
                                       f32_4 %312 = OpLoad %175 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %175 %313 
                                       f32_4 %315 = OpLoad %175 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                              Uniform f32_4* %318 = OpAccessChain %19 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_2 %320 = OpVectorShuffle %319 %319 2 3 
                                       f32_2 %321 = OpFMul %316 %320 
                                       f32_2 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %314 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 2 3 
                                                      OpStore %314 %326 
                                       f32_4 %327 = OpLoad %314 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_2 %329 = OpExtInst %1 8 %328 
                                       f32_4 %330 = OpLoad %314 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                                      OpStore %314 %331 
                                       f32_4 %332 = OpLoad %175 
                                       f32_2 %333 = OpVectorShuffle %332 %332 0 1 
                              Uniform f32_4* %334 = OpAccessChain %19 %317 
                                       f32_4 %335 = OpLoad %334 
                                       f32_2 %336 = OpVectorShuffle %335 %335 2 3 
                                       f32_2 %337 = OpFMul %333 %336 
                                       f32_4 %338 = OpLoad %314 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 1 
                                       f32_2 %340 = OpFNegate %339 
                                       f32_2 %341 = OpFAdd %337 %340 
                                       f32_4 %342 = OpLoad %175 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %175 %343 
                                       f32_4 %345 = OpLoad %175 
                                       f32_4 %346 = OpVectorShuffle %345 %345 0 0 1 1 
                                       f32_4 %348 = OpFAdd %346 %347 
                                                      OpStore %344 %348 
                                       f32_4 %350 = OpLoad %344 
                                       f32_2 %351 = OpVectorShuffle %350 %350 0 2 
                                       f32_4 %352 = OpLoad %344 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 2 
                                       f32_2 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %349 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 1 2 5 
                                                      OpStore %349 %356 
                                       f32_4 %358 = OpLoad %349 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 3 
                                       f32_2 %360 = OpFMul %359 %323 
                                       f32_4 %361 = OpLoad %175 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 1 
                                       f32_2 %363 = OpFNegate %362 
                                       f32_2 %364 = OpFAdd %360 %363 
                                                      OpStore %357 %364 
                                       f32_4 %365 = OpLoad %175 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 1 
                                       f32_2 %367 = OpFNegate %366 
                                       f32_2 %369 = OpFAdd %367 %368 
                                       f32_4 %370 = OpLoad %344 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 1 5 3 
                                                      OpStore %344 %371 
                                       f32_4 %373 = OpLoad %175 
                                       f32_2 %374 = OpVectorShuffle %373 %373 0 1 
                                       f32_2 %376 = OpExtInst %1 37 %374 %375 
                                       f32_4 %377 = OpLoad %372 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 2 3 
                                                      OpStore %372 %378 
                                       f32_4 %379 = OpLoad %372 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %372 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %344 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 2 
                                       f32_2 %387 = OpFAdd %384 %386 
                                       f32_4 %388 = OpLoad %344 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 1 5 3 
                                                      OpStore %344 %389 
                                       f32_4 %390 = OpLoad %175 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_2 %392 = OpExtInst %1 40 %391 %375 
                                       f32_4 %393 = OpLoad %175 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 2 3 
                                                      OpStore %175 %394 
                                       f32_4 %395 = OpLoad %175 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_2 %397 = OpFNegate %396 
                                       f32_4 %398 = OpLoad %175 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_2 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %344 
                                       f32_2 %402 = OpVectorShuffle %401 %401 1 3 
                                       f32_2 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %175 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 2 3 
                                                      OpStore %175 %405 
                                Private f32* %406 = OpAccessChain %357 %32 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %372 %32 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %344 %32 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %372 %65 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %175 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %372 %22 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %349 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %372 %145 
                                                      OpStore %417 %416 
                                       f32_4 %418 = OpLoad %372 
                                       f32_4 %422 = OpFMul %418 %421 
                                                      OpStore %372 %422 
                                Private f32* %423 = OpAccessChain %357 %65 
                                         f32 %424 = OpLoad %423 
                                Private f32* %425 = OpAccessChain %349 %32 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %344 %22 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %349 %65 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %175 %65 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %349 %22 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %349 
                                       f32_4 %433 = OpFMul %432 %421 
                                                      OpStore %344 %433 
                                       f32_4 %434 = OpLoad %372 
                                       f32_4 %435 = OpVectorShuffle %434 %434 1 3 1 3 
                                       f32_4 %436 = OpLoad %372 
                                       f32_4 %437 = OpVectorShuffle %436 %436 0 2 0 2 
                                       f32_4 %438 = OpFAdd %435 %437 
                                                      OpStore %349 %438 
                                       f32_4 %440 = OpLoad %344 
                                       f32_4 %441 = OpVectorShuffle %440 %440 1 1 3 3 
                                       f32_4 %442 = OpLoad %344 
                                       f32_4 %443 = OpVectorShuffle %442 %442 0 0 2 2 
                                       f32_4 %444 = OpFAdd %441 %443 
                                                      OpStore %439 %444 
                                       f32_4 %445 = OpLoad %372 
                                       f32_2 %446 = OpVectorShuffle %445 %445 1 3 
                                       f32_4 %447 = OpLoad %349 
                                       f32_2 %448 = OpVectorShuffle %447 %447 2 3 
                                       f32_2 %449 = OpFDiv %446 %448 
                                       f32_4 %450 = OpLoad %175 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
                                                      OpStore %175 %451 
                                       f32_4 %452 = OpLoad %175 
                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
                                       f32_2 %456 = OpFAdd %453 %455 
                                       f32_4 %457 = OpLoad %175 
                                       f32_4 %458 = OpVectorShuffle %457 %456 4 5 2 3 
                                                      OpStore %175 %458 
                                       f32_4 %459 = OpLoad %344 
                                       f32_2 %460 = OpVectorShuffle %459 %459 1 3 
                                       f32_4 %461 = OpLoad %439 
                                       f32_2 %462 = OpVectorShuffle %461 %461 1 3 
                                       f32_2 %463 = OpFDiv %460 %462 
                                                      OpStore %357 %463 
                                       f32_2 %464 = OpLoad %357 
                                       f32_2 %465 = OpFAdd %464 %455 
                                                      OpStore %357 %465 
                                       f32_4 %466 = OpLoad %175 
                                       f32_2 %467 = OpVectorShuffle %466 %466 0 1 
                              Uniform f32_4* %468 = OpAccessChain %19 %317 
                                       f32_4 %469 = OpLoad %468 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 0 
                                       f32_2 %471 = OpFMul %467 %470 
                                       f32_4 %472 = OpLoad %344 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 2 3 
                                                      OpStore %344 %473 
                                       f32_2 %474 = OpLoad %357 
                              Uniform f32_4* %475 = OpAccessChain %19 %317 
                                       f32_4 %476 = OpLoad %475 
                                       f32_2 %477 = OpVectorShuffle %476 %476 1 1 
                                       f32_2 %478 = OpFMul %474 %477 
                                       f32_4 %479 = OpLoad %344 
                                       f32_4 %480 = OpVectorShuffle %479 %478 0 1 4 5 
                                                      OpStore %344 %480 
                                       f32_4 %481 = OpLoad %349 
                                       f32_4 %482 = OpLoad %439 
                                       f32_4 %483 = OpFMul %481 %482 
                                                      OpStore %349 %483 
                                       f32_4 %484 = OpLoad %314 
                                       f32_4 %485 = OpVectorShuffle %484 %484 0 1 0 1 
                              Uniform f32_4* %486 = OpAccessChain %19 %317 
                                       f32_4 %487 = OpLoad %486 
                                       f32_4 %488 = OpVectorShuffle %487 %487 0 1 0 1 
                                       f32_4 %489 = OpFMul %485 %488 
                                       f32_4 %490 = OpLoad %344 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 2 1 2 
                                       f32_4 %492 = OpFAdd %489 %491 
                                                      OpStore %372 %492 
                                       f32_4 %495 = OpLoad %372 
                                       f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                Private f32* %497 = OpAccessChain %175 %22 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpCompositeExtract %496 0 
                                         f32 %500 = OpCompositeExtract %496 1 
                                       f32_3 %501 = OpCompositeConstruct %499 %500 %498 
                                                      OpStore %494 %501 
                  read_only Texture2DSampled %507 = OpLoad %506 
                                       f32_3 %508 = OpLoad %494 
                                         f32 %509 = OpCompositeExtract %508 2 
                                         f32 %510 = OpImageSampleDrefExplicitLod %507 %508 %509 Lod %6 
                                                      OpStore %502 %510 
                                       f32_4 %512 = OpLoad %372 
                                       f32_2 %513 = OpVectorShuffle %512 %512 2 3 
                                Private f32* %514 = OpAccessChain %175 %22 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpCompositeExtract %513 0 
                                         f32 %517 = OpCompositeExtract %513 1 
                                       f32_3 %518 = OpCompositeConstruct %516 %517 %515 
                                                      OpStore %511 %518 
                  read_only Texture2DSampled %520 = OpLoad %506 
                                       f32_3 %521 = OpLoad %511 
                                         f32 %522 = OpCompositeExtract %521 2 
                                         f32 %523 = OpImageSampleDrefExplicitLod %520 %521 %522 Lod %6 
                                                      OpStore %519 %523 
                                         f32 %524 = OpLoad %519 
                                Private f32* %525 = OpAccessChain %349 %65 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFMul %524 %526 
                                                      OpStore %237 %527 
                                Private f32* %528 = OpAccessChain %349 %32 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpLoad %502 
                                         f32 %531 = OpFMul %529 %530 
                                         f32 %532 = OpLoad %237 
                                         f32 %533 = OpFAdd %531 %532 
                                                      OpStore %222 %533 
                                       f32_4 %534 = OpLoad %314 
                                       f32_4 %535 = OpVectorShuffle %534 %534 0 1 0 1 
                              Uniform f32_4* %536 = OpAccessChain %19 %317 
                                       f32_4 %537 = OpLoad %536 
                                       f32_4 %538 = OpVectorShuffle %537 %537 0 1 0 1 
                                       f32_4 %539 = OpFMul %535 %538 
                                       f32_4 %540 = OpLoad %344 
                                       f32_4 %541 = OpVectorShuffle %540 %540 0 3 1 3 
                                       f32_4 %542 = OpFAdd %539 %541 
                                                      OpStore %314 %542 
                                       f32_4 %544 = OpLoad %314 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                                Private f32* %546 = OpAccessChain %175 %22 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpCompositeExtract %545 0 
                                         f32 %549 = OpCompositeExtract %545 1 
                                       f32_3 %550 = OpCompositeConstruct %548 %549 %547 
                                                      OpStore %543 %550 
                  read_only Texture2DSampled %551 = OpLoad %506 
                                       f32_3 %552 = OpLoad %543 
                                         f32 %553 = OpCompositeExtract %552 2 
                                         f32 %554 = OpImageSampleDrefExplicitLod %551 %552 %553 Lod %6 
                                                      OpStore %519 %554 
                                Private f32* %555 = OpAccessChain %349 %22 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpLoad %519 
                                         f32 %558 = OpFMul %556 %557 
                                         f32 %559 = OpLoad %222 
                                         f32 %560 = OpFAdd %558 %559 
                                                      OpStore %222 %560 
                                       f32_4 %562 = OpLoad %314 
                                       f32_2 %563 = OpVectorShuffle %562 %562 2 3 
                                Private f32* %564 = OpAccessChain %175 %22 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpCompositeExtract %563 0 
                                         f32 %567 = OpCompositeExtract %563 1 
                                       f32_3 %568 = OpCompositeConstruct %566 %567 %565 
                                                      OpStore %561 %568 
                  read_only Texture2DSampled %569 = OpLoad %506 
                                       f32_3 %570 = OpLoad %561 
                                         f32 %571 = OpCompositeExtract %570 2 
                                         f32 %572 = OpImageSampleDrefExplicitLod %569 %570 %571 Lod %6 
                                                      OpStore %519 %572 
                                Private f32* %573 = OpAccessChain %349 %145 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpLoad %519 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpLoad %222 
                                         f32 %578 = OpFAdd %576 %577 
                                                      OpStore %222 %578 
                                Uniform f32* %580 = OpAccessChain %19 %263 %32 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFNegate %581 
                                         f32 %583 = OpFAdd %582 %69 
                                                      OpStore %579 %583 
                                         f32 %584 = OpLoad %222 
                                         f32 %585 = OpLoad %579 
                                         f32 %586 = OpFMul %584 %585 
                                Uniform f32* %587 = OpAccessChain %19 %263 %32 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                                      OpStore %222 %589 
                                         f32 %591 = OpLoad %222 
                                                      OpStore %590 %591 
                                                      OpBranch %282 
                                             %592 = OpLabel 
                                                      OpStore %590 %69 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                Private f32* %594 = OpAccessChain %9 %32 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpFAdd %595 %596 
                                Private f32* %598 = OpAccessChain %593 %32 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %593 %32 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %235 %69 
                                Private f32* %602 = OpAccessChain %593 %32 
                                                      OpStore %602 %601 
                                         f32 %603 = OpLoad %164 
                                Private f32* %604 = OpAccessChain %593 %32 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFMul %603 %605 
                                Private f32* %607 = OpAccessChain %9 %32 
                                                      OpStore %607 %606 
                                       f32_4 %608 = OpLoad %9 
                                       f32_3 %609 = OpVectorShuffle %608 %608 0 0 0 
                              Uniform f32_4* %611 = OpAccessChain %19 %610 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                                       f32_3 %614 = OpFMul %609 %613 
                                       f32_4 %615 = OpLoad %175 
                                       f32_4 %616 = OpVectorShuffle %615 %614 4 5 6 3 
                                                      OpStore %175 %616 
                  read_only Texture2DSampled %619 = OpLoad %618 
                                       f32_2 %620 = OpLoad %43 
                                       f32_4 %621 = OpImageSampleImplicitLod %619 %620 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                                      OpStore %617 %622 
                  read_only Texture2DSampled %625 = OpLoad %624 
                                       f32_2 %626 = OpLoad %43 
                                       f32_4 %627 = OpImageSampleImplicitLod %625 %626 
                                                      OpStore %623 %627 
                  read_only Texture2DSampled %630 = OpLoad %629 
                                       f32_2 %631 = OpLoad %43 
                                       f32_4 %632 = OpImageSampleImplicitLod %630 %631 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 2 
                                                      OpStore %628 %633 
                                       f32_3 %635 = OpLoad %628 
                                       f32_3 %638 = OpFMul %635 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %634 %641 
                                       f32_3 %643 = OpLoad %634 
                                       f32_3 %644 = OpLoad %634 
                                         f32 %645 = OpDot %643 %644 
                                Private f32* %646 = OpAccessChain %642 %32 
                                                      OpStore %646 %645 
                                Private f32* %647 = OpAccessChain %642 %32 
                                         f32 %648 = OpLoad %647 
                                         f32 %649 = OpExtInst %1 32 %648 
                                Private f32* %650 = OpAccessChain %642 %32 
                                                      OpStore %650 %649 
                                       f32_4 %651 = OpLoad %642 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpLoad %634 
                                       f32_3 %654 = OpFMul %652 %653 
                                                      OpStore %634 %654 
                                       f32_4 %655 = OpLoad %72 
                                       f32_3 %656 = OpVectorShuffle %655 %655 0 1 3 
                              Uniform f32_3* %658 = OpAccessChain %19 %90 
                                       f32_3 %659 = OpLoad %658 
                                       f32_3 %660 = OpFNegate %659 
                                       f32_3 %661 = OpFAdd %656 %660 
                                       f32_4 %662 = OpLoad %349 
                                       f32_4 %663 = OpVectorShuffle %662 %661 4 5 6 3 
                                                      OpStore %349 %663 
                                       f32_4 %664 = OpLoad %349 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_4 %666 = OpLoad %349 
                                       f32_3 %667 = OpVectorShuffle %666 %666 0 1 2 
                                         f32 %668 = OpDot %665 %667 
                                Private f32* %669 = OpAccessChain %9 %32 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %9 %32 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpExtInst %1 32 %671 
                                Private f32* %673 = OpAccessChain %9 %32 
                                                      OpStore %673 %672 
                                       f32_4 %674 = OpLoad %9 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 0 0 
                                       f32_4 %676 = OpLoad %349 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 2 
                                       f32_3 %678 = OpFMul %675 %677 
                                       f32_4 %679 = OpLoad %349 
                                       f32_4 %680 = OpVectorShuffle %679 %678 4 5 6 3 
                                                      OpStore %349 %680 
                                Private f32* %681 = OpAccessChain %623 %145 
                                         f32 %682 = OpLoad %681 
                                         f32 %683 = OpFNegate %682 
                                         f32 %684 = OpFAdd %683 %69 
                                Private f32* %685 = OpAccessChain %642 %32 
                                                      OpStore %685 %684 
                                       f32_3 %686 = OpLoad %155 
                                         f32 %687 = OpLoad %168 
                                       f32_3 %688 = OpCompositeConstruct %687 %687 %687 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_4 %690 = OpLoad %349 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                                       f32_3 %692 = OpFNegate %691 
                                       f32_3 %693 = OpFAdd %689 %692 
                                                      OpStore %155 %693 
                                       f32_3 %694 = OpLoad %155 
                                       f32_3 %695 = OpLoad %155 
                                         f32 %696 = OpDot %694 %695 
                                                      OpStore %168 %696 
                                         f32 %697 = OpLoad %168 
                                         f32 %699 = OpExtInst %1 40 %697 %698 
                                                      OpStore %168 %699 
                                         f32 %700 = OpLoad %168 
                                         f32 %701 = OpExtInst %1 32 %700 
                                                      OpStore %168 %701 
                                       f32_3 %702 = OpLoad %155 
                                         f32 %703 = OpLoad %168 
                                       f32_3 %704 = OpCompositeConstruct %703 %703 %703 
                                       f32_3 %705 = OpFMul %702 %704 
                                                      OpStore %155 %705 
                                       f32_3 %706 = OpLoad %634 
                                       f32_4 %707 = OpLoad %349 
                                       f32_3 %708 = OpVectorShuffle %707 %707 0 1 2 
                                       f32_3 %709 = OpFNegate %708 
                                         f32 %710 = OpDot %706 %709 
                                                      OpStore %168 %710 
                                       f32_3 %711 = OpLoad %634 
                                       f32_3 %712 = OpLoad %81 
                                         f32 %713 = OpDot %711 %712 
                                                      OpStore %237 %713 
                                         f32 %714 = OpLoad %237 
                                         f32 %715 = OpExtInst %1 43 %714 %235 %69 
                                                      OpStore %237 %715 
                                       f32_3 %716 = OpLoad %634 
                                       f32_3 %717 = OpLoad %155 
                                         f32 %718 = OpDot %716 %717 
                                Private f32* %719 = OpAccessChain %43 %32 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %43 %32 
                                         f32 %721 = OpLoad %720 
                                         f32 %722 = OpExtInst %1 43 %721 %235 %69 
                                Private f32* %723 = OpAccessChain %43 %32 
                                                      OpStore %723 %722 
                                       f32_3 %724 = OpLoad %81 
                                       f32_3 %725 = OpLoad %155 
                                         f32 %726 = OpDot %724 %725 
                                Private f32* %727 = OpAccessChain %155 %32 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %155 %32 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpExtInst %1 43 %729 %235 %69 
                                Private f32* %731 = OpAccessChain %155 %32 
                                                      OpStore %731 %730 
                                Private f32* %732 = OpAccessChain %155 %32 
                                         f32 %733 = OpLoad %732 
                                Private f32* %734 = OpAccessChain %155 %32 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpFAdd %733 %735 
                                Private f32* %737 = OpAccessChain %593 %32 
                                                      OpStore %737 %736 
                                Private f32* %738 = OpAccessChain %155 %32 
                                         f32 %739 = OpLoad %738 
                                Private f32* %740 = OpAccessChain %593 %32 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpFMul %739 %741 
                                Private f32* %743 = OpAccessChain %593 %32 
                                                      OpStore %743 %742 
                                Private f32* %744 = OpAccessChain %593 %32 
                                         f32 %745 = OpLoad %744 
                                Private f32* %746 = OpAccessChain %642 %32 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpFMul %745 %747 
                                         f32 %750 = OpFAdd %748 %749 
                                Private f32* %751 = OpAccessChain %593 %32 
                                                      OpStore %751 %750 
                                         f32 %753 = OpLoad %237 
                                         f32 %754 = OpFNegate %753 
                                         f32 %755 = OpFAdd %754 %69 
                                                      OpStore %752 %755 
                                         f32 %757 = OpLoad %752 
                                         f32 %758 = OpLoad %752 
                                         f32 %759 = OpFMul %757 %758 
                                                      OpStore %756 %759 
                                         f32 %760 = OpLoad %756 
                                         f32 %761 = OpLoad %756 
                                         f32 %762 = OpFMul %760 %761 
                                                      OpStore %756 %762 
                                         f32 %763 = OpLoad %752 
                                         f32 %764 = OpLoad %756 
                                         f32 %765 = OpFMul %763 %764 
                                                      OpStore %752 %765 
                                Private f32* %766 = OpAccessChain %593 %32 
                                         f32 %767 = OpLoad %766 
                                         f32 %768 = OpLoad %752 
                                         f32 %769 = OpFMul %767 %768 
                                         f32 %770 = OpFAdd %769 %69 
                                                      OpStore %752 %770 
                                         f32 %771 = OpLoad %168 
                                         f32 %772 = OpExtInst %1 4 %771 
                                         f32 %773 = OpFNegate %772 
                                         f32 %774 = OpFAdd %773 %69 
                                                      OpStore %756 %774 
                                         f32 %776 = OpLoad %756 
                                         f32 %777 = OpLoad %756 
                                         f32 %778 = OpFMul %776 %777 
                                                      OpStore %775 %778 
                                         f32 %779 = OpLoad %775 
                                         f32 %780 = OpLoad %775 
                                         f32 %781 = OpFMul %779 %780 
                                                      OpStore %775 %781 
                                         f32 %782 = OpLoad %756 
                                         f32 %783 = OpLoad %775 
                                         f32 %784 = OpFMul %782 %783 
                                                      OpStore %756 %784 
                                Private f32* %785 = OpAccessChain %593 %32 
                                         f32 %786 = OpLoad %785 
                                         f32 %787 = OpLoad %756 
                                         f32 %788 = OpFMul %786 %787 
                                         f32 %789 = OpFAdd %788 %69 
                                Private f32* %790 = OpAccessChain %593 %32 
                                                      OpStore %790 %789 
                                Private f32* %791 = OpAccessChain %593 %32 
                                         f32 %792 = OpLoad %791 
                                         f32 %793 = OpLoad %752 
                                         f32 %794 = OpFMul %792 %793 
                                Private f32* %795 = OpAccessChain %593 %32 
                                                      OpStore %795 %794 
                                         f32 %797 = OpLoad %237 
                                Private f32* %798 = OpAccessChain %593 %32 
                                         f32 %799 = OpLoad %798 
                                         f32 %800 = OpFMul %797 %799 
                                                      OpStore %796 %800 
                                Private f32* %801 = OpAccessChain %642 %32 
                                         f32 %802 = OpLoad %801 
                                Private f32* %803 = OpAccessChain %642 %32 
                                         f32 %804 = OpLoad %803 
                                         f32 %805 = OpFMul %802 %804 
                                Private f32* %806 = OpAccessChain %642 %32 
                                                      OpStore %806 %805 
                                Private f32* %807 = OpAccessChain %642 %32 
                                         f32 %808 = OpLoad %807 
                                         f32 %810 = OpExtInst %1 40 %808 %809 
                                Private f32* %811 = OpAccessChain %642 %32 
                                                      OpStore %811 %810 
                                Private f32* %813 = OpAccessChain %642 %32 
                                         f32 %814 = OpLoad %813 
                                         f32 %815 = OpFNegate %814 
                                         f32 %816 = OpFAdd %815 %69 
                                                      OpStore %812 %816 
                                         f32 %818 = OpLoad %168 
                                         f32 %819 = OpExtInst %1 4 %818 
                                         f32 %820 = OpLoad %812 
                                         f32 %821 = OpFMul %819 %820 
                                Private f32* %822 = OpAccessChain %642 %32 
                                         f32 %823 = OpLoad %822 
                                         f32 %824 = OpFAdd %821 %823 
                                                      OpStore %817 %824 
                                         f32 %825 = OpLoad %237 
                                         f32 %826 = OpLoad %812 
                                         f32 %827 = OpFMul %825 %826 
                                Private f32* %828 = OpAccessChain %642 %32 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpFAdd %827 %829 
                                                      OpStore %51 %830 
                                         f32 %831 = OpLoad %51 
                                         f32 %832 = OpLoad %168 
                                         f32 %833 = OpExtInst %1 4 %832 
                                         f32 %834 = OpFMul %831 %833 
                                                      OpStore %51 %834 
                                         f32 %835 = OpLoad %237 
                                         f32 %836 = OpLoad %817 
                                         f32 %837 = OpFMul %835 %836 
                                         f32 %838 = OpLoad %51 
                                         f32 %839 = OpFAdd %837 %838 
                                                      OpStore %51 %839 
                                         f32 %840 = OpLoad %51 
                                         f32 %842 = OpFAdd %840 %841 
                                                      OpStore %51 %842 
                                         f32 %843 = OpLoad %51 
                                         f32 %844 = OpFDiv %322 %843 
                                                      OpStore %51 %844 
                                Private f32* %845 = OpAccessChain %642 %32 
                                         f32 %846 = OpLoad %845 
                                Private f32* %847 = OpAccessChain %642 %32 
                                         f32 %848 = OpLoad %847 
                                         f32 %849 = OpFMul %846 %848 
                                Private f32* %850 = OpAccessChain %642 %32 
                                                      OpStore %850 %849 
                                Private f32* %851 = OpAccessChain %43 %32 
                                         f32 %852 = OpLoad %851 
                                Private f32* %853 = OpAccessChain %642 %32 
                                         f32 %854 = OpLoad %853 
                                         f32 %855 = OpFMul %852 %854 
                                Private f32* %856 = OpAccessChain %43 %32 
                                         f32 %857 = OpLoad %856 
                                         f32 %858 = OpFNegate %857 
                                         f32 %859 = OpFAdd %855 %858 
                                                      OpStore %817 %859 
                                         f32 %860 = OpLoad %817 
                                Private f32* %861 = OpAccessChain %43 %32 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFMul %860 %862 
                                         f32 %864 = OpFAdd %863 %69 
                                Private f32* %865 = OpAccessChain %43 %32 
                                                      OpStore %865 %864 
                                Private f32* %866 = OpAccessChain %642 %32 
                                         f32 %867 = OpLoad %866 
                                         f32 %869 = OpFMul %867 %868 
                                Private f32* %870 = OpAccessChain %642 %32 
                                                      OpStore %870 %869 
                                Private f32* %871 = OpAccessChain %43 %32 
                                         f32 %872 = OpLoad %871 
                                Private f32* %873 = OpAccessChain %43 %32 
                                         f32 %874 = OpLoad %873 
                                         f32 %875 = OpFMul %872 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                Private f32* %878 = OpAccessChain %43 %32 
                                                      OpStore %878 %877 
                                Private f32* %879 = OpAccessChain %642 %32 
                                         f32 %880 = OpLoad %879 
                                Private f32* %881 = OpAccessChain %43 %32 
                                         f32 %882 = OpLoad %881 
                                         f32 %883 = OpFDiv %880 %882 
                                Private f32* %884 = OpAccessChain %9 %32 
                                                      OpStore %884 %883 
                                Private f32* %885 = OpAccessChain %9 %32 
                                         f32 %886 = OpLoad %885 
                                         f32 %887 = OpLoad %51 
                                         f32 %888 = OpFMul %886 %887 
                                Private f32* %889 = OpAccessChain %9 %32 
                                                      OpStore %889 %888 
                                Private f32* %890 = OpAccessChain %9 %32 
                                         f32 %891 = OpLoad %890 
                                         f32 %893 = OpFMul %891 %892 
                                Private f32* %894 = OpAccessChain %9 %32 
                                                      OpStore %894 %893 
                                Private f32* %895 = OpAccessChain %9 %32 
                                         f32 %896 = OpLoad %895 
                                         f32 %898 = OpExtInst %1 40 %896 %897 
                                Private f32* %899 = OpAccessChain %9 %32 
                                                      OpStore %899 %898 
                                Private f32* %900 = OpAccessChain %9 %32 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpExtInst %1 31 %901 
                                Private f32* %903 = OpAccessChain %9 %32 
                                                      OpStore %903 %902 
                                         f32 %904 = OpLoad %237 
                                Private f32* %905 = OpAccessChain %9 %32 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFMul %904 %906 
                                Private f32* %908 = OpAccessChain %9 %32 
                                                      OpStore %908 %907 
                                       f32_4 %909 = OpLoad %623 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                       f32_4 %911 = OpLoad %623 
                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
                                         f32 %913 = OpDot %910 %912 
                                Private f32* %914 = OpAccessChain %593 %32 
                                                      OpStore %914 %913 
                                Private f32* %916 = OpAccessChain %593 %32 
                                         f32 %917 = OpLoad %916 
                                        bool %918 = OpFOrdNotEqual %917 %235 
                                                      OpStore %915 %918 
                                        bool %920 = OpLoad %915 
                                                      OpSelectionMerge %922 None 
                                                      OpBranchConditional %920 %921 %923 
                                             %921 = OpLabel 
                                                      OpStore %919 %69 
                                                      OpBranch %922 
                                             %923 = OpLabel 
                                                      OpStore %919 %235 
                                                      OpBranch %922 
                                             %922 = OpLabel 
                                         f32 %924 = OpLoad %919 
                                                      OpStore %51 %924 
                                         f32 %925 = OpLoad %51 
                                Private f32* %926 = OpAccessChain %9 %32 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpFMul %925 %927 
                                Private f32* %929 = OpAccessChain %9 %32 
                                                      OpStore %929 %928 
                                         f32 %930 = OpLoad %796 
                                       f32_3 %931 = OpCompositeConstruct %930 %930 %930 
                                       f32_4 %932 = OpLoad %175 
                                       f32_3 %933 = OpVectorShuffle %932 %932 0 1 2 
                                       f32_3 %934 = OpFMul %931 %933 
                                                      OpStore %593 %934 
                                       f32_4 %935 = OpLoad %175 
                                       f32_3 %936 = OpVectorShuffle %935 %935 0 1 2 
                                       f32_4 %937 = OpLoad %9 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 0 0 
                                       f32_3 %939 = OpFMul %936 %938 
                                       f32_4 %940 = OpLoad %9 
                                       f32_4 %941 = OpVectorShuffle %940 %939 4 1 5 6 
                                                      OpStore %9 %941 
                                Private f32* %942 = OpAccessChain %155 %32 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFNegate %943 
                                         f32 %945 = OpFAdd %944 %69 
                                                      OpStore %775 %945 
                                         f32 %947 = OpLoad %775 
                                         f32 %948 = OpLoad %775 
                                         f32 %949 = OpFMul %947 %948 
                                Private f32* %950 = OpAccessChain %946 %32 
                                                      OpStore %950 %949 
                                Private f32* %951 = OpAccessChain %946 %32 
                                         f32 %952 = OpLoad %951 
                                Private f32* %953 = OpAccessChain %946 %32 
                                         f32 %954 = OpLoad %953 
                                         f32 %955 = OpFMul %952 %954 
                                Private f32* %956 = OpAccessChain %946 %32 
                                                      OpStore %956 %955 
                                         f32 %957 = OpLoad %775 
                                Private f32* %958 = OpAccessChain %946 %32 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFMul %957 %959 
                                                      OpStore %775 %960 
                                       f32_4 %961 = OpLoad %623 
                                       f32_3 %962 = OpVectorShuffle %961 %961 0 1 2 
                                       f32_3 %963 = OpFNegate %962 
                                       f32_3 %965 = OpFAdd %963 %964 
                                                      OpStore %946 %965 
                                       f32_3 %966 = OpLoad %946 
                                         f32 %967 = OpLoad %775 
                                       f32_3 %968 = OpCompositeConstruct %967 %967 %967 
                                       f32_3 %969 = OpFMul %966 %968 
                                       f32_4 %970 = OpLoad %623 
                                       f32_3 %971 = OpVectorShuffle %970 %970 0 1 2 
                                       f32_3 %972 = OpFAdd %969 %971 
                                                      OpStore %946 %972 
                                       f32_4 %973 = OpLoad %9 
                                       f32_3 %974 = OpVectorShuffle %973 %973 0 2 3 
                                       f32_3 %975 = OpLoad %946 
                                       f32_3 %976 = OpFMul %974 %975 
                                       f32_4 %977 = OpLoad %9 
                                       f32_4 %978 = OpVectorShuffle %977 %976 4 5 6 3 
                                                      OpStore %9 %978 
                                       f32_3 %979 = OpLoad %617 
                                       f32_3 %980 = OpLoad %593 
                                       f32_3 %981 = OpFMul %979 %980 
                                       f32_4 %982 = OpLoad %9 
                                       f32_3 %983 = OpVectorShuffle %982 %982 0 1 2 
                                       f32_3 %984 = OpFAdd %981 %983 
                                       f32_4 %985 = OpLoad %9 
                                       f32_4 %986 = OpVectorShuffle %985 %984 4 5 6 3 
                                                      OpStore %9 %986 
                                       f32_4 %987 = OpLoad %9 
                                       f32_3 %988 = OpVectorShuffle %987 %987 0 1 2 
                                       f32_3 %989 = OpFNegate %988 
                                       f32_4 %990 = OpLoad %642 
                                       f32_4 %991 = OpVectorShuffle %990 %989 4 5 6 3 
                                                      OpStore %642 %991 
                                Private f32* %992 = OpAccessChain %642 %145 
                                                      OpStore %992 %639 
                                       f32_4 %995 = OpLoad %642 
                                       f32_4 %996 = OpExtInst %1 29 %995 
                                                      OpStore %994 %996 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat16_4;
float u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat13;
float u_xlat16_13;
bool u_xlatb13;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat16_20;
float u_xlat16_21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-_LightDir.xyz);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.00100000005);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_3.xyz = vec3(u_xlat16_13) * u_xlat16_3.xyz;
    u_xlat13 = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat16_4 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_20 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_20 = max(u_xlat16_20, 0.00200000009);
    u_xlat16_21 = u_xlat16_20 * u_xlat16_20;
    u_xlat5 = u_xlat13 * u_xlat16_21 + (-u_xlat13);
    u_xlat13 = u_xlat5 * u_xlat13 + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-007;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat13 = u_xlat16_21 / u_xlat13;
    u_xlat6.x = dot(u_xlat16_3.xyz, (-u_xlat6.xyz));
    u_xlat12 = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat16_18 = (-u_xlat16_20) + 1.0;
    u_xlat3.x = abs(u_xlat6.x) * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat12 * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat18 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat3.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-006;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlat13 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_3.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat0.x = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat16_4.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat19 = u_xlat0.x * u_xlat0.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat2.xyz = u_xlat16_4.yzw * u_xlat0.xxx + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat0.x = u_xlat6.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat6.x = (-u_xlat12) + 1.0;
    u_xlat19 = u_xlat6.x * u_xlat6.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat6.x = u_xlat6.x * u_xlat19;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %570 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 RelaxedPrecision 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 DescriptorSet 263 
                                                      OpDecorate %263 Binding 263 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %415 DescriptorSet 415 
                                                      OpDecorate %415 Binding 415 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %421 DescriptorSet 421 
                                                      OpDecorate %421 Binding 421 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %570 Location 570 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                               Private f32_4* %69 = OpVariable Private 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                                         i32 %126 = OpConstant 5 
                                         u32 %153 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %175 = OpConstant 3.674022E-40 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %192 = OpConstant 6 
                                Private f32* %204 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                              Private f32_3* %222 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %223 = OpVariable UniformConstant 
                              Private f32_3* %228 = OpVariable Private 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %233 %233 %233 
                                Private f32* %236 = OpVariable Private 
                                Private f32* %252 = OpVariable Private 
                              Private f32_4* %262 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %263 = OpVariable UniformConstant 
                                Private f32* %267 = OpVariable Private 
                                Private f32* %272 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                Private f32* %279 = OpVariable Private 
                                Private f32* %283 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %300 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                              Private f32_3* %341 = OpVariable Private 
                                         f32 %357 = OpConstant 3.674022E-40 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                              Private f32_3* %389 = OpVariable Private 
                                             %396 = OpTypeBool 
                                             %397 = OpTypePointer Private %396 
                               Private bool* %398 = OpVariable Private 
                                             %402 = OpTypePointer Function %6 
                                Private f32* %414 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %415 = OpVariable UniformConstant 
                              Private f32_3* %420 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %421 = OpVariable UniformConstant 
                                         i32 %437 = OpConstant 7 
                                Private f32* %452 = OpVariable Private 
                              Private f32_3* %466 = OpVariable Private 
                                       f32_3 %470 = OpConstantComposite %66 %66 %66 
                                         f32 %498 = OpConstant 3.674022E-40 
                                Private f32* %524 = OpVariable Private 
                              Private f32_4* %562 = OpVariable Private 
                                             %569 = OpTypePointer Output %7 
                               Output f32_4* %570 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %403 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %70 = OpLoad %48 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %69 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %69 %76 
                                        f32_4 %79 = OpLoad %69 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %16 %81 %18 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %16 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %69 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %69 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %69 %97 
                               Uniform f32_4* %98 = OpAccessChain %16 %81 %57 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %69 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %69 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %69 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 6 
                                                      OpStore %69 %108 
                                       f32_4 %109 = OpLoad %69 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                              Uniform f32_4* %111 = OpAccessChain %16 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %69 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %69 %116 
                                       f32_4 %117 = OpLoad %69 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_3* %120 = OpAccessChain %16 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_4 %124 = OpLoad %69 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %16 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                       f32_4 %132 = OpLoad %69 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 2 6 
                                                      OpStore %69 %133 
                                       f32_4 %134 = OpLoad %69 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                                       f32_4 %136 = OpLoad %69 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 3 
                                         f32 %138 = OpDot %135 %137 
                                Private f32* %139 = OpAccessChain %9 %29 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %29 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 31 %141 
                                Private f32* %143 = OpAccessChain %9 %29 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %19 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFNegate %145 
                                         f32 %147 = OpLoad %48 
                                         f32 %148 = OpFMul %146 %147 
                                Private f32* %149 = OpAccessChain %9 %29 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %29 
                                                      OpStore %152 %151 
                                Uniform f32* %154 = OpAccessChain %16 %126 %153 
                                         f32 %155 = OpLoad %154 
                                Private f32* %156 = OpAccessChain %9 %29 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %69 %19 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %29 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %9 %29 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %166 = OpAccessChain %16 %165 %19 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %164 %167 
                                Uniform f32* %169 = OpAccessChain %16 %165 %153 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %29 
                                                      OpStore %172 %171 
                                Private f32* %173 = OpAccessChain %9 %29 
                                         f32 %174 = OpLoad %173 
                                         f32 %176 = OpExtInst %1 43 %174 %175 %66 
                                Private f32* %177 = OpAccessChain %9 %29 
                                                      OpStore %177 %176 
                                       f32_3 %179 = OpLoad %78 
                                       f32_3 %180 = OpLoad %78 
                                         f32 %181 = OpDot %179 %180 
                                Private f32* %182 = OpAccessChain %178 %29 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %178 %29 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 32 %184 
                                Private f32* %186 = OpAccessChain %178 %29 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %78 
                                       f32_3 %188 = OpFNegate %187 
                                       f32_3 %189 = OpLoad %178 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 0 0 
                                       f32_3 %191 = OpFMul %188 %190 
                              Uniform f32_4* %193 = OpAccessChain %16 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFNegate %195 
                                       f32_3 %197 = OpFAdd %191 %196 
                                       f32_4 %198 = OpLoad %69 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %69 %199 
                                       f32_3 %200 = OpLoad %178 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpLoad %78 
                                       f32_3 %203 = OpFMul %201 %202 
                                                      OpStore %178 %203 
                                       f32_4 %205 = OpLoad %69 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %69 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %212 = OpExtInst %1 40 %210 %211 
                                                      OpStore %204 %212 
                                         f32 %213 = OpLoad %204 
                                         f32 %214 = OpExtInst %1 32 %213 
                                                      OpStore %204 %214 
                                         f32 %215 = OpLoad %204 
                                       f32_3 %216 = OpCompositeConstruct %215 %215 %215 
                                       f32_4 %217 = OpLoad %69 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %69 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %69 %221 
                  read_only Texture2DSampled %224 = OpLoad %223 
                                       f32_2 %225 = OpLoad %40 
                                       f32_4 %226 = OpImageSampleImplicitLod %224 %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                                      OpStore %222 %227 
                                       f32_3 %229 = OpLoad %222 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %235 = OpFAdd %232 %234 
                                                      OpStore %228 %235 
                                       f32_3 %237 = OpLoad %228 
                                       f32_3 %238 = OpLoad %228 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %236 %239 
                                         f32 %240 = OpLoad %236 
                                         f32 %241 = OpExtInst %1 32 %240 
                                                      OpStore %236 %241 
                                         f32 %242 = OpLoad %236 
                                       f32_3 %243 = OpCompositeConstruct %242 %242 %242 
                                       f32_3 %244 = OpLoad %228 
                                       f32_3 %245 = OpFMul %243 %244 
                                                      OpStore %228 %245 
                                       f32_3 %246 = OpLoad %228 
                                       f32_4 %247 = OpLoad %69 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %204 %249 
                                         f32 %250 = OpLoad %204 
                                         f32 %251 = OpExtInst %1 43 %250 %175 %66 
                                                      OpStore %204 %251 
                              Uniform f32_4* %253 = OpAccessChain %16 %192 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                         f32 %259 = OpDot %256 %258 
                                                      OpStore %252 %259 
                                         f32 %260 = OpLoad %252 
                                         f32 %261 = OpExtInst %1 43 %260 %175 %66 
                                                      OpStore %252 %261 
                  read_only Texture2DSampled %264 = OpLoad %263 
                                       f32_2 %265 = OpLoad %40 
                                       f32_4 %266 = OpImageSampleImplicitLod %264 %265 
                                                      OpStore %262 %266 
                                Private f32* %268 = OpAccessChain %262 %153 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %66 
                                                      OpStore %267 %271 
                                         f32 %273 = OpLoad %267 
                                         f32 %274 = OpLoad %267 
                                         f32 %275 = OpFMul %273 %274 
                                                      OpStore %272 %275 
                                         f32 %276 = OpLoad %272 
                                         f32 %278 = OpExtInst %1 40 %276 %277 
                                                      OpStore %272 %278 
                                         f32 %280 = OpLoad %272 
                                         f32 %281 = OpLoad %272 
                                         f32 %282 = OpFMul %280 %281 
                                                      OpStore %279 %282 
                                         f32 %284 = OpLoad %204 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFMul %284 %285 
                                         f32 %287 = OpLoad %204 
                                         f32 %288 = OpFNegate %287 
                                         f32 %289 = OpFAdd %286 %288 
                                                      OpStore %283 %289 
                                         f32 %290 = OpLoad %283 
                                         f32 %291 = OpLoad %204 
                                         f32 %292 = OpFMul %290 %291 
                                         f32 %293 = OpFAdd %292 %66 
                                                      OpStore %204 %293 
                                         f32 %294 = OpLoad %204 
                                         f32 %295 = OpLoad %204 
                                         f32 %296 = OpFMul %294 %295 
                                         f32 %298 = OpFAdd %296 %297 
                                                      OpStore %204 %298 
                                         f32 %299 = OpLoad %279 
                                         f32 %301 = OpFMul %299 %300 
                                                      OpStore %279 %301 
                                         f32 %302 = OpLoad %279 
                                         f32 %303 = OpLoad %204 
                                         f32 %304 = OpFDiv %302 %303 
                                                      OpStore %204 %304 
                                       f32_3 %305 = OpLoad %228 
                                       f32_3 %306 = OpLoad %178 
                                       f32_3 %307 = OpFNegate %306 
                                         f32 %308 = OpDot %305 %307 
                                Private f32* %309 = OpAccessChain %178 %29 
                                                      OpStore %309 %308 
                                       f32_3 %311 = OpLoad %228 
                              Uniform f32_4* %312 = OpAccessChain %16 %192 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFNegate %314 
                                         f32 %316 = OpDot %311 %315 
                                                      OpStore %310 %316 
                                         f32 %317 = OpLoad %310 
                                         f32 %318 = OpExtInst %1 43 %317 %175 %66 
                                                      OpStore %310 %318 
                                         f32 %320 = OpLoad %272 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %66 
                                                      OpStore %319 %322 
                                Private f32* %323 = OpAccessChain %178 %29 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpExtInst %1 4 %324 
                                         f32 %326 = OpLoad %319 
                                         f32 %327 = OpFMul %325 %326 
                                         f32 %328 = OpLoad %272 
                                         f32 %329 = OpFAdd %327 %328 
                                Private f32* %330 = OpAccessChain %78 %29 
                                                      OpStore %330 %329 
                                         f32 %331 = OpLoad %310 
                                         f32 %332 = OpLoad %319 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %334 = OpLoad %272 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %48 %335 
                                         f32 %336 = OpLoad %48 
                                Private f32* %337 = OpAccessChain %178 %29 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpExtInst %1 4 %338 
                                         f32 %340 = OpFMul %336 %339 
                                                      OpStore %48 %340 
                                Private f32* %342 = OpAccessChain %178 %29 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFNegate %344 
                                         f32 %346 = OpFAdd %345 %66 
                                Private f32* %347 = OpAccessChain %341 %29 
                                                      OpStore %347 %346 
                                         f32 %348 = OpLoad %310 
                                Private f32* %349 = OpAccessChain %78 %29 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                         f32 %352 = OpLoad %48 
                                         f32 %353 = OpFAdd %351 %352 
                                Private f32* %354 = OpAccessChain %178 %29 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %178 %29 
                                         f32 %356 = OpLoad %355 
                                         f32 %358 = OpFAdd %356 %357 
                                Private f32* %359 = OpAccessChain %178 %29 
                                                      OpStore %359 %358 
                                Private f32* %361 = OpAccessChain %178 %29 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFDiv %360 %362 
                                Private f32* %364 = OpAccessChain %178 %29 
                                                      OpStore %364 %363 
                                         f32 %365 = OpLoad %204 
                                Private f32* %366 = OpAccessChain %178 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFMul %365 %367 
                                Private f32* %369 = OpAccessChain %178 %29 
                                                      OpStore %369 %368 
                                Private f32* %370 = OpAccessChain %178 %29 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %178 %29 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %178 %29 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpExtInst %1 40 %376 %377 
                                Private f32* %379 = OpAccessChain %178 %29 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %178 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpExtInst %1 31 %381 
                                Private f32* %383 = OpAccessChain %178 %29 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %310 
                                Private f32* %385 = OpAccessChain %178 %29 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                Private f32* %388 = OpAccessChain %178 %29 
                                                      OpStore %388 %387 
                                       f32_4 %390 = OpLoad %262 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %262 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %394 = OpDot %391 %393 
                                Private f32* %395 = OpAccessChain %389 %29 
                                                      OpStore %395 %394 
                                Private f32* %399 = OpAccessChain %389 %29 
                                         f32 %400 = OpLoad %399 
                                        bool %401 = OpFOrdNotEqual %400 %175 
                                                      OpStore %398 %401 
                                        bool %404 = OpLoad %398 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %404 %405 %407 
                                             %405 = OpLabel 
                                                      OpStore %403 %66 
                                                      OpBranch %406 
                                             %407 = OpLabel 
                                                      OpStore %403 %175 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %408 = OpLoad %403 
                                                      OpStore %48 %408 
                                         f32 %409 = OpLoad %48 
                                Private f32* %410 = OpAccessChain %178 %29 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %409 %411 
                                Private f32* %413 = OpAccessChain %178 %29 
                                                      OpStore %413 %412 
                  read_only Texture2DSampled %416 = OpLoad %415 
                                       f32_2 %417 = OpLoad %40 
                                       f32_4 %418 = OpImageSampleImplicitLod %416 %417 
                                         f32 %419 = OpCompositeExtract %418 0 
                                                      OpStore %414 %419 
                  read_only Texture2DSampled %422 = OpLoad %421 
                                       f32_2 %423 = OpLoad %40 
                                       f32_4 %424 = OpImageSampleImplicitLod %422 %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                                      OpStore %420 %425 
                                Private f32* %426 = OpAccessChain %9 %29 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpLoad %414 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %389 %29 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %389 %29 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %175 %66 
                                Private f32* %434 = OpAccessChain %389 %29 
                                                      OpStore %434 %433 
                                       f32_3 %435 = OpLoad %389 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 0 0 
                              Uniform f32_4* %438 = OpAccessChain %16 %437 
                                       f32_4 %439 = OpLoad %438 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFMul %436 %440 
                                                      OpStore %78 %441 
                                       f32_3 %442 = OpLoad %178 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 0 0 
                                       f32_3 %444 = OpLoad %78 
                                       f32_3 %445 = OpFMul %443 %444 
                                       f32_4 %446 = OpLoad %9 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 2 6 
                                                      OpStore %9 %447 
                                         f32 %448 = OpLoad %252 
                                         f32 %449 = OpFNegate %448 
                                         f32 %450 = OpFAdd %449 %66 
                                Private f32* %451 = OpAccessChain %389 %29 
                                                      OpStore %451 %450 
                                Private f32* %453 = OpAccessChain %389 %29 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %389 %29 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                                      OpStore %452 %457 
                                         f32 %458 = OpLoad %452 
                                         f32 %459 = OpLoad %452 
                                         f32 %460 = OpFMul %458 %459 
                                                      OpStore %452 %460 
                                Private f32* %461 = OpAccessChain %389 %29 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %452 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %389 %29 
                                                      OpStore %465 %464 
                                       f32_4 %467 = OpLoad %262 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFNegate %468 
                                       f32_3 %471 = OpFAdd %469 %470 
                                                      OpStore %466 %471 
                                       f32_3 %472 = OpLoad %466 
                                       f32_3 %473 = OpLoad %389 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_3 %475 = OpFMul %472 %474 
                                       f32_4 %476 = OpLoad %262 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFAdd %475 %477 
                                                      OpStore %389 %478 
                                       f32_4 %479 = OpLoad %9 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 3 
                                       f32_3 %481 = OpLoad %389 
                                       f32_3 %482 = OpFMul %480 %481 
                                       f32_4 %483 = OpLoad %9 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 2 6 
                                                      OpStore %9 %484 
                                         f32 %485 = OpLoad %252 
                                         f32 %486 = OpLoad %252 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %389 %29 
                                                      OpStore %488 %487 
                                         f32 %489 = OpLoad %252 
                                Private f32* %490 = OpAccessChain %389 %29 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFMul %489 %491 
                                Private f32* %493 = OpAccessChain %389 %29 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %389 %29 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpLoad %267 
                                         f32 %497 = OpFMul %495 %496 
                                         f32 %499 = OpFAdd %497 %498 
                                Private f32* %500 = OpAccessChain %389 %29 
                                                      OpStore %500 %499 
                                Private f32* %501 = OpAccessChain %341 %29 
                                         f32 %502 = OpLoad %501 
                                Private f32* %503 = OpAccessChain %341 %29 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %502 %504 
                                                      OpStore %452 %505 
                                         f32 %506 = OpLoad %452 
                                         f32 %507 = OpLoad %452 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %452 %508 
                                Private f32* %509 = OpAccessChain %341 %29 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %452 
                                         f32 %512 = OpFMul %510 %511 
                                Private f32* %513 = OpAccessChain %341 %29 
                                                      OpStore %513 %512 
                                Private f32* %514 = OpAccessChain %389 %29 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %341 %29 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFMul %515 %517 
                                         f32 %519 = OpFAdd %518 %66 
                                Private f32* %520 = OpAccessChain %341 %29 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %310 
                                         f32 %522 = OpFNegate %521 
                                         f32 %523 = OpFAdd %522 %66 
                                                      OpStore %452 %523 
                                         f32 %525 = OpLoad %452 
                                         f32 %526 = OpLoad %452 
                                         f32 %527 = OpFMul %525 %526 
                                                      OpStore %524 %527 
                                         f32 %528 = OpLoad %524 
                                         f32 %529 = OpLoad %524 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %524 %530 
                                         f32 %531 = OpLoad %452 
                                         f32 %532 = OpLoad %524 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %452 %533 
                                Private f32* %534 = OpAccessChain %389 %29 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpLoad %452 
                                         f32 %537 = OpFMul %535 %536 
                                         f32 %538 = OpFAdd %537 %66 
                                Private f32* %539 = OpAccessChain %389 %29 
                                                      OpStore %539 %538 
                                Private f32* %540 = OpAccessChain %341 %29 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %389 %29 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFMul %541 %543 
                                Private f32* %545 = OpAccessChain %341 %29 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %310 
                                Private f32* %547 = OpAccessChain %341 %29 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFMul %546 %548 
                                                      OpStore %310 %549 
                                         f32 %550 = OpLoad %310 
                                       f32_3 %551 = OpCompositeConstruct %550 %550 %550 
                                       f32_3 %552 = OpLoad %78 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %341 %553 
                                       f32_3 %554 = OpLoad %420 
                                       f32_3 %555 = OpLoad %341 
                                       f32_3 %556 = OpFMul %554 %555 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 3 
                                       f32_3 %559 = OpFAdd %556 %558 
                                       f32_4 %560 = OpLoad %9 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 6 3 
                                                      OpStore %9 %561 
                                       f32_4 %563 = OpLoad %9 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_3 %565 = OpFNegate %564 
                                       f32_4 %566 = OpLoad %562 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %562 %567 
                                Private f32* %568 = OpAccessChain %562 %153 
                                                      OpStore %568 %233 
                                       f32_4 %571 = OpLoad %562 
                                       f32_4 %572 = OpExtInst %1 29 %571 
                                                      OpStore %570 %572 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_3.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_3 = texture(_LightTexture0, u_xlat7.xy, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat22 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat8 = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat16_4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat16_2 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat15;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat15 = u_xlat21 * u_xlat21;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 603
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %599 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %166 DescriptorSet 166 
                                                      OpDecorate %166 Binding 166 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %289 DescriptorSet 289 
                                                      OpDecorate %289 Binding 289 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %327 DescriptorSet 327 
                                                      OpDecorate %327 Binding 327 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %332 DescriptorSet 332 
                                                      OpDecorate %332 Binding 332 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %534 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %599 Location 599 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypeVector %6 2 
                                              %38 = OpTypePointer Private %37 
                               Private f32_2* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %10 
                                 Input f32_4* %41 = OpVariable Input 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypeSampledImage %48 
                                              %50 = OpTypePointer UniformConstant %49 
  UniformConstant read_only Texture2DSampled* %51 = OpVariable UniformConstant 
                                          i32 %56 = OpConstant 2 
                                          u32 %61 = OpConstant 1 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Private %10 
                               Private f32_4* %69 = OpVariable Private 
                               Private f32_3* %76 = OpVariable Private 
                                          i32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %10 
                                          i32 %85 = OpConstant 0 
                                         i32 %117 = OpConstant 5 
                                         u32 %140 = OpConstant 3 
                                         i32 %152 = OpConstant 4 
                                         f32 %162 = OpConstant 3.674022E-40 
                                Private f32* %165 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %166 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                                             %214 = OpTypePointer Uniform %7 
 UniformConstant read_only Texture2DSampled* %229 = OpVariable UniformConstant 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         i32 %245 = OpConstant 7 
                                         i32 %263 = OpConstant 6 
                                         f32 %280 = OpConstant 3.674022E-40 
                              Private f32_3* %288 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %289 = OpVariable UniformConstant 
                              Private f32_3* %294 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                       f32_3 %297 = OpConstantComposite %296 %296 %296 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %300 = OpConstantComposite %299 %299 %299 
                                Private f32* %302 = OpVariable Private 
                                Private f32* %317 = OpVariable Private 
                              Private f32_4* %326 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %327 = OpVariable UniformConstant 
                              Private f32_4* %331 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %332 = OpVariable UniformConstant 
                                Private f32* %339 = OpVariable Private 
                                Private f32* %344 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                Private f32* %351 = OpVariable Private 
                                Private f32* %355 = OpVariable Private 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                Private f32* %383 = OpVariable Private 
                                Private f32* %392 = OpVariable Private 
                              Private f32_3* %396 = OpVariable Private 
                                Private f32* %405 = OpVariable Private 
                                         f32 %431 = OpConstant 3.674022E-40 
                                         f32 %434 = OpConstant 3.674022E-40 
                                         f32 %444 = OpConstant 3.674022E-40 
                                         f32 %447 = OpConstant 3.674022E-40 
                              Private f32_3* %454 = OpVariable Private 
                                             %461 = OpTypeBool 
                                             %462 = OpTypePointer Private %461 
                               Private bool* %463 = OpVariable Private 
                                             %467 = OpTypePointer Function %6 
                                Private f32* %487 = OpVariable Private 
                              Private f32_3* %501 = OpVariable Private 
                                       f32_3 %505 = OpConstantComposite %65 %65 %65 
                                         f32 %530 = OpConstant 3.674022E-40 
                                Private f32* %556 = OpVariable Private 
                              Private f32_4* %592 = OpVariable Private 
                                             %598 = OpTypePointer Output %10 
                               Output f32_4* %599 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %468 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %41 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                                      OpStore %39 %46 
                   read_only Texture2DSampled %52 = OpLoad %51 
                                        f32_2 %53 = OpLoad %39 
                                        f32_4 %54 = OpImageSampleImplicitLod %52 %53 
                                          f32 %55 = OpCompositeExtract %54 0 
                                                      OpStore %47 %55 
                                 Uniform f32* %57 = OpAccessChain %17 %56 %30 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpFMul %58 %59 
                                 Uniform f32* %62 = OpAccessChain %17 %56 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %60 %63 
                                                      OpStore %47 %64 
                                          f32 %66 = OpLoad %47 
                                          f32 %67 = OpFDiv %65 %66 
                                                      OpStore %47 %67 
                                          f32 %70 = OpLoad %47 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_3 %72 = OpLoad %9 
                                        f32_3 %73 = OpFMul %71 %72 
                                        f32_4 %74 = OpLoad %69 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %69 %75 
                                        f32_4 %77 = OpLoad %69 
                                        f32_3 %78 = OpVectorShuffle %77 %77 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %17 %79 %19 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %78 %83 
                                                      OpStore %76 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %79 %85 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %69 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_3 %92 = OpLoad %76 
                                        f32_3 %93 = OpFAdd %91 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 2 6 
                                                      OpStore %69 %95 
                               Uniform f32_4* %96 = OpAccessChain %17 %79 %56 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %69 
                                       f32_3 %100 = OpVectorShuffle %99 %99 2 2 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %69 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 3 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %69 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 2 6 
                                                      OpStore %69 %106 
                                       f32_4 %107 = OpLoad %69 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                              Uniform f32_4* %109 = OpAccessChain %17 %79 %79 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFAdd %108 %111 
                                       f32_4 %113 = OpLoad %69 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 6 
                                                      OpStore %69 %114 
                                       f32_4 %115 = OpLoad %69 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %17 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %116 %121 
                                                      OpStore %76 %122 
                                       f32_3 %123 = OpLoad %76 
                                       f32_3 %124 = OpLoad %76 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %9 %30 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %9 %30 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 31 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %20 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpLoad %47 
                                         f32 %135 = OpFMul %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFAdd %135 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %17 %117 %140 
                                         f32 %142 = OpLoad %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                Private f32* %146 = OpAccessChain %69 %20 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %153 = OpAccessChain %17 %152 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %151 %154 
                                Uniform f32* %156 = OpAccessChain %17 %152 %140 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %30 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpExtInst %1 43 %161 %162 %65 
                                Private f32* %164 = OpAccessChain %9 %30 
                                                      OpStore %164 %163 
                  read_only Texture2DSampled %167 = OpLoad %166 
                                       f32_2 %168 = OpLoad %39 
                                       f32_4 %169 = OpImageSampleImplicitLod %167 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %165 %170 
                                Private f32* %172 = OpAccessChain %9 %30 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %165 
                                         f32 %175 = OpFAdd %173 %174 
                                Private f32* %176 = OpAccessChain %171 %30 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %171 %30 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 43 %178 %162 %65 
                                Private f32* %180 = OpAccessChain %171 %30 
                                                      OpStore %180 %179 
                                       f32_4 %181 = OpLoad %69 
                                       f32_2 %182 = OpVectorShuffle %181 %181 1 1 
                              Uniform f32_4* %184 = OpAccessChain %17 %183 %19 
                                       f32_4 %185 = OpLoad %184 
                                       f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                       f32_2 %187 = OpFMul %182 %186 
                                       f32_3 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %187 3 4 2 
                                                      OpStore %9 %189 
                              Uniform f32_4* %190 = OpAccessChain %17 %183 %85 
                                       f32_4 %191 = OpLoad %190 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpLoad %69 
                                       f32_2 %194 = OpVectorShuffle %193 %193 0 0 
                                       f32_2 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %9 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFAdd %195 %197 
                                       f32_3 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %198 3 4 2 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %183 %56 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_4 %204 = OpLoad %69 
                                       f32_2 %205 = OpVectorShuffle %204 %204 3 3 
                                       f32_2 %206 = OpFMul %203 %205 
                                       f32_3 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpFAdd %206 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %209 3 4 2 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %69 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 3 
                              Uniform f32_3* %215 = OpAccessChain %17 %85 
                                       f32_3 %216 = OpLoad %215 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                       f32_4 %219 = OpLoad %69 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %69 %220 
                                       f32_3 %221 = OpLoad %9 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                              Uniform f32_4* %223 = OpAccessChain %17 %183 %79 
                                       f32_4 %224 = OpLoad %223 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFAdd %222 %225 
                                       f32_3 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %226 3 4 2 
                                                      OpStore %9 %228 
                  read_only Texture2DSampled %230 = OpLoad %229 
                                       f32_3 %231 = OpLoad %9 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_4 %234 = OpImageSampleImplicitLod %230 %232 Bias %10 
                                         f32 %235 = OpCompositeExtract %234 3 
                                Private f32* %236 = OpAccessChain %9 %30 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %171 %30 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %238 %240 
                                Private f32* %242 = OpAccessChain %9 %30 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                              Uniform f32_4* %246 = OpAccessChain %17 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFMul %244 %248 
                                                      OpStore %9 %249 
                                       f32_4 %250 = OpLoad %69 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %69 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %251 %253 
                                                      OpStore %47 %254 
                                         f32 %255 = OpLoad %47 
                                         f32 %256 = OpExtInst %1 32 %255 
                                                      OpStore %47 %256 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFNegate %258 
                                         f32 %260 = OpLoad %47 
                                       f32_3 %261 = OpCompositeConstruct %260 %260 %260 
                                       f32_3 %262 = OpFMul %259 %261 
                              Uniform f32_4* %264 = OpAccessChain %17 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFNegate %266 
                                       f32_3 %268 = OpFAdd %262 %267 
                                                      OpStore %76 %268 
                                         f32 %269 = OpLoad %47 
                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
                                       f32_4 %271 = OpLoad %69 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_4 %274 = OpLoad %69 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %69 %275 
                                       f32_3 %276 = OpLoad %76 
                                       f32_3 %277 = OpLoad %76 
                                         f32 %278 = OpDot %276 %277 
                                                      OpStore %47 %278 
                                         f32 %279 = OpLoad %47 
                                         f32 %281 = OpExtInst %1 40 %279 %280 
                                                      OpStore %47 %281 
                                         f32 %282 = OpLoad %47 
                                         f32 %283 = OpExtInst %1 32 %282 
                                                      OpStore %47 %283 
                                         f32 %284 = OpLoad %47 
                                       f32_3 %285 = OpCompositeConstruct %284 %284 %284 
                                       f32_3 %286 = OpLoad %76 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %76 %287 
                  read_only Texture2DSampled %290 = OpLoad %289 
                                       f32_2 %291 = OpLoad %39 
                                       f32_4 %292 = OpImageSampleImplicitLod %290 %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                                      OpStore %288 %293 
                                       f32_3 %295 = OpLoad %288 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %301 = OpFAdd %298 %300 
                                                      OpStore %294 %301 
                                       f32_3 %303 = OpLoad %294 
                                       f32_3 %304 = OpLoad %294 
                                         f32 %305 = OpDot %303 %304 
                                                      OpStore %302 %305 
                                         f32 %306 = OpLoad %302 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %302 %307 
                                         f32 %308 = OpLoad %302 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpLoad %294 
                                       f32_3 %311 = OpFMul %309 %310 
                                                      OpStore %294 %311 
                                       f32_3 %312 = OpLoad %294 
                                       f32_3 %313 = OpLoad %76 
                                         f32 %314 = OpDot %312 %313 
                                                      OpStore %47 %314 
                                         f32 %315 = OpLoad %47 
                                         f32 %316 = OpExtInst %1 43 %315 %162 %65 
                                                      OpStore %47 %316 
                              Uniform f32_4* %318 = OpAccessChain %17 %263 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFNegate %320 
                                       f32_3 %322 = OpLoad %76 
                                         f32 %323 = OpDot %321 %322 
                                                      OpStore %317 %323 
                                         f32 %324 = OpLoad %317 
                                         f32 %325 = OpExtInst %1 43 %324 %162 %65 
                                                      OpStore %317 %325 
                  read_only Texture2DSampled %328 = OpLoad %327 
                                       f32_2 %329 = OpLoad %39 
                                       f32_4 %330 = OpImageSampleImplicitLod %328 %329 
                                                      OpStore %326 %330 
                  read_only Texture2DSampled %333 = OpLoad %332 
                                       f32_2 %334 = OpLoad %39 
                                       f32_4 %335 = OpImageSampleImplicitLod %333 %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %331 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 2 6 
                                                      OpStore %331 %338 
                                Private f32* %340 = OpAccessChain %326 %140 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %342 %65 
                                                      OpStore %339 %343 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpLoad %339 
                                         f32 %347 = OpFMul %345 %346 
                                                      OpStore %344 %347 
                                         f32 %348 = OpLoad %344 
                                         f32 %350 = OpExtInst %1 40 %348 %349 
                                                      OpStore %344 %350 
                                         f32 %352 = OpLoad %344 
                                         f32 %353 = OpLoad %344 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %351 %354 
                                         f32 %356 = OpLoad %47 
                                         f32 %357 = OpLoad %351 
                                         f32 %358 = OpFMul %356 %357 
                                         f32 %359 = OpLoad %47 
                                         f32 %360 = OpFNegate %359 
                                         f32 %361 = OpFAdd %358 %360 
                                                      OpStore %355 %361 
                                         f32 %362 = OpLoad %355 
                                         f32 %363 = OpLoad %47 
                                         f32 %364 = OpFMul %362 %363 
                                         f32 %365 = OpFAdd %364 %65 
                                                      OpStore %47 %365 
                                         f32 %366 = OpLoad %47 
                                         f32 %367 = OpLoad %47 
                                         f32 %368 = OpFMul %366 %367 
                                         f32 %370 = OpFAdd %368 %369 
                                                      OpStore %47 %370 
                                         f32 %371 = OpLoad %351 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %351 %373 
                                         f32 %374 = OpLoad %351 
                                         f32 %375 = OpLoad %47 
                                         f32 %376 = OpFDiv %374 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %294 
                                       f32_4 %378 = OpLoad %69 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFNegate %379 
                                         f32 %381 = OpDot %377 %380 
                                Private f32* %382 = OpAccessChain %69 %30 
                                                      OpStore %382 %381 
                                       f32_3 %384 = OpLoad %294 
                              Uniform f32_4* %385 = OpAccessChain %17 %263 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFNegate %387 
                                         f32 %389 = OpDot %384 %388 
                                                      OpStore %383 %389 
                                         f32 %390 = OpLoad %383 
                                         f32 %391 = OpExtInst %1 43 %390 %162 %65 
                                                      OpStore %383 %391 
                                         f32 %393 = OpLoad %344 
                                         f32 %394 = OpFNegate %393 
                                         f32 %395 = OpFAdd %394 %65 
                                                      OpStore %392 %395 
                                Private f32* %397 = OpAccessChain %69 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpExtInst %1 4 %398 
                                         f32 %400 = OpLoad %392 
                                         f32 %401 = OpFMul %399 %400 
                                         f32 %402 = OpLoad %344 
                                         f32 %403 = OpFAdd %401 %402 
                                Private f32* %404 = OpAccessChain %396 %30 
                                                      OpStore %404 %403 
                                         f32 %406 = OpLoad %383 
                                         f32 %407 = OpLoad %392 
                                         f32 %408 = OpFMul %406 %407 
                                         f32 %409 = OpLoad %344 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %405 %410 
                                         f32 %411 = OpLoad %405 
                                Private f32* %412 = OpAccessChain %69 %30 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 4 %413 
                                         f32 %415 = OpFMul %411 %414 
                                                      OpStore %405 %415 
                                Private f32* %416 = OpAccessChain %69 %30 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpExtInst %1 4 %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpFAdd %419 %65 
                                Private f32* %421 = OpAccessChain %171 %30 
                                                      OpStore %421 %420 
                                         f32 %422 = OpLoad %383 
                                Private f32* %423 = OpAccessChain %396 %30 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFMul %422 %424 
                                         f32 %426 = OpLoad %405 
                                         f32 %427 = OpFAdd %425 %426 
                                Private f32* %428 = OpAccessChain %69 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %69 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %432 = OpFAdd %430 %431 
                                Private f32* %433 = OpAccessChain %69 %30 
                                                      OpStore %433 %432 
                                Private f32* %435 = OpAccessChain %69 %30 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFDiv %434 %436 
                                Private f32* %438 = OpAccessChain %69 %30 
                                                      OpStore %438 %437 
                                         f32 %439 = OpLoad %47 
                                Private f32* %440 = OpAccessChain %69 %30 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                                      OpStore %47 %442 
                                         f32 %443 = OpLoad %47 
                                         f32 %445 = OpFMul %443 %444 
                                                      OpStore %47 %445 
                                         f32 %446 = OpLoad %47 
                                         f32 %448 = OpExtInst %1 40 %446 %447 
                                                      OpStore %47 %448 
                                         f32 %449 = OpLoad %47 
                                         f32 %450 = OpExtInst %1 31 %449 
                                                      OpStore %47 %450 
                                         f32 %451 = OpLoad %383 
                                         f32 %452 = OpLoad %47 
                                         f32 %453 = OpFMul %451 %452 
                                                      OpStore %47 %453 
                                       f32_4 %455 = OpLoad %326 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_4 %457 = OpLoad %326 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                         f32 %459 = OpDot %456 %458 
                                Private f32* %460 = OpAccessChain %454 %30 
                                                      OpStore %460 %459 
                                Private f32* %464 = OpAccessChain %454 %30 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdNotEqual %465 %162 
                                                      OpStore %463 %466 
                                        bool %469 = OpLoad %463 
                                                      OpSelectionMerge %471 None 
                                                      OpBranchConditional %469 %470 %472 
                                             %470 = OpLabel 
                                                      OpStore %468 %65 
                                                      OpBranch %471 
                                             %472 = OpLabel 
                                                      OpStore %468 %162 
                                                      OpBranch %471 
                                             %471 = OpLabel 
                                         f32 %473 = OpLoad %468 
                                Private f32* %474 = OpAccessChain %69 %30 
                                                      OpStore %474 %473 
                                         f32 %475 = OpLoad %47 
                                Private f32* %476 = OpAccessChain %69 %30 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                                      OpStore %47 %478 
                                       f32_3 %479 = OpLoad %9 
                                         f32 %480 = OpLoad %47 
                                       f32_3 %481 = OpCompositeConstruct %480 %480 %480 
                                       f32_3 %482 = OpFMul %479 %481 
                                                      OpStore %396 %482 
                                         f32 %483 = OpLoad %317 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %484 %65 
                                Private f32* %486 = OpAccessChain %454 %30 
                                                      OpStore %486 %485 
                                Private f32* %488 = OpAccessChain %454 %30 
                                         f32 %489 = OpLoad %488 
                                Private f32* %490 = OpAccessChain %454 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                                         f32 %493 = OpLoad %487 
                                         f32 %494 = OpLoad %487 
                                         f32 %495 = OpFMul %493 %494 
                                                      OpStore %487 %495 
                                Private f32* %496 = OpAccessChain %454 %30 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpLoad %487 
                                         f32 %499 = OpFMul %497 %498 
                                Private f32* %500 = OpAccessChain %454 %30 
                                                      OpStore %500 %499 
                                       f32_4 %502 = OpLoad %326 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 1 2 
                                       f32_3 %504 = OpFNegate %503 
                                       f32_3 %506 = OpFAdd %504 %505 
                                                      OpStore %501 %506 
                                       f32_3 %507 = OpLoad %501 
                                       f32_3 %508 = OpLoad %454 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 0 0 
                                       f32_3 %510 = OpFMul %507 %509 
                                       f32_4 %511 = OpLoad %326 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
                                       f32_3 %513 = OpFAdd %510 %512 
                                                      OpStore %454 %513 
                                       f32_3 %514 = OpLoad %454 
                                       f32_3 %515 = OpLoad %396 
                                       f32_3 %516 = OpFMul %514 %515 
                                                      OpStore %76 %516 
                                         f32 %517 = OpLoad %317 
                                         f32 %518 = OpLoad %317 
                                         f32 %519 = OpFAdd %517 %518 
                                Private f32* %520 = OpAccessChain %454 %30 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %317 
                                Private f32* %522 = OpAccessChain %454 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Private f32* %525 = OpAccessChain %454 %30 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %454 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpLoad %339 
                                         f32 %529 = OpFMul %527 %528 
                                         f32 %531 = OpFAdd %529 %530 
                                Private f32* %532 = OpAccessChain %454 %30 
                                                      OpStore %532 %531 
                                Private f32* %533 = OpAccessChain %171 %30 
                                         f32 %534 = OpLoad %533 
                                Private f32* %535 = OpAccessChain %171 %30 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFMul %534 %536 
                                                      OpStore %487 %537 
                                         f32 %538 = OpLoad %487 
                                         f32 %539 = OpLoad %487 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %487 %540 
                                Private f32* %541 = OpAccessChain %171 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %487 
                                         f32 %544 = OpFMul %542 %543 
                                Private f32* %545 = OpAccessChain %171 %30 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %454 %30 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %171 %30 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFMul %547 %549 
                                         f32 %551 = OpFAdd %550 %65 
                                Private f32* %552 = OpAccessChain %171 %30 
                                                      OpStore %552 %551 
                                         f32 %553 = OpLoad %383 
                                         f32 %554 = OpFNegate %553 
                                         f32 %555 = OpFAdd %554 %65 
                                                      OpStore %487 %555 
                                         f32 %557 = OpLoad %487 
                                         f32 %558 = OpLoad %487 
                                         f32 %559 = OpFMul %557 %558 
                                                      OpStore %556 %559 
                                         f32 %560 = OpLoad %556 
                                         f32 %561 = OpLoad %556 
                                         f32 %562 = OpFMul %560 %561 
                                                      OpStore %556 %562 
                                         f32 %563 = OpLoad %487 
                                         f32 %564 = OpLoad %556 
                                         f32 %565 = OpFMul %563 %564 
                                                      OpStore %487 %565 
                                Private f32* %566 = OpAccessChain %454 %30 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpLoad %487 
                                         f32 %569 = OpFMul %567 %568 
                                         f32 %570 = OpFAdd %569 %65 
                                Private f32* %571 = OpAccessChain %454 %30 
                                                      OpStore %571 %570 
                                Private f32* %572 = OpAccessChain %171 %30 
                                         f32 %573 = OpLoad %572 
                                Private f32* %574 = OpAccessChain %454 %30 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFMul %573 %575 
                                Private f32* %577 = OpAccessChain %171 %30 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %383 
                                Private f32* %579 = OpAccessChain %171 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %47 %581 
                                         f32 %582 = OpLoad %47 
                                       f32_3 %583 = OpCompositeConstruct %582 %582 %582 
                                       f32_3 %584 = OpLoad %9 
                                       f32_3 %585 = OpFMul %583 %584 
                                                      OpStore %171 %585 
                                       f32_4 %586 = OpLoad %331 
                                       f32_3 %587 = OpVectorShuffle %586 %586 0 1 3 
                                       f32_3 %588 = OpLoad %171 
                                       f32_3 %589 = OpFMul %587 %588 
                                       f32_3 %590 = OpLoad %76 
                                       f32_3 %591 = OpFAdd %589 %590 
                                                      OpStore %9 %591 
                                       f32_3 %593 = OpLoad %9 
                                       f32_3 %594 = OpFNegate %593 
                                       f32_4 %595 = OpLoad %592 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 6 3 
                                                      OpStore %592 %596 
                                Private f32* %597 = OpAccessChain %592 %140 
                                                      OpStore %597 %299 
                                       f32_4 %600 = OpLoad %592 
                                       f32_4 %601 = OpExtInst %1 29 %600 
                                                      OpStore %599 %601 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat16_5;
vec4 u_xlat10_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat16_8;
vec3 u_xlat16_11;
float u_xlat14;
float u_xlat16_14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = inversesqrt(u_xlat7);
    u_xlat2.xyz = (-u_xlat4.xyz) * vec3(u_xlat14) + (-u_xlat3.xyz);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = max(u_xlat14, 0.00100000005);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat10_6 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_11.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_14 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
    u_xlat16_14 = inversesqrt(u_xlat16_14);
    u_xlat16_11.xyz = vec3(u_xlat16_14) * u_xlat16_11.xyz;
    u_xlat14 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat21 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat16_11.xyz, (-u_xlat5.xyz));
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_11.xyz, (-u_xlat3.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_3 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat23 = u_xlat14 * u_xlat16_8 + (-u_xlat14);
    u_xlat14 = u_xlat23 * u_xlat14 + 1.0;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat14 = u_xlat16_8 / u_xlat14;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat23 = abs(u_xlat22) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat15 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat22);
    u_xlat8 = -abs(u_xlat22) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat23 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-005);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = u_xlat15 * u_xlat14;
    u_xlat1.x = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _LightPos.w;
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat7));
    u_xlat7 = u_xlat1.x * _LightPositionRange.w;
    u_xlat7 = u_xlat7 * _LightProjectionParams.w;
    u_xlatb7 = u_xlat10_4.x<u_xlat7;
    u_xlat7 = (u_xlatb7) ? _LightShadowData.x : 1.0;
    u_xlat0.x = u_xlat0.x + u_xlat7;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_6.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = dot(vec2(u_xlat21), u_xlat16_5.xx);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat22 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat1.x * u_xlat22;
    u_xlat2.xyz = u_xlat16_5.yzw * u_xlat1.xxx + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat15) + 1.0;
    u_xlat22 = u_xlat8 * u_xlat8;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat8 = u_xlat8 * u_xlat22;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat10_3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 606
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %602 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %244 DescriptorSet 244 
                                                      OpDecorate %244 Binding 244 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %294 DescriptorSet 294 
                                                      OpDecorate %294 Binding 294 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %299 DescriptorSet 299 
                                                      OpDecorate %299 Binding 299 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %427 DescriptorSet 427 
                                                      OpDecorate %427 Binding 427 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %602 Location 602 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypeVector %6 2 
                                              %37 = OpTypePointer Private %36 
                               Private f32_2* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                                 Input f32_4* %40 = OpVariable Input 
                                 Private f32* %46 = OpVariable Private 
                                              %47 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %48 = OpTypeSampledImage %47 
                                              %49 = OpTypePointer UniformConstant %48 
  UniformConstant read_only Texture2DSampled* %50 = OpVariable UniformConstant 
                                          i32 %55 = OpConstant 2 
                                          u32 %60 = OpConstant 1 
                                          f32 %64 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Private %10 
                               Private f32_4* %68 = OpVariable Private 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %78 = OpConstant 3 
                                              %79 = OpTypePointer Uniform %10 
                                          i32 %84 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 8 
                                         i32 %144 = OpConstant 7 
                                         u32 %171 = OpConstant 3 
                                         i32 %183 = OpConstant 6 
                                         f32 %193 = OpConstant 3.674022E-40 
                                Private f32* %196 = OpVariable Private 
                                Private f32* %200 = OpVariable Private 
                              Private f32_3* %213 = OpVariable Private 
                                             %218 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %219 = OpTypeSampledImage %218 
                                             %220 = OpTypePointer UniformConstant %219 
UniformConstant read_only TextureCubeSampled* %221 = OpVariable UniformConstant 
                                         f32 %232 = OpConstant 3.674022E-40 
                              Private f32_3* %243 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %244 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                                Private f32* %257 = OpVariable Private 
                                Private f32* %273 = OpVariable Private 
                                Private f32* %281 = OpVariable Private 
                              Private f32_4* %293 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %294 = OpVariable UniformConstant 
                              Private f32_3* %298 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %299 = OpVariable UniformConstant 
                                Private f32* %304 = OpVariable Private 
                                Private f32* %309 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                Private f32* %316 = OpVariable Private 
                                         f32 %335 = OpConstant 3.674022E-40 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %365 = OpVariable Private 
                                         f32 %379 = OpConstant 3.674022E-40 
                                         f32 %381 = OpConstant 3.674022E-40 
                                         f32 %388 = OpConstant 3.674022E-40 
                                         f32 %391 = OpConstant 3.674022E-40 
                              Private f32_3* %398 = OpVariable Private 
                                             %405 = OpTypeBool 
                                             %406 = OpTypePointer Private %405 
                               Private bool* %407 = OpVariable Private 
                                             %411 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %427 = OpVariable UniformConstant 
                                         i32 %434 = OpConstant 4 
                                         i32 %439 = OpConstant 5 
                               Private bool* %443 = OpVariable Private 
                                         i32 %473 = OpConstant 9 
                                Private f32* %486 = OpVariable Private 
                              Private f32_3* %500 = OpVariable Private 
                                       f32_3 %504 = OpConstantComposite %64 %64 %64 
                                         f32 %547 = OpConstant 3.674022E-40 
                                Private f32* %560 = OpVariable Private 
                              Private f32_4* %595 = OpVariable Private 
                                             %601 = OpTypePointer Output %10 
                               Output f32_4* %602 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %41 = OpLoad %40 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %40 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                                      OpStore %38 %45 
                   read_only Texture2DSampled %51 = OpLoad %50 
                                        f32_2 %52 = OpLoad %38 
                                        f32_4 %53 = OpImageSampleImplicitLod %51 %52 
                                          f32 %54 = OpCompositeExtract %53 0 
                                                      OpStore %46 %54 
                                 Uniform f32* %56 = OpAccessChain %16 %55 %29 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpLoad %46 
                                          f32 %59 = OpFMul %57 %58 
                                 Uniform f32* %61 = OpAccessChain %16 %55 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %59 %62 
                                                      OpStore %46 %63 
                                          f32 %65 = OpLoad %46 
                                          f32 %66 = OpFDiv %64 %65 
                                                      OpStore %46 %66 
                                          f32 %69 = OpLoad %46 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_3 %71 = OpLoad %9 
                                        f32_3 %72 = OpFMul %70 %71 
                                        f32_4 %73 = OpLoad %68 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %68 %74 
                                        f32_4 %76 = OpLoad %68 
                                        f32_3 %77 = OpVectorShuffle %76 %76 1 1 1 
                               Uniform f32_4* %80 = OpAccessChain %16 %78 %18 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %77 %82 
                                                      OpStore %75 %83 
                               Uniform f32_4* %85 = OpAccessChain %16 %78 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %68 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 0 0 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %91 = OpLoad %75 
                                        f32_3 %92 = OpFAdd %90 %91 
                                        f32_4 %93 = OpLoad %68 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 6 
                                                      OpStore %68 %94 
                               Uniform f32_4* %95 = OpAccessChain %16 %78 %55 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %68 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %68 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 3 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %68 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %68 %105 
                                       f32_4 %106 = OpLoad %68 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                              Uniform f32_4* %108 = OpAccessChain %16 %78 %78 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %107 %110 
                                       f32_4 %112 = OpLoad %68 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %68 %113 
                                       f32_4 %114 = OpLoad %68 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_3* %117 = OpAccessChain %16 %84 
                                       f32_3 %118 = OpLoad %117 
                                       f32_3 %119 = OpFNegate %118 
                                       f32_3 %120 = OpFAdd %115 %119 
                                                      OpStore %75 %120 
                                       f32_3 %121 = OpLoad %75 
                                       f32_3 %122 = OpLoad %75 
                                         f32 %123 = OpDot %121 %122 
                                Private f32* %124 = OpAccessChain %9 %29 
                                                      OpStore %124 %123 
                                Private f32* %125 = OpAccessChain %9 %29 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpExtInst %1 32 %126 
                                Private f32* %128 = OpAccessChain %9 %29 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 0 0 
                                       f32_3 %131 = OpLoad %75 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %75 %132 
                                       f32_4 %134 = OpLoad %68 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                              Uniform f32_4* %137 = OpAccessChain %16 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                                      OpStore %133 %141 
                                       f32_4 %142 = OpLoad %68 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 3 
                              Uniform f32_4* %145 = OpAccessChain %16 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFAdd %143 %148 
                                       f32_4 %150 = OpLoad %68 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 6 
                                                      OpStore %68 %151 
                                       f32_4 %152 = OpLoad %68 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 3 
                                       f32_4 %154 = OpLoad %68 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %9 %29 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 31 %159 
                                Private f32* %161 = OpAccessChain %9 %29 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %19 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpLoad %46 
                                         f32 %166 = OpFMul %164 %165 
                                Private f32* %167 = OpAccessChain %9 %29 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %9 %29 
                                                      OpStore %170 %169 
                                Uniform f32* %172 = OpAccessChain %16 %144 %171 
                                         f32 %173 = OpLoad %172 
                                Private f32* %174 = OpAccessChain %9 %29 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                Private f32* %177 = OpAccessChain %68 %19 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFAdd %176 %178 
                                Private f32* %180 = OpAccessChain %9 %29 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %9 %29 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %16 %183 %19 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %182 %185 
                                Uniform f32* %187 = OpAccessChain %16 %183 %171 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFAdd %186 %188 
                                Private f32* %190 = OpAccessChain %9 %29 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %9 %29 
                                         f32 %192 = OpLoad %191 
                                         f32 %194 = OpExtInst %1 43 %192 %193 %64 
                                Private f32* %195 = OpAccessChain %9 %29 
                                                      OpStore %195 %194 
                                       f32_3 %197 = OpLoad %133 
                                       f32_3 %198 = OpLoad %133 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %196 %199 
                                         f32 %201 = OpLoad %196 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %200 %202 
                                       f32_3 %203 = OpLoad %133 
                                       f32_3 %204 = OpFNegate %203 
                                         f32 %205 = OpLoad %200 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %75 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %68 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %68 %212 
                                         f32 %214 = OpLoad %200 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpLoad %133 
                                       f32_3 %217 = OpFMul %215 %216 
                                                      OpStore %213 %217 
                read_only TextureCubeSampled %222 = OpLoad %221 
                                       f32_3 %223 = OpLoad %133 
                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
                                         f32 %225 = OpCompositeExtract %224 0 
                                                      OpStore %200 %225 
                                       f32_4 %226 = OpLoad %68 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_4 %228 = OpLoad %68 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                         f32 %230 = OpDot %227 %229 
                                                      OpStore %46 %230 
                                         f32 %231 = OpLoad %46 
                                         f32 %233 = OpExtInst %1 40 %231 %232 
                                                      OpStore %46 %233 
                                         f32 %234 = OpLoad %46 
                                         f32 %235 = OpExtInst %1 32 %234 
                                                      OpStore %46 %235 
                                         f32 %236 = OpLoad %46 
                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
                                       f32_4 %238 = OpLoad %68 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %68 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %68 %242 
                  read_only Texture2DSampled %245 = OpLoad %244 
                                       f32_2 %246 = OpLoad %38 
                                       f32_4 %247 = OpImageSampleImplicitLod %245 %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                                      OpStore %243 %248 
                                       f32_3 %250 = OpLoad %243 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %249 %256 
                                       f32_3 %258 = OpLoad %249 
                                       f32_3 %259 = OpLoad %249 
                                         f32 %260 = OpDot %258 %259 
                                                      OpStore %257 %260 
                                         f32 %261 = OpLoad %257 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %257 %262 
                                         f32 %263 = OpLoad %257 
                                       f32_3 %264 = OpCompositeConstruct %263 %263 %263 
                                       f32_3 %265 = OpLoad %249 
                                       f32_3 %266 = OpFMul %264 %265 
                                                      OpStore %249 %266 
                                       f32_3 %267 = OpLoad %249 
                                       f32_4 %268 = OpLoad %68 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                         f32 %270 = OpDot %267 %269 
                                                      OpStore %46 %270 
                                         f32 %271 = OpLoad %46 
                                         f32 %272 = OpExtInst %1 43 %271 %193 %64 
                                                      OpStore %46 %272 
                                       f32_3 %274 = OpLoad %213 
                                       f32_3 %275 = OpFNegate %274 
                                       f32_4 %276 = OpLoad %68 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                         f32 %280 = OpExtInst %1 43 %279 %193 %64 
                                                      OpStore %273 %280 
                                       f32_3 %282 = OpLoad %249 
                                       f32_3 %283 = OpLoad %213 
                                       f32_3 %284 = OpFNegate %283 
                                         f32 %285 = OpDot %282 %284 
                                                      OpStore %281 %285 
                                         f32 %286 = OpLoad %281 
                                         f32 %287 = OpExtInst %1 43 %286 %193 %64 
                                                      OpStore %281 %287 
                                       f32_3 %288 = OpLoad %249 
                                       f32_3 %289 = OpLoad %75 
                                       f32_3 %290 = OpFNegate %289 
                                         f32 %291 = OpDot %288 %290 
                                Private f32* %292 = OpAccessChain %68 %29 
                                                      OpStore %292 %291 
                  read_only Texture2DSampled %295 = OpLoad %294 
                                       f32_2 %296 = OpLoad %38 
                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
                                                      OpStore %293 %297 
                  read_only Texture2DSampled %300 = OpLoad %299 
                                       f32_2 %301 = OpLoad %38 
                                       f32_4 %302 = OpImageSampleImplicitLod %300 %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                                      OpStore %298 %303 
                                Private f32* %305 = OpAccessChain %293 %171 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %307 %64 
                                                      OpStore %304 %308 
                                         f32 %310 = OpLoad %304 
                                         f32 %311 = OpLoad %304 
                                         f32 %312 = OpFMul %310 %311 
                                                      OpStore %309 %312 
                                         f32 %313 = OpLoad %309 
                                         f32 %315 = OpExtInst %1 40 %313 %314 
                                                      OpStore %309 %315 
                                         f32 %317 = OpLoad %309 
                                         f32 %318 = OpLoad %309 
                                         f32 %319 = OpFMul %317 %318 
                                                      OpStore %316 %319 
                                         f32 %320 = OpLoad %46 
                                         f32 %321 = OpLoad %316 
                                         f32 %322 = OpFMul %320 %321 
                                         f32 %323 = OpLoad %46 
                                         f32 %324 = OpFNegate %323 
                                         f32 %325 = OpFAdd %322 %324 
                                Private f32* %326 = OpAccessChain %133 %29 
                                                      OpStore %326 %325 
                                Private f32* %327 = OpAccessChain %133 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpLoad %46 
                                         f32 %330 = OpFMul %328 %329 
                                         f32 %331 = OpFAdd %330 %64 
                                                      OpStore %46 %331 
                                         f32 %332 = OpLoad %46 
                                         f32 %333 = OpLoad %46 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                                      OpStore %46 %336 
                                         f32 %337 = OpLoad %316 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %316 %339 
                                         f32 %340 = OpLoad %316 
                                         f32 %341 = OpLoad %46 
                                         f32 %342 = OpFDiv %340 %341 
                                                      OpStore %46 %342 
                                         f32 %343 = OpLoad %309 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %344 %64 
                                                      OpStore %316 %345 
                                Private f32* %346 = OpAccessChain %68 %29 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpExtInst %1 4 %347 
                                         f32 %349 = OpLoad %316 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %351 = OpLoad %309 
                                         f32 %352 = OpFAdd %350 %351 
                                Private f32* %353 = OpAccessChain %133 %29 
                                                      OpStore %353 %352 
                                         f32 %355 = OpLoad %281 
                                         f32 %356 = OpLoad %316 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %358 = OpLoad %309 
                                         f32 %359 = OpFAdd %357 %358 
                                                      OpStore %354 %359 
                                         f32 %360 = OpLoad %354 
                                Private f32* %361 = OpAccessChain %68 %29 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 4 %362 
                                         f32 %364 = OpFMul %360 %363 
                                                      OpStore %354 %364 
                                Private f32* %366 = OpAccessChain %68 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 4 %367 
                                         f32 %369 = OpFNegate %368 
                                         f32 %370 = OpFAdd %369 %64 
                                Private f32* %371 = OpAccessChain %365 %29 
                                                      OpStore %371 %370 
                                         f32 %372 = OpLoad %281 
                                Private f32* %373 = OpAccessChain %133 %29 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                         f32 %376 = OpLoad %354 
                                         f32 %377 = OpFAdd %375 %376 
                                                      OpStore %354 %377 
                                         f32 %378 = OpLoad %354 
                                         f32 %380 = OpFAdd %378 %379 
                                                      OpStore %354 %380 
                                         f32 %382 = OpLoad %354 
                                         f32 %383 = OpFDiv %381 %382 
                                                      OpStore %354 %383 
                                         f32 %384 = OpLoad %46 
                                         f32 %385 = OpLoad %354 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %46 %386 
                                         f32 %387 = OpLoad %46 
                                         f32 %389 = OpFMul %387 %388 
                                                      OpStore %46 %389 
                                         f32 %390 = OpLoad %46 
                                         f32 %392 = OpExtInst %1 40 %390 %391 
                                                      OpStore %46 %392 
                                         f32 %393 = OpLoad %46 
                                         f32 %394 = OpExtInst %1 31 %393 
                                                      OpStore %46 %394 
                                         f32 %395 = OpLoad %281 
                                         f32 %396 = OpLoad %46 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %46 %397 
                                       f32_4 %399 = OpLoad %293 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %293 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                         f32 %403 = OpDot %400 %402 
                                Private f32* %404 = OpAccessChain %398 %29 
                                                      OpStore %404 %403 
                                Private f32* %408 = OpAccessChain %398 %29 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdNotEqual %409 %193 
                                                      OpStore %407 %410 
                                        bool %413 = OpLoad %407 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %64 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %193 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %354 %417 
                                         f32 %418 = OpLoad %46 
                                         f32 %419 = OpLoad %354 
                                         f32 %420 = OpFMul %418 %419 
                                                      OpStore %46 %420 
                                         f32 %421 = OpLoad %196 
                                         f32 %422 = OpExtInst %1 31 %421 
                                                      OpStore %354 %422 
                                         f32 %423 = OpLoad %196 
                                Uniform f32* %424 = OpAccessChain %16 %136 %171 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %423 %425 
                                                      OpStore %196 %426 
                  read_only Texture2DSampled %428 = OpLoad %427 
                                         f32 %429 = OpLoad %196 
                                       f32_2 %430 = OpCompositeConstruct %429 %429 
                                       f32_4 %431 = OpImageSampleImplicitLod %428 %430 
                                         f32 %432 = OpCompositeExtract %431 3 
                                                      OpStore %196 %432 
                                         f32 %433 = OpLoad %354 
                                Uniform f32* %435 = OpAccessChain %16 %434 %171 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFMul %433 %436 
                                                      OpStore %354 %437 
                                         f32 %438 = OpLoad %354 
                                Uniform f32* %440 = OpAccessChain %16 %439 %171 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %438 %441 
                                                      OpStore %354 %442 
                                         f32 %444 = OpLoad %200 
                                         f32 %445 = OpLoad %354 
                                        bool %446 = OpFOrdLessThan %444 %445 
                                                      OpStore %443 %446 
                                        bool %448 = OpLoad %443 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %453 
                                             %449 = OpLabel 
                                Uniform f32* %451 = OpAccessChain %16 %183 %29 
                                         f32 %452 = OpLoad %451 
                                                      OpStore %447 %452 
                                                      OpBranch %450 
                                             %453 = OpLabel 
                                                      OpStore %447 %64 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %454 = OpLoad %447 
                                Private f32* %455 = OpAccessChain %398 %29 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %29 
                                         f32 %457 = OpLoad %456 
                                Private f32* %458 = OpAccessChain %398 %29 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                Private f32* %461 = OpAccessChain %398 %29 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %398 %29 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpExtInst %1 43 %463 %193 %64 
                                Private f32* %465 = OpAccessChain %398 %29 
                                                      OpStore %465 %464 
                                         f32 %466 = OpLoad %196 
                                Private f32* %467 = OpAccessChain %398 %29 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                Private f32* %470 = OpAccessChain %9 %29 
                                                      OpStore %470 %469 
                                       f32_3 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 0 0 
                              Uniform f32_4* %474 = OpAccessChain %16 %473 
                                       f32_4 %475 = OpLoad %474 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %472 %476 
                                                      OpStore %9 %477 
                                       f32_3 %478 = OpLoad %9 
                                         f32 %479 = OpLoad %46 
                                       f32_3 %480 = OpCompositeConstruct %479 %479 %479 
                                       f32_3 %481 = OpFMul %478 %480 
                                                      OpStore %133 %481 
                                         f32 %482 = OpLoad %273 
                                         f32 %483 = OpFNegate %482 
                                         f32 %484 = OpFAdd %483 %64 
                                Private f32* %485 = OpAccessChain %398 %29 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %398 %29 
                                         f32 %488 = OpLoad %487 
                                Private f32* %489 = OpAccessChain %398 %29 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                                      OpStore %486 %491 
                                         f32 %492 = OpLoad %486 
                                         f32 %493 = OpLoad %486 
                                         f32 %494 = OpFMul %492 %493 
                                                      OpStore %486 %494 
                                Private f32* %495 = OpAccessChain %398 %29 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpLoad %486 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %398 %29 
                                                      OpStore %499 %498 
                                       f32_4 %501 = OpLoad %293 
                                       f32_3 %502 = OpVectorShuffle %501 %501 0 1 2 
                                       f32_3 %503 = OpFNegate %502 
                                       f32_3 %505 = OpFAdd %503 %504 
                                                      OpStore %500 %505 
                                       f32_3 %506 = OpLoad %500 
                                       f32_3 %507 = OpLoad %398 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 0 0 
                                       f32_3 %509 = OpFMul %506 %508 
                                       f32_4 %510 = OpLoad %293 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
                                       f32_3 %512 = OpFAdd %509 %511 
                                                      OpStore %398 %512 
                                       f32_3 %513 = OpLoad %133 
                                       f32_3 %514 = OpLoad %398 
                                       f32_3 %515 = OpFMul %513 %514 
                                                      OpStore %75 %515 
                                Private f32* %516 = OpAccessChain %365 %29 
                                         f32 %517 = OpLoad %516 
                                Private f32* %518 = OpAccessChain %365 %29 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFMul %517 %519 
                                Private f32* %521 = OpAccessChain %398 %29 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %398 %29 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %398 %29 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFMul %523 %525 
                                Private f32* %527 = OpAccessChain %398 %29 
                                                      OpStore %527 %526 
                                Private f32* %528 = OpAccessChain %365 %29 
                                         f32 %529 = OpLoad %528 
                                Private f32* %530 = OpAccessChain %398 %29 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFMul %529 %531 
                                Private f32* %533 = OpAccessChain %365 %29 
                                                      OpStore %533 %532 
                                         f32 %534 = OpLoad %273 
                                         f32 %535 = OpLoad %273 
                                         f32 %536 = OpFAdd %534 %535 
                                Private f32* %537 = OpAccessChain %398 %29 
                                                      OpStore %537 %536 
                                         f32 %538 = OpLoad %273 
                                Private f32* %539 = OpAccessChain %398 %29 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %398 %29 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %398 %29 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpLoad %304 
                                         f32 %546 = OpFMul %544 %545 
                                         f32 %548 = OpFAdd %546 %547 
                                Private f32* %549 = OpAccessChain %398 %29 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %398 %29 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %365 %29 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %555 = OpFAdd %554 %64 
                                Private f32* %556 = OpAccessChain %365 %29 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %281 
                                         f32 %558 = OpFNegate %557 
                                         f32 %559 = OpFAdd %558 %64 
                                                      OpStore %486 %559 
                                         f32 %561 = OpLoad %486 
                                         f32 %562 = OpLoad %486 
                                         f32 %563 = OpFMul %561 %562 
                                                      OpStore %560 %563 
                                         f32 %564 = OpLoad %560 
                                         f32 %565 = OpLoad %560 
                                         f32 %566 = OpFMul %564 %565 
                                                      OpStore %560 %566 
                                         f32 %567 = OpLoad %486 
                                         f32 %568 = OpLoad %560 
                                         f32 %569 = OpFMul %567 %568 
                                                      OpStore %486 %569 
                                Private f32* %570 = OpAccessChain %398 %29 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpLoad %486 
                                         f32 %573 = OpFMul %571 %572 
                                         f32 %574 = OpFAdd %573 %64 
                                Private f32* %575 = OpAccessChain %398 %29 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %365 %29 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %398 %29 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                Private f32* %581 = OpAccessChain %365 %29 
                                                      OpStore %581 %580 
                                         f32 %582 = OpLoad %281 
                                Private f32* %583 = OpAccessChain %365 %29 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %46 %585 
                                         f32 %586 = OpLoad %46 
                                       f32_3 %587 = OpCompositeConstruct %586 %586 %586 
                                       f32_3 %588 = OpLoad %9 
                                       f32_3 %589 = OpFMul %587 %588 
                                                      OpStore %365 %589 
                                       f32_3 %590 = OpLoad %298 
                                       f32_3 %591 = OpLoad %365 
                                       f32_3 %592 = OpFMul %590 %591 
                                       f32_3 %593 = OpLoad %75 
                                       f32_3 %594 = OpFAdd %592 %593 
                                                      OpStore %9 %594 
                                       f32_3 %596 = OpLoad %9 
                                       f32_3 %597 = OpFNegate %596 
                                       f32_4 %598 = OpLoad %595 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %595 %599 
                                Private f32* %600 = OpAccessChain %595 %171 
                                                      OpStore %600 %254 
                                       f32_4 %603 = OpLoad %595 
                                       f32_4 %604 = OpExtInst %1 29 %603 
                                                      OpStore %602 %604 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat16_10;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat20 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat20));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb20 = u_xlat0.x<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat19 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat19 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat9.xyz) * vec3(u_xlat28) + (-u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat16_1.xyz, (-u_xlat3.xyz));
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, u_xlat16_7.xx);
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat28) + 1.0;
    u_xlat10 = u_xlat18 * u_xlat18;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat18 = u_xlat18 * u_xlat10;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat10 = -abs(u_xlat27) + 1.0;
    u_xlat19 = u_xlat10 * u_xlat10;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat10 * u_xlat19;
    u_xlat9.x = u_xlat9.x * u_xlat10 + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat16_18 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_18 = max(u_xlat16_18, 0.00200000009);
    u_xlat16_10 = (-u_xlat16_18) + 1.0;
    u_xlat19 = abs(u_xlat27) * u_xlat16_10 + u_xlat16_18;
    u_xlat10 = u_xlat28 * u_xlat16_10 + u_xlat16_18;
    u_xlat27 = abs(u_xlat27) * u_xlat10;
    u_xlat27 = u_xlat28 * u_xlat19 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-006;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat10 = u_xlat1.x * u_xlat16_18 + (-u_xlat1.x);
    u_xlat1.x = u_xlat10 * u_xlat1.x + 1.0;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat18 = u_xlat16_18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = vec2(u_xlat28) * u_xlat9.xy;
    u_xlat27 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * vec3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat28 = u_xlat0.x * u_xlat0.x;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat0.x = u_xlat0.x * u_xlat28;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 730
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %726 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %343 DescriptorSet 343 
                                                      OpDecorate %343 Binding 343 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %348 DescriptorSet 348 
                                                      OpDecorate %348 Binding 348 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %726 Location 726 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                               Private f32_4* %69 = OpVariable Private 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                         i32 %119 = OpConstant 7 
                                         u32 %142 = OpConstant 3 
                              Private f32_3* %152 = OpVariable Private 
                                         i32 %155 = OpConstant 8 
                                Private f32* %161 = OpVariable Private 
                                Private f32* %165 = OpVariable Private 
                                Private f32* %172 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %177 = OpVariable UniformConstant 
                                         i32 %185 = OpConstant 6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                             %198 = OpTypeBool 
                                             %199 = OpTypePointer Private %198 
                               Private bool* %200 = OpVariable Private 
                                         f32 %203 = OpConstant 3.674022E-40 
                                         i32 %211 = OpConstant 4 
                                         i32 %216 = OpConstant 5 
                              Private f32_4* %220 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_3 %223 = OpConstantComposite %222 %222 %222 
                                             %227 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %228 = OpTypeSampledImage %227 
                                             %229 = OpTypePointer UniformConstant %228 
UniformConstant read_only TextureCubeSampled* %230 = OpVariable UniformConstant 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %222 
                                       f32_3 %248 = OpConstantComposite %239 %222 %239 
                                       f32_3 %256 = OpConstantComposite %222 %239 %239 
                                             %263 = OpTypeVector %198 4 
                                             %264 = OpTypePointer Private %263 
                             Private bool_4* %265 = OpVariable Private 
                                             %270 = OpTypePointer Function %6 
                                Private f32* %311 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_4 %314 = OpConstantComposite %313 %313 %313 %313 
                                         i32 %329 = OpConstant 9 
                              Private f32_3* %336 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %337 = OpVariable UniformConstant 
                              Private f32_4* %342 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %343 = OpVariable UniformConstant 
                              Private f32_3* %347 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %348 = OpVariable UniformConstant 
                              Private f32_3* %353 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                       f32_3 %356 = OpConstantComposite %355 %355 %355 
                                         f32 %358 = OpConstant 3.674022E-40 
                                       f32_3 %359 = OpConstantComposite %358 %358 %358 
                              Private f32_4* %361 = OpVariable Private 
                                             %376 = OpTypePointer Uniform %10 
                                         f32 %418 = OpConstant 3.674022E-40 
                              Private f32_3* %457 = OpVariable Private 
                                         f32 %475 = OpConstant 3.674022E-40 
                                Private f32* %478 = OpVariable Private 
                                Private f32* %483 = OpVariable Private 
                                Private f32* %502 = OpVariable Private 
                                Private f32* %523 = OpVariable Private 
                                         f32 %537 = OpConstant 3.674022E-40 
                                Private f32* %540 = OpVariable Private 
                                Private f32* %545 = OpVariable Private 
                                         f32 %571 = OpConstant 3.674022E-40 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %599 = OpConstant 3.674022E-40 
                                         f32 %607 = OpConstant 3.674022E-40 
                                         f32 %623 = OpConstant 3.674022E-40 
                                         f32 %628 = OpConstant 3.674022E-40 
                               Private bool* %647 = OpVariable Private 
                              Private f32_3* %678 = OpVariable Private 
                                       f32_3 %696 = OpConstantComposite %66 %66 %66 
                                             %725 = OpTypePointer Output %7 
                               Output f32_4* %726 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %271 = OpVariable Function 
                               Function f32* %281 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %301 = OpVariable Function 
                               Function f32* %651 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %70 = OpLoad %48 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %69 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %69 %76 
                                        f32_4 %79 = OpLoad %69 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %16 %81 %18 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %16 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %69 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %69 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %69 %97 
                               Uniform f32_4* %98 = OpAccessChain %16 %81 %57 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %69 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %69 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %69 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 6 
                                                      OpStore %69 %108 
                                       f32_4 %109 = OpLoad %69 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                              Uniform f32_4* %111 = OpAccessChain %16 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %69 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %69 %116 
                                       f32_4 %117 = OpLoad %69 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %120 = OpAccessChain %16 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                                      OpStore %78 %124 
                                       f32_3 %125 = OpLoad %78 
                                       f32_3 %126 = OpLoad %78 
                                         f32 %127 = OpDot %125 %126 
                                Private f32* %128 = OpAccessChain %9 %29 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %9 %29 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpExtInst %1 31 %130 
                                Private f32* %132 = OpAccessChain %9 %29 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %9 %19 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                         f32 %136 = OpLoad %48 
                                         f32 %137 = OpFMul %135 %136 
                                Private f32* %138 = OpAccessChain %9 %29 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFAdd %137 %139 
                                Private f32* %141 = OpAccessChain %9 %29 
                                                      OpStore %141 %140 
                                Uniform f32* %143 = OpAccessChain %16 %119 %142 
                                         f32 %144 = OpLoad %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %144 %146 
                                Private f32* %148 = OpAccessChain %69 %19 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFAdd %147 %149 
                                Private f32* %151 = OpAccessChain %9 %29 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %69 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 3 
                              Uniform f32_4* %156 = OpAccessChain %16 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFNegate %158 
                                       f32_3 %160 = OpFAdd %154 %159 
                                                      OpStore %152 %160 
                                       f32_3 %162 = OpLoad %152 
                                       f32_3 %163 = OpLoad %152 
                                         f32 %164 = OpDot %162 %163 
                                                      OpStore %161 %164 
                                         f32 %166 = OpLoad %161 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %165 %167 
                                       f32_3 %168 = OpLoad %152 
                                         f32 %169 = OpLoad %165 
                                       f32_3 %170 = OpCompositeConstruct %169 %169 %169 
                                       f32_3 %171 = OpFMul %168 %170 
                                                      OpStore %78 %171 
                                         f32 %173 = OpLoad %161 
                                Uniform f32* %174 = OpAccessChain %16 %155 %142 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                                      OpStore %172 %176 
                  read_only Texture2DSampled %178 = OpLoad %177 
                                         f32 %179 = OpLoad %172 
                                       f32_2 %180 = OpCompositeConstruct %179 %179 
                                       f32_4 %181 = OpImageSampleImplicitLod %178 %180 
                                         f32 %182 = OpCompositeExtract %181 3 
                                                      OpStore %172 %182 
                                Private f32* %183 = OpAccessChain %9 %29 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %186 = OpAccessChain %16 %185 %19 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %184 %187 
                                Uniform f32* %189 = OpAccessChain %16 %185 %142 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                Private f32* %192 = OpAccessChain %9 %29 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %9 %29 
                                         f32 %194 = OpLoad %193 
                                         f32 %196 = OpExtInst %1 43 %194 %195 %66 
                                Private f32* %197 = OpAccessChain %9 %29 
                                                      OpStore %197 %196 
                                Private f32* %201 = OpAccessChain %9 %29 
                                         f32 %202 = OpLoad %201 
                                        bool %204 = OpFOrdLessThan %202 %203 
                                                      OpStore %200 %204 
                                        bool %205 = OpLoad %200 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %316 
                                             %206 = OpLabel 
                                         f32 %208 = OpLoad %161 
                                         f32 %209 = OpExtInst %1 31 %208 
                                                      OpStore %161 %209 
                                         f32 %210 = OpLoad %161 
                                Uniform f32* %212 = OpAccessChain %16 %211 %142 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %210 %213 
                                                      OpStore %161 %214 
                                         f32 %215 = OpLoad %161 
                                Uniform f32* %217 = OpAccessChain %16 %216 %142 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %215 %218 
                                                      OpStore %161 %219 
                                       f32_3 %221 = OpLoad %152 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %220 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %220 %226 
                read_only TextureCubeSampled %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %220 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpImageSampleExplicitLod %231 %233 Lod %7 
                                         f32 %235 = OpCompositeExtract %234 0 
                                Private f32* %236 = OpAccessChain %220 %29 
                                                      OpStore %236 %235 
                                       f32_3 %238 = OpLoad %152 
                                       f32_3 %241 = OpFAdd %238 %240 
                                                      OpStore %237 %241 
                read_only TextureCubeSampled %242 = OpLoad %230 
                                       f32_3 %243 = OpLoad %237 
                                       f32_4 %244 = OpImageSampleExplicitLod %242 %243 Lod %7 
                                         f32 %245 = OpCompositeExtract %244 0 
                                Private f32* %246 = OpAccessChain %220 %62 
                                                      OpStore %246 %245 
                                       f32_3 %247 = OpLoad %152 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %237 %249 
                read_only TextureCubeSampled %250 = OpLoad %230 
                                       f32_3 %251 = OpLoad %237 
                                       f32_4 %252 = OpImageSampleExplicitLod %250 %251 Lod %7 
                                         f32 %253 = OpCompositeExtract %252 0 
                                Private f32* %254 = OpAccessChain %220 %19 
                                                      OpStore %254 %253 
                                       f32_3 %255 = OpLoad %152 
                                       f32_3 %257 = OpFAdd %255 %256 
                                                      OpStore %237 %257 
                read_only TextureCubeSampled %258 = OpLoad %230 
                                       f32_3 %259 = OpLoad %237 
                                       f32_4 %260 = OpImageSampleExplicitLod %258 %259 Lod %7 
                                         f32 %261 = OpCompositeExtract %260 0 
                                Private f32* %262 = OpAccessChain %220 %142 
                                                      OpStore %262 %261 
                                       f32_4 %266 = OpLoad %220 
                                         f32 %267 = OpLoad %161 
                                       f32_4 %268 = OpCompositeConstruct %267 %267 %267 %267 
                                      bool_4 %269 = OpFOrdLessThan %266 %268 
                                                      OpStore %265 %269 
                                      bool_4 %272 = OpLoad %265 
                                        bool %273 = OpCompositeExtract %272 0 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %278 
                                             %274 = OpLabel 
                                Uniform f32* %276 = OpAccessChain %16 %185 %29 
                                         f32 %277 = OpLoad %276 
                                                      OpStore %271 %277 
                                                      OpBranch %275 
                                             %278 = OpLabel 
                                                      OpStore %271 %66 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                         f32 %279 = OpLoad %271 
                                Private f32* %280 = OpAccessChain %220 %29 
                                                      OpStore %280 %279 
                                      bool_4 %282 = OpLoad %265 
                                        bool %283 = OpCompositeExtract %282 1 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %288 
                                             %284 = OpLabel 
                                Uniform f32* %286 = OpAccessChain %16 %185 %29 
                                         f32 %287 = OpLoad %286 
                                                      OpStore %281 %287 
                                                      OpBranch %285 
                                             %288 = OpLabel 
                                                      OpStore %281 %66 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                         f32 %289 = OpLoad %281 
                                Private f32* %290 = OpAccessChain %220 %62 
                                                      OpStore %290 %289 
                                      bool_4 %292 = OpLoad %265 
                                        bool %293 = OpCompositeExtract %292 2 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %298 
                                             %294 = OpLabel 
                                Uniform f32* %296 = OpAccessChain %16 %185 %29 
                                         f32 %297 = OpLoad %296 
                                                      OpStore %291 %297 
                                                      OpBranch %295 
                                             %298 = OpLabel 
                                                      OpStore %291 %66 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %299 = OpLoad %291 
                                Private f32* %300 = OpAccessChain %220 %19 
                                                      OpStore %300 %299 
                                      bool_4 %302 = OpLoad %265 
                                        bool %303 = OpCompositeExtract %302 3 
                                                      OpSelectionMerge %305 None 
                                                      OpBranchConditional %303 %304 %308 
                                             %304 = OpLabel 
                                Uniform f32* %306 = OpAccessChain %16 %185 %29 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %301 %307 
                                                      OpBranch %305 
                                             %308 = OpLabel 
                                                      OpStore %301 %66 
                                                      OpBranch %305 
                                             %305 = OpLabel 
                                         f32 %309 = OpLoad %301 
                                Private f32* %310 = OpAccessChain %220 %142 
                                                      OpStore %310 %309 
                                       f32_4 %312 = OpLoad %220 
                                         f32 %315 = OpDot %312 %314 
                                                      OpStore %311 %315 
                                                      OpBranch %207 
                                             %316 = OpLabel 
                                                      OpStore %311 %66 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                Private f32* %317 = OpAccessChain %9 %29 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpLoad %311 
                                         f32 %320 = OpFAdd %318 %319 
                                                      OpStore %311 %320 
                                         f32 %321 = OpLoad %311 
                                         f32 %322 = OpExtInst %1 43 %321 %195 %66 
                                                      OpStore %311 %322 
                                         f32 %323 = OpLoad %172 
                                         f32 %324 = OpLoad %311 
                                         f32 %325 = OpFMul %323 %324 
                                Private f32* %326 = OpAccessChain %9 %29 
                                                      OpStore %326 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                              Uniform f32_4* %330 = OpAccessChain %16 %329 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_3 %333 = OpFMul %328 %332 
                                       f32_4 %334 = OpLoad %220 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %220 %335 
                  read_only Texture2DSampled %338 = OpLoad %337 
                                       f32_2 %339 = OpLoad %40 
                                       f32_4 %340 = OpImageSampleImplicitLod %338 %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                                      OpStore %336 %341 
                  read_only Texture2DSampled %344 = OpLoad %343 
                                       f32_2 %345 = OpLoad %40 
                                       f32_4 %346 = OpImageSampleImplicitLod %344 %345 
                                                      OpStore %342 %346 
                  read_only Texture2DSampled %349 = OpLoad %348 
                                       f32_2 %350 = OpLoad %40 
                                       f32_4 %351 = OpImageSampleImplicitLod %349 %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                                      OpStore %347 %352 
                                       f32_3 %354 = OpLoad %347 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_3 %360 = OpFAdd %357 %359 
                                                      OpStore %353 %360 
                                       f32_3 %362 = OpLoad %353 
                                       f32_3 %363 = OpLoad %353 
                                         f32 %364 = OpDot %362 %363 
                                Private f32* %365 = OpAccessChain %361 %29 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %361 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 32 %367 
                                Private f32* %369 = OpAccessChain %361 %29 
                                                      OpStore %369 %368 
                                       f32_4 %370 = OpLoad %361 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 0 0 
                                       f32_3 %372 = OpLoad %353 
                                       f32_3 %373 = OpFMul %371 %372 
                                                      OpStore %353 %373 
                                       f32_4 %374 = OpLoad %69 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 3 
                              Uniform f32_3* %377 = OpAccessChain %16 %87 
                                       f32_3 %378 = OpLoad %377 
                                       f32_3 %379 = OpFNegate %378 
                                       f32_3 %380 = OpFAdd %375 %379 
                                       f32_4 %381 = OpLoad %69 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %69 %382 
                                       f32_4 %383 = OpLoad %69 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_4 %385 = OpLoad %69 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                         f32 %387 = OpDot %384 %386 
                                Private f32* %388 = OpAccessChain %9 %29 
                                                      OpStore %388 %387 
                                Private f32* %389 = OpAccessChain %9 %29 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpExtInst %1 32 %390 
                                Private f32* %392 = OpAccessChain %9 %29 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 0 0 
                                       f32_4 %395 = OpLoad %69 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_4 %398 = OpLoad %69 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %69 %399 
                                Private f32* %400 = OpAccessChain %342 %142 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpFNegate %401 
                                         f32 %403 = OpFAdd %402 %66 
                                Private f32* %404 = OpAccessChain %361 %29 
                                                      OpStore %404 %403 
                                       f32_3 %405 = OpLoad %152 
                                       f32_3 %406 = OpFNegate %405 
                                         f32 %407 = OpLoad %165 
                                       f32_3 %408 = OpCompositeConstruct %407 %407 %407 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %69 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFNegate %411 
                                       f32_3 %413 = OpFAdd %409 %412 
                                                      OpStore %152 %413 
                                       f32_3 %414 = OpLoad %152 
                                       f32_3 %415 = OpLoad %152 
                                         f32 %416 = OpDot %414 %415 
                                                      OpStore %165 %416 
                                         f32 %417 = OpLoad %165 
                                         f32 %419 = OpExtInst %1 40 %417 %418 
                                                      OpStore %165 %419 
                                         f32 %420 = OpLoad %165 
                                         f32 %421 = OpExtInst %1 32 %420 
                                                      OpStore %165 %421 
                                       f32_3 %422 = OpLoad %152 
                                         f32 %423 = OpLoad %165 
                                       f32_3 %424 = OpCompositeConstruct %423 %423 %423 
                                       f32_3 %425 = OpFMul %422 %424 
                                                      OpStore %152 %425 
                                       f32_3 %426 = OpLoad %353 
                                       f32_4 %427 = OpLoad %69 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_3 %429 = OpFNegate %428 
                                         f32 %430 = OpDot %426 %429 
                                                      OpStore %165 %430 
                                       f32_3 %431 = OpLoad %353 
                                       f32_3 %432 = OpLoad %78 
                                       f32_3 %433 = OpFNegate %432 
                                         f32 %434 = OpDot %431 %433 
                                Private f32* %435 = OpAccessChain %69 %29 
                                                      OpStore %435 %434 
                                Private f32* %436 = OpAccessChain %69 %29 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpExtInst %1 43 %437 %195 %66 
                                Private f32* %439 = OpAccessChain %69 %29 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %353 
                                       f32_3 %441 = OpLoad %152 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %40 %29 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %40 %29 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 43 %445 %195 %66 
                                Private f32* %447 = OpAccessChain %40 %29 
                                                      OpStore %447 %446 
                                       f32_3 %448 = OpLoad %78 
                                       f32_3 %449 = OpFNegate %448 
                                       f32_3 %450 = OpLoad %152 
                                         f32 %451 = OpDot %449 %450 
                                Private f32* %452 = OpAccessChain %152 %29 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %152 %29 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 43 %454 %195 %66 
                                Private f32* %456 = OpAccessChain %152 %29 
                                                      OpStore %456 %455 
                                Private f32* %458 = OpAccessChain %152 %29 
                                         f32 %459 = OpLoad %458 
                                Private f32* %460 = OpAccessChain %152 %29 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFAdd %459 %461 
                                Private f32* %463 = OpAccessChain %457 %29 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %152 %29 
                                         f32 %465 = OpLoad %464 
                                Private f32* %466 = OpAccessChain %457 %29 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %457 %29 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %457 %29 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %361 %29 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                         f32 %476 = OpFAdd %474 %475 
                                Private f32* %477 = OpAccessChain %457 %29 
                                                      OpStore %477 %476 
                                Private f32* %479 = OpAccessChain %69 %29 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFNegate %480 
                                         f32 %482 = OpFAdd %481 %66 
                                                      OpStore %478 %482 
                                         f32 %484 = OpLoad %478 
                                         f32 %485 = OpLoad %478 
                                         f32 %486 = OpFMul %484 %485 
                                                      OpStore %483 %486 
                                         f32 %487 = OpLoad %483 
                                         f32 %488 = OpLoad %483 
                                         f32 %489 = OpFMul %487 %488 
                                                      OpStore %483 %489 
                                         f32 %490 = OpLoad %478 
                                         f32 %491 = OpLoad %483 
                                         f32 %492 = OpFMul %490 %491 
                                                      OpStore %478 %492 
                                Private f32* %493 = OpAccessChain %457 %29 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpLoad %478 
                                         f32 %496 = OpFMul %494 %495 
                                         f32 %497 = OpFAdd %496 %66 
                                                      OpStore %478 %497 
                                         f32 %498 = OpLoad %165 
                                         f32 %499 = OpExtInst %1 4 %498 
                                         f32 %500 = OpFNegate %499 
                                         f32 %501 = OpFAdd %500 %66 
                                                      OpStore %483 %501 
                                         f32 %503 = OpLoad %483 
                                         f32 %504 = OpLoad %483 
                                         f32 %505 = OpFMul %503 %504 
                                                      OpStore %502 %505 
                                         f32 %506 = OpLoad %502 
                                         f32 %507 = OpLoad %502 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %502 %508 
                                         f32 %509 = OpLoad %483 
                                         f32 %510 = OpLoad %502 
                                         f32 %511 = OpFMul %509 %510 
                                                      OpStore %483 %511 
                                Private f32* %512 = OpAccessChain %457 %29 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpLoad %483 
                                         f32 %515 = OpFMul %513 %514 
                                         f32 %516 = OpFAdd %515 %66 
                                Private f32* %517 = OpAccessChain %457 %29 
                                                      OpStore %517 %516 
                                Private f32* %518 = OpAccessChain %457 %29 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpLoad %478 
                                         f32 %521 = OpFMul %519 %520 
                                Private f32* %522 = OpAccessChain %457 %29 
                                                      OpStore %522 %521 
                                Private f32* %524 = OpAccessChain %69 %29 
                                         f32 %525 = OpLoad %524 
                                Private f32* %526 = OpAccessChain %457 %29 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %525 %527 
                                                      OpStore %523 %528 
                                Private f32* %529 = OpAccessChain %361 %29 
                                         f32 %530 = OpLoad %529 
                                Private f32* %531 = OpAccessChain %361 %29 
                                         f32 %532 = OpLoad %531 
                                         f32 %533 = OpFMul %530 %532 
                                Private f32* %534 = OpAccessChain %361 %29 
                                                      OpStore %534 %533 
                                Private f32* %535 = OpAccessChain %361 %29 
                                         f32 %536 = OpLoad %535 
                                         f32 %538 = OpExtInst %1 40 %536 %537 
                                Private f32* %539 = OpAccessChain %361 %29 
                                                      OpStore %539 %538 
                                Private f32* %541 = OpAccessChain %361 %29 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpFNegate %542 
                                         f32 %544 = OpFAdd %543 %66 
                                                      OpStore %540 %544 
                                         f32 %546 = OpLoad %165 
                                         f32 %547 = OpExtInst %1 4 %546 
                                         f32 %548 = OpLoad %540 
                                         f32 %549 = OpFMul %547 %548 
                                Private f32* %550 = OpAccessChain %361 %29 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                                      OpStore %545 %552 
                                Private f32* %553 = OpAccessChain %69 %29 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpLoad %540 
                                         f32 %556 = OpFMul %554 %555 
                                Private f32* %557 = OpAccessChain %361 %29 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFAdd %556 %558 
                                                      OpStore %48 %559 
                                         f32 %560 = OpLoad %48 
                                         f32 %561 = OpLoad %165 
                                         f32 %562 = OpExtInst %1 4 %561 
                                         f32 %563 = OpFMul %560 %562 
                                                      OpStore %48 %563 
                                Private f32* %564 = OpAccessChain %69 %29 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpLoad %545 
                                         f32 %567 = OpFMul %565 %566 
                                         f32 %568 = OpLoad %48 
                                         f32 %569 = OpFAdd %567 %568 
                                                      OpStore %48 %569 
                                         f32 %570 = OpLoad %48 
                                         f32 %572 = OpFAdd %570 %571 
                                                      OpStore %48 %572 
                                         f32 %574 = OpLoad %48 
                                         f32 %575 = OpFDiv %573 %574 
                                                      OpStore %48 %575 
                                Private f32* %576 = OpAccessChain %361 %29 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %361 %29 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                Private f32* %581 = OpAccessChain %361 %29 
                                                      OpStore %581 %580 
                                Private f32* %582 = OpAccessChain %40 %29 
                                         f32 %583 = OpLoad %582 
                                Private f32* %584 = OpAccessChain %361 %29 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                Private f32* %587 = OpAccessChain %40 %29 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFNegate %588 
                                         f32 %590 = OpFAdd %586 %589 
                                                      OpStore %545 %590 
                                         f32 %591 = OpLoad %545 
                                Private f32* %592 = OpAccessChain %40 %29 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFMul %591 %593 
                                         f32 %595 = OpFAdd %594 %66 
                                Private f32* %596 = OpAccessChain %40 %29 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %361 %29 
                                         f32 %598 = OpLoad %597 
                                         f32 %600 = OpFMul %598 %599 
                                Private f32* %601 = OpAccessChain %361 %29 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %40 %29 
                                         f32 %603 = OpLoad %602 
                                Private f32* %604 = OpAccessChain %40 %29 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFMul %603 %605 
                                         f32 %608 = OpFAdd %606 %607 
                                Private f32* %609 = OpAccessChain %40 %29 
                                                      OpStore %609 %608 
                                Private f32* %610 = OpAccessChain %361 %29 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %40 %29 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFDiv %611 %613 
                                Private f32* %615 = OpAccessChain %9 %29 
                                                      OpStore %615 %614 
                                Private f32* %616 = OpAccessChain %9 %29 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpLoad %48 
                                         f32 %619 = OpFMul %617 %618 
                                Private f32* %620 = OpAccessChain %9 %29 
                                                      OpStore %620 %619 
                                Private f32* %621 = OpAccessChain %9 %29 
                                         f32 %622 = OpLoad %621 
                                         f32 %624 = OpFMul %622 %623 
                                Private f32* %625 = OpAccessChain %9 %29 
                                                      OpStore %625 %624 
                                Private f32* %626 = OpAccessChain %9 %29 
                                         f32 %627 = OpLoad %626 
                                         f32 %629 = OpExtInst %1 40 %627 %628 
                                Private f32* %630 = OpAccessChain %9 %29 
                                                      OpStore %630 %629 
                                Private f32* %631 = OpAccessChain %9 %29 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpExtInst %1 31 %632 
                                Private f32* %634 = OpAccessChain %9 %29 
                                                      OpStore %634 %633 
                                Private f32* %635 = OpAccessChain %69 %29 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %9 %29 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                Private f32* %640 = OpAccessChain %9 %29 
                                                      OpStore %640 %639 
                                       f32_4 %641 = OpLoad %342 
                                       f32_3 %642 = OpVectorShuffle %641 %641 0 1 2 
                                       f32_4 %643 = OpLoad %342 
                                       f32_3 %644 = OpVectorShuffle %643 %643 0 1 2 
                                         f32 %645 = OpDot %642 %644 
                                Private f32* %646 = OpAccessChain %457 %29 
                                                      OpStore %646 %645 
                                Private f32* %648 = OpAccessChain %457 %29 
                                         f32 %649 = OpLoad %648 
                                        bool %650 = OpFOrdNotEqual %649 %195 
                                                      OpStore %647 %650 
                                        bool %652 = OpLoad %647 
                                                      OpSelectionMerge %654 None 
                                                      OpBranchConditional %652 %653 %655 
                                             %653 = OpLabel 
                                                      OpStore %651 %66 
                                                      OpBranch %654 
                                             %655 = OpLabel 
                                                      OpStore %651 %195 
                                                      OpBranch %654 
                                             %654 = OpLabel 
                                         f32 %656 = OpLoad %651 
                                                      OpStore %48 %656 
                                         f32 %657 = OpLoad %48 
                                Private f32* %658 = OpAccessChain %9 %29 
                                         f32 %659 = OpLoad %658 
                                         f32 %660 = OpFMul %657 %659 
                                Private f32* %661 = OpAccessChain %9 %29 
                                                      OpStore %661 %660 
                                         f32 %662 = OpLoad %523 
                                       f32_3 %663 = OpCompositeConstruct %662 %662 %662 
                                       f32_4 %664 = OpLoad %220 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                       f32_3 %666 = OpFMul %663 %665 
                                                      OpStore %457 %666 
                                       f32_4 %667 = OpLoad %220 
                                       f32_3 %668 = OpVectorShuffle %667 %667 0 1 2 
                                       f32_4 %669 = OpLoad %9 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 0 0 
                                       f32_3 %671 = OpFMul %668 %670 
                                       f32_4 %672 = OpLoad %9 
                                       f32_4 %673 = OpVectorShuffle %672 %671 4 1 5 6 
                                                      OpStore %9 %673 
                                Private f32* %674 = OpAccessChain %152 %29 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFNegate %675 
                                         f32 %677 = OpFAdd %676 %66 
                                                      OpStore %502 %677 
                                         f32 %679 = OpLoad %502 
                                         f32 %680 = OpLoad %502 
                                         f32 %681 = OpFMul %679 %680 
                                Private f32* %682 = OpAccessChain %678 %29 
                                                      OpStore %682 %681 
                                Private f32* %683 = OpAccessChain %678 %29 
                                         f32 %684 = OpLoad %683 
                                Private f32* %685 = OpAccessChain %678 %29 
                                         f32 %686 = OpLoad %685 
                                         f32 %687 = OpFMul %684 %686 
                                Private f32* %688 = OpAccessChain %678 %29 
                                                      OpStore %688 %687 
                                         f32 %689 = OpLoad %502 
                                Private f32* %690 = OpAccessChain %678 %29 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                                      OpStore %502 %692 
                                       f32_4 %693 = OpLoad %342 
                                       f32_3 %694 = OpVectorShuffle %693 %693 0 1 2 
                                       f32_3 %695 = OpFNegate %694 
                                       f32_3 %697 = OpFAdd %695 %696 
                                                      OpStore %678 %697 
                                       f32_3 %698 = OpLoad %678 
                                         f32 %699 = OpLoad %502 
                                       f32_3 %700 = OpCompositeConstruct %699 %699 %699 
                                       f32_3 %701 = OpFMul %698 %700 
                                       f32_4 %702 = OpLoad %342 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFAdd %701 %703 
                                                      OpStore %678 %704 
                                       f32_4 %705 = OpLoad %9 
                                       f32_3 %706 = OpVectorShuffle %705 %705 0 2 3 
                                       f32_3 %707 = OpLoad %678 
                                       f32_3 %708 = OpFMul %706 %707 
                                       f32_4 %709 = OpLoad %9 
                                       f32_4 %710 = OpVectorShuffle %709 %708 4 5 6 3 
                                                      OpStore %9 %710 
                                       f32_3 %711 = OpLoad %336 
                                       f32_3 %712 = OpLoad %457 
                                       f32_3 %713 = OpFMul %711 %712 
                                       f32_4 %714 = OpLoad %9 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                                       f32_3 %716 = OpFAdd %713 %715 
                                       f32_4 %717 = OpLoad %9 
                                       f32_4 %718 = OpVectorShuffle %717 %716 4 5 6 3 
                                                      OpStore %9 %718 
                                       f32_4 %719 = OpLoad %9 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_3 %721 = OpFNegate %720 
                                       f32_4 %722 = OpLoad %361 
                                       f32_4 %723 = OpVectorShuffle %722 %721 4 5 6 3 
                                                      OpStore %361 %723 
                                Private f32* %724 = OpAccessChain %361 %142 
                                                      OpStore %724 %358 
                                       f32_4 %727 = OpLoad %361 
                                       f32_4 %728 = OpExtInst %1 29 %727 
                                                      OpStore %726 %728 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = sqrt(u_xlat13);
    u_xlat19 = u_xlat19 * _LightPositionRange.w;
    u_xlat19 = u_xlat19 * _LightProjectionParams.w;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlatb19 = u_xlat10_3.x<u_xlat19;
    u_xlat19 = (u_xlatb19) ? _LightShadowData.x : 1.0;
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_3 = texture(_LightTexture0, u_xlat3.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_5.xyz;
    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat16_5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_12 = max(u_xlat16_12, 0.00200000009);
    u_xlat16_1 = u_xlat16_12 * u_xlat16_12;
    u_xlat7 = u_xlat18 * u_xlat16_1 + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_1 = u_xlat16_1 * 0.318309873;
    u_xlat18 = u_xlat16_1 / u_xlat18;
    u_xlat16_1 = (-u_xlat16_12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat0.x * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 676
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %672 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %284 DescriptorSet 284 
                                                      OpDecorate %284 Binding 284 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %346 DescriptorSet 346 
                                                      OpDecorate %346 Binding 346 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %396 DescriptorSet 396 
                                                      OpDecorate %396 Binding 396 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %672 Location 672 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypeVector %6 2 
                                              %38 = OpTypePointer Private %37 
                               Private f32_2* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %10 
                                 Input f32_4* %41 = OpVariable Input 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypeSampledImage %48 
                                              %50 = OpTypePointer UniformConstant %49 
  UniformConstant read_only Texture2DSampled* %51 = OpVariable UniformConstant 
                                          i32 %56 = OpConstant 2 
                                          u32 %61 = OpConstant 1 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Private %10 
                               Private f32_4* %69 = OpVariable Private 
                               Private f32_3* %76 = OpVariable Private 
                                          i32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %10 
                                          i32 %85 = OpConstant 0 
                                         i32 %117 = OpConstant 7 
                                         u32 %140 = OpConstant 3 
                                         i32 %152 = OpConstant 6 
                                         f32 %162 = OpConstant 3.674022E-40 
                              Private f32_3* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 8 
                                Private f32* %174 = OpVariable Private 
                                Private f32* %178 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %187 = OpConstant 5 
                                Private f32* %191 = OpVariable Private 
                                             %192 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %193 = OpTypeSampledImage %192 
                                             %194 = OpTypePointer UniformConstant %193 
UniformConstant read_only TextureCubeSampled* %195 = OpVariable UniformConstant 
                                             %200 = OpTypeBool 
                                             %201 = OpTypePointer Private %200 
                               Private bool* %202 = OpVariable Private 
                              Private f32_3* %206 = OpVariable Private 
                                             %207 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %234 = OpVariable UniformConstant 
                                         i32 %249 = OpConstant 10 
                                             %272 = OpTypePointer Uniform %7 
UniformConstant read_only TextureCubeSampled* %284 = OpVariable UniformConstant 
                                         f32 %287 = OpConstant 3.674022E-40 
                                         i32 %297 = OpConstant 9 
                              Private f32_3* %319 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                              Private f32_3* %345 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %346 = OpVariable UniformConstant 
                              Private f32_3* %351 = OpVariable Private 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_3 %354 = OpConstantComposite %353 %353 %353 
                                         f32 %356 = OpConstant 3.674022E-40 
                                       f32_3 %357 = OpConstantComposite %356 %356 %356 
                                Private f32* %359 = OpVariable Private 
                              Private f32_4* %395 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %396 = OpVariable UniformConstant 
                              Private f32_4* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %408 = OpVariable Private 
                                Private f32* %413 = OpVariable Private 
                                         f32 %418 = OpConstant 3.674022E-40 
                                Private f32* %420 = OpVariable Private 
                                         f32 %439 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %458 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %506 = OpConstant 3.674022E-40 
                              Private f32_3* %519 = OpVariable Private 
                               Private bool* %526 = OpVariable Private 
                                Private f32* %549 = OpVariable Private 
                              Private f32_3* %563 = OpVariable Private 
                                       f32_3 %567 = OpConstantComposite %65 %65 %65 
                                         f32 %612 = OpConstant 3.674022E-40 
                                Private f32* %626 = OpVariable Private 
                              Private f32_4* %665 = OpVariable Private 
                                             %671 = OpTypePointer Output %10 
                               Output f32_4* %672 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %208 = OpVariable Function 
                               Function f32* %530 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %41 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                                      OpStore %39 %46 
                   read_only Texture2DSampled %52 = OpLoad %51 
                                        f32_2 %53 = OpLoad %39 
                                        f32_4 %54 = OpImageSampleImplicitLod %52 %53 
                                          f32 %55 = OpCompositeExtract %54 0 
                                                      OpStore %47 %55 
                                 Uniform f32* %57 = OpAccessChain %17 %56 %30 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpFMul %58 %59 
                                 Uniform f32* %62 = OpAccessChain %17 %56 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %60 %63 
                                                      OpStore %47 %64 
                                          f32 %66 = OpLoad %47 
                                          f32 %67 = OpFDiv %65 %66 
                                                      OpStore %47 %67 
                                          f32 %70 = OpLoad %47 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_3 %72 = OpLoad %9 
                                        f32_3 %73 = OpFMul %71 %72 
                                        f32_4 %74 = OpLoad %69 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %69 %75 
                                        f32_4 %77 = OpLoad %69 
                                        f32_3 %78 = OpVectorShuffle %77 %77 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %17 %79 %19 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %78 %83 
                                                      OpStore %76 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %79 %85 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %69 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_3 %92 = OpLoad %76 
                                        f32_3 %93 = OpFAdd %91 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 2 6 
                                                      OpStore %69 %95 
                               Uniform f32_4* %96 = OpAccessChain %17 %79 %56 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %69 
                                       f32_3 %100 = OpVectorShuffle %99 %99 2 2 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %69 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 3 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %69 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 2 6 
                                                      OpStore %69 %106 
                                       f32_4 %107 = OpLoad %69 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                              Uniform f32_4* %109 = OpAccessChain %17 %79 %79 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFAdd %108 %111 
                                       f32_4 %113 = OpLoad %69 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 6 
                                                      OpStore %69 %114 
                                       f32_4 %115 = OpLoad %69 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %17 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %116 %121 
                                                      OpStore %76 %122 
                                       f32_3 %123 = OpLoad %76 
                                       f32_3 %124 = OpLoad %76 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %9 %30 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %9 %30 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 31 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %20 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpLoad %47 
                                         f32 %135 = OpFMul %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFAdd %135 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %17 %117 %140 
                                         f32 %142 = OpLoad %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                Private f32* %146 = OpAccessChain %69 %20 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %153 = OpAccessChain %17 %152 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %151 %154 
                                Uniform f32* %156 = OpAccessChain %17 %152 %140 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %30 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpExtInst %1 43 %161 %162 %65 
                                Private f32* %164 = OpAccessChain %9 %30 
                                                      OpStore %164 %163 
                                       f32_4 %166 = OpLoad %69 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 3 
                              Uniform f32_4* %169 = OpAccessChain %17 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFNegate %171 
                                       f32_3 %173 = OpFAdd %167 %172 
                                                      OpStore %165 %173 
                                       f32_3 %175 = OpLoad %165 
                                       f32_3 %176 = OpLoad %165 
                                         f32 %177 = OpDot %175 %176 
                                                      OpStore %174 %177 
                                         f32 %179 = OpLoad %174 
                                         f32 %180 = OpExtInst %1 31 %179 
                                                      OpStore %178 %180 
                                         f32 %181 = OpLoad %178 
                                Uniform f32* %183 = OpAccessChain %17 %182 %140 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %181 %184 
                                                      OpStore %178 %185 
                                         f32 %186 = OpLoad %178 
                                Uniform f32* %188 = OpAccessChain %17 %187 %140 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %186 %189 
                                                      OpStore %178 %190 
                read_only TextureCubeSampled %196 = OpLoad %195 
                                       f32_3 %197 = OpLoad %165 
                                       f32_4 %198 = OpImageSampleImplicitLod %196 %197 
                                         f32 %199 = OpCompositeExtract %198 0 
                                                      OpStore %191 %199 
                                         f32 %203 = OpLoad %191 
                                         f32 %204 = OpLoad %178 
                                        bool %205 = OpFOrdLessThan %203 %204 
                                                      OpStore %202 %205 
                                        bool %209 = OpLoad %202 
                                                      OpSelectionMerge %211 None 
                                                      OpBranchConditional %209 %210 %214 
                                             %210 = OpLabel 
                                Uniform f32* %212 = OpAccessChain %17 %152 %30 
                                         f32 %213 = OpLoad %212 
                                                      OpStore %208 %213 
                                                      OpBranch %211 
                                             %214 = OpLabel 
                                                      OpStore %208 %65 
                                                      OpBranch %211 
                                             %211 = OpLabel 
                                         f32 %215 = OpLoad %208 
                                Private f32* %216 = OpAccessChain %206 %30 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %9 %30 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %206 %30 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFAdd %218 %220 
                                Private f32* %222 = OpAccessChain %206 %30 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %206 %30 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 43 %224 %162 %65 
                                Private f32* %226 = OpAccessChain %206 %30 
                                                      OpStore %226 %225 
                                         f32 %227 = OpLoad %174 
                                Uniform f32* %228 = OpAccessChain %17 %168 %140 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %9 %30 
                                                      OpStore %231 %230 
                                         f32 %232 = OpLoad %174 
                                         f32 %233 = OpExtInst %1 32 %232 
                                                      OpStore %174 %233 
                  read_only Texture2DSampled %235 = OpLoad %234 
                                       f32_3 %236 = OpLoad %9 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 0 
                                       f32_4 %238 = OpImageSampleImplicitLod %235 %237 
                                         f32 %239 = OpCompositeExtract %238 3 
                                Private f32* %240 = OpAccessChain %9 %30 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %206 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %9 %30 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %242 %244 
                                Private f32* %246 = OpAccessChain %9 %30 
                                                      OpStore %246 %245 
                                       f32_4 %247 = OpLoad %69 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %17 %249 %19 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %248 %252 
                                                      OpStore %76 %253 
                              Uniform f32_4* %254 = OpAccessChain %17 %249 %85 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %76 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %76 %261 
                              Uniform f32_4* %262 = OpAccessChain %17 %249 %56 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %69 
                                       f32_3 %266 = OpVectorShuffle %265 %265 3 3 3 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %76 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %76 %269 
                                       f32_4 %270 = OpLoad %69 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 3 
                              Uniform f32_3* %273 = OpAccessChain %17 %85 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpFNegate %274 
                                       f32_3 %276 = OpFAdd %271 %275 
                                       f32_4 %277 = OpLoad %69 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %69 %278 
                                       f32_3 %279 = OpLoad %76 
                              Uniform f32_4* %280 = OpAccessChain %17 %249 %79 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFAdd %279 %282 
                                                      OpStore %76 %283 
                read_only TextureCubeSampled %285 = OpLoad %284 
                                       f32_3 %286 = OpLoad %76 
                                       f32_4 %288 = OpImageSampleImplicitLod %285 %286 Bias %10 
                                         f32 %289 = OpCompositeExtract %288 3 
                                                      OpStore %178 %289 
                                Private f32* %290 = OpAccessChain %9 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %178 
                                         f32 %293 = OpFMul %291 %292 
                                Private f32* %294 = OpAccessChain %9 %30 
                                                      OpStore %294 %293 
                                       f32_3 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                              Uniform f32_4* %298 = OpAccessChain %17 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                                      OpStore %76 %301 
                                       f32_4 %302 = OpLoad %69 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %69 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                         f32 %306 = OpDot %303 %305 
                                Private f32* %307 = OpAccessChain %9 %30 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %9 %30 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 32 %309 
                                Private f32* %311 = OpAccessChain %9 %30 
                                                      OpStore %311 %310 
                                       f32_3 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_4 %314 = OpLoad %69 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %69 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %69 %318 
                                       f32_3 %320 = OpLoad %165 
                                       f32_3 %321 = OpFNegate %320 
                                         f32 %322 = OpLoad %174 
                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %69 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFNegate %326 
                                       f32_3 %328 = OpFAdd %324 %327 
                                                      OpStore %319 %328 
                                       f32_3 %329 = OpLoad %165 
                                         f32 %330 = OpLoad %174 
                                       f32_3 %331 = OpCompositeConstruct %330 %330 %330 
                                       f32_3 %332 = OpFMul %329 %331 
                                                      OpStore %9 %332 
                                       f32_3 %333 = OpLoad %319 
                                       f32_3 %334 = OpLoad %319 
                                         f32 %335 = OpDot %333 %334 
                                                      OpStore %47 %335 
                                         f32 %336 = OpLoad %47 
                                         f32 %338 = OpExtInst %1 40 %336 %337 
                                                      OpStore %47 %338 
                                         f32 %339 = OpLoad %47 
                                         f32 %340 = OpExtInst %1 32 %339 
                                                      OpStore %47 %340 
                                         f32 %341 = OpLoad %47 
                                       f32_3 %342 = OpCompositeConstruct %341 %341 %341 
                                       f32_3 %343 = OpLoad %319 
                                       f32_3 %344 = OpFMul %342 %343 
                                                      OpStore %319 %344 
                  read_only Texture2DSampled %347 = OpLoad %346 
                                       f32_2 %348 = OpLoad %39 
                                       f32_4 %349 = OpImageSampleImplicitLod %347 %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                                      OpStore %345 %350 
                                       f32_3 %352 = OpLoad %345 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %358 = OpFAdd %355 %357 
                                                      OpStore %351 %358 
                                       f32_3 %360 = OpLoad %351 
                                       f32_3 %361 = OpLoad %351 
                                         f32 %362 = OpDot %360 %361 
                                                      OpStore %359 %362 
                                         f32 %363 = OpLoad %359 
                                         f32 %364 = OpExtInst %1 32 %363 
                                                      OpStore %359 %364 
                                         f32 %365 = OpLoad %359 
                                       f32_3 %366 = OpCompositeConstruct %365 %365 %365 
                                       f32_3 %367 = OpLoad %351 
                                       f32_3 %368 = OpFMul %366 %367 
                                                      OpStore %351 %368 
                                       f32_3 %369 = OpLoad %351 
                                       f32_3 %370 = OpLoad %319 
                                         f32 %371 = OpDot %369 %370 
                                                      OpStore %47 %371 
                                         f32 %372 = OpLoad %47 
                                         f32 %373 = OpExtInst %1 43 %372 %162 %65 
                                                      OpStore %47 %373 
                                       f32_3 %374 = OpLoad %9 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_3 %376 = OpLoad %319 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %174 %377 
                                         f32 %378 = OpLoad %174 
                                         f32 %379 = OpExtInst %1 43 %378 %162 %65 
                                                      OpStore %174 %379 
                                       f32_3 %380 = OpLoad %351 
                                       f32_3 %381 = OpLoad %9 
                                       f32_3 %382 = OpFNegate %381 
                                         f32 %383 = OpDot %380 %382 
                                Private f32* %384 = OpAccessChain %9 %30 
                                                      OpStore %384 %383 
                                Private f32* %385 = OpAccessChain %9 %30 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpExtInst %1 43 %386 %162 %65 
                                Private f32* %388 = OpAccessChain %9 %30 
                                                      OpStore %388 %387 
                                       f32_3 %389 = OpLoad %351 
                                       f32_4 %390 = OpLoad %69 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                         f32 %393 = OpDot %389 %392 
                                Private f32* %394 = OpAccessChain %165 %30 
                                                      OpStore %394 %393 
                  read_only Texture2DSampled %397 = OpLoad %396 
                                       f32_2 %398 = OpLoad %39 
                                       f32_4 %399 = OpImageSampleImplicitLod %397 %398 
                                                      OpStore %395 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_2 %403 = OpLoad %39 
                                       f32_4 %404 = OpImageSampleImplicitLod %402 %403 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_4 %406 = OpLoad %400 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 2 6 
                                                      OpStore %400 %407 
                                Private f32* %409 = OpAccessChain %395 %140 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFNegate %410 
                                         f32 %412 = OpFAdd %411 %65 
                                                      OpStore %408 %412 
                                         f32 %414 = OpLoad %408 
                                         f32 %415 = OpLoad %408 
                                         f32 %416 = OpFMul %414 %415 
                                                      OpStore %413 %416 
                                         f32 %417 = OpLoad %413 
                                         f32 %419 = OpExtInst %1 40 %417 %418 
                                                      OpStore %413 %419 
                                         f32 %421 = OpLoad %413 
                                         f32 %422 = OpLoad %413 
                                         f32 %423 = OpFMul %421 %422 
                                                      OpStore %420 %423 
                                         f32 %424 = OpLoad %47 
                                         f32 %425 = OpLoad %420 
                                         f32 %426 = OpFMul %424 %425 
                                         f32 %427 = OpLoad %47 
                                         f32 %428 = OpFNegate %427 
                                         f32 %429 = OpFAdd %426 %428 
                                Private f32* %430 = OpAccessChain %319 %30 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %319 %30 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpLoad %47 
                                         f32 %434 = OpFMul %432 %433 
                                         f32 %435 = OpFAdd %434 %65 
                                                      OpStore %47 %435 
                                         f32 %436 = OpLoad %47 
                                         f32 %437 = OpLoad %47 
                                         f32 %438 = OpFMul %436 %437 
                                         f32 %440 = OpFAdd %438 %439 
                                                      OpStore %47 %440 
                                         f32 %441 = OpLoad %420 
                                         f32 %443 = OpFMul %441 %442 
                                                      OpStore %420 %443 
                                         f32 %444 = OpLoad %420 
                                         f32 %445 = OpLoad %47 
                                         f32 %446 = OpFDiv %444 %445 
                                                      OpStore %47 %446 
                                         f32 %447 = OpLoad %413 
                                         f32 %448 = OpFNegate %447 
                                         f32 %449 = OpFAdd %448 %65 
                                                      OpStore %420 %449 
                                Private f32* %450 = OpAccessChain %165 %30 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpExtInst %1 4 %451 
                                         f32 %453 = OpLoad %420 
                                         f32 %454 = OpFMul %452 %453 
                                         f32 %455 = OpLoad %413 
                                         f32 %456 = OpFAdd %454 %455 
                                Private f32* %457 = OpAccessChain %319 %30 
                                                      OpStore %457 %456 
                                Private f32* %459 = OpAccessChain %9 %30 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpLoad %420 
                                         f32 %462 = OpFMul %460 %461 
                                         f32 %463 = OpLoad %413 
                                         f32 %464 = OpFAdd %462 %463 
                                                      OpStore %458 %464 
                                Private f32* %465 = OpAccessChain %165 %30 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpExtInst %1 4 %466 
                                         f32 %468 = OpLoad %458 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %458 %469 
                                Private f32* %470 = OpAccessChain %165 %30 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 4 %471 
                                         f32 %473 = OpFNegate %472 
                                         f32 %474 = OpFAdd %473 %65 
                                Private f32* %475 = OpAccessChain %206 %30 
                                                      OpStore %475 %474 
                                Private f32* %476 = OpAccessChain %9 %30 
                                         f32 %477 = OpLoad %476 
                                Private f32* %478 = OpAccessChain %319 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                         f32 %481 = OpLoad %458 
                                         f32 %482 = OpFAdd %480 %481 
                                Private f32* %483 = OpAccessChain %165 %30 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %165 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %165 %30 
                                                      OpStore %488 %487 
                                Private f32* %490 = OpAccessChain %165 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFDiv %489 %491 
                                Private f32* %493 = OpAccessChain %165 %30 
                                                      OpStore %493 %492 
                                         f32 %494 = OpLoad %47 
                                Private f32* %495 = OpAccessChain %165 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Private f32* %498 = OpAccessChain %165 %30 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %165 %30 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %165 %30 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %165 %30 
                                         f32 %505 = OpLoad %504 
                                         f32 %507 = OpExtInst %1 40 %505 %506 
                                Private f32* %508 = OpAccessChain %165 %30 
                                                      OpStore %508 %507 
                                Private f32* %509 = OpAccessChain %165 %30 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpExtInst %1 31 %510 
                                Private f32* %512 = OpAccessChain %165 %30 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %30 
                                         f32 %514 = OpLoad %513 
                                Private f32* %515 = OpAccessChain %165 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %165 %30 
                                                      OpStore %518 %517 
                                       f32_4 %520 = OpLoad %395 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %395 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %519 %30 
                                                      OpStore %525 %524 
                                Private f32* %527 = OpAccessChain %519 %30 
                                         f32 %528 = OpLoad %527 
                                        bool %529 = OpFOrdNotEqual %528 %162 
                                                      OpStore %526 %529 
                                        bool %531 = OpLoad %526 
                                                      OpSelectionMerge %533 None 
                                                      OpBranchConditional %531 %532 %534 
                                             %532 = OpLabel 
                                                      OpStore %530 %65 
                                                      OpBranch %533 
                                             %534 = OpLabel 
                                                      OpStore %530 %162 
                                                      OpBranch %533 
                                             %533 = OpLabel 
                                         f32 %535 = OpLoad %530 
                                                      OpStore %47 %535 
                                         f32 %536 = OpLoad %47 
                                Private f32* %537 = OpAccessChain %165 %30 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFMul %536 %538 
                                Private f32* %540 = OpAccessChain %165 %30 
                                                      OpStore %540 %539 
                                       f32_3 %541 = OpLoad %76 
                                       f32_3 %542 = OpLoad %165 
                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
                                       f32_3 %544 = OpFMul %541 %543 
                                                      OpStore %319 %544 
                                         f32 %545 = OpLoad %174 
                                         f32 %546 = OpFNegate %545 
                                         f32 %547 = OpFAdd %546 %65 
                                Private f32* %548 = OpAccessChain %519 %30 
                                                      OpStore %548 %547 
                                Private f32* %550 = OpAccessChain %519 %30 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %519 %30 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                                      OpStore %549 %554 
                                         f32 %555 = OpLoad %549 
                                         f32 %556 = OpLoad %549 
                                         f32 %557 = OpFMul %555 %556 
                                                      OpStore %549 %557 
                                Private f32* %558 = OpAccessChain %519 %30 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpLoad %549 
                                         f32 %561 = OpFMul %559 %560 
                                Private f32* %562 = OpAccessChain %519 %30 
                                                      OpStore %562 %561 
                                       f32_4 %564 = OpLoad %395 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %568 = OpFAdd %566 %567 
                                                      OpStore %563 %568 
                                       f32_3 %569 = OpLoad %563 
                                       f32_3 %570 = OpLoad %519 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 0 0 
                                       f32_3 %572 = OpFMul %569 %571 
                                       f32_4 %573 = OpLoad %395 
                                       f32_3 %574 = OpVectorShuffle %573 %573 0 1 2 
                                       f32_3 %575 = OpFAdd %572 %574 
                                                      OpStore %519 %575 
                                       f32_3 %576 = OpLoad %519 
                                       f32_3 %577 = OpLoad %319 
                                       f32_3 %578 = OpFMul %576 %577 
                                       f32_4 %579 = OpLoad %69 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                                      OpStore %69 %580 
                                Private f32* %581 = OpAccessChain %206 %30 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %206 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                Private f32* %586 = OpAccessChain %519 %30 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %519 %30 
                                         f32 %588 = OpLoad %587 
                                Private f32* %589 = OpAccessChain %519 %30 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFMul %588 %590 
                                Private f32* %592 = OpAccessChain %519 %30 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %206 %30 
                                         f32 %594 = OpLoad %593 
                                Private f32* %595 = OpAccessChain %519 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFMul %594 %596 
                                Private f32* %598 = OpAccessChain %206 %30 
                                                      OpStore %598 %597 
                                         f32 %599 = OpLoad %174 
                                         f32 %600 = OpLoad %174 
                                         f32 %601 = OpFAdd %599 %600 
                                Private f32* %602 = OpAccessChain %519 %30 
                                                      OpStore %602 %601 
                                         f32 %603 = OpLoad %174 
                                Private f32* %604 = OpAccessChain %519 %30 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFMul %603 %605 
                                Private f32* %607 = OpAccessChain %519 %30 
                                                      OpStore %607 %606 
                                Private f32* %608 = OpAccessChain %519 %30 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpLoad %408 
                                         f32 %611 = OpFMul %609 %610 
                                         f32 %613 = OpFAdd %611 %612 
                                Private f32* %614 = OpAccessChain %519 %30 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %519 %30 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %206 %30 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                         f32 %620 = OpFAdd %619 %65 
                                Private f32* %621 = OpAccessChain %206 %30 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %9 %30 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFNegate %623 
                                         f32 %625 = OpFAdd %624 %65 
                                                      OpStore %549 %625 
                                         f32 %627 = OpLoad %549 
                                         f32 %628 = OpLoad %549 
                                         f32 %629 = OpFMul %627 %628 
                                                      OpStore %626 %629 
                                         f32 %630 = OpLoad %626 
                                         f32 %631 = OpLoad %626 
                                         f32 %632 = OpFMul %630 %631 
                                                      OpStore %626 %632 
                                         f32 %633 = OpLoad %549 
                                         f32 %634 = OpLoad %626 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %549 %635 
                                Private f32* %636 = OpAccessChain %519 %30 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpLoad %549 
                                         f32 %639 = OpFMul %637 %638 
                                         f32 %640 = OpFAdd %639 %65 
                                Private f32* %641 = OpAccessChain %519 %30 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %206 %30 
                                         f32 %643 = OpLoad %642 
                                Private f32* %644 = OpAccessChain %519 %30 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFMul %643 %645 
                                Private f32* %647 = OpAccessChain %206 %30 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %9 %30 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %206 %30 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                Private f32* %653 = OpAccessChain %9 %30 
                                                      OpStore %653 %652 
                                       f32_3 %654 = OpLoad %9 
                                       f32_3 %655 = OpVectorShuffle %654 %654 0 0 0 
                                       f32_3 %656 = OpLoad %76 
                                       f32_3 %657 = OpFMul %655 %656 
                                                      OpStore %206 %657 
                                       f32_4 %658 = OpLoad %400 
                                       f32_3 %659 = OpVectorShuffle %658 %658 0 1 3 
                                       f32_3 %660 = OpLoad %206 
                                       f32_3 %661 = OpFMul %659 %660 
                                       f32_4 %662 = OpLoad %69 
                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
                                       f32_3 %664 = OpFAdd %661 %663 
                                                      OpStore %9 %664 
                                       f32_3 %666 = OpLoad %9 
                                       f32_3 %667 = OpFNegate %666 
                                       f32_4 %668 = OpLoad %665 
                                       f32_4 %669 = OpVectorShuffle %668 %667 4 5 6 3 
                                                      OpStore %665 %669 
                                Private f32* %670 = OpAccessChain %665 %140 
                                                      OpStore %670 %356 
                                       f32_4 %673 = OpLoad %665 
                                       f32_4 %674 = OpExtInst %1 29 %673 
                                                      OpStore %672 %674 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat16_10;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat20 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat20));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb20 = u_xlat0.x<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat19 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat19 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat9.xyz) * vec3(u_xlat28) + (-u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat16_1.xyz, (-u_xlat3.xyz));
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, u_xlat16_7.xx);
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat28) + 1.0;
    u_xlat10 = u_xlat18 * u_xlat18;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat18 = u_xlat18 * u_xlat10;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat10 = -abs(u_xlat27) + 1.0;
    u_xlat19 = u_xlat10 * u_xlat10;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat10 * u_xlat19;
    u_xlat9.x = u_xlat9.x * u_xlat10 + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat16_18 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_18 = max(u_xlat16_18, 0.00200000009);
    u_xlat16_10 = (-u_xlat16_18) + 1.0;
    u_xlat19 = abs(u_xlat27) * u_xlat16_10 + u_xlat16_18;
    u_xlat10 = u_xlat28 * u_xlat16_10 + u_xlat16_18;
    u_xlat27 = abs(u_xlat27) * u_xlat10;
    u_xlat27 = u_xlat28 * u_xlat19 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-006;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat10 = u_xlat1.x * u_xlat16_18 + (-u_xlat1.x);
    u_xlat1.x = u_xlat10 * u_xlat1.x + 1.0;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat18 = u_xlat16_18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = vec2(u_xlat28) * u_xlat9.xy;
    u_xlat27 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * vec3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat28 = u_xlat0.x * u_xlat0.x;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat0.x = u_xlat0.x * u_xlat28;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 782
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %778 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %367 DescriptorSet 367 
                                                      OpDecorate %367 Binding 367 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %395 DescriptorSet 395 
                                                      OpDecorate %395 Binding 395 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %400 DescriptorSet 400 
                                                      OpDecorate %400 Binding 400 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %650 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %663 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %778 RelaxedPrecision 
                                                      OpDecorate %778 Location 778 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                                              %78 = OpTypePointer Private %10 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %82 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                                          i32 %88 = OpConstant 0 
                                         i32 %120 = OpConstant 7 
                                         u32 %143 = OpConstant 3 
                              Private f32_3* %153 = OpVariable Private 
                                         i32 %156 = OpConstant 8 
                                Private f32* %162 = OpVariable Private 
                                Private f32* %166 = OpVariable Private 
                                Private f32* %173 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %178 = OpVariable UniformConstant 
                                         i32 %186 = OpConstant 6 
                                         f32 %196 = OpConstant 3.674022E-40 
                                             %199 = OpTypeBool 
                                             %200 = OpTypePointer Private %199 
                               Private bool* %201 = OpVariable Private 
                                         f32 %204 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 4 
                                         i32 %217 = OpConstant 5 
                              Private f32_4* %221 = OpVariable Private 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_3 %224 = OpConstantComposite %223 %223 %223 
                                             %228 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %229 = OpTypeSampledImage %228 
                                             %230 = OpTypePointer UniformConstant %229 
UniformConstant read_only TextureCubeSampled* %231 = OpVariable UniformConstant 
                              Private f32_3* %238 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %223 
                                       f32_3 %249 = OpConstantComposite %240 %223 %240 
                                       f32_3 %257 = OpConstantComposite %223 %240 %240 
                                             %264 = OpTypeVector %199 4 
                                             %265 = OpTypePointer Private %264 
                             Private bool_4* %266 = OpVariable Private 
                                             %271 = OpTypePointer Function %6 
                                Private f32* %312 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                       f32_4 %315 = OpConstantComposite %314 %314 %314 %314 
                                         i32 %330 = OpConstant 10 
UniformConstant read_only TextureCubeSampled* %367 = OpVariable UniformConstant 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         i32 %381 = OpConstant 9 
                              Private f32_3* %388 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %389 = OpVariable UniformConstant 
                              Private f32_4* %394 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %395 = OpVariable UniformConstant 
                              Private f32_3* %399 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %400 = OpVariable UniformConstant 
                              Private f32_3* %405 = OpVariable Private 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_3 %408 = OpConstantComposite %407 %407 %407 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_3 %411 = OpConstantComposite %410 %410 %410 
                              Private f32_4* %413 = OpVariable Private 
                                             %428 = OpTypePointer Uniform %10 
                                         f32 %470 = OpConstant 3.674022E-40 
                              Private f32_3* %509 = OpVariable Private 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %530 = OpVariable Private 
                                Private f32* %535 = OpVariable Private 
                                Private f32* %554 = OpVariable Private 
                                Private f32* %575 = OpVariable Private 
                                         f32 %589 = OpConstant 3.674022E-40 
                                Private f32* %592 = OpVariable Private 
                                Private f32* %597 = OpVariable Private 
                                         f32 %623 = OpConstant 3.674022E-40 
                                         f32 %625 = OpConstant 3.674022E-40 
                                         f32 %651 = OpConstant 3.674022E-40 
                                         f32 %659 = OpConstant 3.674022E-40 
                                         f32 %675 = OpConstant 3.674022E-40 
                                         f32 %680 = OpConstant 3.674022E-40 
                               Private bool* %699 = OpVariable Private 
                              Private f32_3* %730 = OpVariable Private 
                                       f32_3 %748 = OpConstantComposite %67 %67 %67 
                                             %777 = OpTypePointer Output %7 
                               Output f32_4* %778 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %272 = OpVariable Function 
                               Function f32* %282 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %703 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %71 = OpLoad %49 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %70 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
                                                      OpStore %70 %77 
                                        f32_4 %80 = OpLoad %70 
                                        f32_3 %81 = OpVectorShuffle %80 %80 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %17 %82 %19 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %81 %86 
                                                      OpStore %79 %87 
                               Uniform f32_4* %89 = OpAccessChain %17 %82 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %70 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_3 %95 = OpLoad %79 
                                        f32_3 %96 = OpFAdd %94 %95 
                                        f32_4 %97 = OpLoad %70 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 2 6 
                                                      OpStore %70 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %82 %58 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %102 = OpLoad %70 
                                       f32_3 %103 = OpVectorShuffle %102 %102 2 2 2 
                                       f32_3 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %70 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 3 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %70 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 6 
                                                      OpStore %70 %109 
                                       f32_4 %110 = OpLoad %70 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 3 
                              Uniform f32_4* %112 = OpAccessChain %17 %82 %82 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFAdd %111 %114 
                                       f32_4 %116 = OpLoad %70 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 2 6 
                                                      OpStore %70 %117 
                                       f32_4 %118 = OpLoad %70 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %17 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %119 %124 
                                                      OpStore %79 %125 
                                       f32_3 %126 = OpLoad %79 
                                       f32_3 %127 = OpLoad %79 
                                         f32 %128 = OpDot %126 %127 
                                Private f32* %129 = OpAccessChain %9 %30 
                                                      OpStore %129 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpExtInst %1 31 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %20 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFNegate %135 
                                         f32 %137 = OpLoad %49 
                                         f32 %138 = OpFMul %136 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFAdd %138 %140 
                                Private f32* %142 = OpAccessChain %9 %30 
                                                      OpStore %142 %141 
                                Uniform f32* %144 = OpAccessChain %17 %120 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %145 %147 
                                Private f32* %149 = OpAccessChain %70 %20 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %30 
                                                      OpStore %152 %151 
                                       f32_4 %154 = OpLoad %70 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                              Uniform f32_4* %157 = OpAccessChain %17 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %155 %160 
                                                      OpStore %153 %161 
                                       f32_3 %163 = OpLoad %153 
                                       f32_3 %164 = OpLoad %153 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %162 %165 
                                         f32 %167 = OpLoad %162 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                       f32_3 %169 = OpLoad %153 
                                         f32 %170 = OpLoad %166 
                                       f32_3 %171 = OpCompositeConstruct %170 %170 %170 
                                       f32_3 %172 = OpFMul %169 %171 
                                                      OpStore %79 %172 
                                         f32 %174 = OpLoad %162 
                                Uniform f32* %175 = OpAccessChain %17 %156 %143 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                                      OpStore %173 %177 
                  read_only Texture2DSampled %179 = OpLoad %178 
                                         f32 %180 = OpLoad %173 
                                       f32_2 %181 = OpCompositeConstruct %180 %180 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                         f32 %183 = OpCompositeExtract %182 3 
                                                      OpStore %173 %183 
                                Private f32* %184 = OpAccessChain %9 %30 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %17 %186 %20 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %185 %188 
                                Uniform f32* %190 = OpAccessChain %17 %186 %143 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                Private f32* %193 = OpAccessChain %9 %30 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %9 %30 
                                         f32 %195 = OpLoad %194 
                                         f32 %197 = OpExtInst %1 43 %195 %196 %67 
                                Private f32* %198 = OpAccessChain %9 %30 
                                                      OpStore %198 %197 
                                Private f32* %202 = OpAccessChain %9 %30 
                                         f32 %203 = OpLoad %202 
                                        bool %205 = OpFOrdLessThan %203 %204 
                                                      OpStore %201 %205 
                                        bool %206 = OpLoad %201 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %317 
                                             %207 = OpLabel 
                                         f32 %209 = OpLoad %162 
                                         f32 %210 = OpExtInst %1 31 %209 
                                                      OpStore %162 %210 
                                         f32 %211 = OpLoad %162 
                                Uniform f32* %213 = OpAccessChain %17 %212 %143 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %211 %214 
                                                      OpStore %162 %215 
                                         f32 %216 = OpLoad %162 
                                Uniform f32* %218 = OpAccessChain %17 %217 %143 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %162 %220 
                                       f32_3 %222 = OpLoad %153 
                                       f32_3 %225 = OpFAdd %222 %224 
                                       f32_4 %226 = OpLoad %221 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %221 %227 
                read_only TextureCubeSampled %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpImageSampleExplicitLod %232 %234 Lod %7 
                                         f32 %236 = OpCompositeExtract %235 0 
                                Private f32* %237 = OpAccessChain %221 %30 
                                                      OpStore %237 %236 
                                       f32_3 %239 = OpLoad %153 
                                       f32_3 %242 = OpFAdd %239 %241 
                                                      OpStore %238 %242 
                read_only TextureCubeSampled %243 = OpLoad %231 
                                       f32_3 %244 = OpLoad %238 
                                       f32_4 %245 = OpImageSampleExplicitLod %243 %244 Lod %7 
                                         f32 %246 = OpCompositeExtract %245 0 
                                Private f32* %247 = OpAccessChain %221 %63 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %153 
                                       f32_3 %250 = OpFAdd %248 %249 
                                                      OpStore %238 %250 
                read_only TextureCubeSampled %251 = OpLoad %231 
                                       f32_3 %252 = OpLoad %238 
                                       f32_4 %253 = OpImageSampleExplicitLod %251 %252 Lod %7 
                                         f32 %254 = OpCompositeExtract %253 0 
                                Private f32* %255 = OpAccessChain %221 %20 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %153 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %238 %258 
                read_only TextureCubeSampled %259 = OpLoad %231 
                                       f32_3 %260 = OpLoad %238 
                                       f32_4 %261 = OpImageSampleExplicitLod %259 %260 Lod %7 
                                         f32 %262 = OpCompositeExtract %261 0 
                                Private f32* %263 = OpAccessChain %221 %143 
                                                      OpStore %263 %262 
                                       f32_4 %267 = OpLoad %221 
                                         f32 %268 = OpLoad %162 
                                       f32_4 %269 = OpCompositeConstruct %268 %268 %268 %268 
                                      bool_4 %270 = OpFOrdLessThan %267 %269 
                                                      OpStore %266 %270 
                                      bool_4 %273 = OpLoad %266 
                                        bool %274 = OpCompositeExtract %273 0 
                                                      OpSelectionMerge %276 None 
                                                      OpBranchConditional %274 %275 %279 
                                             %275 = OpLabel 
                                Uniform f32* %277 = OpAccessChain %17 %186 %30 
                                         f32 %278 = OpLoad %277 
                                                      OpStore %272 %278 
                                                      OpBranch %276 
                                             %279 = OpLabel 
                                                      OpStore %272 %67 
                                                      OpBranch %276 
                                             %276 = OpLabel 
                                         f32 %280 = OpLoad %272 
                                Private f32* %281 = OpAccessChain %221 %30 
                                                      OpStore %281 %280 
                                      bool_4 %283 = OpLoad %266 
                                        bool %284 = OpCompositeExtract %283 1 
                                                      OpSelectionMerge %286 None 
                                                      OpBranchConditional %284 %285 %289 
                                             %285 = OpLabel 
                                Uniform f32* %287 = OpAccessChain %17 %186 %30 
                                         f32 %288 = OpLoad %287 
                                                      OpStore %282 %288 
                                                      OpBranch %286 
                                             %289 = OpLabel 
                                                      OpStore %282 %67 
                                                      OpBranch %286 
                                             %286 = OpLabel 
                                         f32 %290 = OpLoad %282 
                                Private f32* %291 = OpAccessChain %221 %63 
                                                      OpStore %291 %290 
                                      bool_4 %293 = OpLoad %266 
                                        bool %294 = OpCompositeExtract %293 2 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %299 
                                             %295 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %17 %186 %30 
                                         f32 %298 = OpLoad %297 
                                                      OpStore %292 %298 
                                                      OpBranch %296 
                                             %299 = OpLabel 
                                                      OpStore %292 %67 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %300 = OpLoad %292 
                                Private f32* %301 = OpAccessChain %221 %20 
                                                      OpStore %301 %300 
                                      bool_4 %303 = OpLoad %266 
                                        bool %304 = OpCompositeExtract %303 3 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Uniform f32* %307 = OpAccessChain %17 %186 %30 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                                      OpStore %302 %67 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %310 = OpLoad %302 
                                Private f32* %311 = OpAccessChain %221 %143 
                                                      OpStore %311 %310 
                                       f32_4 %313 = OpLoad %221 
                                         f32 %316 = OpDot %313 %315 
                                                      OpStore %312 %316 
                                                      OpBranch %208 
                                             %317 = OpLabel 
                                                      OpStore %312 %67 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                Private f32* %318 = OpAccessChain %9 %30 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpLoad %312 
                                         f32 %321 = OpFAdd %319 %320 
                                                      OpStore %312 %321 
                                         f32 %322 = OpLoad %312 
                                         f32 %323 = OpExtInst %1 43 %322 %196 %67 
                                                      OpStore %312 %323 
                                         f32 %324 = OpLoad %173 
                                         f32 %325 = OpLoad %312 
                                         f32 %326 = OpFMul %324 %325 
                                Private f32* %327 = OpAccessChain %9 %30 
                                                      OpStore %327 %326 
                                       f32_4 %328 = OpLoad %70 
                                       f32_3 %329 = OpVectorShuffle %328 %328 1 1 1 
                              Uniform f32_4* %331 = OpAccessChain %17 %330 %19 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFMul %329 %333 
                                       f32_4 %335 = OpLoad %221 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %221 %336 
                              Uniform f32_4* %337 = OpAccessChain %17 %330 %88 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %70 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 0 0 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %221 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                       f32_4 %346 = OpLoad %221 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %221 %347 
                              Uniform f32_4* %348 = OpAccessChain %17 %330 %58 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %70 
                                       f32_3 %352 = OpVectorShuffle %351 %351 3 3 3 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %221 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %221 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %221 %358 
                                       f32_4 %359 = OpLoad %221 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                              Uniform f32_4* %361 = OpAccessChain %17 %330 %82 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %360 %363 
                                       f32_4 %365 = OpLoad %221 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %221 %366 
                read_only TextureCubeSampled %368 = OpLoad %367 
                                       f32_4 %369 = OpLoad %221 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %372 = OpImageSampleImplicitLod %368 %370 Bias %7 
                                         f32 %373 = OpCompositeExtract %372 3 
                                                      OpStore %162 %373 
                                Private f32* %374 = OpAccessChain %9 %30 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpLoad %162 
                                         f32 %377 = OpFMul %375 %376 
                                Private f32* %378 = OpAccessChain %9 %30 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                              Uniform f32_4* %382 = OpAccessChain %17 %381 
                                       f32_4 %383 = OpLoad %382 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFMul %380 %384 
                                       f32_4 %386 = OpLoad %221 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %221 %387 
                  read_only Texture2DSampled %390 = OpLoad %389 
                                       f32_2 %391 = OpLoad %41 
                                       f32_4 %392 = OpImageSampleImplicitLod %390 %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                                      OpStore %388 %393 
                  read_only Texture2DSampled %396 = OpLoad %395 
                                       f32_2 %397 = OpLoad %41 
                                       f32_4 %398 = OpImageSampleImplicitLod %396 %397 
                                                      OpStore %394 %398 
                  read_only Texture2DSampled %401 = OpLoad %400 
                                       f32_2 %402 = OpLoad %41 
                                       f32_4 %403 = OpImageSampleImplicitLod %401 %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                                      OpStore %399 %404 
                                       f32_3 %406 = OpLoad %399 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_3 %412 = OpFAdd %409 %411 
                                                      OpStore %405 %412 
                                       f32_3 %414 = OpLoad %405 
                                       f32_3 %415 = OpLoad %405 
                                         f32 %416 = OpDot %414 %415 
                                Private f32* %417 = OpAccessChain %413 %30 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %413 %30 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpExtInst %1 32 %419 
                                Private f32* %421 = OpAccessChain %413 %30 
                                                      OpStore %421 %420 
                                       f32_4 %422 = OpLoad %413 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 0 0 
                                       f32_3 %424 = OpLoad %405 
                                       f32_3 %425 = OpFMul %423 %424 
                                                      OpStore %405 %425 
                                       f32_4 %426 = OpLoad %70 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 3 
                              Uniform f32_3* %429 = OpAccessChain %17 %88 
                                       f32_3 %430 = OpLoad %429 
                                       f32_3 %431 = OpFNegate %430 
                                       f32_3 %432 = OpFAdd %427 %431 
                                       f32_4 %433 = OpLoad %70 
                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
                                                      OpStore %70 %434 
                                       f32_4 %435 = OpLoad %70 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_4 %437 = OpLoad %70 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                         f32 %439 = OpDot %436 %438 
                                Private f32* %440 = OpAccessChain %9 %30 
                                                      OpStore %440 %439 
                                Private f32* %441 = OpAccessChain %9 %30 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpExtInst %1 32 %442 
                                Private f32* %444 = OpAccessChain %9 %30 
                                                      OpStore %444 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 0 0 
                                       f32_4 %447 = OpLoad %70 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFMul %446 %448 
                                       f32_4 %450 = OpLoad %70 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %70 %451 
                                Private f32* %452 = OpAccessChain %394 %143 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFNegate %453 
                                         f32 %455 = OpFAdd %454 %67 
                                Private f32* %456 = OpAccessChain %413 %30 
                                                      OpStore %456 %455 
                                       f32_3 %457 = OpLoad %153 
                                       f32_3 %458 = OpFNegate %457 
                                         f32 %459 = OpLoad %166 
                                       f32_3 %460 = OpCompositeConstruct %459 %459 %459 
                                       f32_3 %461 = OpFMul %458 %460 
                                       f32_4 %462 = OpLoad %70 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                       f32_3 %464 = OpFNegate %463 
                                       f32_3 %465 = OpFAdd %461 %464 
                                                      OpStore %153 %465 
                                       f32_3 %466 = OpLoad %153 
                                       f32_3 %467 = OpLoad %153 
                                         f32 %468 = OpDot %466 %467 
                                                      OpStore %166 %468 
                                         f32 %469 = OpLoad %166 
                                         f32 %471 = OpExtInst %1 40 %469 %470 
                                                      OpStore %166 %471 
                                         f32 %472 = OpLoad %166 
                                         f32 %473 = OpExtInst %1 32 %472 
                                                      OpStore %166 %473 
                                       f32_3 %474 = OpLoad %153 
                                         f32 %475 = OpLoad %166 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %153 %477 
                                       f32_3 %478 = OpLoad %405 
                                       f32_4 %479 = OpLoad %70 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpFNegate %480 
                                         f32 %482 = OpDot %478 %481 
                                                      OpStore %166 %482 
                                       f32_3 %483 = OpLoad %405 
                                       f32_3 %484 = OpLoad %79 
                                       f32_3 %485 = OpFNegate %484 
                                         f32 %486 = OpDot %483 %485 
                                Private f32* %487 = OpAccessChain %70 %30 
                                                      OpStore %487 %486 
                                Private f32* %488 = OpAccessChain %70 %30 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpExtInst %1 43 %489 %196 %67 
                                Private f32* %491 = OpAccessChain %70 %30 
                                                      OpStore %491 %490 
                                       f32_3 %492 = OpLoad %405 
                                       f32_3 %493 = OpLoad %153 
                                         f32 %494 = OpDot %492 %493 
                                Private f32* %495 = OpAccessChain %41 %30 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %41 %30 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpExtInst %1 43 %497 %196 %67 
                                Private f32* %499 = OpAccessChain %41 %30 
                                                      OpStore %499 %498 
                                       f32_3 %500 = OpLoad %79 
                                       f32_3 %501 = OpFNegate %500 
                                       f32_3 %502 = OpLoad %153 
                                         f32 %503 = OpDot %501 %502 
                                Private f32* %504 = OpAccessChain %153 %30 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %153 %30 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpExtInst %1 43 %506 %196 %67 
                                Private f32* %508 = OpAccessChain %153 %30 
                                                      OpStore %508 %507 
                                Private f32* %510 = OpAccessChain %153 %30 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %153 %30 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFAdd %511 %513 
                                Private f32* %515 = OpAccessChain %509 %30 
                                                      OpStore %515 %514 
                                Private f32* %516 = OpAccessChain %153 %30 
                                         f32 %517 = OpLoad %516 
                                Private f32* %518 = OpAccessChain %509 %30 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFMul %517 %519 
                                Private f32* %521 = OpAccessChain %509 %30 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %509 %30 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %413 %30 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFMul %523 %525 
                                         f32 %528 = OpFAdd %526 %527 
                                Private f32* %529 = OpAccessChain %509 %30 
                                                      OpStore %529 %528 
                                Private f32* %531 = OpAccessChain %70 %30 
                                         f32 %532 = OpLoad %531 
                                         f32 %533 = OpFNegate %532 
                                         f32 %534 = OpFAdd %533 %67 
                                                      OpStore %530 %534 
                                         f32 %536 = OpLoad %530 
                                         f32 %537 = OpLoad %530 
                                         f32 %538 = OpFMul %536 %537 
                                                      OpStore %535 %538 
                                         f32 %539 = OpLoad %535 
                                         f32 %540 = OpLoad %535 
                                         f32 %541 = OpFMul %539 %540 
                                                      OpStore %535 %541 
                                         f32 %542 = OpLoad %530 
                                         f32 %543 = OpLoad %535 
                                         f32 %544 = OpFMul %542 %543 
                                                      OpStore %530 %544 
                                Private f32* %545 = OpAccessChain %509 %30 
                                         f32 %546 = OpLoad %545 
                                         f32 %547 = OpLoad %530 
                                         f32 %548 = OpFMul %546 %547 
                                         f32 %549 = OpFAdd %548 %67 
                                                      OpStore %530 %549 
                                         f32 %550 = OpLoad %166 
                                         f32 %551 = OpExtInst %1 4 %550 
                                         f32 %552 = OpFNegate %551 
                                         f32 %553 = OpFAdd %552 %67 
                                                      OpStore %535 %553 
                                         f32 %555 = OpLoad %535 
                                         f32 %556 = OpLoad %535 
                                         f32 %557 = OpFMul %555 %556 
                                                      OpStore %554 %557 
                                         f32 %558 = OpLoad %554 
                                         f32 %559 = OpLoad %554 
                                         f32 %560 = OpFMul %558 %559 
                                                      OpStore %554 %560 
                                         f32 %561 = OpLoad %535 
                                         f32 %562 = OpLoad %554 
                                         f32 %563 = OpFMul %561 %562 
                                                      OpStore %535 %563 
                                Private f32* %564 = OpAccessChain %509 %30 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpLoad %535 
                                         f32 %567 = OpFMul %565 %566 
                                         f32 %568 = OpFAdd %567 %67 
                                Private f32* %569 = OpAccessChain %509 %30 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %509 %30 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpLoad %530 
                                         f32 %573 = OpFMul %571 %572 
                                Private f32* %574 = OpAccessChain %509 %30 
                                                      OpStore %574 %573 
                                Private f32* %576 = OpAccessChain %70 %30 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %509 %30 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                                      OpStore %575 %580 
                                Private f32* %581 = OpAccessChain %413 %30 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %413 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                Private f32* %586 = OpAccessChain %413 %30 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %413 %30 
                                         f32 %588 = OpLoad %587 
                                         f32 %590 = OpExtInst %1 40 %588 %589 
                                Private f32* %591 = OpAccessChain %413 %30 
                                                      OpStore %591 %590 
                                Private f32* %593 = OpAccessChain %413 %30 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFNegate %594 
                                         f32 %596 = OpFAdd %595 %67 
                                                      OpStore %592 %596 
                                         f32 %598 = OpLoad %166 
                                         f32 %599 = OpExtInst %1 4 %598 
                                         f32 %600 = OpLoad %592 
                                         f32 %601 = OpFMul %599 %600 
                                Private f32* %602 = OpAccessChain %413 %30 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFAdd %601 %603 
                                                      OpStore %597 %604 
                                Private f32* %605 = OpAccessChain %70 %30 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpLoad %592 
                                         f32 %608 = OpFMul %606 %607 
                                Private f32* %609 = OpAccessChain %413 %30 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFAdd %608 %610 
                                                      OpStore %49 %611 
                                         f32 %612 = OpLoad %49 
                                         f32 %613 = OpLoad %166 
                                         f32 %614 = OpExtInst %1 4 %613 
                                         f32 %615 = OpFMul %612 %614 
                                                      OpStore %49 %615 
                                Private f32* %616 = OpAccessChain %70 %30 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpLoad %597 
                                         f32 %619 = OpFMul %617 %618 
                                         f32 %620 = OpLoad %49 
                                         f32 %621 = OpFAdd %619 %620 
                                                      OpStore %49 %621 
                                         f32 %622 = OpLoad %49 
                                         f32 %624 = OpFAdd %622 %623 
                                                      OpStore %49 %624 
                                         f32 %626 = OpLoad %49 
                                         f32 %627 = OpFDiv %625 %626 
                                                      OpStore %49 %627 
                                Private f32* %628 = OpAccessChain %413 %30 
                                         f32 %629 = OpLoad %628 
                                Private f32* %630 = OpAccessChain %413 %30 
                                         f32 %631 = OpLoad %630 
                                         f32 %632 = OpFMul %629 %631 
                                Private f32* %633 = OpAccessChain %413 %30 
                                                      OpStore %633 %632 
                                Private f32* %634 = OpAccessChain %41 %30 
                                         f32 %635 = OpLoad %634 
                                Private f32* %636 = OpAccessChain %413 %30 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %635 %637 
                                Private f32* %639 = OpAccessChain %41 %30 
                                         f32 %640 = OpLoad %639 
                                         f32 %641 = OpFNegate %640 
                                         f32 %642 = OpFAdd %638 %641 
                                                      OpStore %597 %642 
                                         f32 %643 = OpLoad %597 
                                Private f32* %644 = OpAccessChain %41 %30 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFMul %643 %645 
                                         f32 %647 = OpFAdd %646 %67 
                                Private f32* %648 = OpAccessChain %41 %30 
                                                      OpStore %648 %647 
                                Private f32* %649 = OpAccessChain %413 %30 
                                         f32 %650 = OpLoad %649 
                                         f32 %652 = OpFMul %650 %651 
                                Private f32* %653 = OpAccessChain %413 %30 
                                                      OpStore %653 %652 
                                Private f32* %654 = OpAccessChain %41 %30 
                                         f32 %655 = OpLoad %654 
                                Private f32* %656 = OpAccessChain %41 %30 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFMul %655 %657 
                                         f32 %660 = OpFAdd %658 %659 
                                Private f32* %661 = OpAccessChain %41 %30 
                                                      OpStore %661 %660 
                                Private f32* %662 = OpAccessChain %413 %30 
                                         f32 %663 = OpLoad %662 
                                Private f32* %664 = OpAccessChain %41 %30 
                                         f32 %665 = OpLoad %664 
                                         f32 %666 = OpFDiv %663 %665 
                                Private f32* %667 = OpAccessChain %9 %30 
                                                      OpStore %667 %666 
                                Private f32* %668 = OpAccessChain %9 %30 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpLoad %49 
                                         f32 %671 = OpFMul %669 %670 
                                Private f32* %672 = OpAccessChain %9 %30 
                                                      OpStore %672 %671 
                                Private f32* %673 = OpAccessChain %9 %30 
                                         f32 %674 = OpLoad %673 
                                         f32 %676 = OpFMul %674 %675 
                                Private f32* %677 = OpAccessChain %9 %30 
                                                      OpStore %677 %676 
                                Private f32* %678 = OpAccessChain %9 %30 
                                         f32 %679 = OpLoad %678 
                                         f32 %681 = OpExtInst %1 40 %679 %680 
                                Private f32* %682 = OpAccessChain %9 %30 
                                                      OpStore %682 %681 
                                Private f32* %683 = OpAccessChain %9 %30 
                                         f32 %684 = OpLoad %683 
                                         f32 %685 = OpExtInst %1 31 %684 
                                Private f32* %686 = OpAccessChain %9 %30 
                                                      OpStore %686 %685 
                                Private f32* %687 = OpAccessChain %70 %30 
                                         f32 %688 = OpLoad %687 
                                Private f32* %689 = OpAccessChain %9 %30 
                                         f32 %690 = OpLoad %689 
                                         f32 %691 = OpFMul %688 %690 
                                Private f32* %692 = OpAccessChain %9 %30 
                                                      OpStore %692 %691 
                                       f32_4 %693 = OpLoad %394 
                                       f32_3 %694 = OpVectorShuffle %693 %693 0 1 2 
                                       f32_4 %695 = OpLoad %394 
                                       f32_3 %696 = OpVectorShuffle %695 %695 0 1 2 
                                         f32 %697 = OpDot %694 %696 
                                Private f32* %698 = OpAccessChain %509 %30 
                                                      OpStore %698 %697 
                                Private f32* %700 = OpAccessChain %509 %30 
                                         f32 %701 = OpLoad %700 
                                        bool %702 = OpFOrdNotEqual %701 %196 
                                                      OpStore %699 %702 
                                        bool %704 = OpLoad %699 
                                                      OpSelectionMerge %706 None 
                                                      OpBranchConditional %704 %705 %707 
                                             %705 = OpLabel 
                                                      OpStore %703 %67 
                                                      OpBranch %706 
                                             %707 = OpLabel 
                                                      OpStore %703 %196 
                                                      OpBranch %706 
                                             %706 = OpLabel 
                                         f32 %708 = OpLoad %703 
                                                      OpStore %49 %708 
                                         f32 %709 = OpLoad %49 
                                Private f32* %710 = OpAccessChain %9 %30 
                                         f32 %711 = OpLoad %710 
                                         f32 %712 = OpFMul %709 %711 
                                Private f32* %713 = OpAccessChain %9 %30 
                                                      OpStore %713 %712 
                                         f32 %714 = OpLoad %575 
                                       f32_3 %715 = OpCompositeConstruct %714 %714 %714 
                                       f32_4 %716 = OpLoad %221 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 2 
                                       f32_3 %718 = OpFMul %715 %717 
                                                      OpStore %509 %718 
                                       f32_4 %719 = OpLoad %221 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                       f32_4 %721 = OpLoad %9 
                                       f32_3 %722 = OpVectorShuffle %721 %721 0 0 0 
                                       f32_3 %723 = OpFMul %720 %722 
                                       f32_4 %724 = OpLoad %9 
                                       f32_4 %725 = OpVectorShuffle %724 %723 4 1 5 6 
                                                      OpStore %9 %725 
                                Private f32* %726 = OpAccessChain %153 %30 
                                         f32 %727 = OpLoad %726 
                                         f32 %728 = OpFNegate %727 
                                         f32 %729 = OpFAdd %728 %67 
                                                      OpStore %554 %729 
                                         f32 %731 = OpLoad %554 
                                         f32 %732 = OpLoad %554 
                                         f32 %733 = OpFMul %731 %732 
                                Private f32* %734 = OpAccessChain %730 %30 
                                                      OpStore %734 %733 
                                Private f32* %735 = OpAccessChain %730 %30 
                                         f32 %736 = OpLoad %735 
                                Private f32* %737 = OpAccessChain %730 %30 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFMul %736 %738 
                                Private f32* %740 = OpAccessChain %730 %30 
                                                      OpStore %740 %739 
                                         f32 %741 = OpLoad %554 
                                Private f32* %742 = OpAccessChain %730 %30 
                                         f32 %743 = OpLoad %742 
                                         f32 %744 = OpFMul %741 %743 
                                                      OpStore %554 %744 
                                       f32_4 %745 = OpLoad %394 
                                       f32_3 %746 = OpVectorShuffle %745 %745 0 1 2 
                                       f32_3 %747 = OpFNegate %746 
                                       f32_3 %749 = OpFAdd %747 %748 
                                                      OpStore %730 %749 
                                       f32_3 %750 = OpLoad %730 
                                         f32 %751 = OpLoad %554 
                                       f32_3 %752 = OpCompositeConstruct %751 %751 %751 
                                       f32_3 %753 = OpFMul %750 %752 
                                       f32_4 %754 = OpLoad %394 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFAdd %753 %755 
                                                      OpStore %730 %756 
                                       f32_4 %757 = OpLoad %9 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 2 3 
                                       f32_3 %759 = OpLoad %730 
                                       f32_3 %760 = OpFMul %758 %759 
                                       f32_4 %761 = OpLoad %9 
                                       f32_4 %762 = OpVectorShuffle %761 %760 4 5 6 3 
                                                      OpStore %9 %762 
                                       f32_3 %763 = OpLoad %388 
                                       f32_3 %764 = OpLoad %509 
                                       f32_3 %765 = OpFMul %763 %764 
                                       f32_4 %766 = OpLoad %9 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                       f32_3 %768 = OpFAdd %765 %767 
                                       f32_4 %769 = OpLoad %9 
                                       f32_4 %770 = OpVectorShuffle %769 %768 4 5 6 3 
                                                      OpStore %9 %770 
                                       f32_4 %771 = OpLoad %9 
                                       f32_3 %772 = OpVectorShuffle %771 %771 0 1 2 
                                       f32_3 %773 = OpFNegate %772 
                                       f32_4 %774 = OpLoad %413 
                                       f32_4 %775 = OpVectorShuffle %774 %773 4 5 6 3 
                                                      OpStore %413 %775 
                                Private f32* %776 = OpAccessChain %413 %143 
                                                      OpStore %776 %410 
                                       f32_4 %779 = OpLoad %413 
                                       f32_4 %780 = OpExtInst %1 29 %779 
                                                      OpStore %778 %780 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat3.xyz = u_xlat10_3.www * _LightColor.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_5.xyz;
    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat16_5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_12 = max(u_xlat16_12, 0.00200000009);
    u_xlat16_1 = u_xlat16_12 * u_xlat16_12;
    u_xlat7 = u_xlat18 * u_xlat16_1 + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_1 = u_xlat16_1 * 0.318309873;
    u_xlat18 = u_xlat16_1 / u_xlat18;
    u_xlat16_1 = (-u_xlat16_12) + 1.0;
    u_xlat7 = abs(u_xlat6) * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat0.x * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat12 * abs(u_xlat6);
    u_xlat6 = -abs(u_xlat6) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat6 = u_xlat12 * u_xlat6 + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 512
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %504 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %155 DescriptorSet 155 
                                                      OpDecorate %155 Binding 155 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %251 DescriptorSet 251 
                                                      OpDecorate %251 Binding 251 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %504 Location 504 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %10 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %80 = OpConstant 3 
                                              %81 = OpTypePointer Uniform %7 
                                          i32 %86 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                         i32 %125 = OpConstant 4 
                                Private f32* %147 = OpVariable Private 
                                         u32 %151 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %155 = OpVariable UniformConstant 
                              Private f32_3* %161 = OpVariable Private 
                                         i32 %164 = OpConstant 5 
                              Private f32_3* %169 = OpVariable Private 
                                         f32 %190 = OpConstant 3.674022E-40 
                              Private f32_3* %198 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %199 = OpVariable UniformConstant 
                              Private f32_3* %204 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                       f32_3 %207 = OpConstantComposite %206 %206 %206 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_3 %210 = OpConstantComposite %209 %209 %209 
                                Private f32* %212 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %245 = OpVariable Private 
                              Private f32_4* %250 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %251 = OpVariable UniformConstant 
                              Private f32_4* %255 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %256 = OpVariable UniformConstant 
                                Private f32* %263 = OpVariable Private 
                                Private f32* %268 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
                                Private f32* %275 = OpVariable Private 
                                         f32 %294 = OpConstant 3.674022E-40 
                                         f32 %297 = OpConstant 3.674022E-40 
                                Private f32* %312 = OpVariable Private 
                              Private f32_3* %323 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %339 = OpConstant 3.674022E-40 
                                         f32 %346 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                              Private f32_3* %357 = OpVariable Private 
                                             %364 = OpTypeBool 
                                             %365 = OpTypePointer Private %364 
                               Private bool* %366 = OpVariable Private 
                                             %370 = OpTypePointer Function %6 
                                Private f32* %388 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                       f32_3 %406 = OpConstantComposite %66 %66 %66 
                                         f32 %449 = OpConstant 3.674022E-40 
                                Private f32* %463 = OpVariable Private 
                                             %503 = OpTypePointer Output %7 
                               Output f32_4* %504 = OpVariable Output 
                                             %509 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %371 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %69 = OpLoad %48 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %9 %75 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %16 %80 %18 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %79 %84 
                                                      OpStore %77 %85 
                               Uniform f32_4* %87 = OpAccessChain %16 %80 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %77 
                                        f32_3 %94 = OpFAdd %92 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 2 6 
                                                      OpStore %9 %96 
                               Uniform f32_4* %97 = OpAccessChain %16 %80 %57 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 2 2 2 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 3 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %9 %107 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                              Uniform f32_4* %110 = OpAccessChain %16 %80 %80 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_3* %119 = OpAccessChain %16 %86 
                                       f32_3 %120 = OpLoad %119 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %117 %121 
                                                      OpStore %77 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %126 = OpAccessChain %16 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %124 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 6 3 
                                                      OpStore %9 %132 
                                       f32_3 %133 = OpLoad %77 
                                       f32_3 %134 = OpLoad %77 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %48 %135 
                                         f32 %136 = OpLoad %48 
                                         f32 %137 = OpExtInst %1 32 %136 
                                                      OpStore %48 %137 
                                         f32 %138 = OpLoad %48 
                                       f32_3 %139 = OpCompositeConstruct %138 %138 %138 
                                       f32_3 %140 = OpLoad %77 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %77 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                         f32 %146 = OpDot %143 %145 
                                                      OpStore %48 %146 
                                         f32 %148 = OpLoad %48 
                                         f32 %149 = OpExtInst %1 32 %148 
                                                      OpStore %147 %149 
                                         f32 %150 = OpLoad %48 
                                Uniform f32* %152 = OpAccessChain %16 %125 %151 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %150 %153 
                                                      OpStore %48 %154 
                  read_only Texture2DSampled %156 = OpLoad %155 
                                         f32 %157 = OpLoad %48 
                                       f32_2 %158 = OpCompositeConstruct %157 %157 
                                       f32_4 %159 = OpImageSampleImplicitLod %156 %158 
                                         f32 %160 = OpCompositeExtract %159 3 
                                                      OpStore %48 %160 
                                         f32 %162 = OpLoad %48 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %163 %167 
                                                      OpStore %161 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFNegate %171 
                                         f32 %173 = OpLoad %147 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                                       f32_3 %176 = OpLoad %77 
                                       f32_3 %177 = OpFNegate %176 
                                       f32_3 %178 = OpFAdd %175 %177 
                                                      OpStore %169 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpLoad %147 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %9 %185 
                                       f32_3 %186 = OpLoad %169 
                                       f32_3 %187 = OpLoad %169 
                                         f32 %188 = OpDot %186 %187 
                                                      OpStore %48 %188 
                                         f32 %189 = OpLoad %48 
                                         f32 %191 = OpExtInst %1 40 %189 %190 
                                                      OpStore %48 %191 
                                         f32 %192 = OpLoad %48 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %48 %193 
                                         f32 %194 = OpLoad %48 
                                       f32_3 %195 = OpCompositeConstruct %194 %194 %194 
                                       f32_3 %196 = OpLoad %169 
                                       f32_3 %197 = OpFMul %195 %196 
                                                      OpStore %169 %197 
                  read_only Texture2DSampled %200 = OpLoad %199 
                                       f32_2 %201 = OpLoad %40 
                                       f32_4 %202 = OpImageSampleImplicitLod %200 %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                                      OpStore %198 %203 
                                       f32_3 %205 = OpLoad %198 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %211 = OpFAdd %208 %210 
                                                      OpStore %204 %211 
                                       f32_3 %213 = OpLoad %204 
                                       f32_3 %214 = OpLoad %204 
                                         f32 %215 = OpDot %213 %214 
                                                      OpStore %212 %215 
                                         f32 %216 = OpLoad %212 
                                         f32 %217 = OpExtInst %1 32 %216 
                                                      OpStore %212 %217 
                                         f32 %218 = OpLoad %212 
                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
                                       f32_3 %220 = OpLoad %204 
                                       f32_3 %221 = OpFMul %219 %220 
                                                      OpStore %204 %221 
                                       f32_3 %222 = OpLoad %204 
                                       f32_3 %223 = OpLoad %169 
                                         f32 %224 = OpDot %222 %223 
                                                      OpStore %48 %224 
                                         f32 %225 = OpLoad %48 
                                         f32 %227 = OpExtInst %1 43 %225 %226 %66 
                                                      OpStore %48 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFNegate %229 
                                       f32_3 %231 = OpLoad %169 
                                         f32 %232 = OpDot %230 %231 
                                                      OpStore %147 %232 
                                         f32 %233 = OpLoad %147 
                                         f32 %234 = OpExtInst %1 43 %233 %226 %66 
                                                      OpStore %147 %234 
                                       f32_3 %235 = OpLoad %204 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFNegate %237 
                                         f32 %239 = OpDot %235 %238 
                                Private f32* %240 = OpAccessChain %9 %29 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %9 %29 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 43 %242 %226 %66 
                                Private f32* %244 = OpAccessChain %9 %29 
                                                      OpStore %244 %243 
                                       f32_3 %246 = OpLoad %204 
                                       f32_3 %247 = OpLoad %77 
                                       f32_3 %248 = OpFNegate %247 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %245 %249 
                  read_only Texture2DSampled %252 = OpLoad %251 
                                       f32_2 %253 = OpLoad %40 
                                       f32_4 %254 = OpImageSampleImplicitLod %252 %253 
                                                      OpStore %250 %254 
                  read_only Texture2DSampled %257 = OpLoad %256 
                                       f32_2 %258 = OpLoad %40 
                                       f32_4 %259 = OpImageSampleImplicitLod %257 %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %255 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 2 6 
                                                      OpStore %255 %262 
                                Private f32* %264 = OpAccessChain %250 %151 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %66 
                                                      OpStore %263 %267 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpLoad %263 
                                         f32 %271 = OpFMul %269 %270 
                                                      OpStore %268 %271 
                                         f32 %272 = OpLoad %268 
                                         f32 %274 = OpExtInst %1 40 %272 %273 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %268 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFMul %276 %277 
                                                      OpStore %275 %278 
                                         f32 %279 = OpLoad %48 
                                         f32 %280 = OpLoad %275 
                                         f32 %281 = OpFMul %279 %280 
                                         f32 %282 = OpLoad %48 
                                         f32 %283 = OpFNegate %282 
                                         f32 %284 = OpFAdd %281 %283 
                                Private f32* %285 = OpAccessChain %169 %29 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %169 %29 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpLoad %48 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %66 
                                                      OpStore %48 %290 
                                         f32 %291 = OpLoad %48 
                                         f32 %292 = OpLoad %48 
                                         f32 %293 = OpFMul %291 %292 
                                         f32 %295 = OpFAdd %293 %294 
                                                      OpStore %48 %295 
                                         f32 %296 = OpLoad %275 
                                         f32 %298 = OpFMul %296 %297 
                                                      OpStore %275 %298 
                                         f32 %299 = OpLoad %275 
                                         f32 %300 = OpLoad %48 
                                         f32 %301 = OpFDiv %299 %300 
                                                      OpStore %48 %301 
                                         f32 %302 = OpLoad %268 
                                         f32 %303 = OpFNegate %302 
                                         f32 %304 = OpFAdd %303 %66 
                                                      OpStore %275 %304 
                                         f32 %305 = OpLoad %245 
                                         f32 %306 = OpExtInst %1 4 %305 
                                         f32 %307 = OpLoad %275 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpLoad %268 
                                         f32 %310 = OpFAdd %308 %309 
                                Private f32* %311 = OpAccessChain %169 %29 
                                                      OpStore %311 %310 
                                Private f32* %313 = OpAccessChain %9 %29 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpLoad %275 
                                         f32 %316 = OpFMul %314 %315 
                                         f32 %317 = OpLoad %268 
                                         f32 %318 = OpFAdd %316 %317 
                                                      OpStore %312 %318 
                                         f32 %319 = OpLoad %245 
                                         f32 %320 = OpExtInst %1 4 %319 
                                         f32 %321 = OpLoad %312 
                                         f32 %322 = OpFMul %320 %321 
                                                      OpStore %312 %322 
                                         f32 %324 = OpLoad %245 
                                         f32 %325 = OpExtInst %1 4 %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %326 %66 
                                Private f32* %328 = OpAccessChain %323 %29 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %9 %29 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %169 %29 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                         f32 %334 = OpLoad %312 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %245 %335 
                                         f32 %336 = OpLoad %245 
                                         f32 %338 = OpFAdd %336 %337 
                                                      OpStore %245 %338 
                                         f32 %340 = OpLoad %245 
                                         f32 %341 = OpFDiv %339 %340 
                                                      OpStore %245 %341 
                                         f32 %342 = OpLoad %48 
                                         f32 %343 = OpLoad %245 
                                         f32 %344 = OpFMul %342 %343 
                                                      OpStore %245 %344 
                                         f32 %345 = OpLoad %245 
                                         f32 %347 = OpFMul %345 %346 
                                                      OpStore %245 %347 
                                         f32 %348 = OpLoad %245 
                                         f32 %350 = OpExtInst %1 40 %348 %349 
                                                      OpStore %245 %350 
                                         f32 %351 = OpLoad %245 
                                         f32 %352 = OpExtInst %1 31 %351 
                                                      OpStore %245 %352 
                                Private f32* %353 = OpAccessChain %9 %29 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpLoad %245 
                                         f32 %356 = OpFMul %354 %355 
                                                      OpStore %245 %356 
                                       f32_4 %358 = OpLoad %250 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %250 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                         f32 %362 = OpDot %359 %361 
                                Private f32* %363 = OpAccessChain %357 %29 
                                                      OpStore %363 %362 
                                Private f32* %367 = OpAccessChain %357 %29 
                                         f32 %368 = OpLoad %367 
                                        bool %369 = OpFOrdNotEqual %368 %226 
                                                      OpStore %366 %369 
                                        bool %372 = OpLoad %366 
                                                      OpSelectionMerge %374 None 
                                                      OpBranchConditional %372 %373 %375 
                                             %373 = OpLabel 
                                                      OpStore %371 %66 
                                                      OpBranch %374 
                                             %375 = OpLabel 
                                                      OpStore %371 %226 
                                                      OpBranch %374 
                                             %374 = OpLabel 
                                         f32 %376 = OpLoad %371 
                                                      OpStore %48 %376 
                                         f32 %377 = OpLoad %48 
                                         f32 %378 = OpLoad %245 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %245 %379 
                                       f32_3 %380 = OpLoad %161 
                                         f32 %381 = OpLoad %245 
                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
                                       f32_3 %383 = OpFMul %380 %382 
                                                      OpStore %169 %383 
                                         f32 %384 = OpLoad %147 
                                         f32 %385 = OpFNegate %384 
                                         f32 %386 = OpFAdd %385 %66 
                                Private f32* %387 = OpAccessChain %357 %29 
                                                      OpStore %387 %386 
                                Private f32* %389 = OpAccessChain %357 %29 
                                         f32 %390 = OpLoad %389 
                                Private f32* %391 = OpAccessChain %357 %29 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFMul %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpLoad %388 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %388 %396 
                                Private f32* %397 = OpAccessChain %357 %29 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %388 
                                         f32 %400 = OpFMul %398 %399 
                                Private f32* %401 = OpAccessChain %357 %29 
                                                      OpStore %401 %400 
                                       f32_4 %403 = OpLoad %250 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFNegate %404 
                                       f32_3 %407 = OpFAdd %405 %406 
                                                      OpStore %402 %407 
                                       f32_3 %408 = OpLoad %402 
                                       f32_3 %409 = OpLoad %357 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 0 0 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %250 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %411 %413 
                                                      OpStore %357 %414 
                                       f32_3 %415 = OpLoad %169 
                                       f32_3 %416 = OpLoad %357 
                                       f32_3 %417 = OpFMul %415 %416 
                                                      OpStore %77 %417 
                                Private f32* %418 = OpAccessChain %323 %29 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %323 %29 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %357 %29 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %357 %29 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %357 %29 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFMul %425 %427 
                                Private f32* %429 = OpAccessChain %357 %29 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %323 %29 
                                         f32 %431 = OpLoad %430 
                                Private f32* %432 = OpAccessChain %357 %29 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFMul %431 %433 
                                Private f32* %435 = OpAccessChain %323 %29 
                                                      OpStore %435 %434 
                                         f32 %436 = OpLoad %147 
                                         f32 %437 = OpLoad %147 
                                         f32 %438 = OpFAdd %436 %437 
                                Private f32* %439 = OpAccessChain %357 %29 
                                                      OpStore %439 %438 
                                         f32 %440 = OpLoad %147 
                                Private f32* %441 = OpAccessChain %357 %29 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFMul %440 %442 
                                Private f32* %444 = OpAccessChain %357 %29 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %357 %29 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %263 
                                         f32 %448 = OpFMul %446 %447 
                                         f32 %450 = OpFAdd %448 %449 
                                Private f32* %451 = OpAccessChain %357 %29 
                                                      OpStore %451 %450 
                                Private f32* %452 = OpAccessChain %357 %29 
                                         f32 %453 = OpLoad %452 
                                Private f32* %454 = OpAccessChain %323 %29 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFMul %453 %455 
                                         f32 %457 = OpFAdd %456 %66 
                                Private f32* %458 = OpAccessChain %323 %29 
                                                      OpStore %458 %457 
                                Private f32* %459 = OpAccessChain %9 %29 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFNegate %460 
                                         f32 %462 = OpFAdd %461 %66 
                                                      OpStore %388 %462 
                                         f32 %464 = OpLoad %388 
                                         f32 %465 = OpLoad %388 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %463 %466 
                                         f32 %467 = OpLoad %463 
                                         f32 %468 = OpLoad %463 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %463 %469 
                                         f32 %470 = OpLoad %388 
                                         f32 %471 = OpLoad %463 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %388 %472 
                                Private f32* %473 = OpAccessChain %357 %29 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpLoad %388 
                                         f32 %476 = OpFMul %474 %475 
                                         f32 %477 = OpFAdd %476 %66 
                                Private f32* %478 = OpAccessChain %357 %29 
                                                      OpStore %478 %477 
                                Private f32* %479 = OpAccessChain %323 %29 
                                         f32 %480 = OpLoad %479 
                                Private f32* %481 = OpAccessChain %357 %29 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Private f32* %484 = OpAccessChain %323 %29 
                                                      OpStore %484 %483 
                                Private f32* %485 = OpAccessChain %9 %29 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %323 %29 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFMul %486 %488 
                                Private f32* %490 = OpAccessChain %9 %29 
                                                      OpStore %490 %489 
                                       f32_4 %491 = OpLoad %9 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 0 0 
                                       f32_3 %493 = OpLoad %161 
                                       f32_3 %494 = OpFMul %492 %493 
                                                      OpStore %323 %494 
                                       f32_4 %495 = OpLoad %255 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 3 
                                       f32_3 %497 = OpLoad %323 
                                       f32_3 %498 = OpFMul %496 %497 
                                       f32_3 %499 = OpLoad %77 
                                       f32_3 %500 = OpFAdd %498 %499 
                                       f32_4 %501 = OpLoad %9 
                                       f32_4 %502 = OpVectorShuffle %501 %500 4 5 6 3 
                                                      OpStore %9 %502 
                                       f32_4 %505 = OpLoad %9 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                       f32_4 %507 = OpLoad %504 
                                       f32_4 %508 = OpVectorShuffle %507 %506 4 5 6 3 
                                                      OpStore %504 %508 
                                 Output f32* %510 = OpAccessChain %504 %151 
                                                      OpStore %510 %66 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
float u_xlat6;
float u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat0.xyz) * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
    u_xlat18 = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1;
    u_xlat19 = u_xlat18 * u_xlat16_7 + (-u_xlat18);
    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat18 = u_xlat16_7 / u_xlat18;
    u_xlat0.x = dot(u_xlat16_3.xyz, (-u_xlat0.xyz));
    u_xlat6 = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat16_12 = (-u_xlat16_1) + 1.0;
    u_xlat7 = abs(u_xlat0.x) * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat6 * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = vec3(u_xlat12) * _LightColor.xyz;
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    SV_Target0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 499
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %491 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %208 DescriptorSet 208 
                                                      OpDecorate %208 Binding 208 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %491 Location 491 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %10 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %80 = OpConstant 3 
                                              %81 = OpTypePointer Uniform %7 
                                          i32 %86 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                         i32 %138 = OpConstant 4 
                                         f32 %155 = OpConstant 3.674022E-40 
                              Private f32_3* %163 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %164 = OpVariable UniformConstant 
                              Private f32_3* %169 = OpVariable Private 
                                         f32 %171 = OpConstant 3.674022E-40 
                                       f32_3 %172 = OpConstantComposite %171 %171 %171 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                                Private f32* %177 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                Private f32* %193 = OpVariable Private 
                              Private f32_4* %202 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %203 = OpVariable UniformConstant 
                              Private f32_4* %207 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %208 = OpVariable UniformConstant 
                                Private f32* %215 = OpVariable Private 
                                         u32 %216 = OpConstant 3 
                                Private f32* %221 = OpVariable Private 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %228 = OpVariable Private 
                                Private f32* %232 = OpVariable Private 
                                         f32 %246 = OpConstant 3.674022E-40 
                                         f32 %249 = OpConstant 3.674022E-40 
                                Private f32* %260 = OpVariable Private 
                                Private f32* %269 = OpVariable Private 
                                Private f32* %273 = OpVariable Private 
                                Private f32* %281 = OpVariable Private 
                              Private f32_3* %292 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         f32 %310 = OpConstant 3.674022E-40 
                                         f32 %322 = OpConstant 3.674022E-40 
                                         f32 %327 = OpConstant 3.674022E-40 
                              Private f32_3* %339 = OpVariable Private 
                                             %346 = OpTypeBool 
                                             %347 = OpTypePointer Private %346 
                               Private bool* %348 = OpVariable Private 
                                             %352 = OpTypePointer Function %6 
                                         i32 %366 = OpConstant 5 
                                Private f32* %377 = OpVariable Private 
                              Private f32_3* %391 = OpVariable Private 
                                       f32_3 %395 = OpConstantComposite %66 %66 %66 
                                         f32 %423 = OpConstant 3.674022E-40 
                                Private f32* %449 = OpVariable Private 
                                             %490 = OpTypePointer Output %7 
                               Output f32_4* %491 = OpVariable Output 
                                             %496 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %353 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %69 = OpLoad %48 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %9 %75 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %16 %80 %18 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %79 %84 
                                                      OpStore %77 %85 
                               Uniform f32_4* %87 = OpAccessChain %16 %80 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %77 
                                        f32_3 %94 = OpFAdd %92 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 2 6 
                                                      OpStore %9 %96 
                               Uniform f32_4* %97 = OpAccessChain %16 %80 %57 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 2 2 2 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 3 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %9 %107 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                              Uniform f32_4* %110 = OpAccessChain %16 %80 %80 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_3* %119 = OpAccessChain %16 %86 
                                       f32_3 %120 = OpLoad %119 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %117 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %48 %129 
                                         f32 %130 = OpLoad %48 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %48 %131 
                                       f32_4 %132 = OpLoad %9 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFNegate %133 
                                         f32 %135 = OpLoad %48 
                                       f32_3 %136 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %137 = OpFMul %134 %136 
                              Uniform f32_4* %139 = OpAccessChain %16 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFNegate %141 
                                       f32_3 %143 = OpFAdd %137 %142 
                                                      OpStore %77 %143 
                                         f32 %144 = OpLoad %48 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_3 %151 = OpLoad %77 
                                       f32_3 %152 = OpLoad %77 
                                         f32 %153 = OpDot %151 %152 
                                                      OpStore %48 %153 
                                         f32 %154 = OpLoad %48 
                                         f32 %156 = OpExtInst %1 40 %154 %155 
                                                      OpStore %48 %156 
                                         f32 %157 = OpLoad %48 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %48 %158 
                                         f32 %159 = OpLoad %48 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_3 %161 = OpLoad %77 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %77 %162 
                  read_only Texture2DSampled %165 = OpLoad %164 
                                       f32_2 %166 = OpLoad %40 
                                       f32_4 %167 = OpImageSampleImplicitLod %165 %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                                      OpStore %163 %168 
                                       f32_3 %170 = OpLoad %163 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %176 = OpFAdd %173 %175 
                                                      OpStore %169 %176 
                                       f32_3 %178 = OpLoad %169 
                                       f32_3 %179 = OpLoad %169 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %177 %180 
                                         f32 %181 = OpLoad %177 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %177 %182 
                                         f32 %183 = OpLoad %177 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %169 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %169 %186 
                                       f32_3 %187 = OpLoad %169 
                                       f32_3 %188 = OpLoad %77 
                                         f32 %189 = OpDot %187 %188 
                                                      OpStore %48 %189 
                                         f32 %190 = OpLoad %48 
                                         f32 %192 = OpExtInst %1 43 %190 %191 %66 
                                                      OpStore %48 %192 
                              Uniform f32_4* %194 = OpAccessChain %16 %138 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpLoad %77 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %193 %199 
                                         f32 %200 = OpLoad %193 
                                         f32 %201 = OpExtInst %1 43 %200 %191 %66 
                                                      OpStore %193 %201 
                  read_only Texture2DSampled %204 = OpLoad %203 
                                       f32_2 %205 = OpLoad %40 
                                       f32_4 %206 = OpImageSampleImplicitLod %204 %205 
                                                      OpStore %202 %206 
                  read_only Texture2DSampled %209 = OpLoad %208 
                                       f32_2 %210 = OpLoad %40 
                                       f32_4 %211 = OpImageSampleImplicitLod %209 %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_4 %213 = OpLoad %207 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 2 6 
                                                      OpStore %207 %214 
                                Private f32* %217 = OpAccessChain %202 %216 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                         f32 %220 = OpFAdd %219 %66 
                                                      OpStore %215 %220 
                                         f32 %222 = OpLoad %215 
                                         f32 %223 = OpLoad %215 
                                         f32 %224 = OpFMul %222 %223 
                                                      OpStore %221 %224 
                                         f32 %225 = OpLoad %221 
                                         f32 %227 = OpExtInst %1 40 %225 %226 
                                                      OpStore %221 %227 
                                         f32 %229 = OpLoad %221 
                                         f32 %230 = OpLoad %221 
                                         f32 %231 = OpFMul %229 %230 
                                                      OpStore %228 %231 
                                         f32 %233 = OpLoad %48 
                                         f32 %234 = OpLoad %228 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpLoad %48 
                                         f32 %237 = OpFNegate %236 
                                         f32 %238 = OpFAdd %235 %237 
                                                      OpStore %232 %238 
                                         f32 %239 = OpLoad %232 
                                         f32 %240 = OpLoad %48 
                                         f32 %241 = OpFMul %239 %240 
                                         f32 %242 = OpFAdd %241 %66 
                                                      OpStore %48 %242 
                                         f32 %243 = OpLoad %48 
                                         f32 %244 = OpLoad %48 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                                      OpStore %48 %247 
                                         f32 %248 = OpLoad %228 
                                         f32 %250 = OpFMul %248 %249 
                                                      OpStore %228 %250 
                                         f32 %251 = OpLoad %228 
                                         f32 %252 = OpLoad %48 
                                         f32 %253 = OpFDiv %251 %252 
                                                      OpStore %48 %253 
                                       f32_3 %254 = OpLoad %169 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFNegate %256 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %9 %29 
                                                      OpStore %259 %258 
                                       f32_3 %261 = OpLoad %169 
                              Uniform f32_4* %262 = OpAccessChain %16 %138 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                         f32 %266 = OpDot %261 %265 
                                                      OpStore %260 %266 
                                         f32 %267 = OpLoad %260 
                                         f32 %268 = OpExtInst %1 43 %267 %191 %66 
                                                      OpStore %260 %268 
                                         f32 %270 = OpLoad %221 
                                         f32 %271 = OpFNegate %270 
                                         f32 %272 = OpFAdd %271 %66 
                                                      OpStore %269 %272 
                                Private f32* %274 = OpAccessChain %9 %29 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpExtInst %1 4 %275 
                                         f32 %277 = OpLoad %269 
                                         f32 %278 = OpFMul %276 %277 
                                         f32 %279 = OpLoad %221 
                                         f32 %280 = OpFAdd %278 %279 
                                                      OpStore %273 %280 
                                         f32 %282 = OpLoad %260 
                                         f32 %283 = OpLoad %269 
                                         f32 %284 = OpFMul %282 %283 
                                         f32 %285 = OpLoad %221 
                                         f32 %286 = OpFAdd %284 %285 
                                                      OpStore %281 %286 
                                         f32 %287 = OpLoad %281 
                                Private f32* %288 = OpAccessChain %9 %29 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 4 %289 
                                         f32 %291 = OpFMul %287 %290 
                                                      OpStore %281 %291 
                                Private f32* %293 = OpAccessChain %9 %29 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpExtInst %1 4 %294 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %66 
                                Private f32* %298 = OpAccessChain %292 %29 
                                                      OpStore %298 %297 
                                         f32 %299 = OpLoad %260 
                                         f32 %300 = OpLoad %273 
                                         f32 %301 = OpFMul %299 %300 
                                         f32 %302 = OpLoad %281 
                                         f32 %303 = OpFAdd %301 %302 
                                Private f32* %304 = OpAccessChain %9 %29 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %9 %29 
                                         f32 %306 = OpLoad %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %29 
                                                      OpStore %309 %308 
                                Private f32* %311 = OpAccessChain %9 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFDiv %310 %312 
                                Private f32* %314 = OpAccessChain %9 %29 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %48 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                Private f32* %319 = OpAccessChain %9 %29 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %29 
                                         f32 %321 = OpLoad %320 
                                         f32 %323 = OpFMul %321 %322 
                                Private f32* %324 = OpAccessChain %9 %29 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %9 %29 
                                         f32 %326 = OpLoad %325 
                                         f32 %328 = OpExtInst %1 40 %326 %327 
                                Private f32* %329 = OpAccessChain %9 %29 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %9 %29 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpExtInst %1 31 %331 
                                Private f32* %333 = OpAccessChain %9 %29 
                                                      OpStore %333 %332 
                                         f32 %334 = OpLoad %260 
                                Private f32* %335 = OpAccessChain %9 %29 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %9 %29 
                                                      OpStore %338 %337 
                                       f32_4 %340 = OpLoad %202 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_4 %342 = OpLoad %202 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                         f32 %344 = OpDot %341 %343 
                                Private f32* %345 = OpAccessChain %339 %29 
                                                      OpStore %345 %344 
                                Private f32* %349 = OpAccessChain %339 %29 
                                         f32 %350 = OpLoad %349 
                                        bool %351 = OpFOrdNotEqual %350 %191 
                                                      OpStore %348 %351 
                                        bool %354 = OpLoad %348 
                                                      OpSelectionMerge %356 None 
                                                      OpBranchConditional %354 %355 %357 
                                             %355 = OpLabel 
                                                      OpStore %353 %66 
                                                      OpBranch %356 
                                             %357 = OpLabel 
                                                      OpStore %353 %191 
                                                      OpBranch %356 
                                             %356 = OpLabel 
                                         f32 %358 = OpLoad %353 
                                                      OpStore %281 %358 
                                         f32 %359 = OpLoad %281 
                                Private f32* %360 = OpAccessChain %9 %29 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                Private f32* %363 = OpAccessChain %9 %29 
                                                      OpStore %363 %362 
                                       f32_4 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                              Uniform f32_4* %367 = OpAccessChain %16 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 1 5 6 
                                                      OpStore %9 %372 
                                         f32 %373 = OpLoad %193 
                                         f32 %374 = OpFNegate %373 
                                         f32 %375 = OpFAdd %374 %66 
                                Private f32* %376 = OpAccessChain %339 %29 
                                                      OpStore %376 %375 
                                Private f32* %378 = OpAccessChain %339 %29 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %339 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                                      OpStore %377 %382 
                                         f32 %383 = OpLoad %377 
                                         f32 %384 = OpLoad %377 
                                         f32 %385 = OpFMul %383 %384 
                                                      OpStore %377 %385 
                                Private f32* %386 = OpAccessChain %339 %29 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpLoad %377 
                                         f32 %389 = OpFMul %387 %388 
                                Private f32* %390 = OpAccessChain %339 %29 
                                                      OpStore %390 %389 
                                       f32_4 %392 = OpLoad %202 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFNegate %393 
                                       f32_3 %396 = OpFAdd %394 %395 
                                                      OpStore %391 %396 
                                       f32_3 %397 = OpLoad %391 
                                       f32_3 %398 = OpLoad %339 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 0 0 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %202 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                                      OpStore %339 %403 
                                       f32_4 %404 = OpLoad %9 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 2 3 
                                       f32_3 %406 = OpLoad %339 
                                       f32_3 %407 = OpFMul %405 %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 1 5 6 
                                                      OpStore %9 %409 
                                         f32 %410 = OpLoad %193 
                                         f32 %411 = OpLoad %193 
                                         f32 %412 = OpFAdd %410 %411 
                                Private f32* %413 = OpAccessChain %339 %29 
                                                      OpStore %413 %412 
                                         f32 %414 = OpLoad %193 
                                Private f32* %415 = OpAccessChain %339 %29 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %339 %29 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %339 %29 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpLoad %215 
                                         f32 %422 = OpFMul %420 %421 
                                         f32 %424 = OpFAdd %422 %423 
                                Private f32* %425 = OpAccessChain %339 %29 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %292 %29 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %292 %29 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %377 %430 
                                         f32 %431 = OpLoad %377 
                                         f32 %432 = OpLoad %377 
                                         f32 %433 = OpFMul %431 %432 
                                                      OpStore %377 %433 
                                Private f32* %434 = OpAccessChain %292 %29 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %377 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %292 %29 
                                                      OpStore %438 %437 
                                Private f32* %439 = OpAccessChain %339 %29 
                                         f32 %440 = OpLoad %439 
                                Private f32* %441 = OpAccessChain %292 %29 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpFMul %440 %442 
                                         f32 %444 = OpFAdd %443 %66 
                                Private f32* %445 = OpAccessChain %292 %29 
                                                      OpStore %445 %444 
                                         f32 %446 = OpLoad %260 
                                         f32 %447 = OpFNegate %446 
                                         f32 %448 = OpFAdd %447 %66 
                                                      OpStore %377 %448 
                                         f32 %450 = OpLoad %377 
                                         f32 %451 = OpLoad %377 
                                         f32 %452 = OpFMul %450 %451 
                                                      OpStore %449 %452 
                                         f32 %453 = OpLoad %449 
                                         f32 %454 = OpLoad %449 
                                         f32 %455 = OpFMul %453 %454 
                                                      OpStore %449 %455 
                                         f32 %456 = OpLoad %377 
                                         f32 %457 = OpLoad %449 
                                         f32 %458 = OpFMul %456 %457 
                                                      OpStore %377 %458 
                                Private f32* %459 = OpAccessChain %339 %29 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpLoad %377 
                                         f32 %462 = OpFMul %460 %461 
                                         f32 %463 = OpFAdd %462 %66 
                                Private f32* %464 = OpAccessChain %339 %29 
                                                      OpStore %464 %463 
                                Private f32* %465 = OpAccessChain %292 %29 
                                         f32 %466 = OpLoad %465 
                                Private f32* %467 = OpAccessChain %339 %29 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                Private f32* %470 = OpAccessChain %292 %29 
                                                      OpStore %470 %469 
                                         f32 %471 = OpLoad %260 
                                Private f32* %472 = OpAccessChain %292 %29 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                                      OpStore %260 %474 
                                         f32 %475 = OpLoad %260 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                              Uniform f32_4* %477 = OpAccessChain %16 %366 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFMul %476 %479 
                                                      OpStore %292 %480 
                                       f32_4 %481 = OpLoad %207 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 3 
                                       f32_3 %483 = OpLoad %292 
                                       f32_3 %484 = OpFMul %482 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 2 3 
                                       f32_3 %487 = OpFAdd %484 %486 
                                       f32_4 %488 = OpLoad %9 
                                       f32_4 %489 = OpVectorShuffle %488 %487 4 5 6 3 
                                                      OpStore %9 %489 
                                       f32_4 %492 = OpLoad %9 
                                       f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                                       f32_4 %494 = OpLoad %491 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %491 %495 
                                 Output f32* %497 = OpAccessChain %491 %216 
                                                      OpStore %497 %66 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz;
    u_xlat21 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat9 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
    u_xlatb14 = u_xlat0.z<0.0;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.x = u_xlat14 * u_xlat10_2.w;
    u_xlat0.x = u_xlat10_4.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 563
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %555 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %555 Location 555 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %137 = OpConstant 4 
                                Private f32* %145 = OpVariable Private 
                                         u32 %149 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %153 = OpVariable UniformConstant 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %175 = OpConstant 3.674022E-40 
                              Private f32_3* %183 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
                              Private f32_3* %189 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                                       f32_3 %192 = OpConstantComposite %191 %191 %191 
                                         f32 %194 = OpConstant 3.674022E-40 
                                       f32_3 %195 = OpConstantComposite %194 %194 %194 
                                Private f32* %197 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
                                Private f32* %219 = OpVariable Private 
                              Private f32_4* %230 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %231 = OpVariable UniformConstant 
                              Private f32_3* %235 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %236 = OpVariable UniformConstant 
                                Private f32* %241 = OpVariable Private 
                                Private f32* %246 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                                Private f32* %253 = OpVariable Private 
                                Private f32* %257 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                Private f32* %289 = OpVariable Private 
                              Private f32_3* %300 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                         f32 %322 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                              Private f32_3* %332 = OpVariable Private 
                                             %339 = OpTypeBool 
                                             %340 = OpTypePointer Private %339 
                               Private bool* %341 = OpVariable Private 
                                             %345 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 6 
                               Private bool* %395 = OpVariable Private 
                                Private f32* %399 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %406 = OpVariable UniformConstant 
                                         f32 %410 = OpConstant 3.674022E-40 
                                         i32 %426 = OpConstant 5 
                                Private f32* %442 = OpVariable Private 
                              Private f32_3* %456 = OpVariable Private 
                                       f32_3 %460 = OpConstantComposite %67 %67 %67 
                                         f32 %503 = OpConstant 3.674022E-40 
                                Private f32* %516 = OpVariable Private 
                                             %554 = OpTypePointer Output %7 
                               Output f32_4* %555 = OpVariable Output 
                                             %560 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %346 = OpVariable Function 
                               Function f32* %400 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                         f32 %129 = OpLoad %49 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpLoad %78 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %78 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_4* %138 = OpAccessChain %17 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFAdd %136 %140 
                                                      OpStore %133 %141 
                                       f32_3 %142 = OpLoad %133 
                                       f32_3 %143 = OpLoad %133 
                                         f32 %144 = OpDot %142 %143 
                                                      OpStore %49 %144 
                                         f32 %146 = OpLoad %49 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %145 %147 
                                         f32 %148 = OpLoad %49 
                                Uniform f32* %150 = OpAccessChain %17 %137 %149 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %148 %151 
                                                      OpStore %49 %152 
                  read_only Texture2DSampled %154 = OpLoad %153 
                                         f32 %155 = OpLoad %49 
                                       f32_2 %156 = OpCompositeConstruct %155 %155 
                                       f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                         f32 %158 = OpCompositeExtract %157 3 
                                                      OpStore %49 %158 
                                       f32_3 %160 = OpLoad %133 
                                         f32 %161 = OpLoad %145 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_3 %164 = OpLoad %78 
                                       f32_3 %165 = OpFNegate %164 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %159 %166 
                                         f32 %167 = OpLoad %145 
                                       f32_3 %168 = OpCompositeConstruct %167 %167 %167 
                                       f32_3 %169 = OpLoad %133 
                                       f32_3 %170 = OpFMul %168 %169 
                                                      OpStore %133 %170 
                                       f32_3 %171 = OpLoad %159 
                                       f32_3 %172 = OpLoad %159 
                                         f32 %173 = OpDot %171 %172 
                                                      OpStore %145 %173 
                                         f32 %174 = OpLoad %145 
                                         f32 %176 = OpExtInst %1 40 %174 %175 
                                                      OpStore %145 %176 
                                         f32 %177 = OpLoad %145 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %145 %178 
                                         f32 %179 = OpLoad %145 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpLoad %159 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %159 %182 
                  read_only Texture2DSampled %185 = OpLoad %184 
                                       f32_2 %186 = OpLoad %41 
                                       f32_4 %187 = OpImageSampleImplicitLod %185 %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                                      OpStore %183 %188 
                                       f32_3 %190 = OpLoad %183 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %196 = OpFAdd %193 %195 
                                                      OpStore %189 %196 
                                       f32_3 %198 = OpLoad %189 
                                       f32_3 %199 = OpLoad %189 
                                         f32 %200 = OpDot %198 %199 
                                                      OpStore %197 %200 
                                         f32 %201 = OpLoad %197 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %197 %202 
                                         f32 %203 = OpLoad %197 
                                       f32_3 %204 = OpCompositeConstruct %203 %203 %203 
                                       f32_3 %205 = OpLoad %189 
                                       f32_3 %206 = OpFMul %204 %205 
                                                      OpStore %189 %206 
                                       f32_3 %207 = OpLoad %189 
                                       f32_3 %208 = OpLoad %159 
                                         f32 %209 = OpDot %207 %208 
                                                      OpStore %145 %209 
                                         f32 %210 = OpLoad %145 
                                         f32 %212 = OpExtInst %1 43 %210 %211 %67 
                                                      OpStore %145 %212 
                                       f32_3 %214 = OpLoad %133 
                                       f32_3 %215 = OpLoad %159 
                                         f32 %216 = OpDot %214 %215 
                                                      OpStore %213 %216 
                                         f32 %217 = OpLoad %213 
                                         f32 %218 = OpExtInst %1 43 %217 %211 %67 
                                                      OpStore %213 %218 
                                       f32_3 %220 = OpLoad %189 
                                       f32_3 %221 = OpLoad %133 
                                         f32 %222 = OpDot %220 %221 
                                                      OpStore %219 %222 
                                         f32 %223 = OpLoad %219 
                                         f32 %224 = OpExtInst %1 43 %223 %211 %67 
                                                      OpStore %219 %224 
                                       f32_3 %225 = OpLoad %189 
                                       f32_3 %226 = OpLoad %78 
                                       f32_3 %227 = OpFNegate %226 
                                         f32 %228 = OpDot %225 %227 
                                Private f32* %229 = OpAccessChain %78 %30 
                                                      OpStore %229 %228 
                  read_only Texture2DSampled %232 = OpLoad %231 
                                       f32_2 %233 = OpLoad %41 
                                       f32_4 %234 = OpImageSampleImplicitLod %232 %233 
                                                      OpStore %230 %234 
                  read_only Texture2DSampled %237 = OpLoad %236 
                                       f32_2 %238 = OpLoad %41 
                                       f32_4 %239 = OpImageSampleImplicitLod %237 %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                                      OpStore %235 %240 
                                Private f32* %242 = OpAccessChain %230 %149 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %244 %67 
                                                      OpStore %241 %245 
                                         f32 %247 = OpLoad %241 
                                         f32 %248 = OpLoad %241 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %246 %249 
                                         f32 %250 = OpLoad %246 
                                         f32 %252 = OpExtInst %1 40 %250 %251 
                                                      OpStore %246 %252 
                                         f32 %254 = OpLoad %246 
                                         f32 %255 = OpLoad %246 
                                         f32 %256 = OpFMul %254 %255 
                                                      OpStore %253 %256 
                                         f32 %258 = OpLoad %145 
                                         f32 %259 = OpLoad %253 
                                         f32 %260 = OpFMul %258 %259 
                                         f32 %261 = OpLoad %145 
                                         f32 %262 = OpFNegate %261 
                                         f32 %263 = OpFAdd %260 %262 
                                                      OpStore %257 %263 
                                         f32 %264 = OpLoad %257 
                                         f32 %265 = OpLoad %145 
                                         f32 %266 = OpFMul %264 %265 
                                         f32 %267 = OpFAdd %266 %67 
                                                      OpStore %145 %267 
                                         f32 %268 = OpLoad %145 
                                         f32 %269 = OpLoad %145 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %272 = OpFAdd %270 %271 
                                                      OpStore %145 %272 
                                         f32 %273 = OpLoad %253 
                                         f32 %275 = OpFMul %273 %274 
                                                      OpStore %253 %275 
                                         f32 %276 = OpLoad %253 
                                         f32 %277 = OpLoad %145 
                                         f32 %278 = OpFDiv %276 %277 
                                                      OpStore %145 %278 
                                         f32 %279 = OpLoad %246 
                                         f32 %280 = OpFNegate %279 
                                         f32 %281 = OpFAdd %280 %67 
                                                      OpStore %253 %281 
                                Private f32* %282 = OpAccessChain %78 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 4 %283 
                                         f32 %285 = OpLoad %253 
                                         f32 %286 = OpFMul %284 %285 
                                         f32 %287 = OpLoad %246 
                                         f32 %288 = OpFAdd %286 %287 
                                                      OpStore %257 %288 
                                         f32 %290 = OpLoad %219 
                                         f32 %291 = OpLoad %253 
                                         f32 %292 = OpFMul %290 %291 
                                         f32 %293 = OpLoad %246 
                                         f32 %294 = OpFAdd %292 %293 
                                                      OpStore %289 %294 
                                         f32 %295 = OpLoad %289 
                                Private f32* %296 = OpAccessChain %78 %30 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 4 %297 
                                         f32 %299 = OpFMul %295 %298 
                                                      OpStore %289 %299 
                                Private f32* %301 = OpAccessChain %78 %30 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFAdd %304 %67 
                                Private f32* %306 = OpAccessChain %300 %30 
                                                      OpStore %306 %305 
                                         f32 %307 = OpLoad %219 
                                         f32 %308 = OpLoad %257 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpLoad %289 
                                         f32 %311 = OpFAdd %309 %310 
                                                      OpStore %289 %311 
                                         f32 %312 = OpLoad %289 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %289 %314 
                                         f32 %316 = OpLoad %289 
                                         f32 %317 = OpFDiv %315 %316 
                                                      OpStore %289 %317 
                                         f32 %318 = OpLoad %145 
                                         f32 %319 = OpLoad %289 
                                         f32 %320 = OpFMul %318 %319 
                                                      OpStore %289 %320 
                                         f32 %321 = OpLoad %289 
                                         f32 %323 = OpFMul %321 %322 
                                                      OpStore %289 %323 
                                         f32 %324 = OpLoad %289 
                                         f32 %326 = OpExtInst %1 40 %324 %325 
                                                      OpStore %289 %326 
                                         f32 %327 = OpLoad %289 
                                         f32 %328 = OpExtInst %1 31 %327 
                                                      OpStore %289 %328 
                                         f32 %329 = OpLoad %219 
                                         f32 %330 = OpLoad %289 
                                         f32 %331 = OpFMul %329 %330 
                                                      OpStore %289 %331 
                                       f32_4 %333 = OpLoad %230 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %230 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                         f32 %337 = OpDot %334 %336 
                                Private f32* %338 = OpAccessChain %332 %30 
                                                      OpStore %338 %337 
                                Private f32* %342 = OpAccessChain %332 %30 
                                         f32 %343 = OpLoad %342 
                                        bool %344 = OpFOrdNotEqual %343 %211 
                                                      OpStore %341 %344 
                                        bool %347 = OpLoad %341 
                                                      OpSelectionMerge %349 None 
                                                      OpBranchConditional %347 %348 %350 
                                             %348 = OpLabel 
                                                      OpStore %346 %67 
                                                      OpBranch %349 
                                             %350 = OpLabel 
                                                      OpStore %346 %211 
                                                      OpBranch %349 
                                             %349 = OpLabel 
                                         f32 %351 = OpLoad %346 
                                                      OpStore %145 %351 
                                         f32 %352 = OpLoad %145 
                                         f32 %353 = OpLoad %289 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %289 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 1 1 1 
                              Uniform f32_4* %358 = OpAccessChain %17 %357 %19 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 3 
                                       f32_3 %361 = OpFMul %356 %360 
                                                      OpStore %78 %361 
                              Uniform f32_4* %362 = OpAccessChain %17 %357 %87 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 3 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_3 %368 = OpLoad %78 
                                       f32_3 %369 = OpFAdd %367 %368 
                                                      OpStore %78 %369 
                              Uniform f32_4* %370 = OpAccessChain %17 %357 %58 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 3 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 2 2 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %78 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %9 %379 
                                       f32_4 %380 = OpLoad %9 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                              Uniform f32_4* %382 = OpAccessChain %17 %357 %81 
                                       f32_4 %383 = OpLoad %382 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 3 
                                       f32_3 %385 = OpFAdd %381 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %9 %387 
                                       f32_4 %388 = OpLoad %9 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_4 %390 = OpLoad %9 
                                       f32_2 %391 = OpVectorShuffle %390 %390 2 2 
                                       f32_2 %392 = OpFDiv %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 2 3 
                                                      OpStore %9 %394 
                                Private f32* %396 = OpAccessChain %9 %20 
                                         f32 %397 = OpLoad %396 
                                        bool %398 = OpFOrdLessThan %397 %211 
                                                      OpStore %395 %398 
                                        bool %401 = OpLoad %395 
                                                      OpSelectionMerge %403 None 
                                                      OpBranchConditional %401 %402 %404 
                                             %402 = OpLabel 
                                                      OpStore %400 %67 
                                                      OpBranch %403 
                                             %404 = OpLabel 
                                                      OpStore %400 %211 
                                                      OpBranch %403 
                                             %403 = OpLabel 
                                         f32 %405 = OpLoad %400 
                                                      OpStore %399 %405 
                  read_only Texture2DSampled %407 = OpLoad %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 1 
                                       f32_4 %411 = OpImageSampleImplicitLod %407 %409 Bias %7 
                                         f32 %412 = OpCompositeExtract %411 3 
                                Private f32* %413 = OpAccessChain %9 %30 
                                                      OpStore %413 %412 
                                         f32 %414 = OpLoad %399 
                                Private f32* %415 = OpAccessChain %9 %30 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %9 %30 
                                                      OpStore %418 %417 
                                         f32 %419 = OpLoad %49 
                                Private f32* %420 = OpAccessChain %9 %30 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %9 %30 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 0 0 
                              Uniform f32_4* %427 = OpAccessChain %17 %426 
                                       f32_4 %428 = OpLoad %427 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFMul %425 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %9 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                         f32 %435 = OpLoad %289 
                                       f32_3 %436 = OpCompositeConstruct %435 %435 %435 
                                       f32_3 %437 = OpFMul %434 %436 
                                                      OpStore %78 %437 
                                         f32 %438 = OpLoad %213 
                                         f32 %439 = OpFNegate %438 
                                         f32 %440 = OpFAdd %439 %67 
                                Private f32* %441 = OpAccessChain %332 %30 
                                                      OpStore %441 %440 
                                Private f32* %443 = OpAccessChain %332 %30 
                                         f32 %444 = OpLoad %443 
                                Private f32* %445 = OpAccessChain %332 %30 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %444 %446 
                                                      OpStore %442 %447 
                                         f32 %448 = OpLoad %442 
                                         f32 %449 = OpLoad %442 
                                         f32 %450 = OpFMul %448 %449 
                                                      OpStore %442 %450 
                                Private f32* %451 = OpAccessChain %332 %30 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpLoad %442 
                                         f32 %454 = OpFMul %452 %453 
                                Private f32* %455 = OpAccessChain %332 %30 
                                                      OpStore %455 %454 
                                       f32_4 %457 = OpLoad %230 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFNegate %458 
                                       f32_3 %461 = OpFAdd %459 %460 
                                                      OpStore %456 %461 
                                       f32_3 %462 = OpLoad %456 
                                       f32_3 %463 = OpLoad %332 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 0 0 
                                       f32_3 %465 = OpFMul %462 %464 
                                       f32_4 %466 = OpLoad %230 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %465 %467 
                                                      OpStore %332 %468 
                                       f32_3 %469 = OpLoad %78 
                                       f32_3 %470 = OpLoad %332 
                                       f32_3 %471 = OpFMul %469 %470 
                                                      OpStore %78 %471 
                                Private f32* %472 = OpAccessChain %300 %30 
                                         f32 %473 = OpLoad %472 
                                Private f32* %474 = OpAccessChain %300 %30 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpFMul %473 %475 
                                Private f32* %477 = OpAccessChain %332 %30 
                                                      OpStore %477 %476 
                                Private f32* %478 = OpAccessChain %332 %30 
                                         f32 %479 = OpLoad %478 
                                Private f32* %480 = OpAccessChain %332 %30 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpFMul %479 %481 
                                Private f32* %483 = OpAccessChain %332 %30 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %300 %30 
                                         f32 %485 = OpLoad %484 
                                Private f32* %486 = OpAccessChain %332 %30 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFMul %485 %487 
                                Private f32* %489 = OpAccessChain %300 %30 
                                                      OpStore %489 %488 
                                         f32 %490 = OpLoad %213 
                                         f32 %491 = OpLoad %213 
                                         f32 %492 = OpFAdd %490 %491 
                                Private f32* %493 = OpAccessChain %332 %30 
                                                      OpStore %493 %492 
                                         f32 %494 = OpLoad %213 
                                Private f32* %495 = OpAccessChain %332 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Private f32* %498 = OpAccessChain %332 %30 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %332 %30 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpLoad %241 
                                         f32 %502 = OpFMul %500 %501 
                                         f32 %504 = OpFAdd %502 %503 
                                Private f32* %505 = OpAccessChain %332 %30 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %332 %30 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %300 %30 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFMul %507 %509 
                                         f32 %511 = OpFAdd %510 %67 
                                Private f32* %512 = OpAccessChain %300 %30 
                                                      OpStore %512 %511 
                                         f32 %513 = OpLoad %219 
                                         f32 %514 = OpFNegate %513 
                                         f32 %515 = OpFAdd %514 %67 
                                                      OpStore %442 %515 
                                         f32 %517 = OpLoad %442 
                                         f32 %518 = OpLoad %442 
                                         f32 %519 = OpFMul %517 %518 
                                                      OpStore %516 %519 
                                         f32 %520 = OpLoad %516 
                                         f32 %521 = OpLoad %516 
                                         f32 %522 = OpFMul %520 %521 
                                                      OpStore %516 %522 
                                         f32 %523 = OpLoad %442 
                                         f32 %524 = OpLoad %516 
                                         f32 %525 = OpFMul %523 %524 
                                                      OpStore %442 %525 
                                Private f32* %526 = OpAccessChain %332 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpLoad %442 
                                         f32 %529 = OpFMul %527 %528 
                                         f32 %530 = OpFAdd %529 %67 
                                Private f32* %531 = OpAccessChain %332 %30 
                                                      OpStore %531 %530 
                                Private f32* %532 = OpAccessChain %300 %30 
                                         f32 %533 = OpLoad %532 
                                Private f32* %534 = OpAccessChain %332 %30 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFMul %533 %535 
                                Private f32* %537 = OpAccessChain %300 %30 
                                                      OpStore %537 %536 
                                         f32 %538 = OpLoad %219 
                                Private f32* %539 = OpAccessChain %300 %30 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                                      OpStore %49 %541 
                                         f32 %542 = OpLoad %49 
                                       f32_3 %543 = OpCompositeConstruct %542 %542 %542 
                                       f32_4 %544 = OpLoad %9 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFMul %543 %545 
                                                      OpStore %300 %546 
                                       f32_3 %547 = OpLoad %235 
                                       f32_3 %548 = OpLoad %300 
                                       f32_3 %549 = OpFMul %547 %548 
                                       f32_3 %550 = OpLoad %78 
                                       f32_3 %551 = OpFAdd %549 %550 
                                       f32_4 %552 = OpLoad %9 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %9 %553 
                                       f32_4 %556 = OpLoad %9 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                       f32_4 %558 = OpLoad %555 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
                                                      OpStore %555 %559 
                                 Output f32* %561 = OpAccessChain %555 %149 
                                                      OpStore %561 %67 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat16_0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat16_5;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat4.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz;
    u_xlat21 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_5.xyz, (-u_xlat3.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat9 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xyz, -8.0);
    u_xlat16_0 = u_xlat10_2.w * u_xlat10_4.w;
    u_xlat0.xyz = vec3(u_xlat16_0) * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 546
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %538 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %394 DescriptorSet 394 
                                                      OpDecorate %394 Binding 394 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %538 Location 538 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 4 
                                Private f32* %145 = OpVariable Private 
                                         u32 %149 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %153 = OpVariable UniformConstant 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %176 = OpConstant 3.674022E-40 
                              Private f32_3* %184 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %190 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_3 %193 = OpConstantComposite %192 %192 %192 
                                         f32 %195 = OpConstant 3.674022E-40 
                                       f32_3 %196 = OpConstantComposite %195 %195 %195 
                                Private f32* %198 = OpVariable Private 
                                         f32 %212 = OpConstant 3.674022E-40 
                                Private f32* %214 = OpVariable Private 
                                Private f32* %221 = OpVariable Private 
                              Private f32_4* %233 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %234 = OpVariable UniformConstant 
                              Private f32_3* %238 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %239 = OpVariable UniformConstant 
                                Private f32* %244 = OpVariable Private 
                                Private f32* %249 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                Private f32* %256 = OpVariable Private 
                                Private f32* %260 = OpVariable Private 
                                         f32 %274 = OpConstant 3.674022E-40 
                                         f32 %277 = OpConstant 3.674022E-40 
                                Private f32* %292 = OpVariable Private 
                              Private f32_3* %303 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %328 = OpConstant 3.674022E-40 
                              Private f32_3* %335 = OpVariable Private 
                                             %342 = OpTypeBool 
                                             %343 = OpTypePointer Private %342 
                               Private bool* %344 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %360 = OpConstant 6 
                                             %391 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %392 = OpTypeSampledImage %391 
                                             %393 = OpTypePointer UniformConstant %392 
UniformConstant read_only TextureCubeSampled* %394 = OpVariable UniformConstant 
                                         f32 %398 = OpConstant 3.674022E-40 
                                         i32 %409 = OpConstant 5 
                                Private f32* %425 = OpVariable Private 
                              Private f32_3* %439 = OpVariable Private 
                                       f32_3 %443 = OpConstantComposite %67 %67 %67 
                                         f32 %486 = OpConstant 3.674022E-40 
                                Private f32* %499 = OpVariable Private 
                                             %537 = OpTypePointer Output %7 
                               Output f32_4* %538 = OpVariable Output 
                                             %543 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                         f32 %129 = OpLoad %49 
                                       f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                       f32_3 %131 = OpLoad %78 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %78 %132 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %17 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                                      OpStore %133 %141 
                                       f32_3 %142 = OpLoad %133 
                                       f32_3 %143 = OpLoad %133 
                                         f32 %144 = OpDot %142 %143 
                                                      OpStore %49 %144 
                                         f32 %146 = OpLoad %49 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %145 %147 
                                         f32 %148 = OpLoad %49 
                                Uniform f32* %150 = OpAccessChain %17 %136 %149 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %148 %151 
                                                      OpStore %49 %152 
                  read_only Texture2DSampled %154 = OpLoad %153 
                                         f32 %155 = OpLoad %49 
                                       f32_2 %156 = OpCompositeConstruct %155 %155 
                                       f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                         f32 %158 = OpCompositeExtract %157 3 
                                                      OpStore %49 %158 
                                       f32_3 %160 = OpLoad %133 
                                       f32_3 %161 = OpFNegate %160 
                                         f32 %162 = OpLoad %145 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                                       f32_3 %164 = OpFMul %161 %163 
                                       f32_3 %165 = OpLoad %78 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFAdd %164 %166 
                                                      OpStore %159 %167 
                                         f32 %168 = OpLoad %145 
                                       f32_3 %169 = OpCompositeConstruct %168 %168 %168 
                                       f32_3 %170 = OpLoad %133 
                                       f32_3 %171 = OpFMul %169 %170 
                                                      OpStore %133 %171 
                                       f32_3 %172 = OpLoad %159 
                                       f32_3 %173 = OpLoad %159 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %145 %174 
                                         f32 %175 = OpLoad %145 
                                         f32 %177 = OpExtInst %1 40 %175 %176 
                                                      OpStore %145 %177 
                                         f32 %178 = OpLoad %145 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %145 %179 
                                         f32 %180 = OpLoad %145 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %159 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %159 %183 
                  read_only Texture2DSampled %186 = OpLoad %185 
                                       f32_2 %187 = OpLoad %41 
                                       f32_4 %188 = OpImageSampleImplicitLod %186 %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore %184 %189 
                                       f32_3 %191 = OpLoad %184 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_3 %197 = OpFAdd %194 %196 
                                                      OpStore %190 %197 
                                       f32_3 %199 = OpLoad %190 
                                       f32_3 %200 = OpLoad %190 
                                         f32 %201 = OpDot %199 %200 
                                                      OpStore %198 %201 
                                         f32 %202 = OpLoad %198 
                                         f32 %203 = OpExtInst %1 32 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
                                       f32_3 %206 = OpLoad %190 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %190 %207 
                                       f32_3 %208 = OpLoad %190 
                                       f32_3 %209 = OpLoad %159 
                                         f32 %210 = OpDot %208 %209 
                                                      OpStore %145 %210 
                                         f32 %211 = OpLoad %145 
                                         f32 %213 = OpExtInst %1 43 %211 %212 %67 
                                                      OpStore %145 %213 
                                       f32_3 %215 = OpLoad %133 
                                       f32_3 %216 = OpFNegate %215 
                                       f32_3 %217 = OpLoad %159 
                                         f32 %218 = OpDot %216 %217 
                                                      OpStore %214 %218 
                                         f32 %219 = OpLoad %214 
                                         f32 %220 = OpExtInst %1 43 %219 %212 %67 
                                                      OpStore %214 %220 
                                       f32_3 %222 = OpLoad %190 
                                       f32_3 %223 = OpLoad %133 
                                       f32_3 %224 = OpFNegate %223 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %221 %225 
                                         f32 %226 = OpLoad %221 
                                         f32 %227 = OpExtInst %1 43 %226 %212 %67 
                                                      OpStore %221 %227 
                                       f32_3 %228 = OpLoad %190 
                                       f32_3 %229 = OpLoad %78 
                                       f32_3 %230 = OpFNegate %229 
                                         f32 %231 = OpDot %228 %230 
                                Private f32* %232 = OpAccessChain %78 %30 
                                                      OpStore %232 %231 
                  read_only Texture2DSampled %235 = OpLoad %234 
                                       f32_2 %236 = OpLoad %41 
                                       f32_4 %237 = OpImageSampleImplicitLod %235 %236 
                                                      OpStore %233 %237 
                  read_only Texture2DSampled %240 = OpLoad %239 
                                       f32_2 %241 = OpLoad %41 
                                       f32_4 %242 = OpImageSampleImplicitLod %240 %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                                      OpStore %238 %243 
                                Private f32* %245 = OpAccessChain %233 %149 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %247 %67 
                                                      OpStore %244 %248 
                                         f32 %250 = OpLoad %244 
                                         f32 %251 = OpLoad %244 
                                         f32 %252 = OpFMul %250 %251 
                                                      OpStore %249 %252 
                                         f32 %253 = OpLoad %249 
                                         f32 %255 = OpExtInst %1 40 %253 %254 
                                                      OpStore %249 %255 
                                         f32 %257 = OpLoad %249 
                                         f32 %258 = OpLoad %249 
                                         f32 %259 = OpFMul %257 %258 
                                                      OpStore %256 %259 
                                         f32 %261 = OpLoad %145 
                                         f32 %262 = OpLoad %256 
                                         f32 %263 = OpFMul %261 %262 
                                         f32 %264 = OpLoad %145 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %263 %265 
                                                      OpStore %260 %266 
                                         f32 %267 = OpLoad %260 
                                         f32 %268 = OpLoad %145 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %270 = OpFAdd %269 %67 
                                                      OpStore %145 %270 
                                         f32 %271 = OpLoad %145 
                                         f32 %272 = OpLoad %145 
                                         f32 %273 = OpFMul %271 %272 
                                         f32 %275 = OpFAdd %273 %274 
                                                      OpStore %145 %275 
                                         f32 %276 = OpLoad %256 
                                         f32 %278 = OpFMul %276 %277 
                                                      OpStore %256 %278 
                                         f32 %279 = OpLoad %256 
                                         f32 %280 = OpLoad %145 
                                         f32 %281 = OpFDiv %279 %280 
                                                      OpStore %145 %281 
                                         f32 %282 = OpLoad %249 
                                         f32 %283 = OpFNegate %282 
                                         f32 %284 = OpFAdd %283 %67 
                                                      OpStore %256 %284 
                                Private f32* %285 = OpAccessChain %78 %30 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 4 %286 
                                         f32 %288 = OpLoad %256 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpLoad %249 
                                         f32 %291 = OpFAdd %289 %290 
                                                      OpStore %260 %291 
                                         f32 %293 = OpLoad %221 
                                         f32 %294 = OpLoad %256 
                                         f32 %295 = OpFMul %293 %294 
                                         f32 %296 = OpLoad %249 
                                         f32 %297 = OpFAdd %295 %296 
                                                      OpStore %292 %297 
                                         f32 %298 = OpLoad %292 
                                Private f32* %299 = OpAccessChain %78 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 4 %300 
                                         f32 %302 = OpFMul %298 %301 
                                                      OpStore %292 %302 
                                Private f32* %304 = OpAccessChain %78 %30 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpExtInst %1 4 %305 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %307 %67 
                                Private f32* %309 = OpAccessChain %303 %30 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %221 
                                         f32 %311 = OpLoad %260 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %313 = OpLoad %292 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %292 %314 
                                         f32 %315 = OpLoad %292 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %292 %317 
                                         f32 %319 = OpLoad %292 
                                         f32 %320 = OpFDiv %318 %319 
                                                      OpStore %292 %320 
                                         f32 %321 = OpLoad %145 
                                         f32 %322 = OpLoad %292 
                                         f32 %323 = OpFMul %321 %322 
                                                      OpStore %292 %323 
                                         f32 %324 = OpLoad %292 
                                         f32 %326 = OpFMul %324 %325 
                                                      OpStore %292 %326 
                                         f32 %327 = OpLoad %292 
                                         f32 %329 = OpExtInst %1 40 %327 %328 
                                                      OpStore %292 %329 
                                         f32 %330 = OpLoad %292 
                                         f32 %331 = OpExtInst %1 31 %330 
                                                      OpStore %292 %331 
                                         f32 %332 = OpLoad %221 
                                         f32 %333 = OpLoad %292 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %292 %334 
                                       f32_4 %336 = OpLoad %233 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %233 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %340 = OpDot %337 %339 
                                Private f32* %341 = OpAccessChain %335 %30 
                                                      OpStore %341 %340 
                                Private f32* %345 = OpAccessChain %335 %30 
                                         f32 %346 = OpLoad %345 
                                        bool %347 = OpFOrdNotEqual %346 %212 
                                                      OpStore %344 %347 
                                        bool %350 = OpLoad %344 
                                                      OpSelectionMerge %352 None 
                                                      OpBranchConditional %350 %351 %353 
                                             %351 = OpLabel 
                                                      OpStore %349 %67 
                                                      OpBranch %352 
                                             %353 = OpLabel 
                                                      OpStore %349 %212 
                                                      OpBranch %352 
                                             %352 = OpLabel 
                                         f32 %354 = OpLoad %349 
                                                      OpStore %145 %354 
                                         f32 %355 = OpLoad %145 
                                         f32 %356 = OpLoad %292 
                                         f32 %357 = OpFMul %355 %356 
                                                      OpStore %292 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_3 %359 = OpVectorShuffle %358 %358 1 1 1 
                              Uniform f32_4* %361 = OpAccessChain %17 %360 %19 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFMul %359 %363 
                                                      OpStore %78 %364 
                              Uniform f32_4* %365 = OpAccessChain %17 %360 %87 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_3 %371 = OpLoad %78 
                                       f32_3 %372 = OpFAdd %370 %371 
                                                      OpStore %78 %372 
                              Uniform f32_4* %373 = OpAccessChain %17 %360 %58 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 2 2 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_3 %379 = OpLoad %78 
                                       f32_3 %380 = OpFAdd %378 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                              Uniform f32_4* %385 = OpAccessChain %17 %360 %81 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %384 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %9 %390 
                read_only TextureCubeSampled %395 = OpLoad %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %399 = OpImageSampleImplicitLod %395 %397 Bias %7 
                                         f32 %400 = OpCompositeExtract %399 3 
                                Private f32* %401 = OpAccessChain %9 %30 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %9 %30 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpLoad %49 
                                         f32 %405 = OpFMul %403 %404 
                                Private f32* %406 = OpAccessChain %9 %30 
                                                      OpStore %406 %405 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                              Uniform f32_4* %410 = OpAccessChain %17 %409 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFMul %408 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                         f32 %418 = OpLoad %292 
                                       f32_3 %419 = OpCompositeConstruct %418 %418 %418 
                                       f32_3 %420 = OpFMul %417 %419 
                                                      OpStore %78 %420 
                                         f32 %421 = OpLoad %214 
                                         f32 %422 = OpFNegate %421 
                                         f32 %423 = OpFAdd %422 %67 
                                Private f32* %424 = OpAccessChain %335 %30 
                                                      OpStore %424 %423 
                                Private f32* %426 = OpAccessChain %335 %30 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %335 %30 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %425 %430 
                                         f32 %431 = OpLoad %425 
                                         f32 %432 = OpLoad %425 
                                         f32 %433 = OpFMul %431 %432 
                                                      OpStore %425 %433 
                                Private f32* %434 = OpAccessChain %335 %30 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %425 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %335 %30 
                                                      OpStore %438 %437 
                                       f32_4 %440 = OpLoad %233 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFNegate %441 
                                       f32_3 %444 = OpFAdd %442 %443 
                                                      OpStore %439 %444 
                                       f32_3 %445 = OpLoad %439 
                                       f32_3 %446 = OpLoad %335 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_4 %449 = OpLoad %233 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFAdd %448 %450 
                                                      OpStore %335 %451 
                                       f32_3 %452 = OpLoad %78 
                                       f32_3 %453 = OpLoad %335 
                                       f32_3 %454 = OpFMul %452 %453 
                                                      OpStore %78 %454 
                                Private f32* %455 = OpAccessChain %303 %30 
                                         f32 %456 = OpLoad %455 
                                Private f32* %457 = OpAccessChain %303 %30 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %335 %30 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %335 %30 
                                         f32 %462 = OpLoad %461 
                                Private f32* %463 = OpAccessChain %335 %30 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                Private f32* %466 = OpAccessChain %335 %30 
                                                      OpStore %466 %465 
                                Private f32* %467 = OpAccessChain %303 %30 
                                         f32 %468 = OpLoad %467 
                                Private f32* %469 = OpAccessChain %335 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFMul %468 %470 
                                Private f32* %472 = OpAccessChain %303 %30 
                                                      OpStore %472 %471 
                                         f32 %473 = OpLoad %214 
                                         f32 %474 = OpLoad %214 
                                         f32 %475 = OpFAdd %473 %474 
                                Private f32* %476 = OpAccessChain %335 %30 
                                                      OpStore %476 %475 
                                         f32 %477 = OpLoad %214 
                                Private f32* %478 = OpAccessChain %335 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                Private f32* %481 = OpAccessChain %335 %30 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %335 %30 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpLoad %244 
                                         f32 %485 = OpFMul %483 %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %335 %30 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %335 %30 
                                         f32 %490 = OpLoad %489 
                                Private f32* %491 = OpAccessChain %303 %30 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpFMul %490 %492 
                                         f32 %494 = OpFAdd %493 %67 
                                Private f32* %495 = OpAccessChain %303 %30 
                                                      OpStore %495 %494 
                                         f32 %496 = OpLoad %221 
                                         f32 %497 = OpFNegate %496 
                                         f32 %498 = OpFAdd %497 %67 
                                                      OpStore %425 %498 
                                         f32 %500 = OpLoad %425 
                                         f32 %501 = OpLoad %425 
                                         f32 %502 = OpFMul %500 %501 
                                                      OpStore %499 %502 
                                         f32 %503 = OpLoad %499 
                                         f32 %504 = OpLoad %499 
                                         f32 %505 = OpFMul %503 %504 
                                                      OpStore %499 %505 
                                         f32 %506 = OpLoad %425 
                                         f32 %507 = OpLoad %499 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %425 %508 
                                Private f32* %509 = OpAccessChain %335 %30 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %425 
                                         f32 %512 = OpFMul %510 %511 
                                         f32 %513 = OpFAdd %512 %67 
                                Private f32* %514 = OpAccessChain %335 %30 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %303 %30 
                                         f32 %516 = OpLoad %515 
                                Private f32* %517 = OpAccessChain %335 %30 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFMul %516 %518 
                                Private f32* %520 = OpAccessChain %303 %30 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %221 
                                Private f32* %522 = OpAccessChain %303 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                                      OpStore %49 %524 
                                         f32 %525 = OpLoad %49 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_4 %527 = OpLoad %9 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                                      OpStore %303 %529 
                                       f32_3 %530 = OpLoad %238 
                                       f32_3 %531 = OpLoad %303 
                                       f32_3 %532 = OpFMul %530 %531 
                                       f32_3 %533 = OpLoad %78 
                                       f32_3 %534 = OpFAdd %532 %533 
                                       f32_4 %535 = OpLoad %9 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                      OpStore %9 %536 
                                       f32_4 %539 = OpLoad %9 
                                       f32_3 %540 = OpVectorShuffle %539 %539 0 1 2 
                                       f32_4 %541 = OpLoad %538 
                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
                                                      OpStore %538 %542 
                                 Output f32* %544 = OpAccessChain %538 %149 
                                                      OpStore %544 %67 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat22 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat8 = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat16_4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat16_2 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.xyz = u_xlat10_2.www * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat15 + u_xlat15;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat16_6.x + -0.5;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 532
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %524 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %158 DescriptorSet 158 
                                                      OpDecorate %158 Binding 158 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 DescriptorSet 197 
                                                      OpDecorate %197 Binding 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %202 DescriptorSet 202 
                                                      OpDecorate %202 Binding 202 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %524 Location 524 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                              Private f32_3* %129 = OpVariable Private 
                                         i32 %135 = OpConstant 4 
                                         f32 %149 = OpConstant 3.674022E-40 
                              Private f32_3* %157 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
                              Private f32_3* %163 = OpVariable Private 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_3 %166 = OpConstantComposite %165 %165 %165 
                                         f32 %168 = OpConstant 3.674022E-40 
                                       f32_3 %169 = OpConstantComposite %168 %168 %168 
                                Private f32* %171 = OpVariable Private 
                                         f32 %185 = OpConstant 3.674022E-40 
                                Private f32* %187 = OpVariable Private 
                              Private f32_4* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %197 = OpVariable UniformConstant 
                              Private f32_4* %201 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %202 = OpVariable UniformConstant 
                                Private f32* %209 = OpVariable Private 
                                         u32 %210 = OpConstant 3 
                                Private f32* %215 = OpVariable Private 
                                         f32 %220 = OpConstant 3.674022E-40 
                                Private f32* %222 = OpVariable Private 
                                Private f32* %226 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                Private f32* %253 = OpVariable Private 
                                Private f32* %262 = OpVariable Private 
                              Private f32_3* %266 = OpVariable Private 
                                Private f32* %275 = OpVariable Private 
                              Private f32_3* %286 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %315 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                              Private f32_3* %325 = OpVariable Private 
                                             %332 = OpTypeBool 
                                             %333 = OpTypePointer Private %332 
                               Private bool* %334 = OpVariable Private 
                                             %338 = OpTypePointer Function %6 
                                         i32 %352 = OpConstant 6 
 UniformConstant read_only Texture2DSampled* %389 = OpVariable UniformConstant 
                                         f32 %393 = OpConstant 3.674022E-40 
                                         i32 %399 = OpConstant 5 
                                Private f32* %415 = OpVariable Private 
                              Private f32_3* %429 = OpVariable Private 
                                       f32_3 %433 = OpConstantComposite %67 %67 %67 
                                         f32 %458 = OpConstant 3.674022E-40 
                                Private f32* %484 = OpVariable Private 
                                             %523 = OpTypePointer Output %7 
                               Output f32_4* %524 = OpVariable Output 
                                             %529 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %339 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %70 = OpLoad %49 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %17 %81 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %17 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %9 %97 
                               Uniform f32_4* %98 = OpAccessChain %17 %81 %58 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %9 %108 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                              Uniform f32_4* %111 = OpAccessChain %17 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %120 = OpAccessChain %17 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_3 %124 = OpLoad %78 
                                       f32_3 %125 = OpLoad %78 
                                         f32 %126 = OpDot %124 %125 
                                                      OpStore %49 %126 
                                         f32 %127 = OpLoad %49 
                                         f32 %128 = OpExtInst %1 32 %127 
                                                      OpStore %49 %128 
                                       f32_3 %130 = OpLoad %78 
                                       f32_3 %131 = OpFNegate %130 
                                         f32 %132 = OpLoad %49 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpFMul %131 %133 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFNegate %138 
                                       f32_3 %140 = OpFAdd %134 %139 
                                                      OpStore %129 %140 
                                         f32 %141 = OpLoad %49 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_3 %143 = OpLoad %78 
                                       f32_3 %144 = OpFMul %142 %143 
                                                      OpStore %78 %144 
                                       f32_3 %145 = OpLoad %129 
                                       f32_3 %146 = OpLoad %129 
                                         f32 %147 = OpDot %145 %146 
                                                      OpStore %49 %147 
                                         f32 %148 = OpLoad %49 
                                         f32 %150 = OpExtInst %1 40 %148 %149 
                                                      OpStore %49 %150 
                                         f32 %151 = OpLoad %49 
                                         f32 %152 = OpExtInst %1 32 %151 
                                                      OpStore %49 %152 
                                         f32 %153 = OpLoad %49 
                                       f32_3 %154 = OpCompositeConstruct %153 %153 %153 
                                       f32_3 %155 = OpLoad %129 
                                       f32_3 %156 = OpFMul %154 %155 
                                                      OpStore %129 %156 
                  read_only Texture2DSampled %159 = OpLoad %158 
                                       f32_2 %160 = OpLoad %41 
                                       f32_4 %161 = OpImageSampleImplicitLod %159 %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                                      OpStore %157 %162 
                                       f32_3 %164 = OpLoad %157 
                                       f32_3 %167 = OpFMul %164 %166 
                                       f32_3 %170 = OpFAdd %167 %169 
                                                      OpStore %163 %170 
                                       f32_3 %172 = OpLoad %163 
                                       f32_3 %173 = OpLoad %163 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %171 %174 
                                         f32 %175 = OpLoad %171 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %171 %176 
                                         f32 %177 = OpLoad %171 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpLoad %163 
                                       f32_3 %180 = OpFMul %178 %179 
                                                      OpStore %163 %180 
                                       f32_3 %181 = OpLoad %163 
                                       f32_3 %182 = OpLoad %129 
                                         f32 %183 = OpDot %181 %182 
                                                      OpStore %49 %183 
                                         f32 %184 = OpLoad %49 
                                         f32 %186 = OpExtInst %1 43 %184 %185 %67 
                                                      OpStore %49 %186 
                              Uniform f32_4* %188 = OpAccessChain %17 %135 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFNegate %190 
                                       f32_3 %192 = OpLoad %129 
                                         f32 %193 = OpDot %191 %192 
                                                      OpStore %187 %193 
                                         f32 %194 = OpLoad %187 
                                         f32 %195 = OpExtInst %1 43 %194 %185 %67 
                                                      OpStore %187 %195 
                  read_only Texture2DSampled %198 = OpLoad %197 
                                       f32_2 %199 = OpLoad %41 
                                       f32_4 %200 = OpImageSampleImplicitLod %198 %199 
                                                      OpStore %196 %200 
                  read_only Texture2DSampled %203 = OpLoad %202 
                                       f32_2 %204 = OpLoad %41 
                                       f32_4 %205 = OpImageSampleImplicitLod %203 %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %201 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 6 
                                                      OpStore %201 %208 
                                Private f32* %211 = OpAccessChain %196 %210 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %213 %67 
                                                      OpStore %209 %214 
                                         f32 %216 = OpLoad %209 
                                         f32 %217 = OpLoad %209 
                                         f32 %218 = OpFMul %216 %217 
                                                      OpStore %215 %218 
                                         f32 %219 = OpLoad %215 
                                         f32 %221 = OpExtInst %1 40 %219 %220 
                                                      OpStore %215 %221 
                                         f32 %223 = OpLoad %215 
                                         f32 %224 = OpLoad %215 
                                         f32 %225 = OpFMul %223 %224 
                                                      OpStore %222 %225 
                                         f32 %227 = OpLoad %49 
                                         f32 %228 = OpLoad %222 
                                         f32 %229 = OpFMul %227 %228 
                                         f32 %230 = OpLoad %49 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %229 %231 
                                                      OpStore %226 %232 
                                         f32 %233 = OpLoad %226 
                                         f32 %234 = OpLoad %49 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpFAdd %235 %67 
                                                      OpStore %49 %236 
                                         f32 %237 = OpLoad %49 
                                         f32 %238 = OpLoad %49 
                                         f32 %239 = OpFMul %237 %238 
                                         f32 %241 = OpFAdd %239 %240 
                                                      OpStore %49 %241 
                                         f32 %242 = OpLoad %222 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %222 %244 
                                         f32 %245 = OpLoad %222 
                                         f32 %246 = OpLoad %49 
                                         f32 %247 = OpFDiv %245 %246 
                                                      OpStore %49 %247 
                                       f32_3 %248 = OpLoad %163 
                                       f32_3 %249 = OpLoad %78 
                                       f32_3 %250 = OpFNegate %249 
                                         f32 %251 = OpDot %248 %250 
                                Private f32* %252 = OpAccessChain %78 %30 
                                                      OpStore %252 %251 
                                       f32_3 %254 = OpLoad %163 
                              Uniform f32_4* %255 = OpAccessChain %17 %135 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFNegate %257 
                                         f32 %259 = OpDot %254 %258 
                                                      OpStore %253 %259 
                                         f32 %260 = OpLoad %253 
                                         f32 %261 = OpExtInst %1 43 %260 %185 %67 
                                                      OpStore %253 %261 
                                         f32 %263 = OpLoad %215 
                                         f32 %264 = OpFNegate %263 
                                         f32 %265 = OpFAdd %264 %67 
                                                      OpStore %262 %265 
                                Private f32* %267 = OpAccessChain %78 %30 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpExtInst %1 4 %268 
                                         f32 %270 = OpLoad %262 
                                         f32 %271 = OpFMul %269 %270 
                                         f32 %272 = OpLoad %215 
                                         f32 %273 = OpFAdd %271 %272 
                                Private f32* %274 = OpAccessChain %266 %30 
                                                      OpStore %274 %273 
                                         f32 %276 = OpLoad %253 
                                         f32 %277 = OpLoad %262 
                                         f32 %278 = OpFMul %276 %277 
                                         f32 %279 = OpLoad %215 
                                         f32 %280 = OpFAdd %278 %279 
                                                      OpStore %275 %280 
                                         f32 %281 = OpLoad %275 
                                Private f32* %282 = OpAccessChain %78 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 4 %283 
                                         f32 %285 = OpFMul %281 %284 
                                                      OpStore %275 %285 
                                Private f32* %287 = OpAccessChain %78 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpExtInst %1 4 %288 
                                         f32 %290 = OpFNegate %289 
                                         f32 %291 = OpFAdd %290 %67 
                                Private f32* %292 = OpAccessChain %286 %30 
                                                      OpStore %292 %291 
                                         f32 %293 = OpLoad %253 
                                Private f32* %294 = OpAccessChain %266 %30 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                         f32 %297 = OpLoad %275 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %78 %30 
                                                      OpStore %299 %298 
                                Private f32* %300 = OpAccessChain %78 %30 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFAdd %301 %302 
                                Private f32* %304 = OpAccessChain %78 %30 
                                                      OpStore %304 %303 
                                Private f32* %306 = OpAccessChain %78 %30 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFDiv %305 %307 
                                Private f32* %309 = OpAccessChain %78 %30 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %49 
                                Private f32* %311 = OpAccessChain %78 %30 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                                      OpStore %49 %313 
                                         f32 %314 = OpLoad %49 
                                         f32 %316 = OpFMul %314 %315 
                                                      OpStore %49 %316 
                                         f32 %317 = OpLoad %49 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                                      OpStore %49 %319 
                                         f32 %320 = OpLoad %49 
                                         f32 %321 = OpExtInst %1 31 %320 
                                                      OpStore %49 %321 
                                         f32 %322 = OpLoad %253 
                                         f32 %323 = OpLoad %49 
                                         f32 %324 = OpFMul %322 %323 
                                                      OpStore %49 %324 
                                       f32_4 %326 = OpLoad %196 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_4 %328 = OpLoad %196 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %325 %30 
                                                      OpStore %331 %330 
                                Private f32* %335 = OpAccessChain %325 %30 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdNotEqual %336 %185 
                                                      OpStore %334 %337 
                                        bool %340 = OpLoad %334 
                                                      OpSelectionMerge %342 None 
                                                      OpBranchConditional %340 %341 %343 
                                             %341 = OpLabel 
                                                      OpStore %339 %67 
                                                      OpBranch %342 
                                             %343 = OpLabel 
                                                      OpStore %339 %185 
                                                      OpBranch %342 
                                             %342 = OpLabel 
                                         f32 %344 = OpLoad %339 
                                Private f32* %345 = OpAccessChain %78 %30 
                                                      OpStore %345 %344 
                                         f32 %346 = OpLoad %49 
                                Private f32* %347 = OpAccessChain %78 %30 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                                      OpStore %49 %349 
                                       f32_4 %350 = OpLoad %9 
                                       f32_2 %351 = OpVectorShuffle %350 %350 1 1 
                              Uniform f32_4* %353 = OpAccessChain %17 %352 %19 
                                       f32_4 %354 = OpLoad %353 
                                       f32_2 %355 = OpVectorShuffle %354 %354 0 1 
                                       f32_2 %356 = OpFMul %351 %355 
                                       f32_3 %357 = OpLoad %78 
                                       f32_3 %358 = OpVectorShuffle %357 %356 3 1 4 
                                                      OpStore %78 %358 
                              Uniform f32_4* %359 = OpAccessChain %17 %352 %87 
                                       f32_4 %360 = OpLoad %359 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 1 
                                       f32_4 %362 = OpLoad %9 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 0 
                                       f32_2 %364 = OpFMul %361 %363 
                                       f32_3 %365 = OpLoad %78 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 2 
                                       f32_2 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 2 3 
                                                      OpStore %9 %369 
                              Uniform f32_4* %370 = OpAccessChain %17 %352 %58 
                                       f32_4 %371 = OpLoad %370 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                                       f32_4 %373 = OpLoad %9 
                                       f32_2 %374 = OpVectorShuffle %373 %373 2 2 
                                       f32_2 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_2 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 2 3 
                                                      OpStore %9 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_2 %382 = OpVectorShuffle %381 %381 0 1 
                              Uniform f32_4* %383 = OpAccessChain %17 %352 %81 
                                       f32_4 %384 = OpLoad %383 
                                       f32_2 %385 = OpVectorShuffle %384 %384 0 1 
                                       f32_2 %386 = OpFAdd %382 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 2 3 
                                                      OpStore %9 %388 
                  read_only Texture2DSampled %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %390 %392 Bias %7 
                                         f32 %395 = OpCompositeExtract %394 3 
                                Private f32* %396 = OpAccessChain %9 %30 
                                                      OpStore %396 %395 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 0 0 
                              Uniform f32_4* %400 = OpAccessChain %17 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %49 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_3 %410 = OpFMul %407 %409 
                                                      OpStore %266 %410 
                                         f32 %411 = OpLoad %187 
                                         f32 %412 = OpFNegate %411 
                                         f32 %413 = OpFAdd %412 %67 
                                Private f32* %414 = OpAccessChain %325 %30 
                                                      OpStore %414 %413 
                                Private f32* %416 = OpAccessChain %325 %30 
                                         f32 %417 = OpLoad %416 
                                Private f32* %418 = OpAccessChain %325 %30 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %415 %420 
                                         f32 %421 = OpLoad %415 
                                         f32 %422 = OpLoad %415 
                                         f32 %423 = OpFMul %421 %422 
                                                      OpStore %415 %423 
                                Private f32* %424 = OpAccessChain %325 %30 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpLoad %415 
                                         f32 %427 = OpFMul %425 %426 
                                Private f32* %428 = OpAccessChain %325 %30 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %196 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpFNegate %431 
                                       f32_3 %434 = OpFAdd %432 %433 
                                                      OpStore %429 %434 
                                       f32_3 %435 = OpLoad %429 
                                       f32_3 %436 = OpLoad %325 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 0 0 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_4 %439 = OpLoad %196 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFAdd %438 %440 
                                                      OpStore %325 %441 
                                       f32_3 %442 = OpLoad %266 
                                       f32_3 %443 = OpLoad %325 
                                       f32_3 %444 = OpFMul %442 %443 
                                                      OpStore %129 %444 
                                         f32 %445 = OpLoad %187 
                                         f32 %446 = OpLoad %187 
                                         f32 %447 = OpFAdd %445 %446 
                                Private f32* %448 = OpAccessChain %325 %30 
                                                      OpStore %448 %447 
                                         f32 %449 = OpLoad %187 
                                Private f32* %450 = OpAccessChain %325 %30 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFMul %449 %451 
                                Private f32* %453 = OpAccessChain %325 %30 
                                                      OpStore %453 %452 
                                Private f32* %454 = OpAccessChain %325 %30 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpLoad %209 
                                         f32 %457 = OpFMul %455 %456 
                                         f32 %459 = OpFAdd %457 %458 
                                Private f32* %460 = OpAccessChain %325 %30 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %286 %30 
                                         f32 %462 = OpLoad %461 
                                Private f32* %463 = OpAccessChain %286 %30 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                                      OpStore %415 %465 
                                         f32 %466 = OpLoad %415 
                                         f32 %467 = OpLoad %415 
                                         f32 %468 = OpFMul %466 %467 
                                                      OpStore %415 %468 
                                Private f32* %469 = OpAccessChain %286 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpLoad %415 
                                         f32 %472 = OpFMul %470 %471 
                                Private f32* %473 = OpAccessChain %286 %30 
                                                      OpStore %473 %472 
                                Private f32* %474 = OpAccessChain %325 %30 
                                         f32 %475 = OpLoad %474 
                                Private f32* %476 = OpAccessChain %286 %30 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                         f32 %479 = OpFAdd %478 %67 
                                Private f32* %480 = OpAccessChain %286 %30 
                                                      OpStore %480 %479 
                                         f32 %481 = OpLoad %253 
                                         f32 %482 = OpFNegate %481 
                                         f32 %483 = OpFAdd %482 %67 
                                                      OpStore %415 %483 
                                         f32 %485 = OpLoad %415 
                                         f32 %486 = OpLoad %415 
                                         f32 %487 = OpFMul %485 %486 
                                                      OpStore %484 %487 
                                         f32 %488 = OpLoad %484 
                                         f32 %489 = OpLoad %484 
                                         f32 %490 = OpFMul %488 %489 
                                                      OpStore %484 %490 
                                         f32 %491 = OpLoad %415 
                                         f32 %492 = OpLoad %484 
                                         f32 %493 = OpFMul %491 %492 
                                                      OpStore %415 %493 
                                Private f32* %494 = OpAccessChain %325 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpLoad %415 
                                         f32 %497 = OpFMul %495 %496 
                                         f32 %498 = OpFAdd %497 %67 
                                Private f32* %499 = OpAccessChain %325 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %286 %30 
                                         f32 %501 = OpLoad %500 
                                Private f32* %502 = OpAccessChain %325 %30 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %501 %503 
                                Private f32* %505 = OpAccessChain %286 %30 
                                                      OpStore %505 %504 
                                         f32 %506 = OpLoad %253 
                                Private f32* %507 = OpAccessChain %286 %30 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpFMul %506 %508 
                                                      OpStore %49 %509 
                                         f32 %510 = OpLoad %49 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_4 %512 = OpLoad %9 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                                      OpStore %286 %514 
                                       f32_4 %515 = OpLoad %201 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 3 
                                       f32_3 %517 = OpLoad %286 
                                       f32_3 %518 = OpFMul %516 %517 
                                       f32_3 %519 = OpLoad %129 
                                       f32_3 %520 = OpFAdd %518 %519 
                                       f32_4 %521 = OpLoad %9 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %9 %522 
                                       f32_4 %525 = OpLoad %9 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                       f32_4 %527 = OpLoad %524 
                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
                                                      OpStore %524 %528 
                                 Output f32* %530 = OpAccessChain %524 %210 
                                                      OpStore %530 %67 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat10_6;
float u_xlat7;
float u_xlat16_7;
float u_xlat8;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat13 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat13 = float(1.0) / u_xlat13;
    u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0.x = u_xlat10_6 * u_xlat0.x + _LightShadowData.x;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.z) * u_xlat13 + u_xlat6.x;
    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat2.z;
    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat6.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlatb18 = u_xlat6.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat10_3 = texture(_LightTexture0, u_xlat6.xy, -8.0);
    u_xlat6.x = u_xlat18 * u_xlat10_3.w;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = u_xlat12 * _LightPos.w;
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyw = u_xlat0.xxx * _LightColor.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat12) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_12 = inversesqrt(u_xlat16_12);
    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_5.xyz;
    u_xlat12 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1;
    u_xlat8 = u_xlat12 * u_xlat16_7 + (-u_xlat12);
    u_xlat12 = u_xlat8 * u_xlat12 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-007;
    u_xlat16_7 = u_xlat16_7 * 0.318309873;
    u_xlat12 = u_xlat16_7 / u_xlat12;
    u_xlat16_7 = (-u_xlat16_1) + 1.0;
    u_xlat8 = abs(u_xlat2.x) * u_xlat16_7 + u_xlat16_1;
    u_xlat1.x = u_xlat19 * u_xlat16_7 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat7 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat19 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyw * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat3.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat12 = u_xlat7 * u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat7 * u_xlat12;
    u_xlat1.x = u_xlat13 + u_xlat13;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat16_5.x + -0.5;
    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat7 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat7 = u_xlat7 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw;
    SV_Target0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 732
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %36 %50 %724 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %8 RelaxedPrecision 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %36 Location 36 
                                                      OpDecorate %50 Location 50 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %294 DescriptorSet 294 
                                                      OpDecorate %294 Binding 294 
                                                      OpDecorate %334 DescriptorSet 334 
                                                      OpDecorate %334 Binding 334 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %404 DescriptorSet 404 
                                                      OpDecorate %404 Binding 404 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %452 DescriptorSet 452 
                                                      OpDecorate %452 Binding 452 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %457 DescriptorSet 457 
                                                      OpDecorate %457 Binding 457 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %668 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %724 Location 724 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %731 DescriptorSet 731 
                                                      OpDecorate %731 Binding 731 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 3 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %9 %10 %10 %13 %15 %10 %10 %10 %10 %16 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypePointer Private %9 
                               Private f32_3* %30 = OpVariable Private 
                                          i32 %31 = OpConstant 1 
                                          u32 %32 = OpConstant 2 
                                              %35 = OpTypePointer Input %9 
                                 Input f32_3* %36 = OpVariable Input 
                                              %37 = OpTypePointer Input %6 
                                              %46 = OpTypeVector %6 2 
                                              %47 = OpTypePointer Private %46 
                               Private f32_2* %48 = OpVariable Private 
                                              %49 = OpTypePointer Input %10 
                                 Input f32_4* %50 = OpVariable Input 
                                 Private f32* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                              %76 = OpTypePointer Private %10 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 3 
                                              %88 = OpTypePointer Uniform %10 
                                          i32 %95 = OpConstant 0 
                                         i32 %128 = OpConstant 4 
                                             %157 = OpTypePointer Function %9 
                                Private f32* %166 = OpVariable Private 
                                             %167 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture2DSampled* %170 = OpVariable UniformConstant 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         i32 %184 = OpConstant 6 
                                         u32 %211 = OpConstant 3 
                              Private f32_3* %234 = OpVariable Private 
                              Private f32_3* %244 = OpVariable Private 
                                         i32 %247 = OpConstant 9 
                                             %280 = OpTypeBool 
                                             %281 = OpTypePointer Private %280 
                               Private bool* %282 = OpVariable Private 
                                Private f32* %286 = OpVariable Private 
                                             %287 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %294 = OpVariable UniformConstant 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         i32 %310 = OpConstant 7 
                                             %317 = OpTypePointer Uniform %9 
                                Private f32* %327 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %334 = OpVariable UniformConstant 
                                         i32 %353 = OpConstant 8 
                              Private f32_3* %377 = OpVariable Private 
                                Private f32* %390 = OpVariable Private 
                                         f32 %395 = OpConstant 3.674022E-40 
                              Private f32_3* %403 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %404 = OpVariable UniformConstant 
                              Private f32_3* %409 = OpVariable Private 
                                         f32 %411 = OpConstant 3.674022E-40 
                                       f32_3 %412 = OpConstantComposite %411 %411 %411 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_3 %415 = OpConstantComposite %414 %414 %414 
                                Private f32* %417 = OpVariable Private 
                              Private f32_4* %451 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %452 = OpVariable UniformConstant 
                              Private f32_4* %456 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %457 = OpVariable UniformConstant 
                                Private f32* %464 = OpVariable Private 
                                Private f32* %469 = OpVariable Private 
                                         f32 %474 = OpConstant 3.674022E-40 
                                Private f32* %476 = OpVariable Private 
                                         f32 %495 = OpConstant 3.674022E-40 
                                         f32 %498 = OpConstant 3.674022E-40 
                                Private f32* %514 = OpVariable Private 
                                         f32 %542 = OpConstant 3.674022E-40 
                                         f32 %545 = OpConstant 3.674022E-40 
                                         f32 %557 = OpConstant 3.674022E-40 
                                         f32 %562 = OpConstant 3.674022E-40 
                              Private f32_3* %575 = OpVariable Private 
                               Private bool* %582 = OpVariable Private 
                                Private f32* %606 = OpVariable Private 
                              Private f32_3* %620 = OpVariable Private 
                                       f32_3 %624 = OpConstantComposite %27 %27 %27 
                                         f32 %669 = OpConstant 3.674022E-40 
                                Private f32* %683 = OpVariable Private 
                                             %723 = OpTypePointer Output %10 
                               Output f32_4* %724 = OpVariable Output 
                                             %728 = OpTypePointer Output %6 
 UniformConstant read_only Texture2DSampled* %731 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %158 = OpVariable Function 
                               Function f32* %288 = OpVariable Function 
                               Function f32* %586 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                                      OpStore %8 %28 
                                 Uniform f32* %33 = OpAccessChain %19 %31 %32 
                                          f32 %34 = OpLoad %33 
                                   Input f32* %38 = OpAccessChain %36 %32 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpFDiv %34 %39 
                                 Private f32* %41 = OpAccessChain %30 %22 
                                                      OpStore %41 %40 
                                        f32_3 %42 = OpLoad %30 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad %36 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %30 %45 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpLoad %50 
                                        f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                        f32_2 %55 = OpFDiv %52 %54 
                                                      OpStore %48 %55 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_2 %62 = OpLoad %48 
                                        f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %56 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %22 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %56 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %56 %73 
                                          f32 %74 = OpLoad %56 
                                          f32 %75 = OpFDiv %27 %74 
                                                      OpStore %56 %75 
                                        f32_3 %78 = OpLoad %30 
                                          f32 %79 = OpLoad %56 
                                        f32_3 %80 = OpCompositeConstruct %79 %79 %79 
                                        f32_3 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %77 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %77 %83 
                                        f32_4 %85 = OpLoad %77 
                                        f32_3 %86 = OpVectorShuffle %85 %85 1 1 1 
                               Uniform f32_4* %89 = OpAccessChain %19 %87 %31 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFMul %86 %91 
                                        f32_4 %93 = OpLoad %84 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %84 %94 
                               Uniform f32_4* %96 = OpAccessChain %19 %87 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %77 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %84 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %77 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 2 6 
                                                      OpStore %77 %106 
                              Uniform f32_4* %107 = OpAccessChain %19 %87 %65 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_4 %110 = OpLoad %77 
                                       f32_3 %111 = OpVectorShuffle %110 %110 2 2 2 
                                       f32_3 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %77 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                                       f32_3 %115 = OpFAdd %112 %114 
                                       f32_4 %116 = OpLoad %77 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 2 6 
                                                      OpStore %77 %117 
                                       f32_4 %118 = OpLoad %77 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 3 
                              Uniform f32_4* %120 = OpAccessChain %19 %87 %87 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFAdd %119 %122 
                                       f32_4 %124 = OpLoad %77 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 6 
                                                      OpStore %77 %125 
                                       f32_4 %126 = OpLoad %77 
                                       f32_4 %127 = OpVectorShuffle %126 %126 1 1 1 1 
                              Uniform f32_4* %129 = OpAccessChain %19 %128 %31 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpFMul %127 %130 
                                                      OpStore %84 %131 
                              Uniform f32_4* %132 = OpAccessChain %19 %128 %95 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %77 
                                       f32_4 %135 = OpVectorShuffle %134 %134 0 0 0 0 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %84 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %84 %138 
                              Uniform f32_4* %139 = OpAccessChain %19 %128 %65 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpLoad %77 
                                       f32_4 %142 = OpVectorShuffle %141 %141 3 3 3 3 
                                       f32_4 %143 = OpFMul %140 %142 
                                       f32_4 %144 = OpLoad %84 
                                       f32_4 %145 = OpFAdd %143 %144 
                                                      OpStore %84 %145 
                                       f32_4 %146 = OpLoad %84 
                              Uniform f32_4* %147 = OpAccessChain %19 %128 %87 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpFAdd %146 %148 
                                                      OpStore %84 %149 
                                       f32_4 %150 = OpLoad %84 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_4 %152 = OpLoad %84 
                                       f32_3 %153 = OpVectorShuffle %152 %152 3 3 3 
                                       f32_3 %154 = OpFDiv %151 %153 
                                       f32_4 %155 = OpLoad %84 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %84 %156 
                                       f32_4 %159 = OpLoad %84 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                Private f32* %161 = OpAccessChain %84 %32 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpCompositeExtract %160 0 
                                         f32 %164 = OpCompositeExtract %160 1 
                                       f32_3 %165 = OpCompositeConstruct %163 %164 %162 
                                                      OpStore %158 %165 
                  read_only Texture2DSampled %171 = OpLoad %170 
                                       f32_3 %172 = OpLoad %158 
                                         f32 %174 = OpCompositeExtract %172 2 
                                         f32 %175 = OpImageSampleDrefExplicitLod %171 %172 %174 Lod %6 
                                                      OpStore %166 %175 
                                         f32 %176 = OpLoad %166 
                                         f32 %177 = OpLoad %8 
                                         f32 %178 = OpFMul %176 %177 
                                Uniform f32* %179 = OpAccessChain %19 %21 %22 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFAdd %178 %180 
                                                      OpStore %8 %181 
                                       f32_4 %182 = OpLoad %77 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 3 
                              Uniform f32_4* %185 = OpAccessChain %19 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_3 %188 = OpFNegate %187 
                                       f32_3 %189 = OpFAdd %183 %188 
                                       f32_4 %190 = OpLoad %84 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %84 %191 
                                       f32_4 %192 = OpLoad %84 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_4 %194 = OpLoad %84 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %193 %195 
                                Private f32* %197 = OpAccessChain %30 %22 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %30 %22 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpExtInst %1 31 %199 
                                Private f32* %201 = OpAccessChain %30 %22 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %30 %32 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpLoad %56 
                                         f32 %206 = OpFMul %204 %205 
                                Private f32* %207 = OpAccessChain %30 %22 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFAdd %206 %208 
                                Private f32* %210 = OpAccessChain %30 %22 
                                                      OpStore %210 %209 
                                Uniform f32* %212 = OpAccessChain %19 %184 %211 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %30 %22 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                Private f32* %217 = OpAccessChain %77 %32 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFAdd %216 %218 
                                Private f32* %220 = OpAccessChain %30 %22 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %30 %22 
                                         f32 %222 = OpLoad %221 
                                Uniform f32* %223 = OpAccessChain %19 %21 %32 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Uniform f32* %226 = OpAccessChain %19 %21 %211 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFAdd %225 %227 
                                Private f32* %229 = OpAccessChain %30 %22 
                                                      OpStore %229 %228 
                                Private f32* %230 = OpAccessChain %30 %22 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpExtInst %1 43 %231 %173 %27 
                                Private f32* %233 = OpAccessChain %30 %22 
                                                      OpStore %233 %232 
                                Private f32* %235 = OpAccessChain %30 %22 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpLoad %8 
                                         f32 %238 = OpFAdd %236 %237 
                                Private f32* %239 = OpAccessChain %234 %22 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %234 %22 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %173 %27 
                                Private f32* %243 = OpAccessChain %234 %22 
                                                      OpStore %243 %242 
                                       f32_4 %245 = OpLoad %77 
                                       f32_3 %246 = OpVectorShuffle %245 %245 1 1 1 
                              Uniform f32_4* %248 = OpAccessChain %19 %247 %31 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 3 
                                       f32_3 %251 = OpFMul %246 %250 
                                                      OpStore %244 %251 
                              Uniform f32_4* %252 = OpAccessChain %19 %247 %95 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 3 
                                       f32_4 %255 = OpLoad %77 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_3 %258 = OpLoad %244 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore %244 %259 
                              Uniform f32_4* %260 = OpAccessChain %19 %247 %65 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 3 
                                       f32_4 %263 = OpLoad %77 
                                       f32_3 %264 = OpVectorShuffle %263 %263 3 3 3 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_3 %266 = OpLoad %244 
                                       f32_3 %267 = OpFAdd %265 %266 
                                                      OpStore %244 %267 
                                       f32_3 %268 = OpLoad %244 
                              Uniform f32_4* %269 = OpAccessChain %19 %247 %87 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 3 
                                       f32_3 %272 = OpFAdd %268 %271 
                                                      OpStore %244 %272 
                                       f32_3 %273 = OpLoad %244 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_3 %275 = OpLoad %244 
                                       f32_2 %276 = OpVectorShuffle %275 %275 2 2 
                                       f32_2 %277 = OpFDiv %274 %276 
                                       f32_3 %278 = OpLoad %244 
                                       f32_3 %279 = OpVectorShuffle %278 %277 3 4 2 
                                                      OpStore %244 %279 
                                Private f32* %283 = OpAccessChain %244 %32 
                                         f32 %284 = OpLoad %283 
                                        bool %285 = OpFOrdLessThan %284 %173 
                                                      OpStore %282 %285 
                                        bool %289 = OpLoad %282 
                                                      OpSelectionMerge %291 None 
                                                      OpBranchConditional %289 %290 %292 
                                             %290 = OpLabel 
                                                      OpStore %288 %27 
                                                      OpBranch %291 
                                             %292 = OpLabel 
                                                      OpStore %288 %173 
                                                      OpBranch %291 
                                             %291 = OpLabel 
                                         f32 %293 = OpLoad %288 
                                                      OpStore %286 %293 
                  read_only Texture2DSampled %295 = OpLoad %294 
                                       f32_3 %296 = OpLoad %244 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %299 = OpImageSampleImplicitLod %295 %297 Bias %10 
                                         f32 %300 = OpCompositeExtract %299 3 
                                Private f32* %301 = OpAccessChain %244 %22 
                                                      OpStore %301 %300 
                                         f32 %302 = OpLoad %286 
                                Private f32* %303 = OpAccessChain %244 %22 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFMul %302 %304 
                                Private f32* %306 = OpAccessChain %244 %22 
                                                      OpStore %306 %305 
                                       f32_4 %307 = OpLoad %77 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                       f32_3 %309 = OpFNegate %308 
                              Uniform f32_4* %311 = OpAccessChain %19 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %309 %313 
                                                      OpStore %30 %314 
                                       f32_4 %315 = OpLoad %77 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 3 
                              Uniform f32_3* %318 = OpAccessChain %19 %95 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpFNegate %319 
                                       f32_3 %321 = OpFAdd %316 %320 
                                       f32_4 %322 = OpLoad %77 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %77 %323 
                                       f32_3 %324 = OpLoad %30 
                                       f32_3 %325 = OpLoad %30 
                                         f32 %326 = OpDot %324 %325 
                                                      OpStore %56 %326 
                                         f32 %328 = OpLoad %56 
                                Uniform f32* %329 = OpAccessChain %19 %310 %211 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                                      OpStore %327 %331 
                                         f32 %332 = OpLoad %56 
                                         f32 %333 = OpExtInst %1 32 %332 
                                                      OpStore %56 %333 
                  read_only Texture2DSampled %335 = OpLoad %334 
                                         f32 %336 = OpLoad %327 
                                       f32_2 %337 = OpCompositeConstruct %336 %336 
                                       f32_4 %338 = OpImageSampleImplicitLod %335 %337 
                                         f32 %339 = OpCompositeExtract %338 3 
                                                      OpStore %327 %339 
                                Private f32* %340 = OpAccessChain %244 %22 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpLoad %327 
                                         f32 %343 = OpFMul %341 %342 
                                Private f32* %344 = OpAccessChain %244 %22 
                                                      OpStore %344 %343 
                                Private f32* %345 = OpAccessChain %234 %22 
                                         f32 %346 = OpLoad %345 
                                Private f32* %347 = OpAccessChain %244 %22 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                Private f32* %350 = OpAccessChain %244 %22 
                                                      OpStore %350 %349 
                                       f32_3 %351 = OpLoad %244 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 0 0 
                              Uniform f32_4* %354 = OpAccessChain %19 %353 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFMul %352 %356 
                                       f32_4 %358 = OpLoad %84 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %84 %359 
                                       f32_4 %360 = OpLoad %77 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %77 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %361 %363 
                                Private f32* %365 = OpAccessChain %244 %22 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %244 %22 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 32 %367 
                                Private f32* %369 = OpAccessChain %244 %22 
                                                      OpStore %369 %368 
                                       f32_3 %370 = OpLoad %244 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 0 0 
                                       f32_4 %372 = OpLoad %77 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_4 %375 = OpLoad %77 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %77 %376 
                                       f32_3 %378 = OpLoad %30 
                                         f32 %379 = OpLoad %56 
                                       f32_3 %380 = OpCompositeConstruct %379 %379 %379 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %77 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFNegate %383 
                                       f32_3 %385 = OpFAdd %381 %384 
                                                      OpStore %377 %385 
                                       f32_3 %386 = OpLoad %30 
                                         f32 %387 = OpLoad %56 
                                       f32_3 %388 = OpCompositeConstruct %387 %387 %387 
                                       f32_3 %389 = OpFMul %386 %388 
                                                      OpStore %244 %389 
                                       f32_3 %391 = OpLoad %377 
                                       f32_3 %392 = OpLoad %377 
                                         f32 %393 = OpDot %391 %392 
                                                      OpStore %390 %393 
                                         f32 %394 = OpLoad %390 
                                         f32 %396 = OpExtInst %1 40 %394 %395 
                                                      OpStore %390 %396 
                                         f32 %397 = OpLoad %390 
                                         f32 %398 = OpExtInst %1 32 %397 
                                                      OpStore %390 %398 
                                         f32 %399 = OpLoad %390 
                                       f32_3 %400 = OpCompositeConstruct %399 %399 %399 
                                       f32_3 %401 = OpLoad %377 
                                       f32_3 %402 = OpFMul %400 %401 
                                                      OpStore %377 %402 
                  read_only Texture2DSampled %405 = OpLoad %404 
                                       f32_2 %406 = OpLoad %48 
                                       f32_4 %407 = OpImageSampleImplicitLod %405 %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                                      OpStore %403 %408 
                                       f32_3 %410 = OpLoad %403 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_3 %416 = OpFAdd %413 %415 
                                                      OpStore %409 %416 
                                       f32_3 %418 = OpLoad %409 
                                       f32_3 %419 = OpLoad %409 
                                         f32 %420 = OpDot %418 %419 
                                                      OpStore %417 %420 
                                         f32 %421 = OpLoad %417 
                                         f32 %422 = OpExtInst %1 32 %421 
                                                      OpStore %417 %422 
                                         f32 %423 = OpLoad %417 
                                       f32_3 %424 = OpCompositeConstruct %423 %423 %423 
                                       f32_3 %425 = OpLoad %409 
                                       f32_3 %426 = OpFMul %424 %425 
                                                      OpStore %409 %426 
                                       f32_3 %427 = OpLoad %409 
                                       f32_3 %428 = OpLoad %377 
                                         f32 %429 = OpDot %427 %428 
                                                      OpStore %390 %429 
                                         f32 %430 = OpLoad %390 
                                         f32 %431 = OpExtInst %1 43 %430 %173 %27 
                                                      OpStore %390 %431 
                                       f32_3 %432 = OpLoad %244 
                                       f32_3 %433 = OpLoad %377 
                                         f32 %434 = OpDot %432 %433 
                                                      OpStore %56 %434 
                                         f32 %435 = OpLoad %56 
                                         f32 %436 = OpExtInst %1 43 %435 %173 %27 
                                                      OpStore %56 %436 
                                       f32_3 %437 = OpLoad %409 
                                       f32_3 %438 = OpLoad %244 
                                         f32 %439 = OpDot %437 %438 
                                Private f32* %440 = OpAccessChain %244 %22 
                                                      OpStore %440 %439 
                                Private f32* %441 = OpAccessChain %244 %22 
                                         f32 %442 = OpLoad %441 
                                         f32 %443 = OpExtInst %1 43 %442 %173 %27 
                                Private f32* %444 = OpAccessChain %244 %22 
                                                      OpStore %444 %443 
                                       f32_3 %445 = OpLoad %409 
                                       f32_4 %446 = OpLoad %77 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %448 = OpFNegate %447 
                                         f32 %449 = OpDot %445 %448 
                                Private f32* %450 = OpAccessChain %30 %22 
                                                      OpStore %450 %449 
                  read_only Texture2DSampled %453 = OpLoad %452 
                                       f32_2 %454 = OpLoad %48 
                                       f32_4 %455 = OpImageSampleImplicitLod %453 %454 
                                                      OpStore %451 %455 
                  read_only Texture2DSampled %458 = OpLoad %457 
                                       f32_2 %459 = OpLoad %48 
                                       f32_4 %460 = OpImageSampleImplicitLod %458 %459 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_4 %462 = OpLoad %456 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 2 6 
                                                      OpStore %456 %463 
                                Private f32* %465 = OpAccessChain %451 %211 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFNegate %466 
                                         f32 %468 = OpFAdd %467 %27 
                                                      OpStore %464 %468 
                                         f32 %470 = OpLoad %464 
                                         f32 %471 = OpLoad %464 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %469 %472 
                                         f32 %473 = OpLoad %469 
                                         f32 %475 = OpExtInst %1 40 %473 %474 
                                                      OpStore %469 %475 
                                         f32 %477 = OpLoad %469 
                                         f32 %478 = OpLoad %469 
                                         f32 %479 = OpFMul %477 %478 
                                                      OpStore %476 %479 
                                         f32 %480 = OpLoad %390 
                                         f32 %481 = OpLoad %476 
                                         f32 %482 = OpFMul %480 %481 
                                         f32 %483 = OpLoad %390 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %482 %484 
                                Private f32* %486 = OpAccessChain %377 %22 
                                                      OpStore %486 %485 
                                Private f32* %487 = OpAccessChain %377 %22 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpLoad %390 
                                         f32 %490 = OpFMul %488 %489 
                                         f32 %491 = OpFAdd %490 %27 
                                                      OpStore %390 %491 
                                         f32 %492 = OpLoad %390 
                                         f32 %493 = OpLoad %390 
                                         f32 %494 = OpFMul %492 %493 
                                         f32 %496 = OpFAdd %494 %495 
                                                      OpStore %390 %496 
                                         f32 %497 = OpLoad %476 
                                         f32 %499 = OpFMul %497 %498 
                                                      OpStore %476 %499 
                                         f32 %500 = OpLoad %476 
                                         f32 %501 = OpLoad %390 
                                         f32 %502 = OpFDiv %500 %501 
                                                      OpStore %390 %502 
                                         f32 %503 = OpLoad %469 
                                         f32 %504 = OpFNegate %503 
                                         f32 %505 = OpFAdd %504 %27 
                                                      OpStore %476 %505 
                                Private f32* %506 = OpAccessChain %30 %22 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpExtInst %1 4 %507 
                                         f32 %509 = OpLoad %476 
                                         f32 %510 = OpFMul %508 %509 
                                         f32 %511 = OpLoad %469 
                                         f32 %512 = OpFAdd %510 %511 
                                Private f32* %513 = OpAccessChain %377 %22 
                                                      OpStore %513 %512 
                                Private f32* %515 = OpAccessChain %244 %22 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpLoad %476 
                                         f32 %518 = OpFMul %516 %517 
                                         f32 %519 = OpLoad %469 
                                         f32 %520 = OpFAdd %518 %519 
                                                      OpStore %514 %520 
                                Private f32* %521 = OpAccessChain %30 %22 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpExtInst %1 4 %522 
                                         f32 %524 = OpLoad %514 
                                         f32 %525 = OpFMul %523 %524 
                                                      OpStore %514 %525 
                                Private f32* %526 = OpAccessChain %30 %22 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpExtInst %1 4 %527 
                                         f32 %529 = OpFNegate %528 
                                         f32 %530 = OpFAdd %529 %27 
                                Private f32* %531 = OpAccessChain %234 %22 
                                                      OpStore %531 %530 
                                Private f32* %532 = OpAccessChain %244 %22 
                                         f32 %533 = OpLoad %532 
                                Private f32* %534 = OpAccessChain %377 %22 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFMul %533 %535 
                                         f32 %537 = OpLoad %514 
                                         f32 %538 = OpFAdd %536 %537 
                                Private f32* %539 = OpAccessChain %30 %22 
                                                      OpStore %539 %538 
                                Private f32* %540 = OpAccessChain %30 %22 
                                         f32 %541 = OpLoad %540 
                                         f32 %543 = OpFAdd %541 %542 
                                Private f32* %544 = OpAccessChain %30 %22 
                                                      OpStore %544 %543 
                                Private f32* %546 = OpAccessChain %30 %22 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFDiv %545 %547 
                                Private f32* %549 = OpAccessChain %30 %22 
                                                      OpStore %549 %548 
                                         f32 %550 = OpLoad %390 
                                Private f32* %551 = OpAccessChain %30 %22 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFMul %550 %552 
                                Private f32* %554 = OpAccessChain %30 %22 
                                                      OpStore %554 %553 
                                Private f32* %555 = OpAccessChain %30 %22 
                                         f32 %556 = OpLoad %555 
                                         f32 %558 = OpFMul %556 %557 
                                Private f32* %559 = OpAccessChain %30 %22 
                                                      OpStore %559 %558 
                                Private f32* %560 = OpAccessChain %30 %22 
                                         f32 %561 = OpLoad %560 
                                         f32 %563 = OpExtInst %1 40 %561 %562 
                                Private f32* %564 = OpAccessChain %30 %22 
                                                      OpStore %564 %563 
                                Private f32* %565 = OpAccessChain %30 %22 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpExtInst %1 31 %566 
                                Private f32* %568 = OpAccessChain %30 %22 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %244 %22 
                                         f32 %570 = OpLoad %569 
                                Private f32* %571 = OpAccessChain %30 %22 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpFMul %570 %572 
                                Private f32* %574 = OpAccessChain %30 %22 
                                                      OpStore %574 %573 
                                       f32_4 %576 = OpLoad %451 
                                       f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                       f32_4 %578 = OpLoad %451 
                                       f32_3 %579 = OpVectorShuffle %578 %578 0 1 2 
                                         f32 %580 = OpDot %577 %579 
                                Private f32* %581 = OpAccessChain %575 %22 
                                                      OpStore %581 %580 
                                Private f32* %583 = OpAccessChain %575 %22 
                                         f32 %584 = OpLoad %583 
                                        bool %585 = OpFOrdNotEqual %584 %173 
                                                      OpStore %582 %585 
                                        bool %587 = OpLoad %582 
                                                      OpSelectionMerge %589 None 
                                                      OpBranchConditional %587 %588 %590 
                                             %588 = OpLabel 
                                                      OpStore %586 %27 
                                                      OpBranch %589 
                                             %590 = OpLabel 
                                                      OpStore %586 %173 
                                                      OpBranch %589 
                                             %589 = OpLabel 
                                         f32 %591 = OpLoad %586 
                                                      OpStore %390 %591 
                                         f32 %592 = OpLoad %390 
                                Private f32* %593 = OpAccessChain %30 %22 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %592 %594 
                                Private f32* %596 = OpAccessChain %30 %22 
                                                      OpStore %596 %595 
                                       f32_4 %597 = OpLoad %84 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 1 2 
                                       f32_3 %599 = OpLoad %30 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 0 0 
                                       f32_3 %601 = OpFMul %598 %600 
                                                      OpStore %377 %601 
                                         f32 %602 = OpLoad %56 
                                         f32 %603 = OpFNegate %602 
                                         f32 %604 = OpFAdd %603 %27 
                                Private f32* %605 = OpAccessChain %575 %22 
                                                      OpStore %605 %604 
                                Private f32* %607 = OpAccessChain %575 %22 
                                         f32 %608 = OpLoad %607 
                                Private f32* %609 = OpAccessChain %575 %22 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFMul %608 %610 
                                                      OpStore %606 %611 
                                         f32 %612 = OpLoad %606 
                                         f32 %613 = OpLoad %606 
                                         f32 %614 = OpFMul %612 %613 
                                                      OpStore %606 %614 
                                Private f32* %615 = OpAccessChain %575 %22 
                                         f32 %616 = OpLoad %615 
                                         f32 %617 = OpLoad %606 
                                         f32 %618 = OpFMul %616 %617 
                                Private f32* %619 = OpAccessChain %575 %22 
                                                      OpStore %619 %618 
                                       f32_4 %621 = OpLoad %451 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_3 %623 = OpFNegate %622 
                                       f32_3 %625 = OpFAdd %623 %624 
                                                      OpStore %620 %625 
                                       f32_3 %626 = OpLoad %620 
                                       f32_3 %627 = OpLoad %575 
                                       f32_3 %628 = OpVectorShuffle %627 %627 0 0 0 
                                       f32_3 %629 = OpFMul %626 %628 
                                       f32_4 %630 = OpLoad %451 
                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
                                       f32_3 %632 = OpFAdd %629 %631 
                                                      OpStore %575 %632 
                                       f32_3 %633 = OpLoad %575 
                                       f32_3 %634 = OpLoad %377 
                                       f32_3 %635 = OpFMul %633 %634 
                                       f32_4 %636 = OpLoad %77 
                                       f32_4 %637 = OpVectorShuffle %636 %635 4 5 6 3 
                                                      OpStore %77 %637 
                                Private f32* %638 = OpAccessChain %234 %22 
                                         f32 %639 = OpLoad %638 
                                Private f32* %640 = OpAccessChain %234 %22 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpFMul %639 %641 
                                Private f32* %643 = OpAccessChain %575 %22 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %575 %22 
                                         f32 %645 = OpLoad %644 
                                Private f32* %646 = OpAccessChain %575 %22 
                                         f32 %647 = OpLoad %646 
                                         f32 %648 = OpFMul %645 %647 
                                Private f32* %649 = OpAccessChain %575 %22 
                                                      OpStore %649 %648 
                                Private f32* %650 = OpAccessChain %234 %22 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %575 %22 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %234 %22 
                                                      OpStore %655 %654 
                                         f32 %656 = OpLoad %56 
                                         f32 %657 = OpLoad %56 
                                         f32 %658 = OpFAdd %656 %657 
                                Private f32* %659 = OpAccessChain %575 %22 
                                                      OpStore %659 %658 
                                         f32 %660 = OpLoad %56 
                                Private f32* %661 = OpAccessChain %575 %22 
                                         f32 %662 = OpLoad %661 
                                         f32 %663 = OpFMul %660 %662 
                                Private f32* %664 = OpAccessChain %575 %22 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %575 %22 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpLoad %464 
                                         f32 %668 = OpFMul %666 %667 
                                         f32 %670 = OpFAdd %668 %669 
                                Private f32* %671 = OpAccessChain %575 %22 
                                                      OpStore %671 %670 
                                Private f32* %672 = OpAccessChain %575 %22 
                                         f32 %673 = OpLoad %672 
                                Private f32* %674 = OpAccessChain %234 %22 
                                         f32 %675 = OpLoad %674 
                                         f32 %676 = OpFMul %673 %675 
                                         f32 %677 = OpFAdd %676 %27 
                                Private f32* %678 = OpAccessChain %234 %22 
                                                      OpStore %678 %677 
                                Private f32* %679 = OpAccessChain %244 %22 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpFNegate %680 
                                         f32 %682 = OpFAdd %681 %27 
                                                      OpStore %606 %682 
                                         f32 %684 = OpLoad %606 
                                         f32 %685 = OpLoad %606 
                                         f32 %686 = OpFMul %684 %685 
                                                      OpStore %683 %686 
                                         f32 %687 = OpLoad %683 
                                         f32 %688 = OpLoad %683 
                                         f32 %689 = OpFMul %687 %688 
                                                      OpStore %683 %689 
                                         f32 %690 = OpLoad %606 
                                         f32 %691 = OpLoad %683 
                                         f32 %692 = OpFMul %690 %691 
                                                      OpStore %606 %692 
                                Private f32* %693 = OpAccessChain %575 %22 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpLoad %606 
                                         f32 %696 = OpFMul %694 %695 
                                         f32 %697 = OpFAdd %696 %27 
                                Private f32* %698 = OpAccessChain %575 %22 
                                                      OpStore %698 %697 
                                Private f32* %699 = OpAccessChain %234 %22 
                                         f32 %700 = OpLoad %699 
                                Private f32* %701 = OpAccessChain %575 %22 
                                         f32 %702 = OpLoad %701 
                                         f32 %703 = OpFMul %700 %702 
                                Private f32* %704 = OpAccessChain %234 %22 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %244 %22 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %234 %22 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                Private f32* %710 = OpAccessChain %244 %22 
                                                      OpStore %710 %709 
                                       f32_3 %711 = OpLoad %244 
                                       f32_3 %712 = OpVectorShuffle %711 %711 0 0 0 
                                       f32_4 %713 = OpLoad %84 
                                       f32_3 %714 = OpVectorShuffle %713 %713 0 1 2 
                                       f32_3 %715 = OpFMul %712 %714 
                                                      OpStore %234 %715 
                                       f32_4 %716 = OpLoad %456 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 3 
                                       f32_3 %718 = OpLoad %234 
                                       f32_3 %719 = OpFMul %717 %718 
                                       f32_4 %720 = OpLoad %77 
                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
                                       f32_3 %722 = OpFAdd %719 %721 
                                                      OpStore %244 %722 
                                       f32_3 %725 = OpLoad %244 
                                       f32_4 %726 = OpLoad %724 
                                       f32_4 %727 = OpVectorShuffle %726 %725 4 5 6 3 
                                                      OpStore %724 %727 
                                 Output f32* %729 = OpAccessChain %724 %211 
                                                      OpStore %729 %27 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat16_11;
float u_xlat20;
float u_xlat16_20;
float u_xlat21;
float u_xlat22;
float u_xlat10_22;
bool u_xlatb22;
vec2 u_xlat25;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat33;
float u_xlat10_33;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat30 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat30 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat31 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat10.xyz * vec3(u_xlat31);
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat10_5 = texture(_LightTexture0, u_xlat4.xy, -8.0);
    u_xlatb22 = u_xlat4.z<0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat10_5.w;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat21 = u_xlat22 * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb22 = u_xlat0.x<0.99000001;
    if(u_xlatb22){
        u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
        u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat5.xy = floor(u_xlat5.xy);
        u_xlat4.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat5.xy);
        u_xlat6 = u_xlat4.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat7.xw = u_xlat6.xz * u_xlat6.xz;
        u_xlat25.xy = u_xlat7.xw * vec2(0.5, 0.5) + (-u_xlat4.xy);
        u_xlat6.xz = (-u_xlat4.xy) + vec2(1.0, 1.0);
        u_xlat8.xy = min(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat6.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat6.xz;
        u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + u_xlat6.yw;
        u_xlat8.x = u_xlat25.x;
        u_xlat8.y = u_xlat6.x;
        u_xlat8.z = u_xlat4.x;
        u_xlat8.w = u_xlat7.x;
        u_xlat8 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7.x = u_xlat25.y;
        u_xlat7.y = u_xlat6.z;
        u_xlat7.z = u_xlat4.y;
        u_xlat6 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7 = u_xlat8.ywyw + u_xlat8.xzxz;
        u_xlat9 = u_xlat6.yyww + u_xlat6.xxzz;
        u_xlat4.xy = u_xlat8.yw / u_xlat7.zw;
        u_xlat4.xy = u_xlat4.xy + vec2(-1.5, 0.5);
        u_xlat25.xy = u_xlat6.yw / u_xlat9.yw;
        u_xlat25.xy = u_xlat25.xy + vec2(-1.5, 0.5);
        u_xlat6.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat6.zw = u_xlat25.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat7 = u_xlat7 * u_xlat9;
        u_xlat8 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xzyz;
        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat4.z);
        u_xlat10_22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat8.zw,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat33 = u_xlat10_33 * u_xlat7.y;
        u_xlat22 = u_xlat7.x * u_xlat10_22 + u_xlat33;
        u_xlat5 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xwyw;
        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat22 = u_xlat7.z * u_xlat10_33 + u_xlat22;
        vec3 txVec3 = vec3(u_xlat5.zw,u_xlat4.z);
        u_xlat10_33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat22 = u_xlat7.w * u_xlat10_33 + u_xlat22;
        u_xlat33 = (-_LightShadowData.x) + 1.0;
        u_xlat22 = u_xlat22 * u_xlat33 + _LightShadowData.x;
    } else {
        u_xlat22 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat22;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat21;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat10.xyz * vec3(u_xlat31) + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, u_xlat16_7.xx);
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat20 = u_xlat20 * u_xlat11;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat11 = -abs(u_xlat30) + 1.0;
    u_xlat21 = u_xlat11 * u_xlat11;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat11 = u_xlat11 * u_xlat21;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat16_20 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_20 = max(u_xlat16_20, 0.00200000009);
    u_xlat16_11 = (-u_xlat16_20) + 1.0;
    u_xlat21 = abs(u_xlat30) * u_xlat16_11 + u_xlat16_20;
    u_xlat11 = u_xlat31 * u_xlat16_11 + u_xlat16_20;
    u_xlat30 = abs(u_xlat30) * u_xlat11;
    u_xlat30 = u_xlat31 * u_xlat21 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-006;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
    u_xlat11 = u_xlat1.x * u_xlat16_20 + (-u_xlat1.x);
    u_xlat1.x = u_xlat11 * u_xlat1.x + 1.0;
    u_xlat16_20 = u_xlat16_20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat20 = u_xlat16_20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-005);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = vec2(u_xlat31) * u_xlat10.xy;
    u_xlat30 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat4.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat31 = u_xlat0.x * u_xlat0.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat0.x = u_xlat0.x * u_xlat31;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 977
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %45 %968 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %27 Location 27 
                                                      OpDecorate %45 Location 45 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %506 DescriptorSet 506 
                                                      OpDecorate %506 Binding 506 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %600 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %618 DescriptorSet 618 
                                                      OpDecorate %618 Binding 618 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %624 DescriptorSet 624 
                                                      OpDecorate %624 Binding 624 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %629 DescriptorSet 629 
                                                      OpDecorate %629 Binding 629 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %650 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %772 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %775 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %778 RelaxedPrecision 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %781 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %784 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %788 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %799 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %804 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %809 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %849 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %927 RelaxedPrecision 
                                                      OpDecorate %928 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %932 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %935 RelaxedPrecision 
                                                      OpDecorate %937 RelaxedPrecision 
                                                      OpDecorate %939 RelaxedPrecision 
                                                      OpDecorate %940 RelaxedPrecision 
                                                      OpDecorate %941 RelaxedPrecision 
                                                      OpDecorate %942 RelaxedPrecision 
                                                      OpDecorate %943 RelaxedPrecision 
                                                      OpDecorate %945 RelaxedPrecision 
                                                      OpDecorate %946 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %948 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %951 RelaxedPrecision 
                                                      OpDecorate %952 RelaxedPrecision 
                                                      OpDecorate %955 RelaxedPrecision 
                                                      OpDecorate %959 RelaxedPrecision 
                                                      OpDecorate %960 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %968 RelaxedPrecision 
                                                      OpDecorate %968 Location 968 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %976 DescriptorSet 976 
                                                      OpDecorate %976 Binding 976 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                                 Input f32_3* %27 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %41 = OpTypeVector %6 2 
                                              %42 = OpTypePointer Private %41 
                               Private f32_2* %43 = OpVariable Private 
                                              %44 = OpTypePointer Input %7 
                                 Input f32_4* %45 = OpVariable Input 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypeSampledImage %52 
                                              %54 = OpTypePointer UniformConstant %53 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 6 
                                         u32 %145 = OpConstant 3 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                Private f32* %164 = OpVariable Private 
                                Private f32* %168 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %178 = OpConstant 9 
                                Private f32* %222 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %223 = OpVariable UniformConstant 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %230 = OpTypeBool 
                                             %231 = OpTypePointer Private %230 
                               Private bool* %232 = OpVariable Private 
                                         f32 %235 = OpConstant 3.674022E-40 
                                Private f32* %237 = OpVariable Private 
                                             %238 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %252 = OpVariable UniformConstant 
                                         i32 %263 = OpConstant 5 
                               Private bool* %275 = OpVariable Private 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         i32 %285 = OpConstant 4 
                              Private f32_4* %314 = OpVariable Private 
                                         i32 %317 = OpConstant 10 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_2 %323 = OpConstantComposite %322 %322 
                              Private f32_4* %344 = OpVariable Private 
                                       f32_4 %347 = OpConstantComposite %322 %69 %322 %69 
                              Private f32_4* %349 = OpVariable Private 
                              Private f32_2* %357 = OpVariable Private 
                                       f32_2 %368 = OpConstantComposite %69 %69 
                              Private f32_4* %372 = OpVariable Private 
                                       f32_2 %375 = OpConstantComposite %235 %235 
                                         f32 %419 = OpConstant 3.674022E-40 
                                         f32 %420 = OpConstant 3.674022E-40 
                                       f32_4 %421 = OpConstantComposite %419 %419 %419 %420 
                              Private f32_4* %439 = OpVariable Private 
                                         f32 %454 = OpConstant 3.674022E-40 
                                       f32_2 %455 = OpConstantComposite %454 %322 
                                             %493 = OpTypePointer Function %10 
                                Private f32* %502 = OpVariable Private 
                                             %503 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %504 = OpTypeSampledImage %503 
                                             %505 = OpTypePointer UniformConstant %504 
 UniformConstant read_only Texture2DSampled* %506 = OpVariable UniformConstant 
                                Private f32* %519 = OpVariable Private 
                                Private f32* %579 = OpVariable Private 
                                Private f32* %590 = OpVariable Private 
                              Private f32_3* %593 = OpVariable Private 
                                         i32 %610 = OpConstant 8 
                              Private f32_3* %617 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %618 = OpVariable UniformConstant 
                              Private f32_4* %623 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %624 = OpVariable UniformConstant 
                              Private f32_3* %628 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %629 = OpVariable UniformConstant 
                              Private f32_3* %634 = OpVariable Private 
                                         f32 %636 = OpConstant 3.674022E-40 
                                       f32_3 %637 = OpConstantComposite %636 %636 %636 
                                         f32 %639 = OpConstant 3.674022E-40 
                                       f32_3 %640 = OpConstantComposite %639 %639 %639 
                                Private f32* %642 = OpVariable Private 
                                             %654 = OpTypePointer Uniform %10 
                                         f32 %694 = OpConstant 3.674022E-40 
                                         f32 %744 = OpConstant 3.674022E-40 
                                Private f32* %747 = OpVariable Private 
                                Private f32* %751 = OpVariable Private 
                                Private f32* %770 = OpVariable Private 
                                Private f32* %791 = OpVariable Private 
                                         f32 %800 = OpConstant 3.674022E-40 
                                Private f32* %802 = OpVariable Private 
                                Private f32* %806 = OpVariable Private 
                                         f32 %828 = OpConstant 3.674022E-40 
                                         f32 %850 = OpConstant 3.674022E-40 
                                         f32 %857 = OpConstant 3.674022E-40 
                                         f32 %872 = OpConstant 3.674022E-40 
                                         f32 %877 = OpConstant 3.674022E-40 
                               Private bool* %895 = OpVariable Private 
                              Private f32_3* %926 = OpVariable Private 
                                       f32_3 %944 = OpConstantComposite %69 %69 %69 
                                             %967 = OpTypePointer Output %7 
                               Output f32_4* %968 = OpVariable Output 
                                             %973 = OpTypePointer Output %6 
 UniformConstant read_only Texture2DSampled* %976 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %239 = OpVariable Function 
                             Function f32_3* %494 = OpVariable Function 
                             Function f32_3* %511 = OpVariable Function 
                             Function f32_3* %543 = OpVariable Function 
                             Function f32_3* %561 = OpVariable Function 
                               Function f32* %899 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain %27 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad %27 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %45 
                                        f32_2 %49 = OpVectorShuffle %48 %48 3 3 
                                        f32_2 %50 = OpFDiv %47 %49 
                                                      OpStore %43 %50 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_2 %57 = OpLoad %43 
                                        f32_4 %58 = OpImageSampleImplicitLod %56 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %51 %59 
                                 Uniform f32* %61 = OpAccessChain %19 %60 %32 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %51 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %19 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %51 %68 
                                          f32 %70 = OpLoad %51 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %51 %71 
                                          f32 %73 = OpLoad %51 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %19 %84 %21 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %19 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %19 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %19 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %32 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %32 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %32 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %22 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %51 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %32 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %32 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %19 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %32 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %22 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %32 
                                                      OpStore %154 %153 
                                       f32_4 %156 = OpLoad %72 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 3 
                                       f32_3 %158 = OpFNegate %157 
                              Uniform f32_4* %160 = OpAccessChain %19 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %158 %162 
                                                      OpStore %155 %163 
                                       f32_3 %165 = OpLoad %155 
                                       f32_3 %166 = OpLoad %155 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %164 %167 
                                         f32 %169 = OpLoad %164 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                       f32_3 %171 = OpLoad %155 
                                         f32 %172 = OpLoad %168 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                                                      OpStore %81 %174 
                                       f32_4 %176 = OpLoad %72 
                                       f32_3 %177 = OpVectorShuffle %176 %176 1 1 1 
                              Uniform f32_4* %179 = OpAccessChain %19 %178 %21 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 3 
                                       f32_3 %182 = OpFMul %177 %181 
                                       f32_4 %183 = OpLoad %175 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                      OpStore %175 %184 
                              Uniform f32_4* %185 = OpAccessChain %19 %178 %90 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 3 
                                       f32_4 %188 = OpLoad %72 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 0 0 
                                       f32_3 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %175 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFAdd %190 %192 
                                       f32_4 %194 = OpLoad %175 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %175 %195 
                              Uniform f32_4* %196 = OpAccessChain %19 %178 %60 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 3 
                                       f32_4 %199 = OpLoad %72 
                                       f32_3 %200 = OpVectorShuffle %199 %199 3 3 3 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %175 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFAdd %201 %203 
                                       f32_4 %205 = OpLoad %175 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %175 %206 
                                       f32_4 %207 = OpLoad %175 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_4* %209 = OpAccessChain %19 %178 %84 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 3 
                                       f32_3 %212 = OpFAdd %208 %211 
                                       f32_4 %213 = OpLoad %175 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %175 %214 
                                       f32_4 %215 = OpLoad %175 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 1 
                                       f32_4 %217 = OpLoad %175 
                                       f32_2 %218 = OpVectorShuffle %217 %217 2 2 
                                       f32_2 %219 = OpFDiv %216 %218 
                                       f32_4 %220 = OpLoad %175 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
                                                      OpStore %175 %221 
                  read_only Texture2DSampled %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %175 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_4 %228 = OpImageSampleImplicitLod %224 %226 Bias %7 
                                         f32 %229 = OpCompositeExtract %228 3 
                                                      OpStore %222 %229 
                                Private f32* %233 = OpAccessChain %175 %22 
                                         f32 %234 = OpLoad %233 
                                        bool %236 = OpFOrdLessThan %234 %235 
                                                      OpStore %232 %236 
                                        bool %240 = OpLoad %232 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %243 
                                             %241 = OpLabel 
                                                      OpStore %239 %69 
                                                      OpBranch %242 
                                             %243 = OpLabel 
                                                      OpStore %239 %235 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                         f32 %244 = OpLoad %239 
                                                      OpStore %237 %244 
                                         f32 %245 = OpLoad %222 
                                         f32 %246 = OpLoad %237 
                                         f32 %247 = OpFMul %245 %246 
                                                      OpStore %222 %247 
                                         f32 %248 = OpLoad %164 
                                Uniform f32* %249 = OpAccessChain %19 %159 %145 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                                      OpStore %164 %251 
                  read_only Texture2DSampled %253 = OpLoad %252 
                                         f32 %254 = OpLoad %164 
                                       f32_2 %255 = OpCompositeConstruct %254 %254 
                                       f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                                         f32 %257 = OpCompositeExtract %256 3 
                                                      OpStore %164 %257 
                                         f32 %258 = OpLoad %164 
                                         f32 %259 = OpLoad %222 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %164 %260 
                                Private f32* %261 = OpAccessChain %9 %32 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %19 %263 %22 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %19 %263 %145 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %9 %32 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %9 %32 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %235 %69 
                                Private f32* %274 = OpAccessChain %9 %32 
                                                      OpStore %274 %273 
                                Private f32* %276 = OpAccessChain %9 %32 
                                         f32 %277 = OpLoad %276 
                                        bool %279 = OpFOrdLessThan %277 %278 
                                                      OpStore %275 %279 
                                        bool %280 = OpLoad %275 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %592 
                                             %281 = OpLabel 
                                       f32_4 %283 = OpLoad %72 
                                       f32_4 %284 = OpVectorShuffle %283 %283 1 1 1 1 
                              Uniform f32_4* %286 = OpAccessChain %19 %285 %21 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFMul %284 %287 
                                                      OpStore %175 %288 
                              Uniform f32_4* %289 = OpAccessChain %19 %285 %90 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpLoad %72 
                                       f32_4 %292 = OpVectorShuffle %291 %291 0 0 0 0 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %175 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %175 %295 
                              Uniform f32_4* %296 = OpAccessChain %19 %285 %60 
                                       f32_4 %297 = OpLoad %296 
                                       f32_4 %298 = OpLoad %72 
                                       f32_4 %299 = OpVectorShuffle %298 %298 3 3 3 3 
                                       f32_4 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %175 
                                       f32_4 %302 = OpFAdd %300 %301 
                                                      OpStore %175 %302 
                                       f32_4 %303 = OpLoad %175 
                              Uniform f32_4* %304 = OpAccessChain %19 %285 %84 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpFAdd %303 %305 
                                                      OpStore %175 %306 
                                       f32_4 %307 = OpLoad %175 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %175 
                                       f32_3 %310 = OpVectorShuffle %309 %309 3 3 3 
                                       f32_3 %311 = OpFDiv %308 %310 
                                       f32_4 %312 = OpLoad %175 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %175 %313 
                                       f32_4 %315 = OpLoad %175 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                              Uniform f32_4* %318 = OpAccessChain %19 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_2 %320 = OpVectorShuffle %319 %319 2 3 
                                       f32_2 %321 = OpFMul %316 %320 
                                       f32_2 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %314 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 2 3 
                                                      OpStore %314 %326 
                                       f32_4 %327 = OpLoad %314 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_2 %329 = OpExtInst %1 8 %328 
                                       f32_4 %330 = OpLoad %314 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                                      OpStore %314 %331 
                                       f32_4 %332 = OpLoad %175 
                                       f32_2 %333 = OpVectorShuffle %332 %332 0 1 
                              Uniform f32_4* %334 = OpAccessChain %19 %317 
                                       f32_4 %335 = OpLoad %334 
                                       f32_2 %336 = OpVectorShuffle %335 %335 2 3 
                                       f32_2 %337 = OpFMul %333 %336 
                                       f32_4 %338 = OpLoad %314 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 1 
                                       f32_2 %340 = OpFNegate %339 
                                       f32_2 %341 = OpFAdd %337 %340 
                                       f32_4 %342 = OpLoad %175 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %175 %343 
                                       f32_4 %345 = OpLoad %175 
                                       f32_4 %346 = OpVectorShuffle %345 %345 0 0 1 1 
                                       f32_4 %348 = OpFAdd %346 %347 
                                                      OpStore %344 %348 
                                       f32_4 %350 = OpLoad %344 
                                       f32_2 %351 = OpVectorShuffle %350 %350 0 2 
                                       f32_4 %352 = OpLoad %344 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 2 
                                       f32_2 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %349 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 1 2 5 
                                                      OpStore %349 %356 
                                       f32_4 %358 = OpLoad %349 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 3 
                                       f32_2 %360 = OpFMul %359 %323 
                                       f32_4 %361 = OpLoad %175 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 1 
                                       f32_2 %363 = OpFNegate %362 
                                       f32_2 %364 = OpFAdd %360 %363 
                                                      OpStore %357 %364 
                                       f32_4 %365 = OpLoad %175 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 1 
                                       f32_2 %367 = OpFNegate %366 
                                       f32_2 %369 = OpFAdd %367 %368 
                                       f32_4 %370 = OpLoad %344 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 1 5 3 
                                                      OpStore %344 %371 
                                       f32_4 %373 = OpLoad %175 
                                       f32_2 %374 = OpVectorShuffle %373 %373 0 1 
                                       f32_2 %376 = OpExtInst %1 37 %374 %375 
                                       f32_4 %377 = OpLoad %372 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 2 3 
                                                      OpStore %372 %378 
                                       f32_4 %379 = OpLoad %372 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %372 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %344 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 2 
                                       f32_2 %387 = OpFAdd %384 %386 
                                       f32_4 %388 = OpLoad %344 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 1 5 3 
                                                      OpStore %344 %389 
                                       f32_4 %390 = OpLoad %175 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_2 %392 = OpExtInst %1 40 %391 %375 
                                       f32_4 %393 = OpLoad %175 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 2 3 
                                                      OpStore %175 %394 
                                       f32_4 %395 = OpLoad %175 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_2 %397 = OpFNegate %396 
                                       f32_4 %398 = OpLoad %175 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_2 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %344 
                                       f32_2 %402 = OpVectorShuffle %401 %401 1 3 
                                       f32_2 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %175 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 2 3 
                                                      OpStore %175 %405 
                                Private f32* %406 = OpAccessChain %357 %32 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %372 %32 
                                                      OpStore %408 %407 
                                Private f32* %409 = OpAccessChain %344 %32 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %372 %65 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %175 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %372 %22 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %349 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %372 %145 
                                                      OpStore %417 %416 
                                       f32_4 %418 = OpLoad %372 
                                       f32_4 %422 = OpFMul %418 %421 
                                                      OpStore %372 %422 
                                Private f32* %423 = OpAccessChain %357 %65 
                                         f32 %424 = OpLoad %423 
                                Private f32* %425 = OpAccessChain %349 %32 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %344 %22 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %349 %65 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %175 %65 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %349 %22 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %349 
                                       f32_4 %433 = OpFMul %432 %421 
                                                      OpStore %344 %433 
                                       f32_4 %434 = OpLoad %372 
                                       f32_4 %435 = OpVectorShuffle %434 %434 1 3 1 3 
                                       f32_4 %436 = OpLoad %372 
                                       f32_4 %437 = OpVectorShuffle %436 %436 0 2 0 2 
                                       f32_4 %438 = OpFAdd %435 %437 
                                                      OpStore %349 %438 
                                       f32_4 %440 = OpLoad %344 
                                       f32_4 %441 = OpVectorShuffle %440 %440 1 1 3 3 
                                       f32_4 %442 = OpLoad %344 
                                       f32_4 %443 = OpVectorShuffle %442 %442 0 0 2 2 
                                       f32_4 %444 = OpFAdd %441 %443 
                                                      OpStore %439 %444 
                                       f32_4 %445 = OpLoad %372 
                                       f32_2 %446 = OpVectorShuffle %445 %445 1 3 
                                       f32_4 %447 = OpLoad %349 
                                       f32_2 %448 = OpVectorShuffle %447 %447 2 3 
                                       f32_2 %449 = OpFDiv %446 %448 
                                       f32_4 %450 = OpLoad %175 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
                                                      OpStore %175 %451 
                                       f32_4 %452 = OpLoad %175 
                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
                                       f32_2 %456 = OpFAdd %453 %455 
                                       f32_4 %457 = OpLoad %175 
                                       f32_4 %458 = OpVectorShuffle %457 %456 4 5 2 3 
                                                      OpStore %175 %458 
                                       f32_4 %459 = OpLoad %344 
                                       f32_2 %460 = OpVectorShuffle %459 %459 1 3 
                                       f32_4 %461 = OpLoad %439 
                                       f32_2 %462 = OpVectorShuffle %461 %461 1 3 
                                       f32_2 %463 = OpFDiv %460 %462 
                                                      OpStore %357 %463 
                                       f32_2 %464 = OpLoad %357 
                                       f32_2 %465 = OpFAdd %464 %455 
                                                      OpStore %357 %465 
                                       f32_4 %466 = OpLoad %175 
                                       f32_2 %467 = OpVectorShuffle %466 %466 0 1 
                              Uniform f32_4* %468 = OpAccessChain %19 %317 
                                       f32_4 %469 = OpLoad %468 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 0 
                                       f32_2 %471 = OpFMul %467 %470 
                                       f32_4 %472 = OpLoad %344 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 2 3 
                                                      OpStore %344 %473 
                                       f32_2 %474 = OpLoad %357 
                              Uniform f32_4* %475 = OpAccessChain %19 %317 
                                       f32_4 %476 = OpLoad %475 
                                       f32_2 %477 = OpVectorShuffle %476 %476 1 1 
                                       f32_2 %478 = OpFMul %474 %477 
                                       f32_4 %479 = OpLoad %344 
                                       f32_4 %480 = OpVectorShuffle %479 %478 0 1 4 5 
                                                      OpStore %344 %480 
                                       f32_4 %481 = OpLoad %349 
                                       f32_4 %482 = OpLoad %439 
                                       f32_4 %483 = OpFMul %481 %482 
                                                      OpStore %349 %483 
                                       f32_4 %484 = OpLoad %314 
                                       f32_4 %485 = OpVectorShuffle %484 %484 0 1 0 1 
                              Uniform f32_4* %486 = OpAccessChain %19 %317 
                                       f32_4 %487 = OpLoad %486 
                                       f32_4 %488 = OpVectorShuffle %487 %487 0 1 0 1 
                                       f32_4 %489 = OpFMul %485 %488 
                                       f32_4 %490 = OpLoad %344 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 2 1 2 
                                       f32_4 %492 = OpFAdd %489 %491 
                                                      OpStore %372 %492 
                                       f32_4 %495 = OpLoad %372 
                                       f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                Private f32* %497 = OpAccessChain %175 %22 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpCompositeExtract %496 0 
                                         f32 %500 = OpCompositeExtract %496 1 
                                       f32_3 %501 = OpCompositeConstruct %499 %500 %498 
                                                      OpStore %494 %501 
                  read_only Texture2DSampled %507 = OpLoad %506 
                                       f32_3 %508 = OpLoad %494 
                                         f32 %509 = OpCompositeExtract %508 2 
                                         f32 %510 = OpImageSampleDrefExplicitLod %507 %508 %509 Lod %6 
                                                      OpStore %502 %510 
                                       f32_4 %512 = OpLoad %372 
                                       f32_2 %513 = OpVectorShuffle %512 %512 2 3 
                                Private f32* %514 = OpAccessChain %175 %22 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpCompositeExtract %513 0 
                                         f32 %517 = OpCompositeExtract %513 1 
                                       f32_3 %518 = OpCompositeConstruct %516 %517 %515 
                                                      OpStore %511 %518 
                  read_only Texture2DSampled %520 = OpLoad %506 
                                       f32_3 %521 = OpLoad %511 
                                         f32 %522 = OpCompositeExtract %521 2 
                                         f32 %523 = OpImageSampleDrefExplicitLod %520 %521 %522 Lod %6 
                                                      OpStore %519 %523 
                                         f32 %524 = OpLoad %519 
                                Private f32* %525 = OpAccessChain %349 %65 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFMul %524 %526 
                                                      OpStore %237 %527 
                                Private f32* %528 = OpAccessChain %349 %32 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpLoad %502 
                                         f32 %531 = OpFMul %529 %530 
                                         f32 %532 = OpLoad %237 
                                         f32 %533 = OpFAdd %531 %532 
                                                      OpStore %222 %533 
                                       f32_4 %534 = OpLoad %314 
                                       f32_4 %535 = OpVectorShuffle %534 %534 0 1 0 1 
                              Uniform f32_4* %536 = OpAccessChain %19 %317 
                                       f32_4 %537 = OpLoad %536 
                                       f32_4 %538 = OpVectorShuffle %537 %537 0 1 0 1 
                                       f32_4 %539 = OpFMul %535 %538 
                                       f32_4 %540 = OpLoad %344 
                                       f32_4 %541 = OpVectorShuffle %540 %540 0 3 1 3 
                                       f32_4 %542 = OpFAdd %539 %541 
                                                      OpStore %314 %542 
                                       f32_4 %544 = OpLoad %314 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 1 
                                Private f32* %546 = OpAccessChain %175 %22 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpCompositeExtract %545 0 
                                         f32 %549 = OpCompositeExtract %545 1 
                                       f32_3 %550 = OpCompositeConstruct %548 %549 %547 
                                                      OpStore %543 %550 
                  read_only Texture2DSampled %551 = OpLoad %506 
                                       f32_3 %552 = OpLoad %543 
                                         f32 %553 = OpCompositeExtract %552 2 
                                         f32 %554 = OpImageSampleDrefExplicitLod %551 %552 %553 Lod %6 
                                                      OpStore %519 %554 
                                Private f32* %555 = OpAccessChain %349 %22 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpLoad %519 
                                         f32 %558 = OpFMul %556 %557 
                                         f32 %559 = OpLoad %222 
                                         f32 %560 = OpFAdd %558 %559 
                                                      OpStore %222 %560 
                                       f32_4 %562 = OpLoad %314 
                                       f32_2 %563 = OpVectorShuffle %562 %562 2 3 
                                Private f32* %564 = OpAccessChain %175 %22 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpCompositeExtract %563 0 
                                         f32 %567 = OpCompositeExtract %563 1 
                                       f32_3 %568 = OpCompositeConstruct %566 %567 %565 
                                                      OpStore %561 %568 
                  read_only Texture2DSampled %569 = OpLoad %506 
                                       f32_3 %570 = OpLoad %561 
                                         f32 %571 = OpCompositeExtract %570 2 
                                         f32 %572 = OpImageSampleDrefExplicitLod %569 %570 %571 Lod %6 
                                                      OpStore %519 %572 
                                Private f32* %573 = OpAccessChain %349 %145 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpLoad %519 
                                         f32 %576 = OpFMul %574 %575 
                                         f32 %577 = OpLoad %222 
                                         f32 %578 = OpFAdd %576 %577 
                                                      OpStore %222 %578 
                                Uniform f32* %580 = OpAccessChain %19 %263 %32 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFNegate %581 
                                         f32 %583 = OpFAdd %582 %69 
                                                      OpStore %579 %583 
                                         f32 %584 = OpLoad %222 
                                         f32 %585 = OpLoad %579 
                                         f32 %586 = OpFMul %584 %585 
                                Uniform f32* %587 = OpAccessChain %19 %263 %32 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFAdd %586 %588 
                                                      OpStore %222 %589 
                                         f32 %591 = OpLoad %222 
                                                      OpStore %590 %591 
                                                      OpBranch %282 
                                             %592 = OpLabel 
                                                      OpStore %590 %69 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                Private f32* %594 = OpAccessChain %9 %32 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpFAdd %595 %596 
                                Private f32* %598 = OpAccessChain %593 %32 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %593 %32 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %235 %69 
                                Private f32* %602 = OpAccessChain %593 %32 
                                                      OpStore %602 %601 
                                         f32 %603 = OpLoad %164 
                                Private f32* %604 = OpAccessChain %593 %32 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFMul %603 %605 
                                Private f32* %607 = OpAccessChain %9 %32 
                                                      OpStore %607 %606 
                                       f32_4 %608 = OpLoad %9 
                                       f32_3 %609 = OpVectorShuffle %608 %608 0 0 0 
                              Uniform f32_4* %611 = OpAccessChain %19 %610 
                                       f32_4 %612 = OpLoad %611 
                                       f32_3 %613 = OpVectorShuffle %612 %612 0 1 2 
                                       f32_3 %614 = OpFMul %609 %613 
                                       f32_4 %615 = OpLoad %175 
                                       f32_4 %616 = OpVectorShuffle %615 %614 4 5 6 3 
                                                      OpStore %175 %616 
                  read_only Texture2DSampled %619 = OpLoad %618 
                                       f32_2 %620 = OpLoad %43 
                                       f32_4 %621 = OpImageSampleImplicitLod %619 %620 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                                      OpStore %617 %622 
                  read_only Texture2DSampled %625 = OpLoad %624 
                                       f32_2 %626 = OpLoad %43 
                                       f32_4 %627 = OpImageSampleImplicitLod %625 %626 
                                                      OpStore %623 %627 
                  read_only Texture2DSampled %630 = OpLoad %629 
                                       f32_2 %631 = OpLoad %43 
                                       f32_4 %632 = OpImageSampleImplicitLod %630 %631 
                                       f32_3 %633 = OpVectorShuffle %632 %632 0 1 2 
                                                      OpStore %628 %633 
                                       f32_3 %635 = OpLoad %628 
                                       f32_3 %638 = OpFMul %635 %637 
                                       f32_3 %641 = OpFAdd %638 %640 
                                                      OpStore %634 %641 
                                       f32_3 %643 = OpLoad %634 
                                       f32_3 %644 = OpLoad %634 
                                         f32 %645 = OpDot %643 %644 
                                                      OpStore %642 %645 
                                         f32 %646 = OpLoad %642 
                                         f32 %647 = OpExtInst %1 32 %646 
                                                      OpStore %642 %647 
                                         f32 %648 = OpLoad %642 
                                       f32_3 %649 = OpCompositeConstruct %648 %648 %648 
                                       f32_3 %650 = OpLoad %634 
                                       f32_3 %651 = OpFMul %649 %650 
                                                      OpStore %634 %651 
                                       f32_4 %652 = OpLoad %72 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 1 3 
                              Uniform f32_3* %655 = OpAccessChain %19 %90 
                                       f32_3 %656 = OpLoad %655 
                                       f32_3 %657 = OpFNegate %656 
                                       f32_3 %658 = OpFAdd %653 %657 
                                       f32_4 %659 = OpLoad %349 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %349 %660 
                                       f32_4 %661 = OpLoad %349 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                       f32_4 %663 = OpLoad %349 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 1 2 
                                         f32 %665 = OpDot %662 %664 
                                Private f32* %666 = OpAccessChain %9 %32 
                                                      OpStore %666 %665 
                                Private f32* %667 = OpAccessChain %9 %32 
                                         f32 %668 = OpLoad %667 
                                         f32 %669 = OpExtInst %1 32 %668 
                                Private f32* %670 = OpAccessChain %9 %32 
                                                      OpStore %670 %669 
                                       f32_4 %671 = OpLoad %9 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 0 0 
                                       f32_4 %673 = OpLoad %349 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 2 
                                       f32_3 %675 = OpFMul %672 %674 
                                       f32_4 %676 = OpLoad %349 
                                       f32_4 %677 = OpVectorShuffle %676 %675 4 5 6 3 
                                                      OpStore %349 %677 
                                Private f32* %678 = OpAccessChain %623 %145 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFNegate %679 
                                         f32 %681 = OpFAdd %680 %69 
                                                      OpStore %642 %681 
                                       f32_3 %682 = OpLoad %155 
                                         f32 %683 = OpLoad %168 
                                       f32_3 %684 = OpCompositeConstruct %683 %683 %683 
                                       f32_3 %685 = OpFMul %682 %684 
                                       f32_4 %686 = OpLoad %349 
                                       f32_3 %687 = OpVectorShuffle %686 %686 0 1 2 
                                       f32_3 %688 = OpFNegate %687 
                                       f32_3 %689 = OpFAdd %685 %688 
                                                      OpStore %155 %689 
                                       f32_3 %690 = OpLoad %155 
                                       f32_3 %691 = OpLoad %155 
                                         f32 %692 = OpDot %690 %691 
                                                      OpStore %168 %692 
                                         f32 %693 = OpLoad %168 
                                         f32 %695 = OpExtInst %1 40 %693 %694 
                                                      OpStore %168 %695 
                                         f32 %696 = OpLoad %168 
                                         f32 %697 = OpExtInst %1 32 %696 
                                                      OpStore %168 %697 
                                       f32_3 %698 = OpLoad %155 
                                         f32 %699 = OpLoad %168 
                                       f32_3 %700 = OpCompositeConstruct %699 %699 %699 
                                       f32_3 %701 = OpFMul %698 %700 
                                                      OpStore %155 %701 
                                       f32_3 %702 = OpLoad %634 
                                       f32_4 %703 = OpLoad %349 
                                       f32_3 %704 = OpVectorShuffle %703 %703 0 1 2 
                                       f32_3 %705 = OpFNegate %704 
                                         f32 %706 = OpDot %702 %705 
                                                      OpStore %168 %706 
                                       f32_3 %707 = OpLoad %634 
                                       f32_3 %708 = OpLoad %81 
                                         f32 %709 = OpDot %707 %708 
                                                      OpStore %237 %709 
                                         f32 %710 = OpLoad %237 
                                         f32 %711 = OpExtInst %1 43 %710 %235 %69 
                                                      OpStore %237 %711 
                                       f32_3 %712 = OpLoad %634 
                                       f32_3 %713 = OpLoad %155 
                                         f32 %714 = OpDot %712 %713 
                                Private f32* %715 = OpAccessChain %43 %32 
                                                      OpStore %715 %714 
                                Private f32* %716 = OpAccessChain %43 %32 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpExtInst %1 43 %717 %235 %69 
                                Private f32* %719 = OpAccessChain %43 %32 
                                                      OpStore %719 %718 
                                       f32_3 %720 = OpLoad %81 
                                       f32_3 %721 = OpLoad %155 
                                         f32 %722 = OpDot %720 %721 
                                Private f32* %723 = OpAccessChain %155 %32 
                                                      OpStore %723 %722 
                                Private f32* %724 = OpAccessChain %155 %32 
                                         f32 %725 = OpLoad %724 
                                         f32 %726 = OpExtInst %1 43 %725 %235 %69 
                                Private f32* %727 = OpAccessChain %155 %32 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %155 %32 
                                         f32 %729 = OpLoad %728 
                                Private f32* %730 = OpAccessChain %155 %32 
                                         f32 %731 = OpLoad %730 
                                         f32 %732 = OpFAdd %729 %731 
                                Private f32* %733 = OpAccessChain %593 %32 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %155 %32 
                                         f32 %735 = OpLoad %734 
                                Private f32* %736 = OpAccessChain %593 %32 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFMul %735 %737 
                                Private f32* %739 = OpAccessChain %593 %32 
                                                      OpStore %739 %738 
                                Private f32* %740 = OpAccessChain %593 %32 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpLoad %642 
                                         f32 %743 = OpFMul %741 %742 
                                         f32 %745 = OpFAdd %743 %744 
                                Private f32* %746 = OpAccessChain %593 %32 
                                                      OpStore %746 %745 
                                         f32 %748 = OpLoad %237 
                                         f32 %749 = OpFNegate %748 
                                         f32 %750 = OpFAdd %749 %69 
                                                      OpStore %747 %750 
                                         f32 %752 = OpLoad %747 
                                         f32 %753 = OpLoad %747 
                                         f32 %754 = OpFMul %752 %753 
                                                      OpStore %751 %754 
                                         f32 %755 = OpLoad %751 
                                         f32 %756 = OpLoad %751 
                                         f32 %757 = OpFMul %755 %756 
                                                      OpStore %751 %757 
                                         f32 %758 = OpLoad %747 
                                         f32 %759 = OpLoad %751 
                                         f32 %760 = OpFMul %758 %759 
                                                      OpStore %747 %760 
                                Private f32* %761 = OpAccessChain %593 %32 
                                         f32 %762 = OpLoad %761 
                                         f32 %763 = OpLoad %747 
                                         f32 %764 = OpFMul %762 %763 
                                         f32 %765 = OpFAdd %764 %69 
                                                      OpStore %747 %765 
                                         f32 %766 = OpLoad %168 
                                         f32 %767 = OpExtInst %1 4 %766 
                                         f32 %768 = OpFNegate %767 
                                         f32 %769 = OpFAdd %768 %69 
                                                      OpStore %751 %769 
                                         f32 %771 = OpLoad %751 
                                         f32 %772 = OpLoad %751 
                                         f32 %773 = OpFMul %771 %772 
                                                      OpStore %770 %773 
                                         f32 %774 = OpLoad %770 
                                         f32 %775 = OpLoad %770 
                                         f32 %776 = OpFMul %774 %775 
                                                      OpStore %770 %776 
                                         f32 %777 = OpLoad %751 
                                         f32 %778 = OpLoad %770 
                                         f32 %779 = OpFMul %777 %778 
                                                      OpStore %751 %779 
                                Private f32* %780 = OpAccessChain %593 %32 
                                         f32 %781 = OpLoad %780 
                                         f32 %782 = OpLoad %751 
                                         f32 %783 = OpFMul %781 %782 
                                         f32 %784 = OpFAdd %783 %69 
                                Private f32* %785 = OpAccessChain %593 %32 
                                                      OpStore %785 %784 
                                Private f32* %786 = OpAccessChain %593 %32 
                                         f32 %787 = OpLoad %786 
                                         f32 %788 = OpLoad %747 
                                         f32 %789 = OpFMul %787 %788 
                                Private f32* %790 = OpAccessChain %593 %32 
                                                      OpStore %790 %789 
                                         f32 %792 = OpLoad %237 
                                Private f32* %793 = OpAccessChain %593 %32 
                                         f32 %794 = OpLoad %793 
                                         f32 %795 = OpFMul %792 %794 
                                                      OpStore %791 %795 
                                         f32 %796 = OpLoad %642 
                                         f32 %797 = OpLoad %642 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %642 %798 
                                         f32 %799 = OpLoad %642 
                                         f32 %801 = OpExtInst %1 40 %799 %800 
                                                      OpStore %642 %801 
                                         f32 %803 = OpLoad %642 
                                         f32 %804 = OpFNegate %803 
                                         f32 %805 = OpFAdd %804 %69 
                                                      OpStore %802 %805 
                                         f32 %807 = OpLoad %168 
                                         f32 %808 = OpExtInst %1 4 %807 
                                         f32 %809 = OpLoad %802 
                                         f32 %810 = OpFMul %808 %809 
                                         f32 %811 = OpLoad %642 
                                         f32 %812 = OpFAdd %810 %811 
                                                      OpStore %806 %812 
                                         f32 %813 = OpLoad %237 
                                         f32 %814 = OpLoad %802 
                                         f32 %815 = OpFMul %813 %814 
                                         f32 %816 = OpLoad %642 
                                         f32 %817 = OpFAdd %815 %816 
                                                      OpStore %51 %817 
                                         f32 %818 = OpLoad %51 
                                         f32 %819 = OpLoad %168 
                                         f32 %820 = OpExtInst %1 4 %819 
                                         f32 %821 = OpFMul %818 %820 
                                                      OpStore %51 %821 
                                         f32 %822 = OpLoad %237 
                                         f32 %823 = OpLoad %806 
                                         f32 %824 = OpFMul %822 %823 
                                         f32 %825 = OpLoad %51 
                                         f32 %826 = OpFAdd %824 %825 
                                                      OpStore %51 %826 
                                         f32 %827 = OpLoad %51 
                                         f32 %829 = OpFAdd %827 %828 
                                                      OpStore %51 %829 
                                         f32 %830 = OpLoad %51 
                                         f32 %831 = OpFDiv %322 %830 
                                                      OpStore %51 %831 
                                         f32 %832 = OpLoad %642 
                                         f32 %833 = OpLoad %642 
                                         f32 %834 = OpFMul %832 %833 
                                                      OpStore %642 %834 
                                Private f32* %835 = OpAccessChain %43 %32 
                                         f32 %836 = OpLoad %835 
                                         f32 %837 = OpLoad %642 
                                         f32 %838 = OpFMul %836 %837 
                                Private f32* %839 = OpAccessChain %43 %32 
                                         f32 %840 = OpLoad %839 
                                         f32 %841 = OpFNegate %840 
                                         f32 %842 = OpFAdd %838 %841 
                                                      OpStore %806 %842 
                                         f32 %843 = OpLoad %806 
                                Private f32* %844 = OpAccessChain %43 %32 
                                         f32 %845 = OpLoad %844 
                                         f32 %846 = OpFMul %843 %845 
                                         f32 %847 = OpFAdd %846 %69 
                                Private f32* %848 = OpAccessChain %43 %32 
                                                      OpStore %848 %847 
                                         f32 %849 = OpLoad %642 
                                         f32 %851 = OpFMul %849 %850 
                                                      OpStore %642 %851 
                                Private f32* %852 = OpAccessChain %43 %32 
                                         f32 %853 = OpLoad %852 
                                Private f32* %854 = OpAccessChain %43 %32 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFMul %853 %855 
                                         f32 %858 = OpFAdd %856 %857 
                                Private f32* %859 = OpAccessChain %43 %32 
                                                      OpStore %859 %858 
                                         f32 %860 = OpLoad %642 
                                Private f32* %861 = OpAccessChain %43 %32 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFDiv %860 %862 
                                Private f32* %864 = OpAccessChain %9 %32 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %9 %32 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpLoad %51 
                                         f32 %868 = OpFMul %866 %867 
                                Private f32* %869 = OpAccessChain %9 %32 
                                                      OpStore %869 %868 
                                Private f32* %870 = OpAccessChain %9 %32 
                                         f32 %871 = OpLoad %870 
                                         f32 %873 = OpFMul %871 %872 
                                Private f32* %874 = OpAccessChain %9 %32 
                                                      OpStore %874 %873 
                                Private f32* %875 = OpAccessChain %9 %32 
                                         f32 %876 = OpLoad %875 
                                         f32 %878 = OpExtInst %1 40 %876 %877 
                                Private f32* %879 = OpAccessChain %9 %32 
                                                      OpStore %879 %878 
                                Private f32* %880 = OpAccessChain %9 %32 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpExtInst %1 31 %881 
                                Private f32* %883 = OpAccessChain %9 %32 
                                                      OpStore %883 %882 
                                         f32 %884 = OpLoad %237 
                                Private f32* %885 = OpAccessChain %9 %32 
                                         f32 %886 = OpLoad %885 
                                         f32 %887 = OpFMul %884 %886 
                                Private f32* %888 = OpAccessChain %9 %32 
                                                      OpStore %888 %887 
                                       f32_4 %889 = OpLoad %623 
                                       f32_3 %890 = OpVectorShuffle %889 %889 0 1 2 
                                       f32_4 %891 = OpLoad %623 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                         f32 %893 = OpDot %890 %892 
                                Private f32* %894 = OpAccessChain %593 %32 
                                                      OpStore %894 %893 
                                Private f32* %896 = OpAccessChain %593 %32 
                                         f32 %897 = OpLoad %896 
                                        bool %898 = OpFOrdNotEqual %897 %235 
                                                      OpStore %895 %898 
                                        bool %900 = OpLoad %895 
                                                      OpSelectionMerge %902 None 
                                                      OpBranchConditional %900 %901 %903 
                                             %901 = OpLabel 
                                                      OpStore %899 %69 
                                                      OpBranch %902 
                                             %903 = OpLabel 
                                                      OpStore %899 %235 
                                                      OpBranch %902 
                                             %902 = OpLabel 
                                         f32 %904 = OpLoad %899 
                                                      OpStore %51 %904 
                                         f32 %905 = OpLoad %51 
                                Private f32* %906 = OpAccessChain %9 %32 
                                         f32 %907 = OpLoad %906 
                                         f32 %908 = OpFMul %905 %907 
                                Private f32* %909 = OpAccessChain %9 %32 
                                                      OpStore %909 %908 
                                         f32 %910 = OpLoad %791 
                                       f32_3 %911 = OpCompositeConstruct %910 %910 %910 
                                       f32_4 %912 = OpLoad %175 
                                       f32_3 %913 = OpVectorShuffle %912 %912 0 1 2 
                                       f32_3 %914 = OpFMul %911 %913 
                                                      OpStore %593 %914 
                                       f32_4 %915 = OpLoad %175 
                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
                                       f32_4 %917 = OpLoad %9 
                                       f32_3 %918 = OpVectorShuffle %917 %917 0 0 0 
                                       f32_3 %919 = OpFMul %916 %918 
                                       f32_4 %920 = OpLoad %9 
                                       f32_4 %921 = OpVectorShuffle %920 %919 4 1 5 6 
                                                      OpStore %9 %921 
                                Private f32* %922 = OpAccessChain %155 %32 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFNegate %923 
                                         f32 %925 = OpFAdd %924 %69 
                                                      OpStore %770 %925 
                                         f32 %927 = OpLoad %770 
                                         f32 %928 = OpLoad %770 
                                         f32 %929 = OpFMul %927 %928 
                                Private f32* %930 = OpAccessChain %926 %32 
                                                      OpStore %930 %929 
                                Private f32* %931 = OpAccessChain %926 %32 
                                         f32 %932 = OpLoad %931 
                                Private f32* %933 = OpAccessChain %926 %32 
                                         f32 %934 = OpLoad %933 
                                         f32 %935 = OpFMul %932 %934 
                                Private f32* %936 = OpAccessChain %926 %32 
                                                      OpStore %936 %935 
                                         f32 %937 = OpLoad %770 
                                Private f32* %938 = OpAccessChain %926 %32 
                                         f32 %939 = OpLoad %938 
                                         f32 %940 = OpFMul %937 %939 
                                                      OpStore %770 %940 
                                       f32_4 %941 = OpLoad %623 
                                       f32_3 %942 = OpVectorShuffle %941 %941 0 1 2 
                                       f32_3 %943 = OpFNegate %942 
                                       f32_3 %945 = OpFAdd %943 %944 
                                                      OpStore %926 %945 
                                       f32_3 %946 = OpLoad %926 
                                         f32 %947 = OpLoad %770 
                                       f32_3 %948 = OpCompositeConstruct %947 %947 %947 
                                       f32_3 %949 = OpFMul %946 %948 
                                       f32_4 %950 = OpLoad %623 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 1 2 
                                       f32_3 %952 = OpFAdd %949 %951 
                                                      OpStore %926 %952 
                                       f32_4 %953 = OpLoad %9 
                                       f32_3 %954 = OpVectorShuffle %953 %953 0 2 3 
                                       f32_3 %955 = OpLoad %926 
                                       f32_3 %956 = OpFMul %954 %955 
                                       f32_4 %957 = OpLoad %9 
                                       f32_4 %958 = OpVectorShuffle %957 %956 4 5 6 3 
                                                      OpStore %9 %958 
                                       f32_3 %959 = OpLoad %617 
                                       f32_3 %960 = OpLoad %593 
                                       f32_3 %961 = OpFMul %959 %960 
                                       f32_4 %962 = OpLoad %9 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 1 2 
                                       f32_3 %964 = OpFAdd %961 %963 
                                       f32_4 %965 = OpLoad %9 
                                       f32_4 %966 = OpVectorShuffle %965 %964 4 5 6 3 
                                                      OpStore %9 %966 
                                       f32_4 %969 = OpLoad %9 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 1 2 
                                       f32_4 %971 = OpLoad %968 
                                       f32_4 %972 = OpVectorShuffle %971 %970 4 5 6 3 
                                                      OpStore %968 %972 
                                 Output f32* %974 = OpAccessChain %968 %145 
                                                      OpStore %974 %69 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat16_3;
vec4 u_xlat10_3;
vec4 u_xlat16_4;
float u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat13;
float u_xlat16_13;
bool u_xlatb13;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat16_20;
float u_xlat16_21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-_LightDir.xyz);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.00100000005);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_3.xyz = vec3(u_xlat16_13) * u_xlat16_3.xyz;
    u_xlat13 = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat16_4 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_20 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_20 = max(u_xlat16_20, 0.00200000009);
    u_xlat16_21 = u_xlat16_20 * u_xlat16_20;
    u_xlat5 = u_xlat13 * u_xlat16_21 + (-u_xlat13);
    u_xlat13 = u_xlat5 * u_xlat13 + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-007;
    u_xlat16_21 = u_xlat16_21 * 0.318309873;
    u_xlat13 = u_xlat16_21 / u_xlat13;
    u_xlat6.x = dot(u_xlat16_3.xyz, (-u_xlat6.xyz));
    u_xlat12 = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat16_18 = (-u_xlat16_20) + 1.0;
    u_xlat3.x = abs(u_xlat6.x) * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat12 * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat18 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat3.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-006;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlat13 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_3.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat0.x = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat16_4.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat19 = u_xlat0.x * u_xlat0.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat2.xyz = u_xlat16_4.yzw * u_xlat0.xxx + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat0.x = u_xlat6.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat6.x = (-u_xlat12) + 1.0;
    u_xlat19 = u_xlat6.x * u_xlat6.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat6.x = u_xlat6.x * u_xlat19;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 571
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %563 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 RelaxedPrecision 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 DescriptorSet 263 
                                                      OpDecorate %263 Binding 263 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %415 DescriptorSet 415 
                                                      OpDecorate %415 Binding 415 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %421 DescriptorSet 421 
                                                      OpDecorate %421 Binding 421 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %563 Location 563 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                               Private f32_4* %69 = OpVariable Private 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                             %119 = OpTypePointer Uniform %10 
                                         i32 %126 = OpConstant 5 
                                         u32 %153 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %175 = OpConstant 3.674022E-40 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %192 = OpConstant 6 
                                Private f32* %204 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                              Private f32_3* %222 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %223 = OpVariable UniformConstant 
                              Private f32_3* %228 = OpVariable Private 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %233 %233 %233 
                                Private f32* %236 = OpVariable Private 
                                Private f32* %252 = OpVariable Private 
                              Private f32_4* %262 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %263 = OpVariable UniformConstant 
                                Private f32* %267 = OpVariable Private 
                                Private f32* %272 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                Private f32* %279 = OpVariable Private 
                                Private f32* %283 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %300 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                Private f32* %319 = OpVariable Private 
                              Private f32_3* %341 = OpVariable Private 
                                         f32 %357 = OpConstant 3.674022E-40 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                              Private f32_3* %389 = OpVariable Private 
                                             %396 = OpTypeBool 
                                             %397 = OpTypePointer Private %396 
                               Private bool* %398 = OpVariable Private 
                                             %402 = OpTypePointer Function %6 
                                Private f32* %414 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %415 = OpVariable UniformConstant 
                              Private f32_3* %420 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %421 = OpVariable UniformConstant 
                                         i32 %437 = OpConstant 7 
                                Private f32* %452 = OpVariable Private 
                              Private f32_3* %466 = OpVariable Private 
                                       f32_3 %470 = OpConstantComposite %66 %66 %66 
                                         f32 %498 = OpConstant 3.674022E-40 
                                Private f32* %524 = OpVariable Private 
                                             %562 = OpTypePointer Output %7 
                               Output f32_4* %563 = OpVariable Output 
                                             %568 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %403 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %70 = OpLoad %48 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %69 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %69 %76 
                                        f32_4 %79 = OpLoad %69 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %16 %81 %18 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %16 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %69 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %69 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %69 %97 
                               Uniform f32_4* %98 = OpAccessChain %16 %81 %57 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %69 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %69 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %69 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 6 
                                                      OpStore %69 %108 
                                       f32_4 %109 = OpLoad %69 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                              Uniform f32_4* %111 = OpAccessChain %16 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %69 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %69 %116 
                                       f32_4 %117 = OpLoad %69 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_3* %120 = OpAccessChain %16 %87 
                                       f32_3 %121 = OpLoad %120 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %118 %122 
                                                      OpStore %78 %123 
                                       f32_4 %124 = OpLoad %69 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %16 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                       f32_4 %132 = OpLoad %69 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 2 6 
                                                      OpStore %69 %133 
                                       f32_4 %134 = OpLoad %69 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                                       f32_4 %136 = OpLoad %69 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 3 
                                         f32 %138 = OpDot %135 %137 
                                Private f32* %139 = OpAccessChain %9 %29 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %29 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 31 %141 
                                Private f32* %143 = OpAccessChain %9 %29 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %19 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFNegate %145 
                                         f32 %147 = OpLoad %48 
                                         f32 %148 = OpFMul %146 %147 
                                Private f32* %149 = OpAccessChain %9 %29 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %29 
                                                      OpStore %152 %151 
                                Uniform f32* %154 = OpAccessChain %16 %126 %153 
                                         f32 %155 = OpLoad %154 
                                Private f32* %156 = OpAccessChain %9 %29 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %69 %19 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %29 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %9 %29 
                                         f32 %164 = OpLoad %163 
                                Uniform f32* %166 = OpAccessChain %16 %165 %19 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %164 %167 
                                Uniform f32* %169 = OpAccessChain %16 %165 %153 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %29 
                                                      OpStore %172 %171 
                                Private f32* %173 = OpAccessChain %9 %29 
                                         f32 %174 = OpLoad %173 
                                         f32 %176 = OpExtInst %1 43 %174 %175 %66 
                                Private f32* %177 = OpAccessChain %9 %29 
                                                      OpStore %177 %176 
                                       f32_3 %179 = OpLoad %78 
                                       f32_3 %180 = OpLoad %78 
                                         f32 %181 = OpDot %179 %180 
                                Private f32* %182 = OpAccessChain %178 %29 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %178 %29 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 32 %184 
                                Private f32* %186 = OpAccessChain %178 %29 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %78 
                                       f32_3 %188 = OpFNegate %187 
                                       f32_3 %189 = OpLoad %178 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 0 0 
                                       f32_3 %191 = OpFMul %188 %190 
                              Uniform f32_4* %193 = OpAccessChain %16 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFNegate %195 
                                       f32_3 %197 = OpFAdd %191 %196 
                                       f32_4 %198 = OpLoad %69 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %69 %199 
                                       f32_3 %200 = OpLoad %178 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpLoad %78 
                                       f32_3 %203 = OpFMul %201 %202 
                                                      OpStore %178 %203 
                                       f32_4 %205 = OpLoad %69 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %69 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %212 = OpExtInst %1 40 %210 %211 
                                                      OpStore %204 %212 
                                         f32 %213 = OpLoad %204 
                                         f32 %214 = OpExtInst %1 32 %213 
                                                      OpStore %204 %214 
                                         f32 %215 = OpLoad %204 
                                       f32_3 %216 = OpCompositeConstruct %215 %215 %215 
                                       f32_4 %217 = OpLoad %69 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %69 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %69 %221 
                  read_only Texture2DSampled %224 = OpLoad %223 
                                       f32_2 %225 = OpLoad %40 
                                       f32_4 %226 = OpImageSampleImplicitLod %224 %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                                      OpStore %222 %227 
                                       f32_3 %229 = OpLoad %222 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %235 = OpFAdd %232 %234 
                                                      OpStore %228 %235 
                                       f32_3 %237 = OpLoad %228 
                                       f32_3 %238 = OpLoad %228 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %236 %239 
                                         f32 %240 = OpLoad %236 
                                         f32 %241 = OpExtInst %1 32 %240 
                                                      OpStore %236 %241 
                                         f32 %242 = OpLoad %236 
                                       f32_3 %243 = OpCompositeConstruct %242 %242 %242 
                                       f32_3 %244 = OpLoad %228 
                                       f32_3 %245 = OpFMul %243 %244 
                                                      OpStore %228 %245 
                                       f32_3 %246 = OpLoad %228 
                                       f32_4 %247 = OpLoad %69 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %204 %249 
                                         f32 %250 = OpLoad %204 
                                         f32 %251 = OpExtInst %1 43 %250 %175 %66 
                                                      OpStore %204 %251 
                              Uniform f32_4* %253 = OpAccessChain %16 %192 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                         f32 %259 = OpDot %256 %258 
                                                      OpStore %252 %259 
                                         f32 %260 = OpLoad %252 
                                         f32 %261 = OpExtInst %1 43 %260 %175 %66 
                                                      OpStore %252 %261 
                  read_only Texture2DSampled %264 = OpLoad %263 
                                       f32_2 %265 = OpLoad %40 
                                       f32_4 %266 = OpImageSampleImplicitLod %264 %265 
                                                      OpStore %262 %266 
                                Private f32* %268 = OpAccessChain %262 %153 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                         f32 %271 = OpFAdd %270 %66 
                                                      OpStore %267 %271 
                                         f32 %273 = OpLoad %267 
                                         f32 %274 = OpLoad %267 
                                         f32 %275 = OpFMul %273 %274 
                                                      OpStore %272 %275 
                                         f32 %276 = OpLoad %272 
                                         f32 %278 = OpExtInst %1 40 %276 %277 
                                                      OpStore %272 %278 
                                         f32 %280 = OpLoad %272 
                                         f32 %281 = OpLoad %272 
                                         f32 %282 = OpFMul %280 %281 
                                                      OpStore %279 %282 
                                         f32 %284 = OpLoad %204 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFMul %284 %285 
                                         f32 %287 = OpLoad %204 
                                         f32 %288 = OpFNegate %287 
                                         f32 %289 = OpFAdd %286 %288 
                                                      OpStore %283 %289 
                                         f32 %290 = OpLoad %283 
                                         f32 %291 = OpLoad %204 
                                         f32 %292 = OpFMul %290 %291 
                                         f32 %293 = OpFAdd %292 %66 
                                                      OpStore %204 %293 
                                         f32 %294 = OpLoad %204 
                                         f32 %295 = OpLoad %204 
                                         f32 %296 = OpFMul %294 %295 
                                         f32 %298 = OpFAdd %296 %297 
                                                      OpStore %204 %298 
                                         f32 %299 = OpLoad %279 
                                         f32 %301 = OpFMul %299 %300 
                                                      OpStore %279 %301 
                                         f32 %302 = OpLoad %279 
                                         f32 %303 = OpLoad %204 
                                         f32 %304 = OpFDiv %302 %303 
                                                      OpStore %204 %304 
                                       f32_3 %305 = OpLoad %228 
                                       f32_3 %306 = OpLoad %178 
                                       f32_3 %307 = OpFNegate %306 
                                         f32 %308 = OpDot %305 %307 
                                Private f32* %309 = OpAccessChain %178 %29 
                                                      OpStore %309 %308 
                                       f32_3 %311 = OpLoad %228 
                              Uniform f32_4* %312 = OpAccessChain %16 %192 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFNegate %314 
                                         f32 %316 = OpDot %311 %315 
                                                      OpStore %310 %316 
                                         f32 %317 = OpLoad %310 
                                         f32 %318 = OpExtInst %1 43 %317 %175 %66 
                                                      OpStore %310 %318 
                                         f32 %320 = OpLoad %272 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %66 
                                                      OpStore %319 %322 
                                Private f32* %323 = OpAccessChain %178 %29 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpExtInst %1 4 %324 
                                         f32 %326 = OpLoad %319 
                                         f32 %327 = OpFMul %325 %326 
                                         f32 %328 = OpLoad %272 
                                         f32 %329 = OpFAdd %327 %328 
                                Private f32* %330 = OpAccessChain %78 %29 
                                                      OpStore %330 %329 
                                         f32 %331 = OpLoad %310 
                                         f32 %332 = OpLoad %319 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %334 = OpLoad %272 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %48 %335 
                                         f32 %336 = OpLoad %48 
                                Private f32* %337 = OpAccessChain %178 %29 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpExtInst %1 4 %338 
                                         f32 %340 = OpFMul %336 %339 
                                                      OpStore %48 %340 
                                Private f32* %342 = OpAccessChain %178 %29 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFNegate %344 
                                         f32 %346 = OpFAdd %345 %66 
                                Private f32* %347 = OpAccessChain %341 %29 
                                                      OpStore %347 %346 
                                         f32 %348 = OpLoad %310 
                                Private f32* %349 = OpAccessChain %78 %29 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                         f32 %352 = OpLoad %48 
                                         f32 %353 = OpFAdd %351 %352 
                                Private f32* %354 = OpAccessChain %178 %29 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %178 %29 
                                         f32 %356 = OpLoad %355 
                                         f32 %358 = OpFAdd %356 %357 
                                Private f32* %359 = OpAccessChain %178 %29 
                                                      OpStore %359 %358 
                                Private f32* %361 = OpAccessChain %178 %29 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFDiv %360 %362 
                                Private f32* %364 = OpAccessChain %178 %29 
                                                      OpStore %364 %363 
                                         f32 %365 = OpLoad %204 
                                Private f32* %366 = OpAccessChain %178 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFMul %365 %367 
                                Private f32* %369 = OpAccessChain %178 %29 
                                                      OpStore %369 %368 
                                Private f32* %370 = OpAccessChain %178 %29 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %178 %29 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %178 %29 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpExtInst %1 40 %376 %377 
                                Private f32* %379 = OpAccessChain %178 %29 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %178 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpExtInst %1 31 %381 
                                Private f32* %383 = OpAccessChain %178 %29 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %310 
                                Private f32* %385 = OpAccessChain %178 %29 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                Private f32* %388 = OpAccessChain %178 %29 
                                                      OpStore %388 %387 
                                       f32_4 %390 = OpLoad %262 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %262 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %394 = OpDot %391 %393 
                                Private f32* %395 = OpAccessChain %389 %29 
                                                      OpStore %395 %394 
                                Private f32* %399 = OpAccessChain %389 %29 
                                         f32 %400 = OpLoad %399 
                                        bool %401 = OpFOrdNotEqual %400 %175 
                                                      OpStore %398 %401 
                                        bool %404 = OpLoad %398 
                                                      OpSelectionMerge %406 None 
                                                      OpBranchConditional %404 %405 %407 
                                             %405 = OpLabel 
                                                      OpStore %403 %66 
                                                      OpBranch %406 
                                             %407 = OpLabel 
                                                      OpStore %403 %175 
                                                      OpBranch %406 
                                             %406 = OpLabel 
                                         f32 %408 = OpLoad %403 
                                                      OpStore %48 %408 
                                         f32 %409 = OpLoad %48 
                                Private f32* %410 = OpAccessChain %178 %29 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %409 %411 
                                Private f32* %413 = OpAccessChain %178 %29 
                                                      OpStore %413 %412 
                  read_only Texture2DSampled %416 = OpLoad %415 
                                       f32_2 %417 = OpLoad %40 
                                       f32_4 %418 = OpImageSampleImplicitLod %416 %417 
                                         f32 %419 = OpCompositeExtract %418 0 
                                                      OpStore %414 %419 
                  read_only Texture2DSampled %422 = OpLoad %421 
                                       f32_2 %423 = OpLoad %40 
                                       f32_4 %424 = OpImageSampleImplicitLod %422 %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                                      OpStore %420 %425 
                                Private f32* %426 = OpAccessChain %9 %29 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpLoad %414 
                                         f32 %429 = OpFAdd %427 %428 
                                Private f32* %430 = OpAccessChain %389 %29 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %389 %29 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpExtInst %1 43 %432 %175 %66 
                                Private f32* %434 = OpAccessChain %389 %29 
                                                      OpStore %434 %433 
                                       f32_3 %435 = OpLoad %389 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 0 0 
                              Uniform f32_4* %438 = OpAccessChain %16 %437 
                                       f32_4 %439 = OpLoad %438 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFMul %436 %440 
                                                      OpStore %78 %441 
                                       f32_3 %442 = OpLoad %178 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 0 0 
                                       f32_3 %444 = OpLoad %78 
                                       f32_3 %445 = OpFMul %443 %444 
                                       f32_4 %446 = OpLoad %9 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 2 6 
                                                      OpStore %9 %447 
                                         f32 %448 = OpLoad %252 
                                         f32 %449 = OpFNegate %448 
                                         f32 %450 = OpFAdd %449 %66 
                                Private f32* %451 = OpAccessChain %389 %29 
                                                      OpStore %451 %450 
                                Private f32* %453 = OpAccessChain %389 %29 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %389 %29 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                                      OpStore %452 %457 
                                         f32 %458 = OpLoad %452 
                                         f32 %459 = OpLoad %452 
                                         f32 %460 = OpFMul %458 %459 
                                                      OpStore %452 %460 
                                Private f32* %461 = OpAccessChain %389 %29 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %452 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %389 %29 
                                                      OpStore %465 %464 
                                       f32_4 %467 = OpLoad %262 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFNegate %468 
                                       f32_3 %471 = OpFAdd %469 %470 
                                                      OpStore %466 %471 
                                       f32_3 %472 = OpLoad %466 
                                       f32_3 %473 = OpLoad %389 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                                       f32_3 %475 = OpFMul %472 %474 
                                       f32_4 %476 = OpLoad %262 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFAdd %475 %477 
                                                      OpStore %389 %478 
                                       f32_4 %479 = OpLoad %9 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 3 
                                       f32_3 %481 = OpLoad %389 
                                       f32_3 %482 = OpFMul %480 %481 
                                       f32_4 %483 = OpLoad %9 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 2 6 
                                                      OpStore %9 %484 
                                         f32 %485 = OpLoad %252 
                                         f32 %486 = OpLoad %252 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %389 %29 
                                                      OpStore %488 %487 
                                         f32 %489 = OpLoad %252 
                                Private f32* %490 = OpAccessChain %389 %29 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFMul %489 %491 
                                Private f32* %493 = OpAccessChain %389 %29 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %389 %29 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpLoad %267 
                                         f32 %497 = OpFMul %495 %496 
                                         f32 %499 = OpFAdd %497 %498 
                                Private f32* %500 = OpAccessChain %389 %29 
                                                      OpStore %500 %499 
                                Private f32* %501 = OpAccessChain %341 %29 
                                         f32 %502 = OpLoad %501 
                                Private f32* %503 = OpAccessChain %341 %29 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %502 %504 
                                                      OpStore %452 %505 
                                         f32 %506 = OpLoad %452 
                                         f32 %507 = OpLoad %452 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %452 %508 
                                Private f32* %509 = OpAccessChain %341 %29 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %452 
                                         f32 %512 = OpFMul %510 %511 
                                Private f32* %513 = OpAccessChain %341 %29 
                                                      OpStore %513 %512 
                                Private f32* %514 = OpAccessChain %389 %29 
                                         f32 %515 = OpLoad %514 
                                Private f32* %516 = OpAccessChain %341 %29 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFMul %515 %517 
                                         f32 %519 = OpFAdd %518 %66 
                                Private f32* %520 = OpAccessChain %341 %29 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %310 
                                         f32 %522 = OpFNegate %521 
                                         f32 %523 = OpFAdd %522 %66 
                                                      OpStore %452 %523 
                                         f32 %525 = OpLoad %452 
                                         f32 %526 = OpLoad %452 
                                         f32 %527 = OpFMul %525 %526 
                                                      OpStore %524 %527 
                                         f32 %528 = OpLoad %524 
                                         f32 %529 = OpLoad %524 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %524 %530 
                                         f32 %531 = OpLoad %452 
                                         f32 %532 = OpLoad %524 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %452 %533 
                                Private f32* %534 = OpAccessChain %389 %29 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpLoad %452 
                                         f32 %537 = OpFMul %535 %536 
                                         f32 %538 = OpFAdd %537 %66 
                                Private f32* %539 = OpAccessChain %389 %29 
                                                      OpStore %539 %538 
                                Private f32* %540 = OpAccessChain %341 %29 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %389 %29 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFMul %541 %543 
                                Private f32* %545 = OpAccessChain %341 %29 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %310 
                                Private f32* %547 = OpAccessChain %341 %29 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpFMul %546 %548 
                                                      OpStore %310 %549 
                                         f32 %550 = OpLoad %310 
                                       f32_3 %551 = OpCompositeConstruct %550 %550 %550 
                                       f32_3 %552 = OpLoad %78 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %341 %553 
                                       f32_3 %554 = OpLoad %420 
                                       f32_3 %555 = OpLoad %341 
                                       f32_3 %556 = OpFMul %554 %555 
                                       f32_4 %557 = OpLoad %9 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 3 
                                       f32_3 %559 = OpFAdd %556 %558 
                                       f32_4 %560 = OpLoad %9 
                                       f32_4 %561 = OpVectorShuffle %560 %559 4 5 6 3 
                                                      OpStore %9 %561 
                                       f32_4 %564 = OpLoad %9 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_4 %566 = OpLoad %563 
                                       f32_4 %567 = OpVectorShuffle %566 %565 4 5 6 3 
                                                      OpStore %563 %567 
                                 Output f32* %569 = OpAccessChain %563 %153 
                                                      OpStore %569 %66 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec2 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat16_4;
vec4 u_xlat10_4;
vec4 u_xlat10_5;
vec4 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat16_21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_3.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_3 = texture(_LightTexture0, u_xlat7.xy, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat22 = u_xlat21 * u_xlat16_8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat8 = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat16_4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat16_2 = (-u_xlat16_1) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat22 * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = max(u_xlat21, 9.99999975e-005);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat15;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat15 = u_xlat21 * u_xlat21;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 600
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %593 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %166 DescriptorSet 166 
                                                      OpDecorate %166 Binding 166 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %289 DescriptorSet 289 
                                                      OpDecorate %289 Binding 289 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %327 DescriptorSet 327 
                                                      OpDecorate %327 Binding 327 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %332 DescriptorSet 332 
                                                      OpDecorate %332 Binding 332 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %534 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %593 Location 593 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypeVector %6 2 
                                              %38 = OpTypePointer Private %37 
                               Private f32_2* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %10 
                                 Input f32_4* %41 = OpVariable Input 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypeSampledImage %48 
                                              %50 = OpTypePointer UniformConstant %49 
  UniformConstant read_only Texture2DSampled* %51 = OpVariable UniformConstant 
                                          i32 %56 = OpConstant 2 
                                          u32 %61 = OpConstant 1 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Private %10 
                               Private f32_4* %69 = OpVariable Private 
                               Private f32_3* %76 = OpVariable Private 
                                          i32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %10 
                                          i32 %85 = OpConstant 0 
                                         i32 %117 = OpConstant 5 
                                         u32 %140 = OpConstant 3 
                                         i32 %152 = OpConstant 4 
                                         f32 %162 = OpConstant 3.674022E-40 
                                Private f32* %165 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %166 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                                             %214 = OpTypePointer Uniform %7 
 UniformConstant read_only Texture2DSampled* %229 = OpVariable UniformConstant 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         i32 %245 = OpConstant 7 
                                         i32 %263 = OpConstant 6 
                                         f32 %280 = OpConstant 3.674022E-40 
                              Private f32_3* %288 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %289 = OpVariable UniformConstant 
                              Private f32_3* %294 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                       f32_3 %297 = OpConstantComposite %296 %296 %296 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %300 = OpConstantComposite %299 %299 %299 
                                Private f32* %302 = OpVariable Private 
                                Private f32* %317 = OpVariable Private 
                              Private f32_4* %326 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %327 = OpVariable UniformConstant 
                              Private f32_4* %331 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %332 = OpVariable UniformConstant 
                                Private f32* %339 = OpVariable Private 
                                Private f32* %344 = OpVariable Private 
                                         f32 %349 = OpConstant 3.674022E-40 
                                Private f32* %351 = OpVariable Private 
                                Private f32* %355 = OpVariable Private 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                Private f32* %383 = OpVariable Private 
                                Private f32* %392 = OpVariable Private 
                              Private f32_3* %396 = OpVariable Private 
                                Private f32* %405 = OpVariable Private 
                                         f32 %431 = OpConstant 3.674022E-40 
                                         f32 %434 = OpConstant 3.674022E-40 
                                         f32 %444 = OpConstant 3.674022E-40 
                                         f32 %447 = OpConstant 3.674022E-40 
                              Private f32_3* %454 = OpVariable Private 
                                             %461 = OpTypeBool 
                                             %462 = OpTypePointer Private %461 
                               Private bool* %463 = OpVariable Private 
                                             %467 = OpTypePointer Function %6 
                                Private f32* %487 = OpVariable Private 
                              Private f32_3* %501 = OpVariable Private 
                                       f32_3 %505 = OpConstantComposite %65 %65 %65 
                                         f32 %530 = OpConstant 3.674022E-40 
                                Private f32* %556 = OpVariable Private 
                                             %592 = OpTypePointer Output %10 
                               Output f32_4* %593 = OpVariable Output 
                                             %597 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %468 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %41 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                                      OpStore %39 %46 
                   read_only Texture2DSampled %52 = OpLoad %51 
                                        f32_2 %53 = OpLoad %39 
                                        f32_4 %54 = OpImageSampleImplicitLod %52 %53 
                                          f32 %55 = OpCompositeExtract %54 0 
                                                      OpStore %47 %55 
                                 Uniform f32* %57 = OpAccessChain %17 %56 %30 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpFMul %58 %59 
                                 Uniform f32* %62 = OpAccessChain %17 %56 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %60 %63 
                                                      OpStore %47 %64 
                                          f32 %66 = OpLoad %47 
                                          f32 %67 = OpFDiv %65 %66 
                                                      OpStore %47 %67 
                                          f32 %70 = OpLoad %47 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_3 %72 = OpLoad %9 
                                        f32_3 %73 = OpFMul %71 %72 
                                        f32_4 %74 = OpLoad %69 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %69 %75 
                                        f32_4 %77 = OpLoad %69 
                                        f32_3 %78 = OpVectorShuffle %77 %77 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %17 %79 %19 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %78 %83 
                                                      OpStore %76 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %79 %85 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %69 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_3 %92 = OpLoad %76 
                                        f32_3 %93 = OpFAdd %91 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 2 6 
                                                      OpStore %69 %95 
                               Uniform f32_4* %96 = OpAccessChain %17 %79 %56 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %69 
                                       f32_3 %100 = OpVectorShuffle %99 %99 2 2 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %69 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 3 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %69 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 2 6 
                                                      OpStore %69 %106 
                                       f32_4 %107 = OpLoad %69 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                              Uniform f32_4* %109 = OpAccessChain %17 %79 %79 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFAdd %108 %111 
                                       f32_4 %113 = OpLoad %69 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 6 
                                                      OpStore %69 %114 
                                       f32_4 %115 = OpLoad %69 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %17 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %116 %121 
                                                      OpStore %76 %122 
                                       f32_3 %123 = OpLoad %76 
                                       f32_3 %124 = OpLoad %76 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %9 %30 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %9 %30 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 31 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %20 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpLoad %47 
                                         f32 %135 = OpFMul %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFAdd %135 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %17 %117 %140 
                                         f32 %142 = OpLoad %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                Private f32* %146 = OpAccessChain %69 %20 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %153 = OpAccessChain %17 %152 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %151 %154 
                                Uniform f32* %156 = OpAccessChain %17 %152 %140 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %30 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpExtInst %1 43 %161 %162 %65 
                                Private f32* %164 = OpAccessChain %9 %30 
                                                      OpStore %164 %163 
                  read_only Texture2DSampled %167 = OpLoad %166 
                                       f32_2 %168 = OpLoad %39 
                                       f32_4 %169 = OpImageSampleImplicitLod %167 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %165 %170 
                                Private f32* %172 = OpAccessChain %9 %30 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpLoad %165 
                                         f32 %175 = OpFAdd %173 %174 
                                Private f32* %176 = OpAccessChain %171 %30 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %171 %30 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 43 %178 %162 %65 
                                Private f32* %180 = OpAccessChain %171 %30 
                                                      OpStore %180 %179 
                                       f32_4 %181 = OpLoad %69 
                                       f32_2 %182 = OpVectorShuffle %181 %181 1 1 
                              Uniform f32_4* %184 = OpAccessChain %17 %183 %19 
                                       f32_4 %185 = OpLoad %184 
                                       f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                       f32_2 %187 = OpFMul %182 %186 
                                       f32_3 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %187 3 4 2 
                                                      OpStore %9 %189 
                              Uniform f32_4* %190 = OpAccessChain %17 %183 %85 
                                       f32_4 %191 = OpLoad %190 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpLoad %69 
                                       f32_2 %194 = OpVectorShuffle %193 %193 0 0 
                                       f32_2 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %9 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFAdd %195 %197 
                                       f32_3 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %198 3 4 2 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %183 %56 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_4 %204 = OpLoad %69 
                                       f32_2 %205 = OpVectorShuffle %204 %204 3 3 
                                       f32_2 %206 = OpFMul %203 %205 
                                       f32_3 %207 = OpLoad %9 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpFAdd %206 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %209 3 4 2 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %69 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 3 
                              Uniform f32_3* %215 = OpAccessChain %17 %85 
                                       f32_3 %216 = OpLoad %215 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %213 %217 
                                       f32_4 %219 = OpLoad %69 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %69 %220 
                                       f32_3 %221 = OpLoad %9 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 1 
                              Uniform f32_4* %223 = OpAccessChain %17 %183 %79 
                                       f32_4 %224 = OpLoad %223 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFAdd %222 %225 
                                       f32_3 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %226 3 4 2 
                                                      OpStore %9 %228 
                  read_only Texture2DSampled %230 = OpLoad %229 
                                       f32_3 %231 = OpLoad %9 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_4 %234 = OpImageSampleImplicitLod %230 %232 Bias %10 
                                         f32 %235 = OpCompositeExtract %234 3 
                                Private f32* %236 = OpAccessChain %9 %30 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %9 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %171 %30 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %238 %240 
                                Private f32* %242 = OpAccessChain %9 %30 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                              Uniform f32_4* %246 = OpAccessChain %17 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFMul %244 %248 
                                                      OpStore %9 %249 
                                       f32_4 %250 = OpLoad %69 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %69 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %251 %253 
                                                      OpStore %47 %254 
                                         f32 %255 = OpLoad %47 
                                         f32 %256 = OpExtInst %1 32 %255 
                                                      OpStore %47 %256 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFNegate %258 
                                         f32 %260 = OpLoad %47 
                                       f32_3 %261 = OpCompositeConstruct %260 %260 %260 
                                       f32_3 %262 = OpFMul %259 %261 
                              Uniform f32_4* %264 = OpAccessChain %17 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFNegate %266 
                                       f32_3 %268 = OpFAdd %262 %267 
                                                      OpStore %76 %268 
                                         f32 %269 = OpLoad %47 
                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
                                       f32_4 %271 = OpLoad %69 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_4 %274 = OpLoad %69 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %69 %275 
                                       f32_3 %276 = OpLoad %76 
                                       f32_3 %277 = OpLoad %76 
                                         f32 %278 = OpDot %276 %277 
                                                      OpStore %47 %278 
                                         f32 %279 = OpLoad %47 
                                         f32 %281 = OpExtInst %1 40 %279 %280 
                                                      OpStore %47 %281 
                                         f32 %282 = OpLoad %47 
                                         f32 %283 = OpExtInst %1 32 %282 
                                                      OpStore %47 %283 
                                         f32 %284 = OpLoad %47 
                                       f32_3 %285 = OpCompositeConstruct %284 %284 %284 
                                       f32_3 %286 = OpLoad %76 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %76 %287 
                  read_only Texture2DSampled %290 = OpLoad %289 
                                       f32_2 %291 = OpLoad %39 
                                       f32_4 %292 = OpImageSampleImplicitLod %290 %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                                      OpStore %288 %293 
                                       f32_3 %295 = OpLoad %288 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %301 = OpFAdd %298 %300 
                                                      OpStore %294 %301 
                                       f32_3 %303 = OpLoad %294 
                                       f32_3 %304 = OpLoad %294 
                                         f32 %305 = OpDot %303 %304 
                                                      OpStore %302 %305 
                                         f32 %306 = OpLoad %302 
                                         f32 %307 = OpExtInst %1 32 %306 
                                                      OpStore %302 %307 
                                         f32 %308 = OpLoad %302 
                                       f32_3 %309 = OpCompositeConstruct %308 %308 %308 
                                       f32_3 %310 = OpLoad %294 
                                       f32_3 %311 = OpFMul %309 %310 
                                                      OpStore %294 %311 
                                       f32_3 %312 = OpLoad %294 
                                       f32_3 %313 = OpLoad %76 
                                         f32 %314 = OpDot %312 %313 
                                                      OpStore %47 %314 
                                         f32 %315 = OpLoad %47 
                                         f32 %316 = OpExtInst %1 43 %315 %162 %65 
                                                      OpStore %47 %316 
                              Uniform f32_4* %318 = OpAccessChain %17 %263 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFNegate %320 
                                       f32_3 %322 = OpLoad %76 
                                         f32 %323 = OpDot %321 %322 
                                                      OpStore %317 %323 
                                         f32 %324 = OpLoad %317 
                                         f32 %325 = OpExtInst %1 43 %324 %162 %65 
                                                      OpStore %317 %325 
                  read_only Texture2DSampled %328 = OpLoad %327 
                                       f32_2 %329 = OpLoad %39 
                                       f32_4 %330 = OpImageSampleImplicitLod %328 %329 
                                                      OpStore %326 %330 
                  read_only Texture2DSampled %333 = OpLoad %332 
                                       f32_2 %334 = OpLoad %39 
                                       f32_4 %335 = OpImageSampleImplicitLod %333 %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %331 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 2 6 
                                                      OpStore %331 %338 
                                Private f32* %340 = OpAccessChain %326 %140 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %342 %65 
                                                      OpStore %339 %343 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpLoad %339 
                                         f32 %347 = OpFMul %345 %346 
                                                      OpStore %344 %347 
                                         f32 %348 = OpLoad %344 
                                         f32 %350 = OpExtInst %1 40 %348 %349 
                                                      OpStore %344 %350 
                                         f32 %352 = OpLoad %344 
                                         f32 %353 = OpLoad %344 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %351 %354 
                                         f32 %356 = OpLoad %47 
                                         f32 %357 = OpLoad %351 
                                         f32 %358 = OpFMul %356 %357 
                                         f32 %359 = OpLoad %47 
                                         f32 %360 = OpFNegate %359 
                                         f32 %361 = OpFAdd %358 %360 
                                                      OpStore %355 %361 
                                         f32 %362 = OpLoad %355 
                                         f32 %363 = OpLoad %47 
                                         f32 %364 = OpFMul %362 %363 
                                         f32 %365 = OpFAdd %364 %65 
                                                      OpStore %47 %365 
                                         f32 %366 = OpLoad %47 
                                         f32 %367 = OpLoad %47 
                                         f32 %368 = OpFMul %366 %367 
                                         f32 %370 = OpFAdd %368 %369 
                                                      OpStore %47 %370 
                                         f32 %371 = OpLoad %351 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %351 %373 
                                         f32 %374 = OpLoad %351 
                                         f32 %375 = OpLoad %47 
                                         f32 %376 = OpFDiv %374 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %294 
                                       f32_4 %378 = OpLoad %69 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFNegate %379 
                                         f32 %381 = OpDot %377 %380 
                                Private f32* %382 = OpAccessChain %69 %30 
                                                      OpStore %382 %381 
                                       f32_3 %384 = OpLoad %294 
                              Uniform f32_4* %385 = OpAccessChain %17 %263 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFNegate %387 
                                         f32 %389 = OpDot %384 %388 
                                                      OpStore %383 %389 
                                         f32 %390 = OpLoad %383 
                                         f32 %391 = OpExtInst %1 43 %390 %162 %65 
                                                      OpStore %383 %391 
                                         f32 %393 = OpLoad %344 
                                         f32 %394 = OpFNegate %393 
                                         f32 %395 = OpFAdd %394 %65 
                                                      OpStore %392 %395 
                                Private f32* %397 = OpAccessChain %69 %30 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpExtInst %1 4 %398 
                                         f32 %400 = OpLoad %392 
                                         f32 %401 = OpFMul %399 %400 
                                         f32 %402 = OpLoad %344 
                                         f32 %403 = OpFAdd %401 %402 
                                Private f32* %404 = OpAccessChain %396 %30 
                                                      OpStore %404 %403 
                                         f32 %406 = OpLoad %383 
                                         f32 %407 = OpLoad %392 
                                         f32 %408 = OpFMul %406 %407 
                                         f32 %409 = OpLoad %344 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %405 %410 
                                         f32 %411 = OpLoad %405 
                                Private f32* %412 = OpAccessChain %69 %30 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 4 %413 
                                         f32 %415 = OpFMul %411 %414 
                                                      OpStore %405 %415 
                                Private f32* %416 = OpAccessChain %69 %30 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpExtInst %1 4 %417 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpFAdd %419 %65 
                                Private f32* %421 = OpAccessChain %171 %30 
                                                      OpStore %421 %420 
                                         f32 %422 = OpLoad %383 
                                Private f32* %423 = OpAccessChain %396 %30 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFMul %422 %424 
                                         f32 %426 = OpLoad %405 
                                         f32 %427 = OpFAdd %425 %426 
                                Private f32* %428 = OpAccessChain %69 %30 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %69 %30 
                                         f32 %430 = OpLoad %429 
                                         f32 %432 = OpFAdd %430 %431 
                                Private f32* %433 = OpAccessChain %69 %30 
                                                      OpStore %433 %432 
                                Private f32* %435 = OpAccessChain %69 %30 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFDiv %434 %436 
                                Private f32* %438 = OpAccessChain %69 %30 
                                                      OpStore %438 %437 
                                         f32 %439 = OpLoad %47 
                                Private f32* %440 = OpAccessChain %69 %30 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                                      OpStore %47 %442 
                                         f32 %443 = OpLoad %47 
                                         f32 %445 = OpFMul %443 %444 
                                                      OpStore %47 %445 
                                         f32 %446 = OpLoad %47 
                                         f32 %448 = OpExtInst %1 40 %446 %447 
                                                      OpStore %47 %448 
                                         f32 %449 = OpLoad %47 
                                         f32 %450 = OpExtInst %1 31 %449 
                                                      OpStore %47 %450 
                                         f32 %451 = OpLoad %383 
                                         f32 %452 = OpLoad %47 
                                         f32 %453 = OpFMul %451 %452 
                                                      OpStore %47 %453 
                                       f32_4 %455 = OpLoad %326 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_4 %457 = OpLoad %326 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                         f32 %459 = OpDot %456 %458 
                                Private f32* %460 = OpAccessChain %454 %30 
                                                      OpStore %460 %459 
                                Private f32* %464 = OpAccessChain %454 %30 
                                         f32 %465 = OpLoad %464 
                                        bool %466 = OpFOrdNotEqual %465 %162 
                                                      OpStore %463 %466 
                                        bool %469 = OpLoad %463 
                                                      OpSelectionMerge %471 None 
                                                      OpBranchConditional %469 %470 %472 
                                             %470 = OpLabel 
                                                      OpStore %468 %65 
                                                      OpBranch %471 
                                             %472 = OpLabel 
                                                      OpStore %468 %162 
                                                      OpBranch %471 
                                             %471 = OpLabel 
                                         f32 %473 = OpLoad %468 
                                Private f32* %474 = OpAccessChain %69 %30 
                                                      OpStore %474 %473 
                                         f32 %475 = OpLoad %47 
                                Private f32* %476 = OpAccessChain %69 %30 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpFMul %475 %477 
                                                      OpStore %47 %478 
                                       f32_3 %479 = OpLoad %9 
                                         f32 %480 = OpLoad %47 
                                       f32_3 %481 = OpCompositeConstruct %480 %480 %480 
                                       f32_3 %482 = OpFMul %479 %481 
                                                      OpStore %396 %482 
                                         f32 %483 = OpLoad %317 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %484 %65 
                                Private f32* %486 = OpAccessChain %454 %30 
                                                      OpStore %486 %485 
                                Private f32* %488 = OpAccessChain %454 %30 
                                         f32 %489 = OpLoad %488 
                                Private f32* %490 = OpAccessChain %454 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                                         f32 %493 = OpLoad %487 
                                         f32 %494 = OpLoad %487 
                                         f32 %495 = OpFMul %493 %494 
                                                      OpStore %487 %495 
                                Private f32* %496 = OpAccessChain %454 %30 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpLoad %487 
                                         f32 %499 = OpFMul %497 %498 
                                Private f32* %500 = OpAccessChain %454 %30 
                                                      OpStore %500 %499 
                                       f32_4 %502 = OpLoad %326 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 1 2 
                                       f32_3 %504 = OpFNegate %503 
                                       f32_3 %506 = OpFAdd %504 %505 
                                                      OpStore %501 %506 
                                       f32_3 %507 = OpLoad %501 
                                       f32_3 %508 = OpLoad %454 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 0 0 
                                       f32_3 %510 = OpFMul %507 %509 
                                       f32_4 %511 = OpLoad %326 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
                                       f32_3 %513 = OpFAdd %510 %512 
                                                      OpStore %454 %513 
                                       f32_3 %514 = OpLoad %454 
                                       f32_3 %515 = OpLoad %396 
                                       f32_3 %516 = OpFMul %514 %515 
                                                      OpStore %76 %516 
                                         f32 %517 = OpLoad %317 
                                         f32 %518 = OpLoad %317 
                                         f32 %519 = OpFAdd %517 %518 
                                Private f32* %520 = OpAccessChain %454 %30 
                                                      OpStore %520 %519 
                                         f32 %521 = OpLoad %317 
                                Private f32* %522 = OpAccessChain %454 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Private f32* %525 = OpAccessChain %454 %30 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %454 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpLoad %339 
                                         f32 %529 = OpFMul %527 %528 
                                         f32 %531 = OpFAdd %529 %530 
                                Private f32* %532 = OpAccessChain %454 %30 
                                                      OpStore %532 %531 
                                Private f32* %533 = OpAccessChain %171 %30 
                                         f32 %534 = OpLoad %533 
                                Private f32* %535 = OpAccessChain %171 %30 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFMul %534 %536 
                                                      OpStore %487 %537 
                                         f32 %538 = OpLoad %487 
                                         f32 %539 = OpLoad %487 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %487 %540 
                                Private f32* %541 = OpAccessChain %171 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %487 
                                         f32 %544 = OpFMul %542 %543 
                                Private f32* %545 = OpAccessChain %171 %30 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %454 %30 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %171 %30 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFMul %547 %549 
                                         f32 %551 = OpFAdd %550 %65 
                                Private f32* %552 = OpAccessChain %171 %30 
                                                      OpStore %552 %551 
                                         f32 %553 = OpLoad %383 
                                         f32 %554 = OpFNegate %553 
                                         f32 %555 = OpFAdd %554 %65 
                                                      OpStore %487 %555 
                                         f32 %557 = OpLoad %487 
                                         f32 %558 = OpLoad %487 
                                         f32 %559 = OpFMul %557 %558 
                                                      OpStore %556 %559 
                                         f32 %560 = OpLoad %556 
                                         f32 %561 = OpLoad %556 
                                         f32 %562 = OpFMul %560 %561 
                                                      OpStore %556 %562 
                                         f32 %563 = OpLoad %487 
                                         f32 %564 = OpLoad %556 
                                         f32 %565 = OpFMul %563 %564 
                                                      OpStore %487 %565 
                                Private f32* %566 = OpAccessChain %454 %30 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpLoad %487 
                                         f32 %569 = OpFMul %567 %568 
                                         f32 %570 = OpFAdd %569 %65 
                                Private f32* %571 = OpAccessChain %454 %30 
                                                      OpStore %571 %570 
                                Private f32* %572 = OpAccessChain %171 %30 
                                         f32 %573 = OpLoad %572 
                                Private f32* %574 = OpAccessChain %454 %30 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFMul %573 %575 
                                Private f32* %577 = OpAccessChain %171 %30 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %383 
                                Private f32* %579 = OpAccessChain %171 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %47 %581 
                                         f32 %582 = OpLoad %47 
                                       f32_3 %583 = OpCompositeConstruct %582 %582 %582 
                                       f32_3 %584 = OpLoad %9 
                                       f32_3 %585 = OpFMul %583 %584 
                                                      OpStore %171 %585 
                                       f32_4 %586 = OpLoad %331 
                                       f32_3 %587 = OpVectorShuffle %586 %586 0 1 3 
                                       f32_3 %588 = OpLoad %171 
                                       f32_3 %589 = OpFMul %587 %588 
                                       f32_3 %590 = OpLoad %76 
                                       f32_3 %591 = OpFAdd %589 %590 
                                                      OpStore %9 %591 
                                       f32_3 %594 = OpLoad %9 
                                       f32_4 %595 = OpLoad %593 
                                       f32_4 %596 = OpVectorShuffle %595 %594 4 5 6 3 
                                                      OpStore %593 %596 
                                 Output f32* %598 = OpAccessChain %593 %140 
                                                      OpStore %598 %65 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec4 u_xlat16_5;
vec4 u_xlat10_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
float u_xlat16_8;
vec3 u_xlat16_11;
float u_xlat14;
float u_xlat16_14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
float u_xlat23;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = inversesqrt(u_xlat7);
    u_xlat2.xyz = (-u_xlat4.xyz) * vec3(u_xlat14) + (-u_xlat3.xyz);
    u_xlat5.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = max(u_xlat14, 0.00100000005);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat10_6 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_11.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_14 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
    u_xlat16_14 = inversesqrt(u_xlat16_14);
    u_xlat16_11.xyz = vec3(u_xlat16_14) * u_xlat16_11.xyz;
    u_xlat14 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat21 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat16_11.xyz, (-u_xlat5.xyz));
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat16_11.xyz, (-u_xlat3.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_3 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_1 = max(u_xlat16_1, 0.00200000009);
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat23 = u_xlat14 * u_xlat16_8 + (-u_xlat14);
    u_xlat14 = u_xlat23 * u_xlat14 + 1.0;
    u_xlat14 = u_xlat14 * u_xlat14 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_8 * 0.318309873;
    u_xlat14 = u_xlat16_8 / u_xlat14;
    u_xlat16_8 = (-u_xlat16_1) + 1.0;
    u_xlat23 = abs(u_xlat22) * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat15 * u_xlat16_8 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * abs(u_xlat22);
    u_xlat8 = -abs(u_xlat22) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat23 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-005);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = u_xlat15 * u_xlat14;
    u_xlat1.x = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat1.x = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _LightPos.w;
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat7));
    u_xlat7 = u_xlat1.x * _LightPositionRange.w;
    u_xlat7 = u_xlat7 * _LightProjectionParams.w;
    u_xlatb7 = u_xlat10_4.x<u_xlat7;
    u_xlat7 = (u_xlatb7) ? _LightShadowData.x : 1.0;
    u_xlat0.x = u_xlat0.x + u_xlat7;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_6.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = dot(vec2(u_xlat21), u_xlat16_5.xx);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat22 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat1.x = u_xlat1.x * u_xlat22;
    u_xlat2.xyz = u_xlat16_5.yzw * u_xlat1.xxx + u_xlat10_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat15) + 1.0;
    u_xlat22 = u_xlat8 * u_xlat8;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat8 = u_xlat8 * u_xlat22;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    SV_Target0.xyz = u_xlat10_3.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 603
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %596 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %244 DescriptorSet 244 
                                                      OpDecorate %244 Binding 244 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %294 DescriptorSet 294 
                                                      OpDecorate %294 Binding 294 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %299 DescriptorSet 299 
                                                      OpDecorate %299 Binding 299 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %427 DescriptorSet 427 
                                                      OpDecorate %427 Binding 427 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %596 Location 596 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypeVector %6 2 
                                              %37 = OpTypePointer Private %36 
                               Private f32_2* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                                 Input f32_4* %40 = OpVariable Input 
                                 Private f32* %46 = OpVariable Private 
                                              %47 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %48 = OpTypeSampledImage %47 
                                              %49 = OpTypePointer UniformConstant %48 
  UniformConstant read_only Texture2DSampled* %50 = OpVariable UniformConstant 
                                          i32 %55 = OpConstant 2 
                                          u32 %60 = OpConstant 1 
                                          f32 %64 = OpConstant 3.674022E-40 
                                              %67 = OpTypePointer Private %10 
                               Private f32_4* %68 = OpVariable Private 
                               Private f32_3* %75 = OpVariable Private 
                                          i32 %78 = OpConstant 3 
                                              %79 = OpTypePointer Uniform %10 
                                          i32 %84 = OpConstant 0 
                                             %116 = OpTypePointer Uniform %7 
                              Private f32_3* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 8 
                                         i32 %144 = OpConstant 7 
                                         u32 %171 = OpConstant 3 
                                         i32 %183 = OpConstant 6 
                                         f32 %193 = OpConstant 3.674022E-40 
                                Private f32* %196 = OpVariable Private 
                                Private f32* %200 = OpVariable Private 
                              Private f32_3* %213 = OpVariable Private 
                                             %218 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %219 = OpTypeSampledImage %218 
                                             %220 = OpTypePointer UniformConstant %219 
UniformConstant read_only TextureCubeSampled* %221 = OpVariable UniformConstant 
                                         f32 %232 = OpConstant 3.674022E-40 
                              Private f32_3* %243 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %244 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                                Private f32* %257 = OpVariable Private 
                                Private f32* %273 = OpVariable Private 
                                Private f32* %281 = OpVariable Private 
                              Private f32_4* %293 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %294 = OpVariable UniformConstant 
                              Private f32_3* %298 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %299 = OpVariable UniformConstant 
                                Private f32* %304 = OpVariable Private 
                                Private f32* %309 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                Private f32* %316 = OpVariable Private 
                                         f32 %335 = OpConstant 3.674022E-40 
                                         f32 %338 = OpConstant 3.674022E-40 
                                Private f32* %354 = OpVariable Private 
                              Private f32_3* %365 = OpVariable Private 
                                         f32 %379 = OpConstant 3.674022E-40 
                                         f32 %381 = OpConstant 3.674022E-40 
                                         f32 %388 = OpConstant 3.674022E-40 
                                         f32 %391 = OpConstant 3.674022E-40 
                              Private f32_3* %398 = OpVariable Private 
                                             %405 = OpTypeBool 
                                             %406 = OpTypePointer Private %405 
                               Private bool* %407 = OpVariable Private 
                                             %411 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %427 = OpVariable UniformConstant 
                                         i32 %434 = OpConstant 4 
                                         i32 %439 = OpConstant 5 
                               Private bool* %443 = OpVariable Private 
                                         i32 %473 = OpConstant 9 
                                Private f32* %486 = OpVariable Private 
                              Private f32_3* %500 = OpVariable Private 
                                       f32_3 %504 = OpConstantComposite %64 %64 %64 
                                         f32 %547 = OpConstant 3.674022E-40 
                                Private f32* %560 = OpVariable Private 
                                             %595 = OpTypePointer Output %10 
                               Output f32_4* %596 = OpVariable Output 
                                             %600 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %412 = OpVariable Function 
                               Function f32* %447 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %41 = OpLoad %40 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad %40 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                                      OpStore %38 %45 
                   read_only Texture2DSampled %51 = OpLoad %50 
                                        f32_2 %52 = OpLoad %38 
                                        f32_4 %53 = OpImageSampleImplicitLod %51 %52 
                                          f32 %54 = OpCompositeExtract %53 0 
                                                      OpStore %46 %54 
                                 Uniform f32* %56 = OpAccessChain %16 %55 %29 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpLoad %46 
                                          f32 %59 = OpFMul %57 %58 
                                 Uniform f32* %61 = OpAccessChain %16 %55 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %59 %62 
                                                      OpStore %46 %63 
                                          f32 %65 = OpLoad %46 
                                          f32 %66 = OpFDiv %64 %65 
                                                      OpStore %46 %66 
                                          f32 %69 = OpLoad %46 
                                        f32_3 %70 = OpCompositeConstruct %69 %69 %69 
                                        f32_3 %71 = OpLoad %9 
                                        f32_3 %72 = OpFMul %70 %71 
                                        f32_4 %73 = OpLoad %68 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %68 %74 
                                        f32_4 %76 = OpLoad %68 
                                        f32_3 %77 = OpVectorShuffle %76 %76 1 1 1 
                               Uniform f32_4* %80 = OpAccessChain %16 %78 %18 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %77 %82 
                                                      OpStore %75 %83 
                               Uniform f32_4* %85 = OpAccessChain %16 %78 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_4 %88 = OpLoad %68 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 0 0 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %91 = OpLoad %75 
                                        f32_3 %92 = OpFAdd %90 %91 
                                        f32_4 %93 = OpLoad %68 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 2 6 
                                                      OpStore %68 %94 
                               Uniform f32_4* %95 = OpAccessChain %16 %78 %55 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %68 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %68 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 3 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %68 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %68 %105 
                                       f32_4 %106 = OpLoad %68 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                              Uniform f32_4* %108 = OpAccessChain %16 %78 %78 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %107 %110 
                                       f32_4 %112 = OpLoad %68 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %68 %113 
                                       f32_4 %114 = OpLoad %68 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_3* %117 = OpAccessChain %16 %84 
                                       f32_3 %118 = OpLoad %117 
                                       f32_3 %119 = OpFNegate %118 
                                       f32_3 %120 = OpFAdd %115 %119 
                                                      OpStore %75 %120 
                                       f32_3 %121 = OpLoad %75 
                                       f32_3 %122 = OpLoad %75 
                                         f32 %123 = OpDot %121 %122 
                                Private f32* %124 = OpAccessChain %9 %29 
                                                      OpStore %124 %123 
                                Private f32* %125 = OpAccessChain %9 %29 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpExtInst %1 32 %126 
                                Private f32* %128 = OpAccessChain %9 %29 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 0 0 
                                       f32_3 %131 = OpLoad %75 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %75 %132 
                                       f32_4 %134 = OpLoad %68 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                              Uniform f32_4* %137 = OpAccessChain %16 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                                      OpStore %133 %141 
                                       f32_4 %142 = OpLoad %68 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 3 
                              Uniform f32_4* %145 = OpAccessChain %16 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFAdd %143 %148 
                                       f32_4 %150 = OpLoad %68 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 6 
                                                      OpStore %68 %151 
                                       f32_4 %152 = OpLoad %68 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 3 
                                       f32_4 %154 = OpLoad %68 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %9 %29 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 31 %159 
                                Private f32* %161 = OpAccessChain %9 %29 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %19 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpLoad %46 
                                         f32 %166 = OpFMul %164 %165 
                                Private f32* %167 = OpAccessChain %9 %29 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                Private f32* %170 = OpAccessChain %9 %29 
                                                      OpStore %170 %169 
                                Uniform f32* %172 = OpAccessChain %16 %144 %171 
                                         f32 %173 = OpLoad %172 
                                Private f32* %174 = OpAccessChain %9 %29 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                Private f32* %177 = OpAccessChain %68 %19 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFAdd %176 %178 
                                Private f32* %180 = OpAccessChain %9 %29 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %9 %29 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %16 %183 %19 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %182 %185 
                                Uniform f32* %187 = OpAccessChain %16 %183 %171 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFAdd %186 %188 
                                Private f32* %190 = OpAccessChain %9 %29 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %9 %29 
                                         f32 %192 = OpLoad %191 
                                         f32 %194 = OpExtInst %1 43 %192 %193 %64 
                                Private f32* %195 = OpAccessChain %9 %29 
                                                      OpStore %195 %194 
                                       f32_3 %197 = OpLoad %133 
                                       f32_3 %198 = OpLoad %133 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %196 %199 
                                         f32 %201 = OpLoad %196 
                                         f32 %202 = OpExtInst %1 32 %201 
                                                      OpStore %200 %202 
                                       f32_3 %203 = OpLoad %133 
                                       f32_3 %204 = OpFNegate %203 
                                         f32 %205 = OpLoad %200 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %75 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %68 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %68 %212 
                                         f32 %214 = OpLoad %200 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpLoad %133 
                                       f32_3 %217 = OpFMul %215 %216 
                                                      OpStore %213 %217 
                read_only TextureCubeSampled %222 = OpLoad %221 
                                       f32_3 %223 = OpLoad %133 
                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
                                         f32 %225 = OpCompositeExtract %224 0 
                                                      OpStore %200 %225 
                                       f32_4 %226 = OpLoad %68 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_4 %228 = OpLoad %68 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                         f32 %230 = OpDot %227 %229 
                                                      OpStore %46 %230 
                                         f32 %231 = OpLoad %46 
                                         f32 %233 = OpExtInst %1 40 %231 %232 
                                                      OpStore %46 %233 
                                         f32 %234 = OpLoad %46 
                                         f32 %235 = OpExtInst %1 32 %234 
                                                      OpStore %46 %235 
                                         f32 %236 = OpLoad %46 
                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
                                       f32_4 %238 = OpLoad %68 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %68 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %68 %242 
                  read_only Texture2DSampled %245 = OpLoad %244 
                                       f32_2 %246 = OpLoad %38 
                                       f32_4 %247 = OpImageSampleImplicitLod %245 %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                                      OpStore %243 %248 
                                       f32_3 %250 = OpLoad %243 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %249 %256 
                                       f32_3 %258 = OpLoad %249 
                                       f32_3 %259 = OpLoad %249 
                                         f32 %260 = OpDot %258 %259 
                                                      OpStore %257 %260 
                                         f32 %261 = OpLoad %257 
                                         f32 %262 = OpExtInst %1 32 %261 
                                                      OpStore %257 %262 
                                         f32 %263 = OpLoad %257 
                                       f32_3 %264 = OpCompositeConstruct %263 %263 %263 
                                       f32_3 %265 = OpLoad %249 
                                       f32_3 %266 = OpFMul %264 %265 
                                                      OpStore %249 %266 
                                       f32_3 %267 = OpLoad %249 
                                       f32_4 %268 = OpLoad %68 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                         f32 %270 = OpDot %267 %269 
                                                      OpStore %46 %270 
                                         f32 %271 = OpLoad %46 
                                         f32 %272 = OpExtInst %1 43 %271 %193 %64 
                                                      OpStore %46 %272 
                                       f32_3 %274 = OpLoad %213 
                                       f32_3 %275 = OpFNegate %274 
                                       f32_4 %276 = OpLoad %68 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                         f32 %278 = OpDot %275 %277 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                         f32 %280 = OpExtInst %1 43 %279 %193 %64 
                                                      OpStore %273 %280 
                                       f32_3 %282 = OpLoad %249 
                                       f32_3 %283 = OpLoad %213 
                                       f32_3 %284 = OpFNegate %283 
                                         f32 %285 = OpDot %282 %284 
                                                      OpStore %281 %285 
                                         f32 %286 = OpLoad %281 
                                         f32 %287 = OpExtInst %1 43 %286 %193 %64 
                                                      OpStore %281 %287 
                                       f32_3 %288 = OpLoad %249 
                                       f32_3 %289 = OpLoad %75 
                                       f32_3 %290 = OpFNegate %289 
                                         f32 %291 = OpDot %288 %290 
                                Private f32* %292 = OpAccessChain %68 %29 
                                                      OpStore %292 %291 
                  read_only Texture2DSampled %295 = OpLoad %294 
                                       f32_2 %296 = OpLoad %38 
                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
                                                      OpStore %293 %297 
                  read_only Texture2DSampled %300 = OpLoad %299 
                                       f32_2 %301 = OpLoad %38 
                                       f32_4 %302 = OpImageSampleImplicitLod %300 %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                                      OpStore %298 %303 
                                Private f32* %305 = OpAccessChain %293 %171 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %307 %64 
                                                      OpStore %304 %308 
                                         f32 %310 = OpLoad %304 
                                         f32 %311 = OpLoad %304 
                                         f32 %312 = OpFMul %310 %311 
                                                      OpStore %309 %312 
                                         f32 %313 = OpLoad %309 
                                         f32 %315 = OpExtInst %1 40 %313 %314 
                                                      OpStore %309 %315 
                                         f32 %317 = OpLoad %309 
                                         f32 %318 = OpLoad %309 
                                         f32 %319 = OpFMul %317 %318 
                                                      OpStore %316 %319 
                                         f32 %320 = OpLoad %46 
                                         f32 %321 = OpLoad %316 
                                         f32 %322 = OpFMul %320 %321 
                                         f32 %323 = OpLoad %46 
                                         f32 %324 = OpFNegate %323 
                                         f32 %325 = OpFAdd %322 %324 
                                Private f32* %326 = OpAccessChain %133 %29 
                                                      OpStore %326 %325 
                                Private f32* %327 = OpAccessChain %133 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpLoad %46 
                                         f32 %330 = OpFMul %328 %329 
                                         f32 %331 = OpFAdd %330 %64 
                                                      OpStore %46 %331 
                                         f32 %332 = OpLoad %46 
                                         f32 %333 = OpLoad %46 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                                      OpStore %46 %336 
                                         f32 %337 = OpLoad %316 
                                         f32 %339 = OpFMul %337 %338 
                                                      OpStore %316 %339 
                                         f32 %340 = OpLoad %316 
                                         f32 %341 = OpLoad %46 
                                         f32 %342 = OpFDiv %340 %341 
                                                      OpStore %46 %342 
                                         f32 %343 = OpLoad %309 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %344 %64 
                                                      OpStore %316 %345 
                                Private f32* %346 = OpAccessChain %68 %29 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpExtInst %1 4 %347 
                                         f32 %349 = OpLoad %316 
                                         f32 %350 = OpFMul %348 %349 
                                         f32 %351 = OpLoad %309 
                                         f32 %352 = OpFAdd %350 %351 
                                Private f32* %353 = OpAccessChain %133 %29 
                                                      OpStore %353 %352 
                                         f32 %355 = OpLoad %281 
                                         f32 %356 = OpLoad %316 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %358 = OpLoad %309 
                                         f32 %359 = OpFAdd %357 %358 
                                                      OpStore %354 %359 
                                         f32 %360 = OpLoad %354 
                                Private f32* %361 = OpAccessChain %68 %29 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 4 %362 
                                         f32 %364 = OpFMul %360 %363 
                                                      OpStore %354 %364 
                                Private f32* %366 = OpAccessChain %68 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 4 %367 
                                         f32 %369 = OpFNegate %368 
                                         f32 %370 = OpFAdd %369 %64 
                                Private f32* %371 = OpAccessChain %365 %29 
                                                      OpStore %371 %370 
                                         f32 %372 = OpLoad %281 
                                Private f32* %373 = OpAccessChain %133 %29 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                         f32 %376 = OpLoad %354 
                                         f32 %377 = OpFAdd %375 %376 
                                                      OpStore %354 %377 
                                         f32 %378 = OpLoad %354 
                                         f32 %380 = OpFAdd %378 %379 
                                                      OpStore %354 %380 
                                         f32 %382 = OpLoad %354 
                                         f32 %383 = OpFDiv %381 %382 
                                                      OpStore %354 %383 
                                         f32 %384 = OpLoad %46 
                                         f32 %385 = OpLoad %354 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %46 %386 
                                         f32 %387 = OpLoad %46 
                                         f32 %389 = OpFMul %387 %388 
                                                      OpStore %46 %389 
                                         f32 %390 = OpLoad %46 
                                         f32 %392 = OpExtInst %1 40 %390 %391 
                                                      OpStore %46 %392 
                                         f32 %393 = OpLoad %46 
                                         f32 %394 = OpExtInst %1 31 %393 
                                                      OpStore %46 %394 
                                         f32 %395 = OpLoad %281 
                                         f32 %396 = OpLoad %46 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %46 %397 
                                       f32_4 %399 = OpLoad %293 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %293 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                         f32 %403 = OpDot %400 %402 
                                Private f32* %404 = OpAccessChain %398 %29 
                                                      OpStore %404 %403 
                                Private f32* %408 = OpAccessChain %398 %29 
                                         f32 %409 = OpLoad %408 
                                        bool %410 = OpFOrdNotEqual %409 %193 
                                                      OpStore %407 %410 
                                        bool %413 = OpLoad %407 
                                                      OpSelectionMerge %415 None 
                                                      OpBranchConditional %413 %414 %416 
                                             %414 = OpLabel 
                                                      OpStore %412 %64 
                                                      OpBranch %415 
                                             %416 = OpLabel 
                                                      OpStore %412 %193 
                                                      OpBranch %415 
                                             %415 = OpLabel 
                                         f32 %417 = OpLoad %412 
                                                      OpStore %354 %417 
                                         f32 %418 = OpLoad %46 
                                         f32 %419 = OpLoad %354 
                                         f32 %420 = OpFMul %418 %419 
                                                      OpStore %46 %420 
                                         f32 %421 = OpLoad %196 
                                         f32 %422 = OpExtInst %1 31 %421 
                                                      OpStore %354 %422 
                                         f32 %423 = OpLoad %196 
                                Uniform f32* %424 = OpAccessChain %16 %136 %171 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %423 %425 
                                                      OpStore %196 %426 
                  read_only Texture2DSampled %428 = OpLoad %427 
                                         f32 %429 = OpLoad %196 
                                       f32_2 %430 = OpCompositeConstruct %429 %429 
                                       f32_4 %431 = OpImageSampleImplicitLod %428 %430 
                                         f32 %432 = OpCompositeExtract %431 3 
                                                      OpStore %196 %432 
                                         f32 %433 = OpLoad %354 
                                Uniform f32* %435 = OpAccessChain %16 %434 %171 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFMul %433 %436 
                                                      OpStore %354 %437 
                                         f32 %438 = OpLoad %354 
                                Uniform f32* %440 = OpAccessChain %16 %439 %171 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %438 %441 
                                                      OpStore %354 %442 
                                         f32 %444 = OpLoad %200 
                                         f32 %445 = OpLoad %354 
                                        bool %446 = OpFOrdLessThan %444 %445 
                                                      OpStore %443 %446 
                                        bool %448 = OpLoad %443 
                                                      OpSelectionMerge %450 None 
                                                      OpBranchConditional %448 %449 %453 
                                             %449 = OpLabel 
                                Uniform f32* %451 = OpAccessChain %16 %183 %29 
                                         f32 %452 = OpLoad %451 
                                                      OpStore %447 %452 
                                                      OpBranch %450 
                                             %453 = OpLabel 
                                                      OpStore %447 %64 
                                                      OpBranch %450 
                                             %450 = OpLabel 
                                         f32 %454 = OpLoad %447 
                                Private f32* %455 = OpAccessChain %398 %29 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %29 
                                         f32 %457 = OpLoad %456 
                                Private f32* %458 = OpAccessChain %398 %29 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFAdd %457 %459 
                                Private f32* %461 = OpAccessChain %398 %29 
                                                      OpStore %461 %460 
                                Private f32* %462 = OpAccessChain %398 %29 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpExtInst %1 43 %463 %193 %64 
                                Private f32* %465 = OpAccessChain %398 %29 
                                                      OpStore %465 %464 
                                         f32 %466 = OpLoad %196 
                                Private f32* %467 = OpAccessChain %398 %29 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFMul %466 %468 
                                Private f32* %470 = OpAccessChain %9 %29 
                                                      OpStore %470 %469 
                                       f32_3 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 0 0 
                              Uniform f32_4* %474 = OpAccessChain %16 %473 
                                       f32_4 %475 = OpLoad %474 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFMul %472 %476 
                                                      OpStore %9 %477 
                                       f32_3 %478 = OpLoad %9 
                                         f32 %479 = OpLoad %46 
                                       f32_3 %480 = OpCompositeConstruct %479 %479 %479 
                                       f32_3 %481 = OpFMul %478 %480 
                                                      OpStore %133 %481 
                                         f32 %482 = OpLoad %273 
                                         f32 %483 = OpFNegate %482 
                                         f32 %484 = OpFAdd %483 %64 
                                Private f32* %485 = OpAccessChain %398 %29 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %398 %29 
                                         f32 %488 = OpLoad %487 
                                Private f32* %489 = OpAccessChain %398 %29 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                                      OpStore %486 %491 
                                         f32 %492 = OpLoad %486 
                                         f32 %493 = OpLoad %486 
                                         f32 %494 = OpFMul %492 %493 
                                                      OpStore %486 %494 
                                Private f32* %495 = OpAccessChain %398 %29 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpLoad %486 
                                         f32 %498 = OpFMul %496 %497 
                                Private f32* %499 = OpAccessChain %398 %29 
                                                      OpStore %499 %498 
                                       f32_4 %501 = OpLoad %293 
                                       f32_3 %502 = OpVectorShuffle %501 %501 0 1 2 
                                       f32_3 %503 = OpFNegate %502 
                                       f32_3 %505 = OpFAdd %503 %504 
                                                      OpStore %500 %505 
                                       f32_3 %506 = OpLoad %500 
                                       f32_3 %507 = OpLoad %398 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 0 0 
                                       f32_3 %509 = OpFMul %506 %508 
                                       f32_4 %510 = OpLoad %293 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
                                       f32_3 %512 = OpFAdd %509 %511 
                                                      OpStore %398 %512 
                                       f32_3 %513 = OpLoad %133 
                                       f32_3 %514 = OpLoad %398 
                                       f32_3 %515 = OpFMul %513 %514 
                                                      OpStore %75 %515 
                                Private f32* %516 = OpAccessChain %365 %29 
                                         f32 %517 = OpLoad %516 
                                Private f32* %518 = OpAccessChain %365 %29 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFMul %517 %519 
                                Private f32* %521 = OpAccessChain %398 %29 
                                                      OpStore %521 %520 
                                Private f32* %522 = OpAccessChain %398 %29 
                                         f32 %523 = OpLoad %522 
                                Private f32* %524 = OpAccessChain %398 %29 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFMul %523 %525 
                                Private f32* %527 = OpAccessChain %398 %29 
                                                      OpStore %527 %526 
                                Private f32* %528 = OpAccessChain %365 %29 
                                         f32 %529 = OpLoad %528 
                                Private f32* %530 = OpAccessChain %398 %29 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFMul %529 %531 
                                Private f32* %533 = OpAccessChain %365 %29 
                                                      OpStore %533 %532 
                                         f32 %534 = OpLoad %273 
                                         f32 %535 = OpLoad %273 
                                         f32 %536 = OpFAdd %534 %535 
                                Private f32* %537 = OpAccessChain %398 %29 
                                                      OpStore %537 %536 
                                         f32 %538 = OpLoad %273 
                                Private f32* %539 = OpAccessChain %398 %29 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %398 %29 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %398 %29 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpLoad %304 
                                         f32 %546 = OpFMul %544 %545 
                                         f32 %548 = OpFAdd %546 %547 
                                Private f32* %549 = OpAccessChain %398 %29 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %398 %29 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %365 %29 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %555 = OpFAdd %554 %64 
                                Private f32* %556 = OpAccessChain %365 %29 
                                                      OpStore %556 %555 
                                         f32 %557 = OpLoad %281 
                                         f32 %558 = OpFNegate %557 
                                         f32 %559 = OpFAdd %558 %64 
                                                      OpStore %486 %559 
                                         f32 %561 = OpLoad %486 
                                         f32 %562 = OpLoad %486 
                                         f32 %563 = OpFMul %561 %562 
                                                      OpStore %560 %563 
                                         f32 %564 = OpLoad %560 
                                         f32 %565 = OpLoad %560 
                                         f32 %566 = OpFMul %564 %565 
                                                      OpStore %560 %566 
                                         f32 %567 = OpLoad %486 
                                         f32 %568 = OpLoad %560 
                                         f32 %569 = OpFMul %567 %568 
                                                      OpStore %486 %569 
                                Private f32* %570 = OpAccessChain %398 %29 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpLoad %486 
                                         f32 %573 = OpFMul %571 %572 
                                         f32 %574 = OpFAdd %573 %64 
                                Private f32* %575 = OpAccessChain %398 %29 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %365 %29 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %398 %29 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                Private f32* %581 = OpAccessChain %365 %29 
                                                      OpStore %581 %580 
                                         f32 %582 = OpLoad %281 
                                Private f32* %583 = OpAccessChain %365 %29 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %46 %585 
                                         f32 %586 = OpLoad %46 
                                       f32_3 %587 = OpCompositeConstruct %586 %586 %586 
                                       f32_3 %588 = OpLoad %9 
                                       f32_3 %589 = OpFMul %587 %588 
                                                      OpStore %365 %589 
                                       f32_3 %590 = OpLoad %298 
                                       f32_3 %591 = OpLoad %365 
                                       f32_3 %592 = OpFMul %590 %591 
                                       f32_3 %593 = OpLoad %75 
                                       f32_3 %594 = OpFAdd %592 %593 
                                                      OpStore %9 %594 
                                       f32_3 %597 = OpLoad %9 
                                       f32_4 %598 = OpLoad %596 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %596 %599 
                                 Output f32* %601 = OpAccessChain %596 %171 
                                                      OpStore %601 %64 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat16_10;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat20 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat20));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb20 = u_xlat0.x<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat19 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat19 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat9.xyz) * vec3(u_xlat28) + (-u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat16_1.xyz, (-u_xlat3.xyz));
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, u_xlat16_7.xx);
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat28) + 1.0;
    u_xlat10 = u_xlat18 * u_xlat18;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat18 = u_xlat18 * u_xlat10;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat10 = -abs(u_xlat27) + 1.0;
    u_xlat19 = u_xlat10 * u_xlat10;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat10 * u_xlat19;
    u_xlat9.x = u_xlat9.x * u_xlat10 + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat16_18 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_18 = max(u_xlat16_18, 0.00200000009);
    u_xlat16_10 = (-u_xlat16_18) + 1.0;
    u_xlat19 = abs(u_xlat27) * u_xlat16_10 + u_xlat16_18;
    u_xlat10 = u_xlat28 * u_xlat16_10 + u_xlat16_18;
    u_xlat27 = abs(u_xlat27) * u_xlat10;
    u_xlat27 = u_xlat28 * u_xlat19 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-006;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat10 = u_xlat1.x * u_xlat16_18 + (-u_xlat1.x);
    u_xlat1.x = u_xlat10 * u_xlat1.x + 1.0;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat18 = u_xlat16_18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = vec2(u_xlat28) * u_xlat9.xy;
    u_xlat27 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * vec3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat28 = u_xlat0.x * u_xlat0.x;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat0.x = u_xlat0.x * u_xlat28;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 708
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %700 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %343 DescriptorSet 343 
                                                      OpDecorate %343 Binding 343 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %348 DescriptorSet 348 
                                                      OpDecorate %348 Binding 348 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %669 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %680 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %692 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %700 Location 700 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypeSampledImage %49 
                                              %51 = OpTypePointer UniformConstant %50 
  UniformConstant read_only Texture2DSampled* %52 = OpVariable UniformConstant 
                                          i32 %57 = OpConstant 2 
                                          u32 %62 = OpConstant 1 
                                          f32 %66 = OpConstant 3.674022E-40 
                               Private f32_4* %69 = OpVariable Private 
                                              %77 = OpTypePointer Private %10 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %81 = OpConstant 3 
                                              %82 = OpTypePointer Uniform %7 
                                          i32 %87 = OpConstant 0 
                                         i32 %119 = OpConstant 7 
                                         u32 %142 = OpConstant 3 
                              Private f32_3* %152 = OpVariable Private 
                                         i32 %155 = OpConstant 8 
                                Private f32* %161 = OpVariable Private 
                                Private f32* %165 = OpVariable Private 
                                Private f32* %172 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %177 = OpVariable UniformConstant 
                                         i32 %185 = OpConstant 6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                             %198 = OpTypeBool 
                                             %199 = OpTypePointer Private %198 
                               Private bool* %200 = OpVariable Private 
                                         f32 %203 = OpConstant 3.674022E-40 
                                         i32 %211 = OpConstant 4 
                                         i32 %216 = OpConstant 5 
                              Private f32_4* %220 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_3 %223 = OpConstantComposite %222 %222 %222 
                                             %227 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %228 = OpTypeSampledImage %227 
                                             %229 = OpTypePointer UniformConstant %228 
UniformConstant read_only TextureCubeSampled* %230 = OpVariable UniformConstant 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %222 
                                       f32_3 %248 = OpConstantComposite %239 %222 %239 
                                       f32_3 %256 = OpConstantComposite %222 %239 %239 
                                             %263 = OpTypeVector %198 4 
                                             %264 = OpTypePointer Private %263 
                             Private bool_4* %265 = OpVariable Private 
                                             %270 = OpTypePointer Function %6 
                                Private f32* %311 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_4 %314 = OpConstantComposite %313 %313 %313 %313 
                                         i32 %329 = OpConstant 9 
                              Private f32_3* %336 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %337 = OpVariable UniformConstant 
                              Private f32_4* %342 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %343 = OpVariable UniformConstant 
                              Private f32_3* %347 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %348 = OpVariable UniformConstant 
                              Private f32_3* %353 = OpVariable Private 
                                         f32 %355 = OpConstant 3.674022E-40 
                                       f32_3 %356 = OpConstantComposite %355 %355 %355 
                                         f32 %358 = OpConstant 3.674022E-40 
                                       f32_3 %359 = OpConstantComposite %358 %358 %358 
                                Private f32* %361 = OpVariable Private 
                                             %373 = OpTypePointer Uniform %10 
                                         f32 %414 = OpConstant 3.674022E-40 
                              Private f32_3* %453 = OpVariable Private 
                                         f32 %470 = OpConstant 3.674022E-40 
                                Private f32* %473 = OpVariable Private 
                                Private f32* %478 = OpVariable Private 
                                Private f32* %497 = OpVariable Private 
                                Private f32* %518 = OpVariable Private 
                                         f32 %528 = OpConstant 3.674022E-40 
                                Private f32* %530 = OpVariable Private 
                                Private f32* %534 = OpVariable Private 
                                         f32 %558 = OpConstant 3.674022E-40 
                                         f32 %560 = OpConstant 3.674022E-40 
                                         f32 %581 = OpConstant 3.674022E-40 
                                         f32 %588 = OpConstant 3.674022E-40 
                                         f32 %603 = OpConstant 3.674022E-40 
                                         f32 %608 = OpConstant 3.674022E-40 
                               Private bool* %627 = OpVariable Private 
                              Private f32_3* %658 = OpVariable Private 
                                       f32_3 %676 = OpConstantComposite %66 %66 %66 
                                             %699 = OpTypePointer Output %7 
                               Output f32_4* %700 = OpVariable Output 
                                             %705 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %271 = OpVariable Function 
                               Function f32* %281 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                               Function f32* %301 = OpVariable Function 
                               Function f32* %631 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad %42 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %42 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                   read_only Texture2DSampled %53 = OpLoad %52 
                                        f32_2 %54 = OpLoad %40 
                                        f32_4 %55 = OpImageSampleImplicitLod %53 %54 
                                          f32 %56 = OpCompositeExtract %55 0 
                                                      OpStore %48 %56 
                                 Uniform f32* %58 = OpAccessChain %16 %57 %29 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpLoad %48 
                                          f32 %61 = OpFMul %59 %60 
                                 Uniform f32* %63 = OpAccessChain %16 %57 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %61 %64 
                                                      OpStore %48 %65 
                                          f32 %67 = OpLoad %48 
                                          f32 %68 = OpFDiv %66 %67 
                                                      OpStore %48 %68 
                                          f32 %70 = OpLoad %48 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %69 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %69 %76 
                                        f32_4 %79 = OpLoad %69 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %16 %81 %18 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %78 %86 
                               Uniform f32_4* %88 = OpAccessChain %16 %81 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_4 %91 = OpLoad %69 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %90 %92 
                                        f32_3 %94 = OpLoad %78 
                                        f32_3 %95 = OpFAdd %93 %94 
                                        f32_4 %96 = OpLoad %69 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 2 6 
                                                      OpStore %69 %97 
                               Uniform f32_4* %98 = OpAccessChain %16 %81 %57 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %69 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %69 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 3 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %69 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 2 6 
                                                      OpStore %69 %108 
                                       f32_4 %109 = OpLoad %69 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                              Uniform f32_4* %111 = OpAccessChain %16 %81 %81 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %69 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %69 %116 
                                       f32_4 %117 = OpLoad %69 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %120 = OpAccessChain %16 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                                      OpStore %78 %124 
                                       f32_3 %125 = OpLoad %78 
                                       f32_3 %126 = OpLoad %78 
                                         f32 %127 = OpDot %125 %126 
                                Private f32* %128 = OpAccessChain %9 %29 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %9 %29 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpExtInst %1 31 %130 
                                Private f32* %132 = OpAccessChain %9 %29 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %9 %19 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                         f32 %136 = OpLoad %48 
                                         f32 %137 = OpFMul %135 %136 
                                Private f32* %138 = OpAccessChain %9 %29 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFAdd %137 %139 
                                Private f32* %141 = OpAccessChain %9 %29 
                                                      OpStore %141 %140 
                                Uniform f32* %143 = OpAccessChain %16 %119 %142 
                                         f32 %144 = OpLoad %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %144 %146 
                                Private f32* %148 = OpAccessChain %69 %19 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFAdd %147 %149 
                                Private f32* %151 = OpAccessChain %9 %29 
                                                      OpStore %151 %150 
                                       f32_4 %153 = OpLoad %69 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 3 
                              Uniform f32_4* %156 = OpAccessChain %16 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFNegate %158 
                                       f32_3 %160 = OpFAdd %154 %159 
                                                      OpStore %152 %160 
                                       f32_3 %162 = OpLoad %152 
                                       f32_3 %163 = OpLoad %152 
                                         f32 %164 = OpDot %162 %163 
                                                      OpStore %161 %164 
                                         f32 %166 = OpLoad %161 
                                         f32 %167 = OpExtInst %1 32 %166 
                                                      OpStore %165 %167 
                                       f32_3 %168 = OpLoad %152 
                                         f32 %169 = OpLoad %165 
                                       f32_3 %170 = OpCompositeConstruct %169 %169 %169 
                                       f32_3 %171 = OpFMul %168 %170 
                                                      OpStore %78 %171 
                                         f32 %173 = OpLoad %161 
                                Uniform f32* %174 = OpAccessChain %16 %155 %142 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                                      OpStore %172 %176 
                  read_only Texture2DSampled %178 = OpLoad %177 
                                         f32 %179 = OpLoad %172 
                                       f32_2 %180 = OpCompositeConstruct %179 %179 
                                       f32_4 %181 = OpImageSampleImplicitLod %178 %180 
                                         f32 %182 = OpCompositeExtract %181 3 
                                                      OpStore %172 %182 
                                Private f32* %183 = OpAccessChain %9 %29 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %186 = OpAccessChain %16 %185 %19 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %184 %187 
                                Uniform f32* %189 = OpAccessChain %16 %185 %142 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                Private f32* %192 = OpAccessChain %9 %29 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %9 %29 
                                         f32 %194 = OpLoad %193 
                                         f32 %196 = OpExtInst %1 43 %194 %195 %66 
                                Private f32* %197 = OpAccessChain %9 %29 
                                                      OpStore %197 %196 
                                Private f32* %201 = OpAccessChain %9 %29 
                                         f32 %202 = OpLoad %201 
                                        bool %204 = OpFOrdLessThan %202 %203 
                                                      OpStore %200 %204 
                                        bool %205 = OpLoad %200 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %316 
                                             %206 = OpLabel 
                                         f32 %208 = OpLoad %161 
                                         f32 %209 = OpExtInst %1 31 %208 
                                                      OpStore %161 %209 
                                         f32 %210 = OpLoad %161 
                                Uniform f32* %212 = OpAccessChain %16 %211 %142 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %210 %213 
                                                      OpStore %161 %214 
                                         f32 %215 = OpLoad %161 
                                Uniform f32* %217 = OpAccessChain %16 %216 %142 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %215 %218 
                                                      OpStore %161 %219 
                                       f32_3 %221 = OpLoad %152 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %220 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %220 %226 
                read_only TextureCubeSampled %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %220 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpImageSampleExplicitLod %231 %233 Lod %7 
                                         f32 %235 = OpCompositeExtract %234 0 
                                Private f32* %236 = OpAccessChain %220 %29 
                                                      OpStore %236 %235 
                                       f32_3 %238 = OpLoad %152 
                                       f32_3 %241 = OpFAdd %238 %240 
                                                      OpStore %237 %241 
                read_only TextureCubeSampled %242 = OpLoad %230 
                                       f32_3 %243 = OpLoad %237 
                                       f32_4 %244 = OpImageSampleExplicitLod %242 %243 Lod %7 
                                         f32 %245 = OpCompositeExtract %244 0 
                                Private f32* %246 = OpAccessChain %220 %62 
                                                      OpStore %246 %245 
                                       f32_3 %247 = OpLoad %152 
                                       f32_3 %249 = OpFAdd %247 %248 
                                                      OpStore %237 %249 
                read_only TextureCubeSampled %250 = OpLoad %230 
                                       f32_3 %251 = OpLoad %237 
                                       f32_4 %252 = OpImageSampleExplicitLod %250 %251 Lod %7 
                                         f32 %253 = OpCompositeExtract %252 0 
                                Private f32* %254 = OpAccessChain %220 %19 
                                                      OpStore %254 %253 
                                       f32_3 %255 = OpLoad %152 
                                       f32_3 %257 = OpFAdd %255 %256 
                                                      OpStore %237 %257 
                read_only TextureCubeSampled %258 = OpLoad %230 
                                       f32_3 %259 = OpLoad %237 
                                       f32_4 %260 = OpImageSampleExplicitLod %258 %259 Lod %7 
                                         f32 %261 = OpCompositeExtract %260 0 
                                Private f32* %262 = OpAccessChain %220 %142 
                                                      OpStore %262 %261 
                                       f32_4 %266 = OpLoad %220 
                                         f32 %267 = OpLoad %161 
                                       f32_4 %268 = OpCompositeConstruct %267 %267 %267 %267 
                                      bool_4 %269 = OpFOrdLessThan %266 %268 
                                                      OpStore %265 %269 
                                      bool_4 %272 = OpLoad %265 
                                        bool %273 = OpCompositeExtract %272 0 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %278 
                                             %274 = OpLabel 
                                Uniform f32* %276 = OpAccessChain %16 %185 %29 
                                         f32 %277 = OpLoad %276 
                                                      OpStore %271 %277 
                                                      OpBranch %275 
                                             %278 = OpLabel 
                                                      OpStore %271 %66 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                         f32 %279 = OpLoad %271 
                                Private f32* %280 = OpAccessChain %220 %29 
                                                      OpStore %280 %279 
                                      bool_4 %282 = OpLoad %265 
                                        bool %283 = OpCompositeExtract %282 1 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %288 
                                             %284 = OpLabel 
                                Uniform f32* %286 = OpAccessChain %16 %185 %29 
                                         f32 %287 = OpLoad %286 
                                                      OpStore %281 %287 
                                                      OpBranch %285 
                                             %288 = OpLabel 
                                                      OpStore %281 %66 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                         f32 %289 = OpLoad %281 
                                Private f32* %290 = OpAccessChain %220 %62 
                                                      OpStore %290 %289 
                                      bool_4 %292 = OpLoad %265 
                                        bool %293 = OpCompositeExtract %292 2 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %298 
                                             %294 = OpLabel 
                                Uniform f32* %296 = OpAccessChain %16 %185 %29 
                                         f32 %297 = OpLoad %296 
                                                      OpStore %291 %297 
                                                      OpBranch %295 
                                             %298 = OpLabel 
                                                      OpStore %291 %66 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                         f32 %299 = OpLoad %291 
                                Private f32* %300 = OpAccessChain %220 %19 
                                                      OpStore %300 %299 
                                      bool_4 %302 = OpLoad %265 
                                        bool %303 = OpCompositeExtract %302 3 
                                                      OpSelectionMerge %305 None 
                                                      OpBranchConditional %303 %304 %308 
                                             %304 = OpLabel 
                                Uniform f32* %306 = OpAccessChain %16 %185 %29 
                                         f32 %307 = OpLoad %306 
                                                      OpStore %301 %307 
                                                      OpBranch %305 
                                             %308 = OpLabel 
                                                      OpStore %301 %66 
                                                      OpBranch %305 
                                             %305 = OpLabel 
                                         f32 %309 = OpLoad %301 
                                Private f32* %310 = OpAccessChain %220 %142 
                                                      OpStore %310 %309 
                                       f32_4 %312 = OpLoad %220 
                                         f32 %315 = OpDot %312 %314 
                                                      OpStore %311 %315 
                                                      OpBranch %207 
                                             %316 = OpLabel 
                                                      OpStore %311 %66 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                Private f32* %317 = OpAccessChain %9 %29 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpLoad %311 
                                         f32 %320 = OpFAdd %318 %319 
                                                      OpStore %311 %320 
                                         f32 %321 = OpLoad %311 
                                         f32 %322 = OpExtInst %1 43 %321 %195 %66 
                                                      OpStore %311 %322 
                                         f32 %323 = OpLoad %172 
                                         f32 %324 = OpLoad %311 
                                         f32 %325 = OpFMul %323 %324 
                                Private f32* %326 = OpAccessChain %9 %29 
                                                      OpStore %326 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 0 0 
                              Uniform f32_4* %330 = OpAccessChain %16 %329 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_3 %333 = OpFMul %328 %332 
                                       f32_4 %334 = OpLoad %220 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %220 %335 
                  read_only Texture2DSampled %338 = OpLoad %337 
                                       f32_2 %339 = OpLoad %40 
                                       f32_4 %340 = OpImageSampleImplicitLod %338 %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                                      OpStore %336 %341 
                  read_only Texture2DSampled %344 = OpLoad %343 
                                       f32_2 %345 = OpLoad %40 
                                       f32_4 %346 = OpImageSampleImplicitLod %344 %345 
                                                      OpStore %342 %346 
                  read_only Texture2DSampled %349 = OpLoad %348 
                                       f32_2 %350 = OpLoad %40 
                                       f32_4 %351 = OpImageSampleImplicitLod %349 %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                                      OpStore %347 %352 
                                       f32_3 %354 = OpLoad %347 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_3 %360 = OpFAdd %357 %359 
                                                      OpStore %353 %360 
                                       f32_3 %362 = OpLoad %353 
                                       f32_3 %363 = OpLoad %353 
                                         f32 %364 = OpDot %362 %363 
                                                      OpStore %361 %364 
                                         f32 %365 = OpLoad %361 
                                         f32 %366 = OpExtInst %1 32 %365 
                                                      OpStore %361 %366 
                                         f32 %367 = OpLoad %361 
                                       f32_3 %368 = OpCompositeConstruct %367 %367 %367 
                                       f32_3 %369 = OpLoad %353 
                                       f32_3 %370 = OpFMul %368 %369 
                                                      OpStore %353 %370 
                                       f32_4 %371 = OpLoad %69 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 3 
                              Uniform f32_3* %374 = OpAccessChain %16 %87 
                                       f32_3 %375 = OpLoad %374 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %377 = OpFAdd %372 %376 
                                       f32_4 %378 = OpLoad %69 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %69 %379 
                                       f32_4 %380 = OpLoad %69 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_4 %382 = OpLoad %69 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                         f32 %384 = OpDot %381 %383 
                                Private f32* %385 = OpAccessChain %9 %29 
                                                      OpStore %385 %384 
                                Private f32* %386 = OpAccessChain %9 %29 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpExtInst %1 32 %387 
                                Private f32* %389 = OpAccessChain %9 %29 
                                                      OpStore %389 %388 
                                       f32_4 %390 = OpLoad %9 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 0 0 
                                       f32_4 %392 = OpLoad %69 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %69 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %69 %396 
                                Private f32* %397 = OpAccessChain %342 %142 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %399 %66 
                                                      OpStore %361 %400 
                                       f32_3 %401 = OpLoad %152 
                                       f32_3 %402 = OpFNegate %401 
                                         f32 %403 = OpLoad %165 
                                       f32_3 %404 = OpCompositeConstruct %403 %403 %403 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %69 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFNegate %407 
                                       f32_3 %409 = OpFAdd %405 %408 
                                                      OpStore %152 %409 
                                       f32_3 %410 = OpLoad %152 
                                       f32_3 %411 = OpLoad %152 
                                         f32 %412 = OpDot %410 %411 
                                                      OpStore %165 %412 
                                         f32 %413 = OpLoad %165 
                                         f32 %415 = OpExtInst %1 40 %413 %414 
                                                      OpStore %165 %415 
                                         f32 %416 = OpLoad %165 
                                         f32 %417 = OpExtInst %1 32 %416 
                                                      OpStore %165 %417 
                                       f32_3 %418 = OpLoad %152 
                                         f32 %419 = OpLoad %165 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_3 %421 = OpFMul %418 %420 
                                                      OpStore %152 %421 
                                       f32_3 %422 = OpLoad %353 
                                       f32_4 %423 = OpLoad %69 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFNegate %424 
                                         f32 %426 = OpDot %422 %425 
                                                      OpStore %165 %426 
                                       f32_3 %427 = OpLoad %353 
                                       f32_3 %428 = OpLoad %78 
                                       f32_3 %429 = OpFNegate %428 
                                         f32 %430 = OpDot %427 %429 
                                Private f32* %431 = OpAccessChain %69 %29 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %69 %29 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpExtInst %1 43 %433 %195 %66 
                                Private f32* %435 = OpAccessChain %69 %29 
                                                      OpStore %435 %434 
                                       f32_3 %436 = OpLoad %353 
                                       f32_3 %437 = OpLoad %152 
                                         f32 %438 = OpDot %436 %437 
                                Private f32* %439 = OpAccessChain %40 %29 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %40 %29 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpExtInst %1 43 %441 %195 %66 
                                Private f32* %443 = OpAccessChain %40 %29 
                                                      OpStore %443 %442 
                                       f32_3 %444 = OpLoad %78 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpLoad %152 
                                         f32 %447 = OpDot %445 %446 
                                Private f32* %448 = OpAccessChain %152 %29 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %152 %29 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 43 %450 %195 %66 
                                Private f32* %452 = OpAccessChain %152 %29 
                                                      OpStore %452 %451 
                                Private f32* %454 = OpAccessChain %152 %29 
                                         f32 %455 = OpLoad %454 
                                Private f32* %456 = OpAccessChain %152 %29 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpFAdd %455 %457 
                                Private f32* %459 = OpAccessChain %453 %29 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %152 %29 
                                         f32 %461 = OpLoad %460 
                                Private f32* %462 = OpAccessChain %453 %29 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpFMul %461 %463 
                                Private f32* %465 = OpAccessChain %453 %29 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %453 %29 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpLoad %361 
                                         f32 %469 = OpFMul %467 %468 
                                         f32 %471 = OpFAdd %469 %470 
                                Private f32* %472 = OpAccessChain %453 %29 
                                                      OpStore %472 %471 
                                Private f32* %474 = OpAccessChain %69 %29 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpFNegate %475 
                                         f32 %477 = OpFAdd %476 %66 
                                                      OpStore %473 %477 
                                         f32 %479 = OpLoad %473 
                                         f32 %480 = OpLoad %473 
                                         f32 %481 = OpFMul %479 %480 
                                                      OpStore %478 %481 
                                         f32 %482 = OpLoad %478 
                                         f32 %483 = OpLoad %478 
                                         f32 %484 = OpFMul %482 %483 
                                                      OpStore %478 %484 
                                         f32 %485 = OpLoad %473 
                                         f32 %486 = OpLoad %478 
                                         f32 %487 = OpFMul %485 %486 
                                                      OpStore %473 %487 
                                Private f32* %488 = OpAccessChain %453 %29 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpLoad %473 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %492 = OpFAdd %491 %66 
                                                      OpStore %473 %492 
                                         f32 %493 = OpLoad %165 
                                         f32 %494 = OpExtInst %1 4 %493 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %495 %66 
                                                      OpStore %478 %496 
                                         f32 %498 = OpLoad %478 
                                         f32 %499 = OpLoad %478 
                                         f32 %500 = OpFMul %498 %499 
                                                      OpStore %497 %500 
                                         f32 %501 = OpLoad %497 
                                         f32 %502 = OpLoad %497 
                                         f32 %503 = OpFMul %501 %502 
                                                      OpStore %497 %503 
                                         f32 %504 = OpLoad %478 
                                         f32 %505 = OpLoad %497 
                                         f32 %506 = OpFMul %504 %505 
                                                      OpStore %478 %506 
                                Private f32* %507 = OpAccessChain %453 %29 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpLoad %478 
                                         f32 %510 = OpFMul %508 %509 
                                         f32 %511 = OpFAdd %510 %66 
                                Private f32* %512 = OpAccessChain %453 %29 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %453 %29 
                                         f32 %514 = OpLoad %513 
                                         f32 %515 = OpLoad %473 
                                         f32 %516 = OpFMul %514 %515 
                                Private f32* %517 = OpAccessChain %453 %29 
                                                      OpStore %517 %516 
                                Private f32* %519 = OpAccessChain %69 %29 
                                         f32 %520 = OpLoad %519 
                                Private f32* %521 = OpAccessChain %453 %29 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpFMul %520 %522 
                                                      OpStore %518 %523 
                                         f32 %524 = OpLoad %361 
                                         f32 %525 = OpLoad %361 
                                         f32 %526 = OpFMul %524 %525 
                                                      OpStore %361 %526 
                                         f32 %527 = OpLoad %361 
                                         f32 %529 = OpExtInst %1 40 %527 %528 
                                                      OpStore %361 %529 
                                         f32 %531 = OpLoad %361 
                                         f32 %532 = OpFNegate %531 
                                         f32 %533 = OpFAdd %532 %66 
                                                      OpStore %530 %533 
                                         f32 %535 = OpLoad %165 
                                         f32 %536 = OpExtInst %1 4 %535 
                                         f32 %537 = OpLoad %530 
                                         f32 %538 = OpFMul %536 %537 
                                         f32 %539 = OpLoad %361 
                                         f32 %540 = OpFAdd %538 %539 
                                                      OpStore %534 %540 
                                Private f32* %541 = OpAccessChain %69 %29 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %530 
                                         f32 %544 = OpFMul %542 %543 
                                         f32 %545 = OpLoad %361 
                                         f32 %546 = OpFAdd %544 %545 
                                                      OpStore %48 %546 
                                         f32 %547 = OpLoad %48 
                                         f32 %548 = OpLoad %165 
                                         f32 %549 = OpExtInst %1 4 %548 
                                         f32 %550 = OpFMul %547 %549 
                                                      OpStore %48 %550 
                                Private f32* %551 = OpAccessChain %69 %29 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpLoad %534 
                                         f32 %554 = OpFMul %552 %553 
                                         f32 %555 = OpLoad %48 
                                         f32 %556 = OpFAdd %554 %555 
                                                      OpStore %48 %556 
                                         f32 %557 = OpLoad %48 
                                         f32 %559 = OpFAdd %557 %558 
                                                      OpStore %48 %559 
                                         f32 %561 = OpLoad %48 
                                         f32 %562 = OpFDiv %560 %561 
                                                      OpStore %48 %562 
                                         f32 %563 = OpLoad %361 
                                         f32 %564 = OpLoad %361 
                                         f32 %565 = OpFMul %563 %564 
                                                      OpStore %361 %565 
                                Private f32* %566 = OpAccessChain %40 %29 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpLoad %361 
                                         f32 %569 = OpFMul %567 %568 
                                Private f32* %570 = OpAccessChain %40 %29 
                                         f32 %571 = OpLoad %570 
                                         f32 %572 = OpFNegate %571 
                                         f32 %573 = OpFAdd %569 %572 
                                                      OpStore %534 %573 
                                         f32 %574 = OpLoad %534 
                                Private f32* %575 = OpAccessChain %40 %29 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFMul %574 %576 
                                         f32 %578 = OpFAdd %577 %66 
                                Private f32* %579 = OpAccessChain %40 %29 
                                                      OpStore %579 %578 
                                         f32 %580 = OpLoad %361 
                                         f32 %582 = OpFMul %580 %581 
                                                      OpStore %361 %582 
                                Private f32* %583 = OpAccessChain %40 %29 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %40 %29 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %584 %586 
                                         f32 %589 = OpFAdd %587 %588 
                                Private f32* %590 = OpAccessChain %40 %29 
                                                      OpStore %590 %589 
                                         f32 %591 = OpLoad %361 
                                Private f32* %592 = OpAccessChain %40 %29 
                                         f32 %593 = OpLoad %592 
                                         f32 %594 = OpFDiv %591 %593 
                                Private f32* %595 = OpAccessChain %9 %29 
                                                      OpStore %595 %594 
                                Private f32* %596 = OpAccessChain %9 %29 
                                         f32 %597 = OpLoad %596 
                                         f32 %598 = OpLoad %48 
                                         f32 %599 = OpFMul %597 %598 
                                Private f32* %600 = OpAccessChain %9 %29 
                                                      OpStore %600 %599 
                                Private f32* %601 = OpAccessChain %9 %29 
                                         f32 %602 = OpLoad %601 
                                         f32 %604 = OpFMul %602 %603 
                                Private f32* %605 = OpAccessChain %9 %29 
                                                      OpStore %605 %604 
                                Private f32* %606 = OpAccessChain %9 %29 
                                         f32 %607 = OpLoad %606 
                                         f32 %609 = OpExtInst %1 40 %607 %608 
                                Private f32* %610 = OpAccessChain %9 %29 
                                                      OpStore %610 %609 
                                Private f32* %611 = OpAccessChain %9 %29 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpExtInst %1 31 %612 
                                Private f32* %614 = OpAccessChain %9 %29 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %69 %29 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %9 %29 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %9 %29 
                                                      OpStore %620 %619 
                                       f32_4 %621 = OpLoad %342 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_4 %623 = OpLoad %342 
                                       f32_3 %624 = OpVectorShuffle %623 %623 0 1 2 
                                         f32 %625 = OpDot %622 %624 
                                Private f32* %626 = OpAccessChain %453 %29 
                                                      OpStore %626 %625 
                                Private f32* %628 = OpAccessChain %453 %29 
                                         f32 %629 = OpLoad %628 
                                        bool %630 = OpFOrdNotEqual %629 %195 
                                                      OpStore %627 %630 
                                        bool %632 = OpLoad %627 
                                                      OpSelectionMerge %634 None 
                                                      OpBranchConditional %632 %633 %635 
                                             %633 = OpLabel 
                                                      OpStore %631 %66 
                                                      OpBranch %634 
                                             %635 = OpLabel 
                                                      OpStore %631 %195 
                                                      OpBranch %634 
                                             %634 = OpLabel 
                                         f32 %636 = OpLoad %631 
                                                      OpStore %48 %636 
                                         f32 %637 = OpLoad %48 
                                Private f32* %638 = OpAccessChain %9 %29 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                Private f32* %641 = OpAccessChain %9 %29 
                                                      OpStore %641 %640 
                                         f32 %642 = OpLoad %518 
                                       f32_3 %643 = OpCompositeConstruct %642 %642 %642 
                                       f32_4 %644 = OpLoad %220 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                       f32_3 %646 = OpFMul %643 %645 
                                                      OpStore %453 %646 
                                       f32_4 %647 = OpLoad %220 
                                       f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                       f32_4 %649 = OpLoad %9 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 0 0 
                                       f32_3 %651 = OpFMul %648 %650 
                                       f32_4 %652 = OpLoad %9 
                                       f32_4 %653 = OpVectorShuffle %652 %651 4 1 5 6 
                                                      OpStore %9 %653 
                                Private f32* %654 = OpAccessChain %152 %29 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFNegate %655 
                                         f32 %657 = OpFAdd %656 %66 
                                                      OpStore %497 %657 
                                         f32 %659 = OpLoad %497 
                                         f32 %660 = OpLoad %497 
                                         f32 %661 = OpFMul %659 %660 
                                Private f32* %662 = OpAccessChain %658 %29 
                                                      OpStore %662 %661 
                                Private f32* %663 = OpAccessChain %658 %29 
                                         f32 %664 = OpLoad %663 
                                Private f32* %665 = OpAccessChain %658 %29 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFMul %664 %666 
                                Private f32* %668 = OpAccessChain %658 %29 
                                                      OpStore %668 %667 
                                         f32 %669 = OpLoad %497 
                                Private f32* %670 = OpAccessChain %658 %29 
                                         f32 %671 = OpLoad %670 
                                         f32 %672 = OpFMul %669 %671 
                                                      OpStore %497 %672 
                                       f32_4 %673 = OpLoad %342 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 2 
                                       f32_3 %675 = OpFNegate %674 
                                       f32_3 %677 = OpFAdd %675 %676 
                                                      OpStore %658 %677 
                                       f32_3 %678 = OpLoad %658 
                                         f32 %679 = OpLoad %497 
                                       f32_3 %680 = OpCompositeConstruct %679 %679 %679 
                                       f32_3 %681 = OpFMul %678 %680 
                                       f32_4 %682 = OpLoad %342 
                                       f32_3 %683 = OpVectorShuffle %682 %682 0 1 2 
                                       f32_3 %684 = OpFAdd %681 %683 
                                                      OpStore %658 %684 
                                       f32_4 %685 = OpLoad %9 
                                       f32_3 %686 = OpVectorShuffle %685 %685 0 2 3 
                                       f32_3 %687 = OpLoad %658 
                                       f32_3 %688 = OpFMul %686 %687 
                                       f32_4 %689 = OpLoad %9 
                                       f32_4 %690 = OpVectorShuffle %689 %688 4 5 6 3 
                                                      OpStore %9 %690 
                                       f32_3 %691 = OpLoad %336 
                                       f32_3 %692 = OpLoad %453 
                                       f32_3 %693 = OpFMul %691 %692 
                                       f32_4 %694 = OpLoad %9 
                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
                                       f32_3 %696 = OpFAdd %693 %695 
                                       f32_4 %697 = OpLoad %9 
                                       f32_4 %698 = OpVectorShuffle %697 %696 4 5 6 3 
                                                      OpStore %9 %698 
                                       f32_4 %701 = OpLoad %9 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 1 2 
                                       f32_4 %703 = OpLoad %700 
                                       f32_4 %704 = OpVectorShuffle %703 %702 4 5 6 3 
                                                      OpStore %700 %704 
                                 Output f32* %706 = OpAccessChain %700 %142 
                                                      OpStore %706 %66 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat16_5;
vec4 u_xlat10_5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = sqrt(u_xlat13);
    u_xlat19 = u_xlat19 * _LightPositionRange.w;
    u_xlat19 = u_xlat19 * _LightProjectionParams.w;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat6.xyz);
    u_xlatb19 = u_xlat10_3.x<u_xlat19;
    u_xlat19 = (u_xlatb19) ? _LightShadowData.x : 1.0;
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_3 = texture(_LightTexture0, u_xlat3.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_3.w;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_5.xyz;
    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat16_5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_12 = max(u_xlat16_12, 0.00200000009);
    u_xlat16_1 = u_xlat16_12 * u_xlat16_12;
    u_xlat7 = u_xlat18 * u_xlat16_1 + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-007;
    u_xlat16_1 = u_xlat16_1 * 0.318309873;
    u_xlat18 = u_xlat16_1 / u_xlat18;
    u_xlat16_1 = (-u_xlat16_12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat0.x * u_xlat16_1 + u_xlat16_12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-005);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat16_5.x + -0.5;
    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 673
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %666 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %284 DescriptorSet 284 
                                                      OpDecorate %284 Binding 284 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %346 DescriptorSet 346 
                                                      OpDecorate %346 Binding 346 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %396 DescriptorSet 396 
                                                      OpDecorate %396 Binding 396 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %565 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %573 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %660 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %666 RelaxedPrecision 
                                                      OpDecorate %666 Location 666 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypeVector %6 2 
                                              %38 = OpTypePointer Private %37 
                               Private f32_2* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %10 
                                 Input f32_4* %41 = OpVariable Input 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypeSampledImage %48 
                                              %50 = OpTypePointer UniformConstant %49 
  UniformConstant read_only Texture2DSampled* %51 = OpVariable UniformConstant 
                                          i32 %56 = OpConstant 2 
                                          u32 %61 = OpConstant 1 
                                          f32 %65 = OpConstant 3.674022E-40 
                                              %68 = OpTypePointer Private %10 
                               Private f32_4* %69 = OpVariable Private 
                               Private f32_3* %76 = OpVariable Private 
                                          i32 %79 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %10 
                                          i32 %85 = OpConstant 0 
                                         i32 %117 = OpConstant 7 
                                         u32 %140 = OpConstant 3 
                                         i32 %152 = OpConstant 6 
                                         f32 %162 = OpConstant 3.674022E-40 
                              Private f32_3* %165 = OpVariable Private 
                                         i32 %168 = OpConstant 8 
                                Private f32* %174 = OpVariable Private 
                                Private f32* %178 = OpVariable Private 
                                         i32 %182 = OpConstant 4 
                                         i32 %187 = OpConstant 5 
                                Private f32* %191 = OpVariable Private 
                                             %192 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %193 = OpTypeSampledImage %192 
                                             %194 = OpTypePointer UniformConstant %193 
UniformConstant read_only TextureCubeSampled* %195 = OpVariable UniformConstant 
                                             %200 = OpTypeBool 
                                             %201 = OpTypePointer Private %200 
                               Private bool* %202 = OpVariable Private 
                              Private f32_3* %206 = OpVariable Private 
                                             %207 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %234 = OpVariable UniformConstant 
                                         i32 %249 = OpConstant 10 
                                             %272 = OpTypePointer Uniform %7 
UniformConstant read_only TextureCubeSampled* %284 = OpVariable UniformConstant 
                                         f32 %287 = OpConstant 3.674022E-40 
                                         i32 %297 = OpConstant 9 
                              Private f32_3* %319 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                              Private f32_3* %345 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %346 = OpVariable UniformConstant 
                              Private f32_3* %351 = OpVariable Private 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_3 %354 = OpConstantComposite %353 %353 %353 
                                         f32 %356 = OpConstant 3.674022E-40 
                                       f32_3 %357 = OpConstantComposite %356 %356 %356 
                                Private f32* %359 = OpVariable Private 
                              Private f32_4* %395 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %396 = OpVariable UniformConstant 
                              Private f32_4* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %408 = OpVariable Private 
                                Private f32* %413 = OpVariable Private 
                                         f32 %418 = OpConstant 3.674022E-40 
                                Private f32* %420 = OpVariable Private 
                                         f32 %439 = OpConstant 3.674022E-40 
                                         f32 %442 = OpConstant 3.674022E-40 
                                Private f32* %458 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                         f32 %506 = OpConstant 3.674022E-40 
                              Private f32_3* %519 = OpVariable Private 
                               Private bool* %526 = OpVariable Private 
                                Private f32* %549 = OpVariable Private 
                              Private f32_3* %563 = OpVariable Private 
                                       f32_3 %567 = OpConstantComposite %65 %65 %65 
                                         f32 %612 = OpConstant 3.674022E-40 
                                Private f32* %626 = OpVariable Private 
                                             %665 = OpTypePointer Output %10 
                               Output f32_4* %666 = OpVariable Output 
                                             %670 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %208 = OpVariable Function 
                               Function f32* %530 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %41 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                                      OpStore %39 %46 
                   read_only Texture2DSampled %52 = OpLoad %51 
                                        f32_2 %53 = OpLoad %39 
                                        f32_4 %54 = OpImageSampleImplicitLod %52 %53 
                                          f32 %55 = OpCompositeExtract %54 0 
                                                      OpStore %47 %55 
                                 Uniform f32* %57 = OpAccessChain %17 %56 %30 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpFMul %58 %59 
                                 Uniform f32* %62 = OpAccessChain %17 %56 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %60 %63 
                                                      OpStore %47 %64 
                                          f32 %66 = OpLoad %47 
                                          f32 %67 = OpFDiv %65 %66 
                                                      OpStore %47 %67 
                                          f32 %70 = OpLoad %47 
                                        f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                        f32_3 %72 = OpLoad %9 
                                        f32_3 %73 = OpFMul %71 %72 
                                        f32_4 %74 = OpLoad %69 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %69 %75 
                                        f32_4 %77 = OpLoad %69 
                                        f32_3 %78 = OpVectorShuffle %77 %77 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %17 %79 %19 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %78 %83 
                                                      OpStore %76 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %79 %85 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_4 %89 = OpLoad %69 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_3 %92 = OpLoad %76 
                                        f32_3 %93 = OpFAdd %91 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 2 6 
                                                      OpStore %69 %95 
                               Uniform f32_4* %96 = OpAccessChain %17 %79 %56 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %69 
                                       f32_3 %100 = OpVectorShuffle %99 %99 2 2 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %69 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 3 
                                       f32_3 %104 = OpFAdd %101 %103 
                                       f32_4 %105 = OpLoad %69 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 2 6 
                                                      OpStore %69 %106 
                                       f32_4 %107 = OpLoad %69 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                              Uniform f32_4* %109 = OpAccessChain %17 %79 %79 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFAdd %108 %111 
                                       f32_4 %113 = OpLoad %69 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 6 
                                                      OpStore %69 %114 
                                       f32_4 %115 = OpLoad %69 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %17 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFNegate %120 
                                       f32_3 %122 = OpFAdd %116 %121 
                                                      OpStore %76 %122 
                                       f32_3 %123 = OpLoad %76 
                                       f32_3 %124 = OpLoad %76 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %9 %30 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %9 %30 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 31 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %20 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpLoad %47 
                                         f32 %135 = OpFMul %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFAdd %135 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %17 %117 %140 
                                         f32 %142 = OpLoad %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %142 %144 
                                Private f32* %146 = OpAccessChain %69 %20 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %153 = OpAccessChain %17 %152 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %151 %154 
                                Uniform f32* %156 = OpAccessChain %17 %152 %140 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %30 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpExtInst %1 43 %161 %162 %65 
                                Private f32* %164 = OpAccessChain %9 %30 
                                                      OpStore %164 %163 
                                       f32_4 %166 = OpLoad %69 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 3 
                              Uniform f32_4* %169 = OpAccessChain %17 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFNegate %171 
                                       f32_3 %173 = OpFAdd %167 %172 
                                                      OpStore %165 %173 
                                       f32_3 %175 = OpLoad %165 
                                       f32_3 %176 = OpLoad %165 
                                         f32 %177 = OpDot %175 %176 
                                                      OpStore %174 %177 
                                         f32 %179 = OpLoad %174 
                                         f32 %180 = OpExtInst %1 31 %179 
                                                      OpStore %178 %180 
                                         f32 %181 = OpLoad %178 
                                Uniform f32* %183 = OpAccessChain %17 %182 %140 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %181 %184 
                                                      OpStore %178 %185 
                                         f32 %186 = OpLoad %178 
                                Uniform f32* %188 = OpAccessChain %17 %187 %140 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %186 %189 
                                                      OpStore %178 %190 
                read_only TextureCubeSampled %196 = OpLoad %195 
                                       f32_3 %197 = OpLoad %165 
                                       f32_4 %198 = OpImageSampleImplicitLod %196 %197 
                                         f32 %199 = OpCompositeExtract %198 0 
                                                      OpStore %191 %199 
                                         f32 %203 = OpLoad %191 
                                         f32 %204 = OpLoad %178 
                                        bool %205 = OpFOrdLessThan %203 %204 
                                                      OpStore %202 %205 
                                        bool %209 = OpLoad %202 
                                                      OpSelectionMerge %211 None 
                                                      OpBranchConditional %209 %210 %214 
                                             %210 = OpLabel 
                                Uniform f32* %212 = OpAccessChain %17 %152 %30 
                                         f32 %213 = OpLoad %212 
                                                      OpStore %208 %213 
                                                      OpBranch %211 
                                             %214 = OpLabel 
                                                      OpStore %208 %65 
                                                      OpBranch %211 
                                             %211 = OpLabel 
                                         f32 %215 = OpLoad %208 
                                Private f32* %216 = OpAccessChain %206 %30 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %9 %30 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %206 %30 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFAdd %218 %220 
                                Private f32* %222 = OpAccessChain %206 %30 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %206 %30 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 43 %224 %162 %65 
                                Private f32* %226 = OpAccessChain %206 %30 
                                                      OpStore %226 %225 
                                         f32 %227 = OpLoad %174 
                                Uniform f32* %228 = OpAccessChain %17 %168 %140 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %9 %30 
                                                      OpStore %231 %230 
                                         f32 %232 = OpLoad %174 
                                         f32 %233 = OpExtInst %1 32 %232 
                                                      OpStore %174 %233 
                  read_only Texture2DSampled %235 = OpLoad %234 
                                       f32_3 %236 = OpLoad %9 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 0 
                                       f32_4 %238 = OpImageSampleImplicitLod %235 %237 
                                         f32 %239 = OpCompositeExtract %238 3 
                                Private f32* %240 = OpAccessChain %9 %30 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %206 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %9 %30 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %242 %244 
                                Private f32* %246 = OpAccessChain %9 %30 
                                                      OpStore %246 %245 
                                       f32_4 %247 = OpLoad %69 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %17 %249 %19 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %248 %252 
                                                      OpStore %76 %253 
                              Uniform f32_4* %254 = OpAccessChain %17 %249 %85 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_4 %257 = OpLoad %69 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %76 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %76 %261 
                              Uniform f32_4* %262 = OpAccessChain %17 %249 %56 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %69 
                                       f32_3 %266 = OpVectorShuffle %265 %265 3 3 3 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %76 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %76 %269 
                                       f32_4 %270 = OpLoad %69 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 3 
                              Uniform f32_3* %273 = OpAccessChain %17 %85 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpFNegate %274 
                                       f32_3 %276 = OpFAdd %271 %275 
                                       f32_4 %277 = OpLoad %69 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %69 %278 
                                       f32_3 %279 = OpLoad %76 
                              Uniform f32_4* %280 = OpAccessChain %17 %249 %79 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFAdd %279 %282 
                                                      OpStore %76 %283 
                read_only TextureCubeSampled %285 = OpLoad %284 
                                       f32_3 %286 = OpLoad %76 
                                       f32_4 %288 = OpImageSampleImplicitLod %285 %286 Bias %10 
                                         f32 %289 = OpCompositeExtract %288 3 
                                                      OpStore %178 %289 
                                Private f32* %290 = OpAccessChain %9 %30 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %178 
                                         f32 %293 = OpFMul %291 %292 
                                Private f32* %294 = OpAccessChain %9 %30 
                                                      OpStore %294 %293 
                                       f32_3 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                              Uniform f32_4* %298 = OpAccessChain %17 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %296 %300 
                                                      OpStore %76 %301 
                                       f32_4 %302 = OpLoad %69 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %69 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                         f32 %306 = OpDot %303 %305 
                                Private f32* %307 = OpAccessChain %9 %30 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %9 %30 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 32 %309 
                                Private f32* %311 = OpAccessChain %9 %30 
                                                      OpStore %311 %310 
                                       f32_3 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_4 %314 = OpLoad %69 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_4 %317 = OpLoad %69 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %69 %318 
                                       f32_3 %320 = OpLoad %165 
                                       f32_3 %321 = OpFNegate %320 
                                         f32 %322 = OpLoad %174 
                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %69 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFNegate %326 
                                       f32_3 %328 = OpFAdd %324 %327 
                                                      OpStore %319 %328 
                                       f32_3 %329 = OpLoad %165 
                                         f32 %330 = OpLoad %174 
                                       f32_3 %331 = OpCompositeConstruct %330 %330 %330 
                                       f32_3 %332 = OpFMul %329 %331 
                                                      OpStore %9 %332 
                                       f32_3 %333 = OpLoad %319 
                                       f32_3 %334 = OpLoad %319 
                                         f32 %335 = OpDot %333 %334 
                                                      OpStore %47 %335 
                                         f32 %336 = OpLoad %47 
                                         f32 %338 = OpExtInst %1 40 %336 %337 
                                                      OpStore %47 %338 
                                         f32 %339 = OpLoad %47 
                                         f32 %340 = OpExtInst %1 32 %339 
                                                      OpStore %47 %340 
                                         f32 %341 = OpLoad %47 
                                       f32_3 %342 = OpCompositeConstruct %341 %341 %341 
                                       f32_3 %343 = OpLoad %319 
                                       f32_3 %344 = OpFMul %342 %343 
                                                      OpStore %319 %344 
                  read_only Texture2DSampled %347 = OpLoad %346 
                                       f32_2 %348 = OpLoad %39 
                                       f32_4 %349 = OpImageSampleImplicitLod %347 %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                                      OpStore %345 %350 
                                       f32_3 %352 = OpLoad %345 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %358 = OpFAdd %355 %357 
                                                      OpStore %351 %358 
                                       f32_3 %360 = OpLoad %351 
                                       f32_3 %361 = OpLoad %351 
                                         f32 %362 = OpDot %360 %361 
                                                      OpStore %359 %362 
                                         f32 %363 = OpLoad %359 
                                         f32 %364 = OpExtInst %1 32 %363 
                                                      OpStore %359 %364 
                                         f32 %365 = OpLoad %359 
                                       f32_3 %366 = OpCompositeConstruct %365 %365 %365 
                                       f32_3 %367 = OpLoad %351 
                                       f32_3 %368 = OpFMul %366 %367 
                                                      OpStore %351 %368 
                                       f32_3 %369 = OpLoad %351 
                                       f32_3 %370 = OpLoad %319 
                                         f32 %371 = OpDot %369 %370 
                                                      OpStore %47 %371 
                                         f32 %372 = OpLoad %47 
                                         f32 %373 = OpExtInst %1 43 %372 %162 %65 
                                                      OpStore %47 %373 
                                       f32_3 %374 = OpLoad %9 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_3 %376 = OpLoad %319 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %174 %377 
                                         f32 %378 = OpLoad %174 
                                         f32 %379 = OpExtInst %1 43 %378 %162 %65 
                                                      OpStore %174 %379 
                                       f32_3 %380 = OpLoad %351 
                                       f32_3 %381 = OpLoad %9 
                                       f32_3 %382 = OpFNegate %381 
                                         f32 %383 = OpDot %380 %382 
                                Private f32* %384 = OpAccessChain %9 %30 
                                                      OpStore %384 %383 
                                Private f32* %385 = OpAccessChain %9 %30 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpExtInst %1 43 %386 %162 %65 
                                Private f32* %388 = OpAccessChain %9 %30 
                                                      OpStore %388 %387 
                                       f32_3 %389 = OpLoad %351 
                                       f32_4 %390 = OpLoad %69 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFNegate %391 
                                         f32 %393 = OpDot %389 %392 
                                Private f32* %394 = OpAccessChain %165 %30 
                                                      OpStore %394 %393 
                  read_only Texture2DSampled %397 = OpLoad %396 
                                       f32_2 %398 = OpLoad %39 
                                       f32_4 %399 = OpImageSampleImplicitLod %397 %398 
                                                      OpStore %395 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_2 %403 = OpLoad %39 
                                       f32_4 %404 = OpImageSampleImplicitLod %402 %403 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_4 %406 = OpLoad %400 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 2 6 
                                                      OpStore %400 %407 
                                Private f32* %409 = OpAccessChain %395 %140 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFNegate %410 
                                         f32 %412 = OpFAdd %411 %65 
                                                      OpStore %408 %412 
                                         f32 %414 = OpLoad %408 
                                         f32 %415 = OpLoad %408 
                                         f32 %416 = OpFMul %414 %415 
                                                      OpStore %413 %416 
                                         f32 %417 = OpLoad %413 
                                         f32 %419 = OpExtInst %1 40 %417 %418 
                                                      OpStore %413 %419 
                                         f32 %421 = OpLoad %413 
                                         f32 %422 = OpLoad %413 
                                         f32 %423 = OpFMul %421 %422 
                                                      OpStore %420 %423 
                                         f32 %424 = OpLoad %47 
                                         f32 %425 = OpLoad %420 
                                         f32 %426 = OpFMul %424 %425 
                                         f32 %427 = OpLoad %47 
                                         f32 %428 = OpFNegate %427 
                                         f32 %429 = OpFAdd %426 %428 
                                Private f32* %430 = OpAccessChain %319 %30 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %319 %30 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpLoad %47 
                                         f32 %434 = OpFMul %432 %433 
                                         f32 %435 = OpFAdd %434 %65 
                                                      OpStore %47 %435 
                                         f32 %436 = OpLoad %47 
                                         f32 %437 = OpLoad %47 
                                         f32 %438 = OpFMul %436 %437 
                                         f32 %440 = OpFAdd %438 %439 
                                                      OpStore %47 %440 
                                         f32 %441 = OpLoad %420 
                                         f32 %443 = OpFMul %441 %442 
                                                      OpStore %420 %443 
                                         f32 %444 = OpLoad %420 
                                         f32 %445 = OpLoad %47 
                                         f32 %446 = OpFDiv %444 %445 
                                                      OpStore %47 %446 
                                         f32 %447 = OpLoad %413 
                                         f32 %448 = OpFNegate %447 
                                         f32 %449 = OpFAdd %448 %65 
                                                      OpStore %420 %449 
                                Private f32* %450 = OpAccessChain %165 %30 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpExtInst %1 4 %451 
                                         f32 %453 = OpLoad %420 
                                         f32 %454 = OpFMul %452 %453 
                                         f32 %455 = OpLoad %413 
                                         f32 %456 = OpFAdd %454 %455 
                                Private f32* %457 = OpAccessChain %319 %30 
                                                      OpStore %457 %456 
                                Private f32* %459 = OpAccessChain %9 %30 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpLoad %420 
                                         f32 %462 = OpFMul %460 %461 
                                         f32 %463 = OpLoad %413 
                                         f32 %464 = OpFAdd %462 %463 
                                                      OpStore %458 %464 
                                Private f32* %465 = OpAccessChain %165 %30 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpExtInst %1 4 %466 
                                         f32 %468 = OpLoad %458 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %458 %469 
                                Private f32* %470 = OpAccessChain %165 %30 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 4 %471 
                                         f32 %473 = OpFNegate %472 
                                         f32 %474 = OpFAdd %473 %65 
                                Private f32* %475 = OpAccessChain %206 %30 
                                                      OpStore %475 %474 
                                Private f32* %476 = OpAccessChain %9 %30 
                                         f32 %477 = OpLoad %476 
                                Private f32* %478 = OpAccessChain %319 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                         f32 %481 = OpLoad %458 
                                         f32 %482 = OpFAdd %480 %481 
                                Private f32* %483 = OpAccessChain %165 %30 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %165 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %487 = OpFAdd %485 %486 
                                Private f32* %488 = OpAccessChain %165 %30 
                                                      OpStore %488 %487 
                                Private f32* %490 = OpAccessChain %165 %30 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFDiv %489 %491 
                                Private f32* %493 = OpAccessChain %165 %30 
                                                      OpStore %493 %492 
                                         f32 %494 = OpLoad %47 
                                Private f32* %495 = OpAccessChain %165 %30 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Private f32* %498 = OpAccessChain %165 %30 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %165 %30 
                                         f32 %500 = OpLoad %499 
                                         f32 %502 = OpFMul %500 %501 
                                Private f32* %503 = OpAccessChain %165 %30 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %165 %30 
                                         f32 %505 = OpLoad %504 
                                         f32 %507 = OpExtInst %1 40 %505 %506 
                                Private f32* %508 = OpAccessChain %165 %30 
                                                      OpStore %508 %507 
                                Private f32* %509 = OpAccessChain %165 %30 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpExtInst %1 31 %510 
                                Private f32* %512 = OpAccessChain %165 %30 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %30 
                                         f32 %514 = OpLoad %513 
                                Private f32* %515 = OpAccessChain %165 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %165 %30 
                                                      OpStore %518 %517 
                                       f32_4 %520 = OpLoad %395 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                       f32_4 %522 = OpLoad %395 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                         f32 %524 = OpDot %521 %523 
                                Private f32* %525 = OpAccessChain %519 %30 
                                                      OpStore %525 %524 
                                Private f32* %527 = OpAccessChain %519 %30 
                                         f32 %528 = OpLoad %527 
                                        bool %529 = OpFOrdNotEqual %528 %162 
                                                      OpStore %526 %529 
                                        bool %531 = OpLoad %526 
                                                      OpSelectionMerge %533 None 
                                                      OpBranchConditional %531 %532 %534 
                                             %532 = OpLabel 
                                                      OpStore %530 %65 
                                                      OpBranch %533 
                                             %534 = OpLabel 
                                                      OpStore %530 %162 
                                                      OpBranch %533 
                                             %533 = OpLabel 
                                         f32 %535 = OpLoad %530 
                                                      OpStore %47 %535 
                                         f32 %536 = OpLoad %47 
                                Private f32* %537 = OpAccessChain %165 %30 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFMul %536 %538 
                                Private f32* %540 = OpAccessChain %165 %30 
                                                      OpStore %540 %539 
                                       f32_3 %541 = OpLoad %76 
                                       f32_3 %542 = OpLoad %165 
                                       f32_3 %543 = OpVectorShuffle %542 %542 0 0 0 
                                       f32_3 %544 = OpFMul %541 %543 
                                                      OpStore %319 %544 
                                         f32 %545 = OpLoad %174 
                                         f32 %546 = OpFNegate %545 
                                         f32 %547 = OpFAdd %546 %65 
                                Private f32* %548 = OpAccessChain %519 %30 
                                                      OpStore %548 %547 
                                Private f32* %550 = OpAccessChain %519 %30 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %519 %30 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                                      OpStore %549 %554 
                                         f32 %555 = OpLoad %549 
                                         f32 %556 = OpLoad %549 
                                         f32 %557 = OpFMul %555 %556 
                                                      OpStore %549 %557 
                                Private f32* %558 = OpAccessChain %519 %30 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpLoad %549 
                                         f32 %561 = OpFMul %559 %560 
                                Private f32* %562 = OpAccessChain %519 %30 
                                                      OpStore %562 %561 
                                       f32_4 %564 = OpLoad %395 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %568 = OpFAdd %566 %567 
                                                      OpStore %563 %568 
                                       f32_3 %569 = OpLoad %563 
                                       f32_3 %570 = OpLoad %519 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 0 0 
                                       f32_3 %572 = OpFMul %569 %571 
                                       f32_4 %573 = OpLoad %395 
                                       f32_3 %574 = OpVectorShuffle %573 %573 0 1 2 
                                       f32_3 %575 = OpFAdd %572 %574 
                                                      OpStore %519 %575 
                                       f32_3 %576 = OpLoad %519 
                                       f32_3 %577 = OpLoad %319 
                                       f32_3 %578 = OpFMul %576 %577 
                                       f32_4 %579 = OpLoad %69 
                                       f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                                      OpStore %69 %580 
                                Private f32* %581 = OpAccessChain %206 %30 
                                         f32 %582 = OpLoad %581 
                                Private f32* %583 = OpAccessChain %206 %30 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                Private f32* %586 = OpAccessChain %519 %30 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %519 %30 
                                         f32 %588 = OpLoad %587 
                                Private f32* %589 = OpAccessChain %519 %30 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFMul %588 %590 
                                Private f32* %592 = OpAccessChain %519 %30 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %206 %30 
                                         f32 %594 = OpLoad %593 
                                Private f32* %595 = OpAccessChain %519 %30 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFMul %594 %596 
                                Private f32* %598 = OpAccessChain %206 %30 
                                                      OpStore %598 %597 
                                         f32 %599 = OpLoad %174 
                                         f32 %600 = OpLoad %174 
                                         f32 %601 = OpFAdd %599 %600 
                                Private f32* %602 = OpAccessChain %519 %30 
                                                      OpStore %602 %601 
                                         f32 %603 = OpLoad %174 
                                Private f32* %604 = OpAccessChain %519 %30 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFMul %603 %605 
                                Private f32* %607 = OpAccessChain %519 %30 
                                                      OpStore %607 %606 
                                Private f32* %608 = OpAccessChain %519 %30 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpLoad %408 
                                         f32 %611 = OpFMul %609 %610 
                                         f32 %613 = OpFAdd %611 %612 
                                Private f32* %614 = OpAccessChain %519 %30 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %519 %30 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %206 %30 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                         f32 %620 = OpFAdd %619 %65 
                                Private f32* %621 = OpAccessChain %206 %30 
                                                      OpStore %621 %620 
                                Private f32* %622 = OpAccessChain %9 %30 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFNegate %623 
                                         f32 %625 = OpFAdd %624 %65 
                                                      OpStore %549 %625 
                                         f32 %627 = OpLoad %549 
                                         f32 %628 = OpLoad %549 
                                         f32 %629 = OpFMul %627 %628 
                                                      OpStore %626 %629 
                                         f32 %630 = OpLoad %626 
                                         f32 %631 = OpLoad %626 
                                         f32 %632 = OpFMul %630 %631 
                                                      OpStore %626 %632 
                                         f32 %633 = OpLoad %549 
                                         f32 %634 = OpLoad %626 
                                         f32 %635 = OpFMul %633 %634 
                                                      OpStore %549 %635 
                                Private f32* %636 = OpAccessChain %519 %30 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpLoad %549 
                                         f32 %639 = OpFMul %637 %638 
                                         f32 %640 = OpFAdd %639 %65 
                                Private f32* %641 = OpAccessChain %519 %30 
                                                      OpStore %641 %640 
                                Private f32* %642 = OpAccessChain %206 %30 
                                         f32 %643 = OpLoad %642 
                                Private f32* %644 = OpAccessChain %519 %30 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFMul %643 %645 
                                Private f32* %647 = OpAccessChain %206 %30 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %9 %30 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %206 %30 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                Private f32* %653 = OpAccessChain %9 %30 
                                                      OpStore %653 %652 
                                       f32_3 %654 = OpLoad %9 
                                       f32_3 %655 = OpVectorShuffle %654 %654 0 0 0 
                                       f32_3 %656 = OpLoad %76 
                                       f32_3 %657 = OpFMul %655 %656 
                                                      OpStore %206 %657 
                                       f32_4 %658 = OpLoad %400 
                                       f32_3 %659 = OpVectorShuffle %658 %658 0 1 3 
                                       f32_3 %660 = OpLoad %206 
                                       f32_3 %661 = OpFMul %659 %660 
                                       f32_4 %662 = OpLoad %69 
                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
                                       f32_3 %664 = OpFAdd %661 %663 
                                                      OpStore %9 %664 
                                       f32_3 %667 = OpLoad %9 
                                       f32_4 %668 = OpLoad %666 
                                       f32_4 %669 = OpVectorShuffle %668 %667 4 5 6 3 
                                                      OpStore %666 %669 
                                 Output f32* %671 = OpAccessChain %666 %140 
                                                      OpStore %671 %65 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
float u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat16_7;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat16_10;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat20 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat20));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb20 = u_xlat0.x<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat19 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat19 = 1.0;
    //ENDIF
    }
    u_xlat0.x = u_xlat0.x + u_xlat19;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_0 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_0 = inversesqrt(u_xlat16_0);
    u_xlat16_1.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat16_7 = (-u_xlat10_6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat9.xyz) * vec3(u_xlat28) + (-u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat16_1.xyz, (-u_xlat3.xyz));
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, u_xlat16_7.xx);
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat28) + 1.0;
    u_xlat10 = u_xlat18 * u_xlat18;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat18 = u_xlat18 * u_xlat10;
    u_xlat18 = u_xlat9.x * u_xlat18 + 1.0;
    u_xlat10 = -abs(u_xlat27) + 1.0;
    u_xlat19 = u_xlat10 * u_xlat10;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat10 = u_xlat10 * u_xlat19;
    u_xlat9.x = u_xlat9.x * u_xlat10 + 1.0;
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat16_18 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_18 = max(u_xlat16_18, 0.00200000009);
    u_xlat16_10 = (-u_xlat16_18) + 1.0;
    u_xlat19 = abs(u_xlat27) * u_xlat16_10 + u_xlat16_18;
    u_xlat10 = u_xlat28 * u_xlat16_10 + u_xlat16_18;
    u_xlat27 = abs(u_xlat27) * u_xlat10;
    u_xlat27 = u_xlat28 * u_xlat19 + u_xlat27;
    u_xlat27 = u_xlat27 + 9.99999975e-006;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
    u_xlat10 = u_xlat1.x * u_xlat16_18 + (-u_xlat1.x);
    u_xlat1.x = u_xlat10 * u_xlat1.x + 1.0;
    u_xlat16_18 = u_xlat16_18 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-007;
    u_xlat18 = u_xlat16_18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-005);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = vec2(u_xlat28) * u_xlat9.xy;
    u_xlat27 = dot(u_xlat10_6.xyz, u_xlat10_6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * vec3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat28 = u_xlat0.x * u_xlat0.x;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat0.x = u_xlat0.x * u_xlat28;
    u_xlat2.xyz = u_xlat16_7.yzw * u_xlat0.xxx + u_xlat10_6.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 760
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %752 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %367 DescriptorSet 367 
                                                      OpDecorate %367 Binding 367 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %395 DescriptorSet 395 
                                                      OpDecorate %395 Binding 395 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %400 DescriptorSet 400 
                                                      OpDecorate %400 Binding 400 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %534 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %544 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %555 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %617 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %723 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %735 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %752 Location 752 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %58 = OpConstant 2 
                                          u32 %63 = OpConstant 1 
                                          f32 %67 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                                              %78 = OpTypePointer Private %10 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %82 = OpConstant 3 
                                              %83 = OpTypePointer Uniform %7 
                                          i32 %88 = OpConstant 0 
                                         i32 %120 = OpConstant 7 
                                         u32 %143 = OpConstant 3 
                              Private f32_3* %153 = OpVariable Private 
                                         i32 %156 = OpConstant 8 
                                Private f32* %162 = OpVariable Private 
                                Private f32* %166 = OpVariable Private 
                                Private f32* %173 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %178 = OpVariable UniformConstant 
                                         i32 %186 = OpConstant 6 
                                         f32 %196 = OpConstant 3.674022E-40 
                                             %199 = OpTypeBool 
                                             %200 = OpTypePointer Private %199 
                               Private bool* %201 = OpVariable Private 
                                         f32 %204 = OpConstant 3.674022E-40 
                                         i32 %212 = OpConstant 4 
                                         i32 %217 = OpConstant 5 
                              Private f32_4* %221 = OpVariable Private 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_3 %224 = OpConstantComposite %223 %223 %223 
                                             %228 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %229 = OpTypeSampledImage %228 
                                             %230 = OpTypePointer UniformConstant %229 
UniformConstant read_only TextureCubeSampled* %231 = OpVariable UniformConstant 
                              Private f32_3* %238 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %223 
                                       f32_3 %249 = OpConstantComposite %240 %223 %240 
                                       f32_3 %257 = OpConstantComposite %223 %240 %240 
                                             %264 = OpTypeVector %199 4 
                                             %265 = OpTypePointer Private %264 
                             Private bool_4* %266 = OpVariable Private 
                                             %271 = OpTypePointer Function %6 
                                Private f32* %312 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                       f32_4 %315 = OpConstantComposite %314 %314 %314 %314 
                                         i32 %330 = OpConstant 10 
UniformConstant read_only TextureCubeSampled* %367 = OpVariable UniformConstant 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         i32 %381 = OpConstant 9 
                              Private f32_3* %388 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %389 = OpVariable UniformConstant 
                              Private f32_4* %394 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %395 = OpVariable UniformConstant 
                              Private f32_3* %399 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %400 = OpVariable UniformConstant 
                              Private f32_3* %405 = OpVariable Private 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_3 %408 = OpConstantComposite %407 %407 %407 
                                         f32 %410 = OpConstant 3.674022E-40 
                                       f32_3 %411 = OpConstantComposite %410 %410 %410 
                                Private f32* %413 = OpVariable Private 
                                             %425 = OpTypePointer Uniform %10 
                                         f32 %466 = OpConstant 3.674022E-40 
                              Private f32_3* %505 = OpVariable Private 
                                         f32 %522 = OpConstant 3.674022E-40 
                                Private f32* %525 = OpVariable Private 
                                Private f32* %530 = OpVariable Private 
                                Private f32* %549 = OpVariable Private 
                                Private f32* %570 = OpVariable Private 
                                         f32 %580 = OpConstant 3.674022E-40 
                                Private f32* %582 = OpVariable Private 
                                Private f32* %586 = OpVariable Private 
                                         f32 %610 = OpConstant 3.674022E-40 
                                         f32 %612 = OpConstant 3.674022E-40 
                                         f32 %633 = OpConstant 3.674022E-40 
                                         f32 %640 = OpConstant 3.674022E-40 
                                         f32 %655 = OpConstant 3.674022E-40 
                                         f32 %660 = OpConstant 3.674022E-40 
                               Private bool* %679 = OpVariable Private 
                              Private f32_3* %710 = OpVariable Private 
                                       f32_3 %728 = OpConstantComposite %67 %67 %67 
                                             %751 = OpTypePointer Output %7 
                               Output f32_4* %752 = OpVariable Output 
                                             %757 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %272 = OpVariable Function 
                               Function f32* %282 = OpVariable Function 
                               Function f32* %292 = OpVariable Function 
                               Function f32* %302 = OpVariable Function 
                               Function f32* %683 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad %43 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_2 %55 = OpLoad %41 
                                        f32_4 %56 = OpImageSampleImplicitLod %54 %55 
                                          f32 %57 = OpCompositeExtract %56 0 
                                                      OpStore %49 %57 
                                 Uniform f32* %59 = OpAccessChain %17 %58 %30 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpLoad %49 
                                          f32 %62 = OpFMul %60 %61 
                                 Uniform f32* %64 = OpAccessChain %17 %58 %63 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %62 %65 
                                                      OpStore %49 %66 
                                          f32 %68 = OpLoad %49 
                                          f32 %69 = OpFDiv %67 %68 
                                                      OpStore %49 %69 
                                          f32 %71 = OpLoad %49 
                                        f32_3 %72 = OpCompositeConstruct %71 %71 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %70 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
                                                      OpStore %70 %77 
                                        f32_4 %80 = OpLoad %70 
                                        f32_3 %81 = OpVectorShuffle %80 %80 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %17 %82 %19 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %81 %86 
                                                      OpStore %79 %87 
                               Uniform f32_4* %89 = OpAccessChain %17 %82 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %70 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_3 %95 = OpLoad %79 
                                        f32_3 %96 = OpFAdd %94 %95 
                                        f32_4 %97 = OpLoad %70 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 2 6 
                                                      OpStore %70 %98 
                               Uniform f32_4* %99 = OpAccessChain %17 %82 %58 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %102 = OpLoad %70 
                                       f32_3 %103 = OpVectorShuffle %102 %102 2 2 2 
                                       f32_3 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %70 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 3 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %70 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 6 
                                                      OpStore %70 %109 
                                       f32_4 %110 = OpLoad %70 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 3 
                              Uniform f32_4* %112 = OpAccessChain %17 %82 %82 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFAdd %111 %114 
                                       f32_4 %116 = OpLoad %70 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 2 6 
                                                      OpStore %70 %117 
                                       f32_4 %118 = OpLoad %70 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %17 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %119 %124 
                                                      OpStore %79 %125 
                                       f32_3 %126 = OpLoad %79 
                                       f32_3 %127 = OpLoad %79 
                                         f32 %128 = OpDot %126 %127 
                                Private f32* %129 = OpAccessChain %9 %30 
                                                      OpStore %129 %128 
                                Private f32* %130 = OpAccessChain %9 %30 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpExtInst %1 31 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %20 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFNegate %135 
                                         f32 %137 = OpLoad %49 
                                         f32 %138 = OpFMul %136 %137 
                                Private f32* %139 = OpAccessChain %9 %30 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFAdd %138 %140 
                                Private f32* %142 = OpAccessChain %9 %30 
                                                      OpStore %142 %141 
                                Uniform f32* %144 = OpAccessChain %17 %120 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %145 %147 
                                Private f32* %149 = OpAccessChain %70 %20 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %30 
                                                      OpStore %152 %151 
                                       f32_4 %154 = OpLoad %70 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                              Uniform f32_4* %157 = OpAccessChain %17 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %155 %160 
                                                      OpStore %153 %161 
                                       f32_3 %163 = OpLoad %153 
                                       f32_3 %164 = OpLoad %153 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %162 %165 
                                         f32 %167 = OpLoad %162 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                       f32_3 %169 = OpLoad %153 
                                         f32 %170 = OpLoad %166 
                                       f32_3 %171 = OpCompositeConstruct %170 %170 %170 
                                       f32_3 %172 = OpFMul %169 %171 
                                                      OpStore %79 %172 
                                         f32 %174 = OpLoad %162 
                                Uniform f32* %175 = OpAccessChain %17 %156 %143 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                                      OpStore %173 %177 
                  read_only Texture2DSampled %179 = OpLoad %178 
                                         f32 %180 = OpLoad %173 
                                       f32_2 %181 = OpCompositeConstruct %180 %180 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                         f32 %183 = OpCompositeExtract %182 3 
                                                      OpStore %173 %183 
                                Private f32* %184 = OpAccessChain %9 %30 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %17 %186 %20 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %185 %188 
                                Uniform f32* %190 = OpAccessChain %17 %186 %143 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                Private f32* %193 = OpAccessChain %9 %30 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %9 %30 
                                         f32 %195 = OpLoad %194 
                                         f32 %197 = OpExtInst %1 43 %195 %196 %67 
                                Private f32* %198 = OpAccessChain %9 %30 
                                                      OpStore %198 %197 
                                Private f32* %202 = OpAccessChain %9 %30 
                                         f32 %203 = OpLoad %202 
                                        bool %205 = OpFOrdLessThan %203 %204 
                                                      OpStore %201 %205 
                                        bool %206 = OpLoad %201 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %317 
                                             %207 = OpLabel 
                                         f32 %209 = OpLoad %162 
                                         f32 %210 = OpExtInst %1 31 %209 
                                                      OpStore %162 %210 
                                         f32 %211 = OpLoad %162 
                                Uniform f32* %213 = OpAccessChain %17 %212 %143 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %211 %214 
                                                      OpStore %162 %215 
                                         f32 %216 = OpLoad %162 
                                Uniform f32* %218 = OpAccessChain %17 %217 %143 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %162 %220 
                                       f32_3 %222 = OpLoad %153 
                                       f32_3 %225 = OpFAdd %222 %224 
                                       f32_4 %226 = OpLoad %221 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %221 %227 
                read_only TextureCubeSampled %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpImageSampleExplicitLod %232 %234 Lod %7 
                                         f32 %236 = OpCompositeExtract %235 0 
                                Private f32* %237 = OpAccessChain %221 %30 
                                                      OpStore %237 %236 
                                       f32_3 %239 = OpLoad %153 
                                       f32_3 %242 = OpFAdd %239 %241 
                                                      OpStore %238 %242 
                read_only TextureCubeSampled %243 = OpLoad %231 
                                       f32_3 %244 = OpLoad %238 
                                       f32_4 %245 = OpImageSampleExplicitLod %243 %244 Lod %7 
                                         f32 %246 = OpCompositeExtract %245 0 
                                Private f32* %247 = OpAccessChain %221 %63 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %153 
                                       f32_3 %250 = OpFAdd %248 %249 
                                                      OpStore %238 %250 
                read_only TextureCubeSampled %251 = OpLoad %231 
                                       f32_3 %252 = OpLoad %238 
                                       f32_4 %253 = OpImageSampleExplicitLod %251 %252 Lod %7 
                                         f32 %254 = OpCompositeExtract %253 0 
                                Private f32* %255 = OpAccessChain %221 %20 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %153 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %238 %258 
                read_only TextureCubeSampled %259 = OpLoad %231 
                                       f32_3 %260 = OpLoad %238 
                                       f32_4 %261 = OpImageSampleExplicitLod %259 %260 Lod %7 
                                         f32 %262 = OpCompositeExtract %261 0 
                                Private f32* %263 = OpAccessChain %221 %143 
                                                      OpStore %263 %262 
                                       f32_4 %267 = OpLoad %221 
                                         f32 %268 = OpLoad %162 
                                       f32_4 %269 = OpCompositeConstruct %268 %268 %268 %268 
                                      bool_4 %270 = OpFOrdLessThan %267 %269 
                                                      OpStore %266 %270 
                                      bool_4 %273 = OpLoad %266 
                                        bool %274 = OpCompositeExtract %273 0 
                                                      OpSelectionMerge %276 None 
                                                      OpBranchConditional %274 %275 %279 
                                             %275 = OpLabel 
                                Uniform f32* %277 = OpAccessChain %17 %186 %30 
                                         f32 %278 = OpLoad %277 
                                                      OpStore %272 %278 
                                                      OpBranch %276 
                                             %279 = OpLabel 
                                                      OpStore %272 %67 
                                                      OpBranch %276 
                                             %276 = OpLabel 
                                         f32 %280 = OpLoad %272 
                                Private f32* %281 = OpAccessChain %221 %30 
                                                      OpStore %281 %280 
                                      bool_4 %283 = OpLoad %266 
                                        bool %284 = OpCompositeExtract %283 1 
                                                      OpSelectionMerge %286 None 
                                                      OpBranchConditional %284 %285 %289 
                                             %285 = OpLabel 
                                Uniform f32* %287 = OpAccessChain %17 %186 %30 
                                         f32 %288 = OpLoad %287 
                                                      OpStore %282 %288 
                                                      OpBranch %286 
                                             %289 = OpLabel 
                                                      OpStore %282 %67 
                                                      OpBranch %286 
                                             %286 = OpLabel 
                                         f32 %290 = OpLoad %282 
                                Private f32* %291 = OpAccessChain %221 %63 
                                                      OpStore %291 %290 
                                      bool_4 %293 = OpLoad %266 
                                        bool %294 = OpCompositeExtract %293 2 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %294 %295 %299 
                                             %295 = OpLabel 
                                Uniform f32* %297 = OpAccessChain %17 %186 %30 
                                         f32 %298 = OpLoad %297 
                                                      OpStore %292 %298 
                                                      OpBranch %296 
                                             %299 = OpLabel 
                                                      OpStore %292 %67 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                         f32 %300 = OpLoad %292 
                                Private f32* %301 = OpAccessChain %221 %20 
                                                      OpStore %301 %300 
                                      bool_4 %303 = OpLoad %266 
                                        bool %304 = OpCompositeExtract %303 3 
                                                      OpSelectionMerge %306 None 
                                                      OpBranchConditional %304 %305 %309 
                                             %305 = OpLabel 
                                Uniform f32* %307 = OpAccessChain %17 %186 %30 
                                         f32 %308 = OpLoad %307 
                                                      OpStore %302 %308 
                                                      OpBranch %306 
                                             %309 = OpLabel 
                                                      OpStore %302 %67 
                                                      OpBranch %306 
                                             %306 = OpLabel 
                                         f32 %310 = OpLoad %302 
                                Private f32* %311 = OpAccessChain %221 %143 
                                                      OpStore %311 %310 
                                       f32_4 %313 = OpLoad %221 
                                         f32 %316 = OpDot %313 %315 
                                                      OpStore %312 %316 
                                                      OpBranch %208 
                                             %317 = OpLabel 
                                                      OpStore %312 %67 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                Private f32* %318 = OpAccessChain %9 %30 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpLoad %312 
                                         f32 %321 = OpFAdd %319 %320 
                                                      OpStore %312 %321 
                                         f32 %322 = OpLoad %312 
                                         f32 %323 = OpExtInst %1 43 %322 %196 %67 
                                                      OpStore %312 %323 
                                         f32 %324 = OpLoad %173 
                                         f32 %325 = OpLoad %312 
                                         f32 %326 = OpFMul %324 %325 
                                Private f32* %327 = OpAccessChain %9 %30 
                                                      OpStore %327 %326 
                                       f32_4 %328 = OpLoad %70 
                                       f32_3 %329 = OpVectorShuffle %328 %328 1 1 1 
                              Uniform f32_4* %331 = OpAccessChain %17 %330 %19 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFMul %329 %333 
                                       f32_4 %335 = OpLoad %221 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %221 %336 
                              Uniform f32_4* %337 = OpAccessChain %17 %330 %88 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %70 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 0 0 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %221 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                       f32_4 %346 = OpLoad %221 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %221 %347 
                              Uniform f32_4* %348 = OpAccessChain %17 %330 %58 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %70 
                                       f32_3 %352 = OpVectorShuffle %351 %351 3 3 3 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %221 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %221 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %221 %358 
                                       f32_4 %359 = OpLoad %221 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                              Uniform f32_4* %361 = OpAccessChain %17 %330 %82 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %360 %363 
                                       f32_4 %365 = OpLoad %221 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %221 %366 
                read_only TextureCubeSampled %368 = OpLoad %367 
                                       f32_4 %369 = OpLoad %221 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %372 = OpImageSampleImplicitLod %368 %370 Bias %7 
                                         f32 %373 = OpCompositeExtract %372 3 
                                                      OpStore %162 %373 
                                Private f32* %374 = OpAccessChain %9 %30 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpLoad %162 
                                         f32 %377 = OpFMul %375 %376 
                                Private f32* %378 = OpAccessChain %9 %30 
                                                      OpStore %378 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 0 0 
                              Uniform f32_4* %382 = OpAccessChain %17 %381 
                                       f32_4 %383 = OpLoad %382 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFMul %380 %384 
                                       f32_4 %386 = OpLoad %221 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %221 %387 
                  read_only Texture2DSampled %390 = OpLoad %389 
                                       f32_2 %391 = OpLoad %41 
                                       f32_4 %392 = OpImageSampleImplicitLod %390 %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                                      OpStore %388 %393 
                  read_only Texture2DSampled %396 = OpLoad %395 
                                       f32_2 %397 = OpLoad %41 
                                       f32_4 %398 = OpImageSampleImplicitLod %396 %397 
                                                      OpStore %394 %398 
                  read_only Texture2DSampled %401 = OpLoad %400 
                                       f32_2 %402 = OpLoad %41 
                                       f32_4 %403 = OpImageSampleImplicitLod %401 %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                                      OpStore %399 %404 
                                       f32_3 %406 = OpLoad %399 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_3 %412 = OpFAdd %409 %411 
                                                      OpStore %405 %412 
                                       f32_3 %414 = OpLoad %405 
                                       f32_3 %415 = OpLoad %405 
                                         f32 %416 = OpDot %414 %415 
                                                      OpStore %413 %416 
                                         f32 %417 = OpLoad %413 
                                         f32 %418 = OpExtInst %1 32 %417 
                                                      OpStore %413 %418 
                                         f32 %419 = OpLoad %413 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_3 %421 = OpLoad %405 
                                       f32_3 %422 = OpFMul %420 %421 
                                                      OpStore %405 %422 
                                       f32_4 %423 = OpLoad %70 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 3 
                              Uniform f32_3* %426 = OpAccessChain %17 %88 
                                       f32_3 %427 = OpLoad %426 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                       f32_4 %430 = OpLoad %70 
                                       f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                      OpStore %70 %431 
                                       f32_4 %432 = OpLoad %70 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_4 %434 = OpLoad %70 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                         f32 %436 = OpDot %433 %435 
                                Private f32* %437 = OpAccessChain %9 %30 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %30 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpExtInst %1 32 %439 
                                Private f32* %441 = OpAccessChain %9 %30 
                                                      OpStore %441 %440 
                                       f32_4 %442 = OpLoad %9 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 0 0 
                                       f32_4 %444 = OpLoad %70 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_4 %447 = OpLoad %70 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %70 %448 
                                Private f32* %449 = OpAccessChain %394 %143 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFNegate %450 
                                         f32 %452 = OpFAdd %451 %67 
                                                      OpStore %413 %452 
                                       f32_3 %453 = OpLoad %153 
                                       f32_3 %454 = OpFNegate %453 
                                         f32 %455 = OpLoad %166 
                                       f32_3 %456 = OpCompositeConstruct %455 %455 %455 
                                       f32_3 %457 = OpFMul %454 %456 
                                       f32_4 %458 = OpLoad %70 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFNegate %459 
                                       f32_3 %461 = OpFAdd %457 %460 
                                                      OpStore %153 %461 
                                       f32_3 %462 = OpLoad %153 
                                       f32_3 %463 = OpLoad %153 
                                         f32 %464 = OpDot %462 %463 
                                                      OpStore %166 %464 
                                         f32 %465 = OpLoad %166 
                                         f32 %467 = OpExtInst %1 40 %465 %466 
                                                      OpStore %166 %467 
                                         f32 %468 = OpLoad %166 
                                         f32 %469 = OpExtInst %1 32 %468 
                                                      OpStore %166 %469 
                                       f32_3 %470 = OpLoad %153 
                                         f32 %471 = OpLoad %166 
                                       f32_3 %472 = OpCompositeConstruct %471 %471 %471 
                                       f32_3 %473 = OpFMul %470 %472 
                                                      OpStore %153 %473 
                                       f32_3 %474 = OpLoad %405 
                                       f32_4 %475 = OpLoad %70 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_3 %477 = OpFNegate %476 
                                         f32 %478 = OpDot %474 %477 
                                                      OpStore %166 %478 
                                       f32_3 %479 = OpLoad %405 
                                       f32_3 %480 = OpLoad %79 
                                       f32_3 %481 = OpFNegate %480 
                                         f32 %482 = OpDot %479 %481 
                                Private f32* %483 = OpAccessChain %70 %30 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %70 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpExtInst %1 43 %485 %196 %67 
                                Private f32* %487 = OpAccessChain %70 %30 
                                                      OpStore %487 %486 
                                       f32_3 %488 = OpLoad %405 
                                       f32_3 %489 = OpLoad %153 
                                         f32 %490 = OpDot %488 %489 
                                Private f32* %491 = OpAccessChain %41 %30 
                                                      OpStore %491 %490 
                                Private f32* %492 = OpAccessChain %41 %30 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpExtInst %1 43 %493 %196 %67 
                                Private f32* %495 = OpAccessChain %41 %30 
                                                      OpStore %495 %494 
                                       f32_3 %496 = OpLoad %79 
                                       f32_3 %497 = OpFNegate %496 
                                       f32_3 %498 = OpLoad %153 
                                         f32 %499 = OpDot %497 %498 
                                Private f32* %500 = OpAccessChain %153 %30 
                                                      OpStore %500 %499 
                                Private f32* %501 = OpAccessChain %153 %30 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpExtInst %1 43 %502 %196 %67 
                                Private f32* %504 = OpAccessChain %153 %30 
                                                      OpStore %504 %503 
                                Private f32* %506 = OpAccessChain %153 %30 
                                         f32 %507 = OpLoad %506 
                                Private f32* %508 = OpAccessChain %153 %30 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                Private f32* %511 = OpAccessChain %505 %30 
                                                      OpStore %511 %510 
                                Private f32* %512 = OpAccessChain %153 %30 
                                         f32 %513 = OpLoad %512 
                                Private f32* %514 = OpAccessChain %505 %30 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpFMul %513 %515 
                                Private f32* %517 = OpAccessChain %505 %30 
                                                      OpStore %517 %516 
                                Private f32* %518 = OpAccessChain %505 %30 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpLoad %413 
                                         f32 %521 = OpFMul %519 %520 
                                         f32 %523 = OpFAdd %521 %522 
                                Private f32* %524 = OpAccessChain %505 %30 
                                                      OpStore %524 %523 
                                Private f32* %526 = OpAccessChain %70 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFNegate %527 
                                         f32 %529 = OpFAdd %528 %67 
                                                      OpStore %525 %529 
                                         f32 %531 = OpLoad %525 
                                         f32 %532 = OpLoad %525 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %530 %533 
                                         f32 %534 = OpLoad %530 
                                         f32 %535 = OpLoad %530 
                                         f32 %536 = OpFMul %534 %535 
                                                      OpStore %530 %536 
                                         f32 %537 = OpLoad %525 
                                         f32 %538 = OpLoad %530 
                                         f32 %539 = OpFMul %537 %538 
                                                      OpStore %525 %539 
                                Private f32* %540 = OpAccessChain %505 %30 
                                         f32 %541 = OpLoad %540 
                                         f32 %542 = OpLoad %525 
                                         f32 %543 = OpFMul %541 %542 
                                         f32 %544 = OpFAdd %543 %67 
                                                      OpStore %525 %544 
                                         f32 %545 = OpLoad %166 
                                         f32 %546 = OpExtInst %1 4 %545 
                                         f32 %547 = OpFNegate %546 
                                         f32 %548 = OpFAdd %547 %67 
                                                      OpStore %530 %548 
                                         f32 %550 = OpLoad %530 
                                         f32 %551 = OpLoad %530 
                                         f32 %552 = OpFMul %550 %551 
                                                      OpStore %549 %552 
                                         f32 %553 = OpLoad %549 
                                         f32 %554 = OpLoad %549 
                                         f32 %555 = OpFMul %553 %554 
                                                      OpStore %549 %555 
                                         f32 %556 = OpLoad %530 
                                         f32 %557 = OpLoad %549 
                                         f32 %558 = OpFMul %556 %557 
                                                      OpStore %530 %558 
                                Private f32* %559 = OpAccessChain %505 %30 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpLoad %530 
                                         f32 %562 = OpFMul %560 %561 
                                         f32 %563 = OpFAdd %562 %67 
                                Private f32* %564 = OpAccessChain %505 %30 
                                                      OpStore %564 %563 
                                Private f32* %565 = OpAccessChain %505 %30 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpLoad %525 
                                         f32 %568 = OpFMul %566 %567 
                                Private f32* %569 = OpAccessChain %505 %30 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %70 %30 
                                         f32 %572 = OpLoad %571 
                                Private f32* %573 = OpAccessChain %505 %30 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFMul %572 %574 
                                                      OpStore %570 %575 
                                         f32 %576 = OpLoad %413 
                                         f32 %577 = OpLoad %413 
                                         f32 %578 = OpFMul %576 %577 
                                                      OpStore %413 %578 
                                         f32 %579 = OpLoad %413 
                                         f32 %581 = OpExtInst %1 40 %579 %580 
                                                      OpStore %413 %581 
                                         f32 %583 = OpLoad %413 
                                         f32 %584 = OpFNegate %583 
                                         f32 %585 = OpFAdd %584 %67 
                                                      OpStore %582 %585 
                                         f32 %587 = OpLoad %166 
                                         f32 %588 = OpExtInst %1 4 %587 
                                         f32 %589 = OpLoad %582 
                                         f32 %590 = OpFMul %588 %589 
                                         f32 %591 = OpLoad %413 
                                         f32 %592 = OpFAdd %590 %591 
                                                      OpStore %586 %592 
                                Private f32* %593 = OpAccessChain %70 %30 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpLoad %582 
                                         f32 %596 = OpFMul %594 %595 
                                         f32 %597 = OpLoad %413 
                                         f32 %598 = OpFAdd %596 %597 
                                                      OpStore %49 %598 
                                         f32 %599 = OpLoad %49 
                                         f32 %600 = OpLoad %166 
                                         f32 %601 = OpExtInst %1 4 %600 
                                         f32 %602 = OpFMul %599 %601 
                                                      OpStore %49 %602 
                                Private f32* %603 = OpAccessChain %70 %30 
                                         f32 %604 = OpLoad %603 
                                         f32 %605 = OpLoad %586 
                                         f32 %606 = OpFMul %604 %605 
                                         f32 %607 = OpLoad %49 
                                         f32 %608 = OpFAdd %606 %607 
                                                      OpStore %49 %608 
                                         f32 %609 = OpLoad %49 
                                         f32 %611 = OpFAdd %609 %610 
                                                      OpStore %49 %611 
                                         f32 %613 = OpLoad %49 
                                         f32 %614 = OpFDiv %612 %613 
                                                      OpStore %49 %614 
                                         f32 %615 = OpLoad %413 
                                         f32 %616 = OpLoad %413 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %413 %617 
                                Private f32* %618 = OpAccessChain %41 %30 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpLoad %413 
                                         f32 %621 = OpFMul %619 %620 
                                Private f32* %622 = OpAccessChain %41 %30 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFNegate %623 
                                         f32 %625 = OpFAdd %621 %624 
                                                      OpStore %586 %625 
                                         f32 %626 = OpLoad %586 
                                Private f32* %627 = OpAccessChain %41 %30 
                                         f32 %628 = OpLoad %627 
                                         f32 %629 = OpFMul %626 %628 
                                         f32 %630 = OpFAdd %629 %67 
                                Private f32* %631 = OpAccessChain %41 %30 
                                                      OpStore %631 %630 
                                         f32 %632 = OpLoad %413 
                                         f32 %634 = OpFMul %632 %633 
                                                      OpStore %413 %634 
                                Private f32* %635 = OpAccessChain %41 %30 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %41 %30 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                         f32 %641 = OpFAdd %639 %640 
                                Private f32* %642 = OpAccessChain %41 %30 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %413 
                                Private f32* %644 = OpAccessChain %41 %30 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %9 %30 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %9 %30 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpLoad %49 
                                         f32 %651 = OpFMul %649 %650 
                                Private f32* %652 = OpAccessChain %9 %30 
                                                      OpStore %652 %651 
                                Private f32* %653 = OpAccessChain %9 %30 
                                         f32 %654 = OpLoad %653 
                                         f32 %656 = OpFMul %654 %655 
                                Private f32* %657 = OpAccessChain %9 %30 
                                                      OpStore %657 %656 
                                Private f32* %658 = OpAccessChain %9 %30 
                                         f32 %659 = OpLoad %658 
                                         f32 %661 = OpExtInst %1 40 %659 %660 
                                Private f32* %662 = OpAccessChain %9 %30 
                                                      OpStore %662 %661 
                                Private f32* %663 = OpAccessChain %9 %30 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpExtInst %1 31 %664 
                                Private f32* %666 = OpAccessChain %9 %30 
                                                      OpStore %666 %665 
                                Private f32* %667 = OpAccessChain %70 %30 
                                         f32 %668 = OpLoad %667 
                                Private f32* %669 = OpAccessChain %9 %30 
                                         f32 %670 = OpLoad %669 
                                         f32 %671 = OpFMul %668 %670 
                                Private f32* %672 = OpAccessChain %9 %30 
                                                      OpStore %672 %671 
                                       f32_4 %673 = OpLoad %394 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 2 
                                       f32_4 %675 = OpLoad %394 
                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
                                         f32 %677 = OpDot %674 %676 
                                Private f32* %678 = OpAccessChain %505 %30 
                                                      OpStore %678 %677 
                                Private f32* %680 = OpAccessChain %505 %30 
                                         f32 %681 = OpLoad %680 
                                        bool %682 = OpFOrdNotEqual %681 %196 
                                                      OpStore %679 %682 
                                        bool %684 = OpLoad %679 
                                                      OpSelectionMerge %686 None 
                                                      OpBranchConditional %684 %685 %687 
                                             %685 = OpLabel 
                                                      OpStore %683 %67 
                                                      OpBranch %686 
                                             %687 = OpLabel 
                                                      OpStore %683 %196 
                                                      OpBranch %686 
                                             %686 = OpLabel 
                                         f32 %688 = OpLoad %683 
                                                      OpStore %49 %688 
                                         f32 %689 = OpLoad %49 
                                Private f32* %690 = OpAccessChain %9 %30 
                                         f32 %691 = OpLoad %690 
                                         f32 %692 = OpFMul %689 %691 
                                Private f32* %693 = OpAccessChain %9 %30 
                                                      OpStore %693 %692 
                                         f32 %694 = OpLoad %570 
                                       f32_3 %695 = OpCompositeConstruct %694 %694 %694 
                                       f32_4 %696 = OpLoad %221 
                                       f32_3 %697 = OpVectorShuffle %696 %696 0 1 2 
                                       f32_3 %698 = OpFMul %695 %697 
                                                      OpStore %505 %698 
                                       f32_4 %699 = OpLoad %221 
                                       f32_3 %700 = OpVectorShuffle %699 %699 0 1 2 
                                       f32_4 %701 = OpLoad %9 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpFMul %700 %702 
                                       f32_4 %704 = OpLoad %9 
                                       f32_4 %705 = OpVectorShuffle %704 %703 4 1 5 6 
                                                      OpStore %9 %705 
                                Private f32* %706 = OpAccessChain %153 %30 
                                         f32 %707 = OpLoad %706 
                                         f32 %708 = OpFNegate %707 
                                         f32 %709 = OpFAdd %708 %67 
                                                      OpStore %549 %709 
                                         f32 %711 = OpLoad %549 
                                         f32 %712 = OpLoad %549 
                                         f32 %713 = OpFMul %711 %712 
                                Private f32* %714 = OpAccessChain %710 %30 
                                                      OpStore %714 %713 
                                Private f32* %715 = OpAccessChain %710 %30 
                                         f32 %716 = OpLoad %715 
                                Private f32* %717 = OpAccessChain %710 %30 
                                         f32 %718 = OpLoad %717 
                                         f32 %719 = OpFMul %716 %718 
                                Private f32* %720 = OpAccessChain %710 %30 
                                                      OpStore %720 %719 
                                         f32 %721 = OpLoad %549 
                                Private f32* %722 = OpAccessChain %710 %30 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                                      OpStore %549 %724 
                                       f32_4 %725 = OpLoad %394 
                                       f32_3 %726 = OpVectorShuffle %725 %725 0 1 2 
                                       f32_3 %727 = OpFNegate %726 
                                       f32_3 %729 = OpFAdd %727 %728 
                                                      OpStore %710 %729 
                                       f32_3 %730 = OpLoad %710 
                                         f32 %731 = OpLoad %549 
                                       f32_3 %732 = OpCompositeConstruct %731 %731 %731 
                                       f32_3 %733 = OpFMul %730 %732 
                                       f32_4 %734 = OpLoad %394 
                                       f32_3 %735 = OpVectorShuffle %734 %734 0 1 2 
                                       f32_3 %736 = OpFAdd %733 %735 
                                                      OpStore %710 %736 
                                       f32_4 %737 = OpLoad %9 
                                       f32_3 %738 = OpVectorShuffle %737 %737 0 2 3 
                                       f32_3 %739 = OpLoad %710 
                                       f32_3 %740 = OpFMul %738 %739 
                                       f32_4 %741 = OpLoad %9 
                                       f32_4 %742 = OpVectorShuffle %741 %740 4 5 6 3 
                                                      OpStore %9 %742 
                                       f32_3 %743 = OpLoad %388 
                                       f32_3 %744 = OpLoad %505 
                                       f32_3 %745 = OpFMul %743 %744 
                                       f32_4 %746 = OpLoad %9 
                                       f32_3 %747 = OpVectorShuffle %746 %746 0 1 2 
                                       f32_3 %748 = OpFAdd %745 %747 
                                       f32_4 %749 = OpLoad %9 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %9 %750 
                                       f32_4 %753 = OpLoad %9 
                                       f32_3 %754 = OpVectorShuffle %753 %753 0 1 2 
                                       f32_4 %755 = OpLoad %752 
                                       f32_4 %756 = OpVectorShuffle %755 %754 4 5 6 3 
                                                      OpStore %752 %756 
                                 Output f32* %758 = OpAccessChain %752 %143 
                                                      OpStore %758 %67 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Stencil {
   ReadMask 0
   CompFront Equal
   PassFront Keep
   FailFront Keep
   ZFailFront Keep
   CompBack Equal
   PassBack Keep
   FailBack Keep
   ZFailBack Keep
  }
  GpuProgramID 66195
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_LightBuffer, vs_TEXCOORD0.xy);
    u_xlat16_0 = log2(u_xlat10_0);
    SV_Target0 = (-u_xlat16_0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate %84 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
                        Output f32_2* %84 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore %84 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 28
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %24 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %20 RelaxedPrecision 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %24 RelaxedPrecision 
                                                    OpDecorate %24 Location 24 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpDecorate %26 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                             Private f32_4* %20 = OpVariable Private 
                                            %23 = OpTypePointer Output %7 
                              Output f32_4* %24 = OpVariable Output 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                                      f32_4 %21 = OpLoad %9 
                                      f32_4 %22 = OpExtInst %1 30 %21 
                                                    OpStore %20 %22 
                                      f32_4 %25 = OpLoad %20 
                                      f32_4 %26 = OpFNegate %25 
                                                    OpStore %24 %26 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
}