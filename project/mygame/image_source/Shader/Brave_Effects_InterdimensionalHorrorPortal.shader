//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/Effects/InterdimensionalHorrorPortal" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_NoiseTex ("Noise", 2D) = "white" { }
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_EmissivePower ("Emissive Power", Float) = 0
_EmissiveColorPower ("Emissive Color Power", Float) = 7
_EmissiveColor ("Emissive Color", Color) = (1,1,1,1)
_VertexColor ("Vertex Color", Float) = 0
_LocalTime ("Local Time", Vector) = (0,0,0,0)
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 29377
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 209
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 %198 %201 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %198 Location 198 
                                                      OpDecorate %201 Location 201 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                               Output f32_3* %198 = OpVariable Output 
                                         f32 %199 = OpConstant 3.674022E-40 
                                       f32_3 %200 = OpConstantComposite %199 %199 %199 
                               Output f32_4* %201 = OpVariable Output 
                                       f32_4 %202 = OpConstantComposite %199 %199 %199 %199 
                                             %203 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                                      OpStore %198 %200 
                                                      OpStore %201 %202 
                                 Output f32* %204 = OpAccessChain %120 %60 %48 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFNegate %205 
                                 Output f32* %207 = OpAccessChain %120 %60 %48 
                                                      OpStore %207 %206 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 381
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %240 %350 %356 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %24 0 RelaxedPrecision 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 RelaxedPrecision 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 RelaxedPrecision 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 Location 356 
                                                      OpDecorate %376 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeStruct %7 %7 %22 %23 %23 %7 %6 %6 %6 %7 %6 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %26 = OpVariable Uniform 
                                              %27 = OpTypeInt 32 1 
                                          i32 %28 = OpConstant 9 
                                          u32 %29 = OpConstant 2 
                                              %30 = OpTypePointer Uniform %6 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          u32 %47 = OpConstant 1 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                        f32_3 %71 = OpConstantComposite %68 %69 %70 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 8 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                             %100 = OpTypePointer Private %61 
                              Private f32_2* %101 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_2 %107 = OpConstantComposite %106 %106 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                             %116 = OpTypePointer Private %23 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %124 %125 %126 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         u32 %157 = OpConstant 3 
                                         f32 %160 = OpConstant 3.674022E-40 
                               Private bool* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         i32 %169 = OpConstant 0 
                                         i32 %170 = OpConstant 1 
                                         i32 %172 = OpConstant -1 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %183 = OpConstant 7 
                                         i32 %205 = OpConstant 10 
                               Private bool* %211 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                              Private f32_3* %238 = OpVariable Private 
                                             %239 = OpTypePointer Input %23 
                                Input f32_3* %240 = OpVariable Input 
                                         i32 %243 = OpConstant 2 
                                         i32 %265 = OpConstant 3 
                              Private f32_3* %270 = OpVariable Private 
                                             %271 = OpTypePointer Function %23 
                                         i32 %281 = OpConstant 4 
                                             %282 = OpTypePointer Uniform %23 
                              Private f32_4* %287 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %312 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %313 = OpTypeSampledImage %312 
                                             %314 = OpTypePointer UniformConstant %313 
 UniformConstant read_only Texture3DSampled* %315 = OpVariable UniformConstant 
                              Private f32_3* %326 = OpVariable Private 
                              Private f32_3* %336 = OpVariable Private 
                                         i32 %339 = OpConstant 5 
                                Input f32_3* %350 = OpVariable Input 
                                             %355 = OpTypePointer Output %7 
                               Output f32_4* %356 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                         i32 %361 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %272 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %31 = OpAccessChain %26 %28 %29 
                                          f32 %32 = OpLoad %31 
                                          f32 %34 = OpFMul %32 %33 
                                 Private f32* %35 = OpAccessChain %9 %13 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFAdd %34 %36 
                                 Private f32* %38 = OpAccessChain %9 %13 
                                                      OpStore %38 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpExtInst %1 13 %40 
                                 Private f32* %42 = OpAccessChain %9 %13 
                                                      OpStore %42 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %47 
                                                      OpStore %51 %50 
                                   Input f32* %52 = OpAccessChain %11 %13 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %9 %13 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_4 %62 = OpLoad %9 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %60 %63 
                                                      OpStore %55 %64 
                                        f32_4 %66 = OpLoad %55 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %72 = OpDot %67 %71 
                                 Private f32* %73 = OpAccessChain %65 %13 
                                                      OpStore %73 %72 
                                        f32_4 %75 = OpLoad %55 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %55 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %26 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %55 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                 Private f32* %93 = OpAccessChain %65 %13 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdLessThan %94 %95 
                                                      OpStore %92 %96 
                                         bool %97 = OpLoad %92 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %152 
                                              %98 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %26 %28 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %108 = OpFMul %105 %107 
                                                      OpStore %101 %108 
                                       f32_4 %109 = OpLoad %11 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %113 = OpFMul %110 %112 
                                       f32_2 %114 = OpLoad %101 
                                       f32_2 %115 = OpFAdd %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %120 = OpLoad %101 
                                       f32_4 %121 = OpImageSampleImplicitLod %119 %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                                      OpStore %117 %122 
                                       f32_3 %123 = OpLoad %117 
                                       f32_3 %128 = OpFMul %123 %127 
                                       f32_4 %129 = OpLoad %74 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %74 %130 
                                       f32_4 %131 = OpLoad %74 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpExtInst %1 30 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %74 %135 
                                       f32_4 %136 = OpLoad %74 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %74 %142 
                                       f32_4 %143 = OpLoad %74 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 29 %144 
                                       f32_4 %146 = OpLoad %74 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %74 %147 
                                       f32_4 %148 = OpLoad %74 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %74 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %74 %151 
                                                      OpBranch %99 
                                             %152 = OpLabel 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                Private f32* %158 = OpAccessChain %9 %157 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFAdd %159 %160 
                                Private f32* %162 = OpAccessChain %65 %13 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %65 %13 
                                         f32 %165 = OpLoad %164 
                                        bool %167 = OpFOrdLessThan %165 %166 
                                                      OpStore %163 %167 
                                        bool %168 = OpLoad %163 
                                         i32 %171 = OpSelect %168 %170 %169 
                                         i32 %173 = OpIMul %171 %172 
                                        bool %174 = OpINotEqual %173 %169 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpKill
                                             %176 = OpLabel 
                                       f32_4 %179 = OpLoad %74 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %178 %181 
                                       f32_3 %182 = OpLoad %178 
                                Uniform f32* %184 = OpAccessChain %26 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %26 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %26 %183 
                                         f32 %189 = OpLoad %188 
                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                         f32 %192 = OpCompositeExtract %190 1 
                                         f32 %193 = OpCompositeExtract %190 2 
                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
                                       f32_3 %195 = OpFMul %182 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %9 %197 
                                       f32_4 %198 = OpLoad %9 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpExtInst %1 29 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %9 %202 
                                Private f32* %203 = OpAccessChain %9 %157 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %26 %205 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %204 %208 
                                Private f32* %210 = OpAccessChain %65 %13 
                                                      OpStore %210 %209 
                                Private f32* %212 = OpAccessChain %65 %13 
                                         f32 %213 = OpLoad %212 
                                        bool %214 = OpFOrdLessThan %213 %166 
                                                      OpStore %211 %214 
                                        bool %215 = OpLoad %211 
                                         i32 %216 = OpSelect %215 %170 %169 
                                         i32 %217 = OpIMul %216 %172 
                                        bool %218 = OpINotEqual %217 %169 
                                                      OpSelectionMerge %220 None 
                                                      OpBranchConditional %218 %219 %220 
                                             %219 = OpLabel 
                                                      OpKill
                                             %220 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %26 %170 %13 
                                         f32 %223 = OpLoad %222 
                                        bool %225 = OpFOrdEqual %223 %224 
                                                      OpStore %211 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %211 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %321 
                                             %233 = OpLabel 
                                Uniform f32* %235 = OpAccessChain %26 %170 %47 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdEqual %236 %224 
                                                      OpStore %211 %237 
                                       f32_3 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %26 %243 %170 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                                      OpStore %238 %247 
                              Uniform f32_4* %248 = OpAccessChain %26 %243 %169 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpLoad %240 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %238 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %238 %255 
                              Uniform f32_4* %256 = OpAccessChain %26 %243 %243 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %240 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %238 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %238 %263 
                                       f32_3 %264 = OpLoad %238 
                              Uniform f32_4* %266 = OpAccessChain %26 %243 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %264 %268 
                                                      OpStore %238 %269 
                                        bool %273 = OpLoad %211 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %277 
                                             %274 = OpLabel 
                                       f32_3 %276 = OpLoad %238 
                                                      OpStore %272 %276 
                                                      OpBranch %275 
                                             %277 = OpLabel 
                                       f32_3 %278 = OpLoad %240 
                                                      OpStore %272 %278 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                       f32_3 %279 = OpLoad %272 
                                                      OpStore %270 %279 
                                       f32_3 %280 = OpLoad %270 
                              Uniform f32_3* %283 = OpAccessChain %26 %281 
                                       f32_3 %284 = OpLoad %283 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_3 %286 = OpFAdd %280 %285 
                                                      OpStore %270 %286 
                                       f32_3 %288 = OpLoad %270 
                              Uniform f32_3* %289 = OpAccessChain %26 %265 
                                       f32_3 %290 = OpLoad %289 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %287 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 4 5 6 
                                                      OpStore %287 %293 
                                Private f32* %294 = OpAccessChain %287 %47 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %295 %95 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %270 %13 
                                                      OpStore %299 %298 
                                Uniform f32* %300 = OpAccessChain %26 %170 %29 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFMul %301 %302 
                                         f32 %304 = OpFAdd %303 %297 
                                Private f32* %305 = OpAccessChain %238 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %238 %13 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %270 %13 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 40 %307 %309 
                                Private f32* %311 = OpAccessChain %287 %13 
                                                      OpStore %311 %310 
                  read_only Texture3DSampled %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %287 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 2 3 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %287 %319 
                                       f32_4 %320 = OpLoad %287 
                                                      OpStore %65 %320 
                                                      OpBranch %234 
                                             %321 = OpLabel 
                                Private f32* %322 = OpAccessChain %65 %13 
                                                      OpStore %322 %224 
                                Private f32* %323 = OpAccessChain %65 %47 
                                                      OpStore %323 %224 
                                Private f32* %324 = OpAccessChain %65 %29 
                                                      OpStore %324 %224 
                                Private f32* %325 = OpAccessChain %65 %157 
                                                      OpStore %325 %224 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %327 = OpLoad %65 
                              Uniform f32_4* %328 = OpAccessChain %26 %169 
                                       f32_4 %329 = OpLoad %328 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %326 %13 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %326 %13 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 43 %333 %166 %224 
                                Private f32* %335 = OpAccessChain %326 %13 
                                                      OpStore %335 %334 
                                       f32_4 %337 = OpLoad %74 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %26 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %336 %343 
                                       f32_3 %344 = OpLoad %326 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpLoad %336 
                                       f32_3 %347 = OpFMul %345 %346 
                                                      OpStore %326 %347 
                                       f32_4 %348 = OpLoad %74 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_3 %353 = OpLoad %326 
                                       f32_3 %354 = OpFAdd %352 %353 
                                                      OpStore %326 %354 
                                Private f32* %357 = OpAccessChain %9 %157 
                                         f32 %358 = OpLoad %357 
                                 Output f32* %360 = OpAccessChain %356 %157 
                                                      OpStore %360 %358 
                                Uniform f32* %362 = OpAccessChain %26 %361 
                                         f32 %363 = OpLoad %362 
                                Uniform f32* %364 = OpAccessChain %26 %361 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %366 = OpAccessChain %26 %361 
                                         f32 %367 = OpLoad %366 
                                       f32_3 %368 = OpCompositeConstruct %363 %365 %367 
                                         f32 %369 = OpCompositeExtract %368 0 
                                         f32 %370 = OpCompositeExtract %368 1 
                                         f32 %371 = OpCompositeExtract %368 2 
                                       f32_3 %372 = OpCompositeConstruct %369 %370 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %326 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %356 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %356 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat4 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat4 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 323
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %90 %123 %133 %134 %149 %164 %200 %203 %204 %312 %315 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 RelaxedPrecision 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %90 Location 90 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %200 Location 200 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %312 Location 312 
                                                      OpDecorate %315 Location 315 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 10 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 11 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 7 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Output %88 
                                Output f32_3* %90 = OpVariable Output 
                                         i32 %102 = OpConstant 9 
                                             %120 = OpTypeArray %6 %48 
                                             %121 = OpTypeStruct %7 %6 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %131 = OpTypePointer Output %7 
                               Output f32_4* %133 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %135 = OpTypeVector %6 2 
                                         i32 %138 = OpConstant 12 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 13 
                                             %163 = OpTypePointer Input %88 
                                Input f32_3* %164 = OpVariable Input 
                                         i32 %166 = OpConstant 8 
                                         u32 %183 = OpConstant 2 
                                Private f32* %185 = OpVariable Private 
                               Output f32_3* %200 = OpVariable Output 
                               Output f32_4* %203 = OpVariable Output 
                                Input f32_4* %204 = OpVariable Input 
                                             %206 = OpTypePointer Private %88 
                              Private f32_3* %207 = OpVariable Private 
                              Private f32_4* %224 = OpVariable Private 
                              Private f32_3* %230 = OpVariable Private 
                                         i32 %236 = OpConstant 4 
                                         i32 %242 = OpConstant 5 
                                         i32 %248 = OpConstant 6 
                                         u32 %257 = OpConstant 3 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_3 %288 = OpConstantComposite %287 %287 %287 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %300 = OpConstantComposite %299 %299 %299 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_3 %303 = OpConstantComposite %302 %302 %302 
                               Output f32_3* %312 = OpVariable Output 
                               Output f32_4* %315 = OpVariable Output 
                                       f32_4 %316 = OpConstantComposite %278 %278 %278 %278 
                                             %317 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %91 = OpAccessChain %17 %60 %84 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %47 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                                      OpStore %90 %99 
                                       f32_4 %100 = OpLoad %82 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %17 %102 %61 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %102 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %82 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %17 %102 %74 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %82 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %9 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                              Uniform f32_4* %124 = OpAccessChain %17 %102 %84 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                               Output f32_4* %132 = OpAccessChain %123 %66 
                                                      OpStore %132 %130 
                                       f32_4 %136 = OpLoad %134 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %17 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %17 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                       f32_4 %147 = OpLoad %133 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %133 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                              Uniform f32_4* %153 = OpAccessChain %17 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                       f32_2 %156 = OpFMul %151 %155 
                              Uniform f32_4* %157 = OpAccessChain %17 %152 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 2 3 
                                       f32_2 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %133 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 1 4 5 
                                                      OpStore %133 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %167 = OpAccessChain %17 %166 %66 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %165 %169 
                                Private f32* %171 = OpAccessChain %9 %25 
                                                      OpStore %171 %170 
                                       f32_3 %172 = OpLoad %164 
                              Uniform f32_4* %173 = OpAccessChain %17 %166 %61 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %172 %175 
                                Private f32* %177 = OpAccessChain %9 %48 
                                                      OpStore %177 %176 
                                       f32_3 %178 = OpLoad %164 
                              Uniform f32_4* %179 = OpAccessChain %17 %166 %74 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                         f32 %182 = OpDot %178 %181 
                                Private f32* %184 = OpAccessChain %9 %183 
                                                      OpStore %184 %182 
                                       f32_4 %186 = OpLoad %9 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %185 %190 
                                         f32 %191 = OpLoad %185 
                                         f32 %192 = OpExtInst %1 32 %191 
                                                      OpStore %185 %192 
                                         f32 %193 = OpLoad %185 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %9 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %200 %202 
                                       f32_4 %205 = OpLoad %204 
                                                      OpStore %203 %205 
                                Private f32* %208 = OpAccessChain %9 %48 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %9 %48 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %207 %25 
                                                      OpStore %213 %212 
                                Private f32* %214 = OpAccessChain %9 %25 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %9 %25 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %215 %217 
                                Private f32* %219 = OpAccessChain %207 %25 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                         f32 %222 = OpFAdd %218 %221 
                                Private f32* %223 = OpAccessChain %207 %25 
                                                      OpStore %223 %222 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpVectorShuffle %225 %225 1 2 2 0 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpVectorShuffle %227 %227 0 1 2 2 
                                       f32_4 %229 = OpFMul %226 %228 
                                                      OpStore %224 %229 
                              Uniform f32_4* %231 = OpAccessChain %17 %84 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %224 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %230 %25 
                                                      OpStore %235 %234 
                              Uniform f32_4* %237 = OpAccessChain %17 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %224 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %230 %48 
                                                      OpStore %241 %240 
                              Uniform f32_4* %243 = OpAccessChain %17 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %224 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %230 %183 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %17 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpLoad %207 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 0 0 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %230 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %207 %256 
                                Private f32* %258 = OpAccessChain %9 %257 
                                                      OpStore %258 %44 
                              Uniform f32_4* %259 = OpAccessChain %17 %66 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %9 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %230 %25 
                                                      OpStore %263 %262 
                              Uniform f32_4* %264 = OpAccessChain %17 %61 
                                       f32_4 %265 = OpLoad %264 
                                       f32_4 %266 = OpLoad %9 
                                         f32 %267 = OpDot %265 %266 
                                Private f32* %268 = OpAccessChain %230 %48 
                                                      OpStore %268 %267 
                              Uniform f32_4* %269 = OpAccessChain %17 %74 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %9 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %230 %183 
                                                      OpStore %273 %272 
                                       f32_3 %274 = OpLoad %207 
                                       f32_3 %275 = OpLoad %230 
                                       f32_3 %276 = OpFAdd %274 %275 
                                                      OpStore %207 %276 
                                       f32_3 %277 = OpLoad %207 
                                       f32_3 %280 = OpExtInst %1 40 %277 %279 
                                                      OpStore %207 %280 
                                       f32_3 %281 = OpLoad %207 
                                       f32_3 %282 = OpExtInst %1 30 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %9 %284 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %9 %291 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpExtInst %1 29 %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %9 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %9 %306 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpExtInst %1 40 %308 %279 
                                       f32_4 %310 = OpLoad %9 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %9 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                                      OpStore %312 %314 
                                                      OpStore %315 %316 
                                 Output f32* %318 = OpAccessChain %123 %66 %48 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFNegate %319 
                                 Output f32* %321 = OpAccessChain %123 %66 %48 
                                                      OpStore %321 %320 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 381
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %240 %350 %356 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %24 0 RelaxedPrecision 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 RelaxedPrecision 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 RelaxedPrecision 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 Location 356 
                                                      OpDecorate %376 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeStruct %7 %7 %22 %23 %23 %7 %6 %6 %6 %7 %6 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %26 = OpVariable Uniform 
                                              %27 = OpTypeInt 32 1 
                                          i32 %28 = OpConstant 9 
                                          u32 %29 = OpConstant 2 
                                              %30 = OpTypePointer Uniform %6 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          u32 %47 = OpConstant 1 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                        f32_3 %71 = OpConstantComposite %68 %69 %70 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 8 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                             %100 = OpTypePointer Private %61 
                              Private f32_2* %101 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_2 %107 = OpConstantComposite %106 %106 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                             %116 = OpTypePointer Private %23 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %124 %125 %126 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         u32 %157 = OpConstant 3 
                                         f32 %160 = OpConstant 3.674022E-40 
                               Private bool* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         i32 %169 = OpConstant 0 
                                         i32 %170 = OpConstant 1 
                                         i32 %172 = OpConstant -1 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %183 = OpConstant 7 
                                         i32 %205 = OpConstant 10 
                               Private bool* %211 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                              Private f32_3* %238 = OpVariable Private 
                                             %239 = OpTypePointer Input %23 
                                Input f32_3* %240 = OpVariable Input 
                                         i32 %243 = OpConstant 2 
                                         i32 %265 = OpConstant 3 
                              Private f32_3* %270 = OpVariable Private 
                                             %271 = OpTypePointer Function %23 
                                         i32 %281 = OpConstant 4 
                                             %282 = OpTypePointer Uniform %23 
                              Private f32_4* %287 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %312 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %313 = OpTypeSampledImage %312 
                                             %314 = OpTypePointer UniformConstant %313 
 UniformConstant read_only Texture3DSampled* %315 = OpVariable UniformConstant 
                              Private f32_3* %326 = OpVariable Private 
                              Private f32_3* %336 = OpVariable Private 
                                         i32 %339 = OpConstant 5 
                                Input f32_3* %350 = OpVariable Input 
                                             %355 = OpTypePointer Output %7 
                               Output f32_4* %356 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                         i32 %361 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %272 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %31 = OpAccessChain %26 %28 %29 
                                          f32 %32 = OpLoad %31 
                                          f32 %34 = OpFMul %32 %33 
                                 Private f32* %35 = OpAccessChain %9 %13 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFAdd %34 %36 
                                 Private f32* %38 = OpAccessChain %9 %13 
                                                      OpStore %38 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpExtInst %1 13 %40 
                                 Private f32* %42 = OpAccessChain %9 %13 
                                                      OpStore %42 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %47 
                                                      OpStore %51 %50 
                                   Input f32* %52 = OpAccessChain %11 %13 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %9 %13 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_4 %62 = OpLoad %9 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %60 %63 
                                                      OpStore %55 %64 
                                        f32_4 %66 = OpLoad %55 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %72 = OpDot %67 %71 
                                 Private f32* %73 = OpAccessChain %65 %13 
                                                      OpStore %73 %72 
                                        f32_4 %75 = OpLoad %55 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %55 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %26 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %55 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                 Private f32* %93 = OpAccessChain %65 %13 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdLessThan %94 %95 
                                                      OpStore %92 %96 
                                         bool %97 = OpLoad %92 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %152 
                                              %98 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %26 %28 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %108 = OpFMul %105 %107 
                                                      OpStore %101 %108 
                                       f32_4 %109 = OpLoad %11 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %113 = OpFMul %110 %112 
                                       f32_2 %114 = OpLoad %101 
                                       f32_2 %115 = OpFAdd %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %120 = OpLoad %101 
                                       f32_4 %121 = OpImageSampleImplicitLod %119 %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                                      OpStore %117 %122 
                                       f32_3 %123 = OpLoad %117 
                                       f32_3 %128 = OpFMul %123 %127 
                                       f32_4 %129 = OpLoad %74 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %74 %130 
                                       f32_4 %131 = OpLoad %74 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpExtInst %1 30 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %74 %135 
                                       f32_4 %136 = OpLoad %74 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %74 %142 
                                       f32_4 %143 = OpLoad %74 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 29 %144 
                                       f32_4 %146 = OpLoad %74 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %74 %147 
                                       f32_4 %148 = OpLoad %74 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %74 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %74 %151 
                                                      OpBranch %99 
                                             %152 = OpLabel 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                Private f32* %158 = OpAccessChain %9 %157 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFAdd %159 %160 
                                Private f32* %162 = OpAccessChain %65 %13 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %65 %13 
                                         f32 %165 = OpLoad %164 
                                        bool %167 = OpFOrdLessThan %165 %166 
                                                      OpStore %163 %167 
                                        bool %168 = OpLoad %163 
                                         i32 %171 = OpSelect %168 %170 %169 
                                         i32 %173 = OpIMul %171 %172 
                                        bool %174 = OpINotEqual %173 %169 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpKill
                                             %176 = OpLabel 
                                       f32_4 %179 = OpLoad %74 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %178 %181 
                                       f32_3 %182 = OpLoad %178 
                                Uniform f32* %184 = OpAccessChain %26 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %26 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %26 %183 
                                         f32 %189 = OpLoad %188 
                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                         f32 %192 = OpCompositeExtract %190 1 
                                         f32 %193 = OpCompositeExtract %190 2 
                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
                                       f32_3 %195 = OpFMul %182 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %9 %197 
                                       f32_4 %198 = OpLoad %9 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpExtInst %1 29 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %9 %202 
                                Private f32* %203 = OpAccessChain %9 %157 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %26 %205 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %204 %208 
                                Private f32* %210 = OpAccessChain %65 %13 
                                                      OpStore %210 %209 
                                Private f32* %212 = OpAccessChain %65 %13 
                                         f32 %213 = OpLoad %212 
                                        bool %214 = OpFOrdLessThan %213 %166 
                                                      OpStore %211 %214 
                                        bool %215 = OpLoad %211 
                                         i32 %216 = OpSelect %215 %170 %169 
                                         i32 %217 = OpIMul %216 %172 
                                        bool %218 = OpINotEqual %217 %169 
                                                      OpSelectionMerge %220 None 
                                                      OpBranchConditional %218 %219 %220 
                                             %219 = OpLabel 
                                                      OpKill
                                             %220 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %26 %170 %13 
                                         f32 %223 = OpLoad %222 
                                        bool %225 = OpFOrdEqual %223 %224 
                                                      OpStore %211 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %211 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %321 
                                             %233 = OpLabel 
                                Uniform f32* %235 = OpAccessChain %26 %170 %47 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdEqual %236 %224 
                                                      OpStore %211 %237 
                                       f32_3 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %26 %243 %170 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                                      OpStore %238 %247 
                              Uniform f32_4* %248 = OpAccessChain %26 %243 %169 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpLoad %240 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %238 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %238 %255 
                              Uniform f32_4* %256 = OpAccessChain %26 %243 %243 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %240 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %238 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %238 %263 
                                       f32_3 %264 = OpLoad %238 
                              Uniform f32_4* %266 = OpAccessChain %26 %243 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %264 %268 
                                                      OpStore %238 %269 
                                        bool %273 = OpLoad %211 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %277 
                                             %274 = OpLabel 
                                       f32_3 %276 = OpLoad %238 
                                                      OpStore %272 %276 
                                                      OpBranch %275 
                                             %277 = OpLabel 
                                       f32_3 %278 = OpLoad %240 
                                                      OpStore %272 %278 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                       f32_3 %279 = OpLoad %272 
                                                      OpStore %270 %279 
                                       f32_3 %280 = OpLoad %270 
                              Uniform f32_3* %283 = OpAccessChain %26 %281 
                                       f32_3 %284 = OpLoad %283 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_3 %286 = OpFAdd %280 %285 
                                                      OpStore %270 %286 
                                       f32_3 %288 = OpLoad %270 
                              Uniform f32_3* %289 = OpAccessChain %26 %265 
                                       f32_3 %290 = OpLoad %289 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %287 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 4 5 6 
                                                      OpStore %287 %293 
                                Private f32* %294 = OpAccessChain %287 %47 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %295 %95 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %270 %13 
                                                      OpStore %299 %298 
                                Uniform f32* %300 = OpAccessChain %26 %170 %29 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFMul %301 %302 
                                         f32 %304 = OpFAdd %303 %297 
                                Private f32* %305 = OpAccessChain %238 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %238 %13 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %270 %13 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 40 %307 %309 
                                Private f32* %311 = OpAccessChain %287 %13 
                                                      OpStore %311 %310 
                  read_only Texture3DSampled %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %287 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 2 3 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %287 %319 
                                       f32_4 %320 = OpLoad %287 
                                                      OpStore %65 %320 
                                                      OpBranch %234 
                                             %321 = OpLabel 
                                Private f32* %322 = OpAccessChain %65 %13 
                                                      OpStore %322 %224 
                                Private f32* %323 = OpAccessChain %65 %47 
                                                      OpStore %323 %224 
                                Private f32* %324 = OpAccessChain %65 %29 
                                                      OpStore %324 %224 
                                Private f32* %325 = OpAccessChain %65 %157 
                                                      OpStore %325 %224 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %327 = OpLoad %65 
                              Uniform f32_4* %328 = OpAccessChain %26 %169 
                                       f32_4 %329 = OpLoad %328 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %326 %13 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %326 %13 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 43 %333 %166 %224 
                                Private f32* %335 = OpAccessChain %326 %13 
                                                      OpStore %335 %334 
                                       f32_4 %337 = OpLoad %74 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %26 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %336 %343 
                                       f32_3 %344 = OpLoad %326 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpLoad %336 
                                       f32_3 %347 = OpFMul %345 %346 
                                                      OpStore %326 %347 
                                       f32_4 %348 = OpLoad %74 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_3 %353 = OpLoad %326 
                                       f32_3 %354 = OpFAdd %352 %353 
                                                      OpStore %326 %354 
                                Private f32* %357 = OpAccessChain %9 %157 
                                         f32 %358 = OpLoad %357 
                                 Output f32* %360 = OpAccessChain %356 %157 
                                                      OpStore %360 %358 
                                Uniform f32* %362 = OpAccessChain %26 %361 
                                         f32 %363 = OpLoad %362 
                                Uniform f32* %364 = OpAccessChain %26 %361 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %366 = OpAccessChain %26 %361 
                                         f32 %367 = OpLoad %366 
                                       f32_3 %368 = OpCompositeConstruct %363 %365 %367 
                                         f32 %369 = OpCompositeExtract %368 0 
                                         f32 %370 = OpCompositeExtract %368 1 
                                         f32 %371 = OpCompositeExtract %368 2 
                                       f32_3 %372 = OpCompositeConstruct %369 %370 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %326 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %356 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %356 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat7;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 235
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %89 %128 %132 %133 %148 %163 %191 %197 %198 %200 %215 %227 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %126 0 BuiltIn 126 
                                                      OpMemberDecorate %126 1 BuiltIn 126 
                                                      OpMemberDecorate %126 2 BuiltIn 126 
                                                      OpDecorate %126 Block 
                                                      OpDecorate %132 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %163 Location 163 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %198 Location 198 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %200 Location 200 
                                                      OpDecorate %215 Location 215 
                                                      OpDecorate %227 Location 227 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 5 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 1 
                                              %61 = OpTypePointer Uniform %7 
                                          i32 %65 = OpConstant 0 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %87 = OpTypeVector %6 3 
                                              %88 = OpTypePointer Output %87 
                                Output f32_3* %89 = OpVariable Output 
                                             %125 = OpTypeArray %6 %48 
                                             %126 = OpTypeStruct %7 %6 %125 
                                             %127 = OpTypePointer Output %126 
        Output struct {f32_4; f32; f32[1];}* %128 = OpVariable Output 
                                             %130 = OpTypePointer Output %7 
                               Output f32_4* %132 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %134 = OpTypeVector %6 2 
                                         i32 %137 = OpConstant 6 
                                Input f32_4* %148 = OpVariable Input 
                                         i32 %151 = OpConstant 7 
                                             %162 = OpTypePointer Input %87 
                                Input f32_3* %163 = OpVariable Input 
                                         u32 %181 = OpConstant 2 
                                Private f32* %183 = OpVariable Private 
                               Output f32_3* %191 = OpVariable Output 
                               Output f32_4* %197 = OpVariable Output 
                                Input f32_4* %198 = OpVariable Input 
                               Output f32_3* %200 = OpVariable Output 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_3 %202 = OpConstantComposite %201 %201 %201 
                                       f32_3 %211 = OpConstantComposite %37 %37 %37 
                               Output f32_4* %215 = OpVariable Output 
                               Output f32_4* %227 = OpVariable Output 
                                       f32_4 %228 = OpConstantComposite %201 %201 %201 %201 
                                             %229 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %62 = OpAccessChain %17 %60 %60 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %59 %63 
                                                      OpStore %9 %64 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %84 = OpAccessChain %17 %60 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFAdd %82 %85 
                                                      OpStore %81 %86 
                               Uniform f32_4* %90 = OpAccessChain %17 %60 %83 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %47 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %95 %97 
                                                      OpStore %89 %98 
                                        f32_4 %99 = OpLoad %81 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %17 %83 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %17 %83 %65 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %81 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %9 %110 
                              Uniform f32_4* %111 = OpAccessChain %17 %83 %73 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %81 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                              Uniform f32_4* %118 = OpAccessChain %17 %83 %83 
                                       f32_4 %119 = OpLoad %118 
                                       f32_4 %120 = OpLoad %81 
                                       f32_4 %121 = OpVectorShuffle %120 %120 3 3 3 3 
                                       f32_4 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpFAdd %122 %123 
                                                      OpStore %9 %124 
                                       f32_4 %129 = OpLoad %9 
                               Output f32_4* %131 = OpAccessChain %128 %65 
                                                      OpStore %131 %129 
                                       f32_4 %135 = OpLoad %133 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %138 = OpAccessChain %17 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFMul %136 %140 
                              Uniform f32_4* %142 = OpAccessChain %17 %137 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_2 %145 = OpFAdd %141 %144 
                                       f32_4 %146 = OpLoad %132 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 2 3 
                                                      OpStore %132 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              Uniform f32_4* %152 = OpAccessChain %17 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %150 %154 
                              Uniform f32_4* %156 = OpAccessChain %17 %151 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                       f32_4 %160 = OpLoad %132 
                                       f32_4 %161 = OpVectorShuffle %160 %159 0 1 4 5 
                                                      OpStore %132 %161 
                                       f32_3 %164 = OpLoad %163 
                              Uniform f32_4* %165 = OpAccessChain %17 %73 %65 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %81 %25 
                                                      OpStore %169 %168 
                                       f32_3 %170 = OpLoad %163 
                              Uniform f32_4* %171 = OpAccessChain %17 %73 %60 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %170 %173 
                                Private f32* %175 = OpAccessChain %81 %48 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %163 
                              Uniform f32_4* %177 = OpAccessChain %17 %73 %73 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %182 = OpAccessChain %81 %181 
                                                      OpStore %182 %180 
                                       f32_4 %184 = OpLoad %81 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_4 %186 = OpLoad %81 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %185 %187 
                                                      OpStore %183 %188 
                                         f32 %189 = OpLoad %183 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %183 %190 
                                         f32 %192 = OpLoad %183 
                                       f32_3 %193 = OpCompositeConstruct %192 %192 %192 
                                       f32_4 %194 = OpLoad %81 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %191 %196 
                                       f32_4 %199 = OpLoad %198 
                                                      OpStore %197 %199 
                                                      OpStore %200 %202 
                                Private f32* %203 = OpAccessChain %9 %48 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %17 %65 %25 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %204 %206 
                                Private f32* %208 = OpAccessChain %9 %48 
                                                      OpStore %208 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 3 1 
                                       f32_3 %212 = OpFMul %210 %211 
                                       f32_4 %213 = OpLoad %81 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 1 5 6 
                                                      OpStore %81 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_2 %217 = OpVectorShuffle %216 %216 2 3 
                                       f32_4 %218 = OpLoad %215 
                                       f32_4 %219 = OpVectorShuffle %218 %217 0 1 4 5 
                                                      OpStore %215 %219 
                                       f32_4 %220 = OpLoad %81 
                                       f32_2 %221 = OpVectorShuffle %220 %220 2 2 
                                       f32_4 %222 = OpLoad %81 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 3 
                                       f32_2 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %215 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 2 3 
                                                      OpStore %215 %226 
                                                      OpStore %227 %228 
                                 Output f32* %230 = OpAccessChain %128 %65 %48 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                 Output f32* %233 = OpAccessChain %128 %65 %48 
                                                      OpStore %233 %232 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 489
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %225 %405 %458 %464 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 RelaxedPrecision 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 RelaxedPrecision 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 RelaxedPrecision 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %305 SpecId 305 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %458 Location 458 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %464 Location 464 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                              %21 = OpTypeVector %6 3 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeArray %7 %22 
                                              %25 = OpTypeStruct %21 %7 %7 %7 %23 %7 %24 %21 %21 %7 %6 %6 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 13 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 12 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                              Private f32_3* %179 = OpVariable Private 
                                         i32 %184 = OpConstant 11 
                                         i32 %206 = OpConstant 14 
                               Private bool* %212 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                             %224 = OpTypePointer Input %21 
                                Input f32_3* %225 = OpVariable Input 
                                             %228 = OpTypePointer Uniform %21 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %240 = OpConstant 2 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %250 = OpConstant 3 
                                         f32 %291 = OpConstant 3.674022E-40 
                               Private bool* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 5 
                                        bool %299 = OpConstantFalse 
                                        bool %305 = OpSpecConstantFalse 
                               Private bool* %308 = OpVariable Private 
                                         i32 %314 = OpConstant 6 
                                             %340 = OpTypePointer Function %21 
                                         i32 %350 = OpConstant 8 
                              Private f32_4* %355 = OpVariable Private 
                                         i32 %357 = OpConstant 7 
                              Private f32_2* %363 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                Private f32* %370 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                             %381 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %382 = OpTypeSampledImage %381 
                                             %383 = OpTypePointer UniformConstant %382 
 UniformConstant read_only Texture3DSampled* %384 = OpVariable UniformConstant 
                              Private f32_3* %395 = OpVariable Private 
                                Input f32_4* %405 = OpVariable Input 
                                Private f32* %411 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %412 = OpVariable UniformConstant 
                              Private f32_3* %417 = OpVariable Private 
                                             %433 = OpTypePointer Function %6 
                                         i32 %447 = OpConstant 9 
                                Input f32_3* %458 = OpVariable Input 
                                             %463 = OpTypePointer Output %7 
                               Output f32_4* %464 = OpVariable Output 
                                             %467 = OpTypePointer Output %6 
                                         i32 %469 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %341 = OpVariable Function 
                               Function f32* %434 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                       f32_4 %180 = OpLoad %75 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpExtInst %1 30 %181 
                                                      OpStore %179 %182 
                                       f32_3 %183 = OpLoad %179 
                                Uniform f32* %185 = OpAccessChain %27 %184 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %184 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %27 %184 
                                         f32 %190 = OpLoad %189 
                                       f32_3 %191 = OpCompositeConstruct %186 %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                         f32 %194 = OpCompositeExtract %191 2 
                                       f32_3 %195 = OpCompositeConstruct %192 %193 %194 
                                       f32_3 %196 = OpFMul %183 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpExtInst %1 29 %200 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %9 %203 
                                Private f32* %204 = OpAccessChain %9 %158 
                                         f32 %205 = OpLoad %204 
                                Uniform f32* %207 = OpAccessChain %27 %206 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %205 %209 
                                Private f32* %211 = OpAccessChain %66 %13 
                                                      OpStore %211 %210 
                                Private f32* %213 = OpAccessChain %66 %13 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %167 
                                                      OpStore %212 %215 
                                        bool %216 = OpLoad %212 
                                         i32 %217 = OpSelect %216 %171 %170 
                                         i32 %218 = OpIMul %217 %173 
                                        bool %219 = OpINotEqual %218 %170 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                       f32_3 %226 = OpLoad %225 
                                       f32_3 %227 = OpFNegate %226 
                              Uniform f32_3* %229 = OpAccessChain %27 %170 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFAdd %227 %230 
                                                      OpStore %223 %231 
                                Uniform f32* %234 = OpAccessChain %27 %233 %170 %30 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %232 %13 
                                                      OpStore %236 %235 
                                Uniform f32* %237 = OpAccessChain %27 %233 %171 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %232 %48 
                                                      OpStore %239 %238 
                                Uniform f32* %241 = OpAccessChain %27 %233 %240 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %232 %30 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %223 
                                       f32_3 %245 = OpLoad %232 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %223 %13 
                                                      OpStore %247 %246 
                                       f32_3 %249 = OpLoad %225 
                              Uniform f32_4* %251 = OpAccessChain %27 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpFNegate %253 
                                       f32_3 %255 = OpFAdd %249 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %248 
                                       f32_3 %257 = OpLoad %248 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %248 %13 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %248 %13 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 31 %261 
                                Private f32* %263 = OpAccessChain %248 %13 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %223 %13 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %248 %13 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %248 %13 
                                                      OpStore %270 %269 
                                Uniform f32* %271 = OpAccessChain %27 %250 %158 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %248 %13 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %223 %13 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFAdd %275 %277 
                                Private f32* %279 = OpAccessChain %223 %13 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %223 %13 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %27 %240 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Uniform f32* %285 = OpAccessChain %27 %240 %158 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %223 %13 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %223 %13 
                                         f32 %290 = OpLoad %289 
                                         f32 %292 = OpExtInst %1 43 %290 %167 %291 
                                Private f32* %293 = OpAccessChain %223 %13 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %27 %295 %13 
                                         f32 %297 = OpLoad %296 
                                        bool %298 = OpFOrdEqual %297 %291 
                                                      OpStore %294 %298 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                        bool %302 = OpLoad %294 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %304 
                                             %303 = OpLabel 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %390 
                                             %306 = OpLabel 
                                Uniform f32* %309 = OpAccessChain %27 %295 %48 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdEqual %310 %291 
                                                      OpStore %308 %311 
                                       f32_3 %312 = OpLoad %225 
                                       f32_3 %313 = OpVectorShuffle %312 %312 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %27 %314 %171 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                                      OpStore %232 %318 
                              Uniform f32_4* %319 = OpAccessChain %27 %314 %170 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpLoad %225 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 0 0 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_3 %325 = OpLoad %232 
                                       f32_3 %326 = OpFAdd %324 %325 
                                                      OpStore %232 %326 
                              Uniform f32_4* %327 = OpAccessChain %27 %314 %240 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpLoad %225 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_3 %333 = OpLoad %232 
                                       f32_3 %334 = OpFAdd %332 %333 
                                                      OpStore %232 %334 
                                       f32_3 %335 = OpLoad %232 
                              Uniform f32_4* %336 = OpAccessChain %27 %314 %250 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                                      OpStore %232 %339 
                                        bool %342 = OpLoad %308 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %346 
                                             %343 = OpLabel 
                                       f32_3 %345 = OpLoad %232 
                                                      OpStore %341 %345 
                                                      OpBranch %344 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %225 
                                                      OpStore %341 %347 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %348 = OpLoad %341 
                                                      OpStore %232 %348 
                                       f32_3 %349 = OpLoad %232 
                              Uniform f32_3* %351 = OpAccessChain %27 %350 
                                       f32_3 %352 = OpLoad %351 
                                       f32_3 %353 = OpFNegate %352 
                                       f32_3 %354 = OpFAdd %349 %353 
                                                      OpStore %232 %354 
                                       f32_3 %356 = OpLoad %232 
                              Uniform f32_3* %358 = OpAccessChain %27 %357 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpFMul %356 %359 
                                       f32_4 %361 = OpLoad %355 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 5 6 
                                                      OpStore %355 %362 
                                Private f32* %364 = OpAccessChain %355 %48 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %365 %96 
                                         f32 %368 = OpFAdd %366 %367 
                                Private f32* %369 = OpAccessChain %363 %13 
                                                      OpStore %369 %368 
                                Uniform f32* %371 = OpAccessChain %27 %295 %30 
                                         f32 %372 = OpLoad %371 
                                         f32 %374 = OpFMul %372 %373 
                                         f32 %375 = OpFAdd %374 %367 
                                                      OpStore %370 %375 
                                         f32 %376 = OpLoad %370 
                                Private f32* %377 = OpAccessChain %363 %13 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 40 %376 %378 
                                Private f32* %380 = OpAccessChain %355 %13 
                                                      OpStore %380 %379 
                  read_only Texture3DSampled %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %355 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 2 3 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                                      OpStore %355 %388 
                                       f32_4 %389 = OpLoad %355 
                                                      OpStore %66 %389 
                                                      OpBranch %307 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %66 %13 
                                                      OpStore %391 %291 
                                Private f32* %392 = OpAccessChain %66 %48 
                                                      OpStore %392 %291 
                                Private f32* %393 = OpAccessChain %66 %30 
                                                      OpStore %393 %291 
                                Private f32* %394 = OpAccessChain %66 %158 
                                                      OpStore %394 %291 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_4 %396 = OpLoad %66 
                              Uniform f32_4* %397 = OpAccessChain %27 %171 
                                       f32_4 %398 = OpLoad %397 
                                         f32 %399 = OpDot %396 %398 
                                Private f32* %400 = OpAccessChain %395 %13 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %395 %13 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 43 %402 %167 %291 
                                Private f32* %404 = OpAccessChain %395 %13 
                                                      OpStore %404 %403 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                                       f32_4 %408 = OpLoad %405 
                                       f32_2 %409 = OpVectorShuffle %408 %408 3 3 
                                       f32_2 %410 = OpFDiv %407 %409 
                                                      OpStore %363 %410 
                  read_only Texture2DSampled %413 = OpLoad %412 
                                       f32_2 %414 = OpLoad %363 
                                       f32_4 %415 = OpImageSampleImplicitLod %413 %414 
                                         f32 %416 = OpCompositeExtract %415 0 
                                                      OpStore %411 %416 
                                Private f32* %418 = OpAccessChain %223 %13 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %411 
                                         f32 %421 = OpFAdd %419 %420 
                                Private f32* %422 = OpAccessChain %417 %13 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %417 %13 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 43 %424 %167 %291 
                                Private f32* %426 = OpAccessChain %417 %13 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %417 %13 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %395 %13 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 37 %428 %430 
                                Private f32* %432 = OpAccessChain %395 %13 
                                                      OpStore %432 %431 
                                        bool %435 = OpLoad %294 
                                                      OpSelectionMerge %437 None 
                                                      OpBranchConditional %435 %436 %440 
                                             %436 = OpLabel 
                                Private f32* %438 = OpAccessChain %395 %13 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %434 %439 
                                                      OpBranch %437 
                                             %440 = OpLabel 
                                Private f32* %441 = OpAccessChain %417 %13 
                                         f32 %442 = OpLoad %441 
                                                      OpStore %434 %442 
                                                      OpBranch %437 
                                             %437 = OpLabel 
                                         f32 %443 = OpLoad %434 
                                Private f32* %444 = OpAccessChain %395 %13 
                                                      OpStore %444 %443 
                                       f32_4 %445 = OpLoad %75 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                              Uniform f32_4* %448 = OpAccessChain %27 %447 
                                       f32_4 %449 = OpLoad %448 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFMul %446 %450 
                                                      OpStore %417 %451 
                                       f32_3 %452 = OpLoad %395 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 0 0 
                                       f32_3 %454 = OpLoad %417 
                                       f32_3 %455 = OpFMul %453 %454 
                                                      OpStore %395 %455 
                                       f32_4 %456 = OpLoad %75 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %459 = OpLoad %458 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_3 %461 = OpLoad %395 
                                       f32_3 %462 = OpFAdd %460 %461 
                                                      OpStore %395 %462 
                                Private f32* %465 = OpAccessChain %9 %158 
                                         f32 %466 = OpLoad %465 
                                 Output f32* %468 = OpAccessChain %464 %158 
                                                      OpStore %468 %466 
                                Uniform f32* %470 = OpAccessChain %27 %469 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %472 = OpAccessChain %27 %469 
                                         f32 %473 = OpLoad %472 
                                Uniform f32* %474 = OpAccessChain %27 %469 
                                         f32 %475 = OpLoad %474 
                                       f32_3 %476 = OpCompositeConstruct %471 %473 %475 
                                         f32 %477 = OpCompositeExtract %476 0 
                                         f32 %478 = OpCompositeExtract %476 1 
                                         f32 %479 = OpCompositeExtract %476 2 
                                       f32_3 %480 = OpCompositeConstruct %477 %478 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %395 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %464 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %464 %487 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat16;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 350
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %90 %130 %134 %135 %150 %165 %201 %204 %205 %315 %330 %342 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %90 Location 90 
                                                      OpMemberDecorate %128 0 BuiltIn 128 
                                                      OpMemberDecorate %128 1 BuiltIn 128 
                                                      OpMemberDecorate %128 2 BuiltIn 128 
                                                      OpDecorate %128 Block 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %330 Location 330 
                                                      OpDecorate %342 Location 342 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 11 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 12 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 8 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Output %88 
                                Output f32_3* %90 = OpVariable Output 
                                         i32 %102 = OpConstant 10 
                                             %127 = OpTypeArray %6 %48 
                                             %128 = OpTypeStruct %7 %6 %127 
                                             %129 = OpTypePointer Output %128 
        Output struct {f32_4; f32; f32[1];}* %130 = OpVariable Output 
                                             %132 = OpTypePointer Output %7 
                               Output f32_4* %134 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                             %136 = OpTypeVector %6 2 
                                         i32 %139 = OpConstant 13 
                                Input f32_4* %150 = OpVariable Input 
                                         i32 %153 = OpConstant 14 
                                             %164 = OpTypePointer Input %88 
                                Input f32_3* %165 = OpVariable Input 
                                         i32 %167 = OpConstant 9 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %201 = OpVariable Output 
                               Output f32_4* %204 = OpVariable Output 
                                Input f32_4* %205 = OpVariable Input 
                                             %207 = OpTypePointer Private %88 
                              Private f32_3* %208 = OpVariable Private 
                              Private f32_4* %225 = OpVariable Private 
                              Private f32_3* %231 = OpVariable Private 
                                         i32 %232 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                         i32 %244 = OpConstant 6 
                                         i32 %250 = OpConstant 7 
                                         u32 %259 = OpConstant 3 
                                         f32 %281 = OpConstant 3.674022E-40 
                                       f32_3 %282 = OpConstantComposite %281 %281 %281 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_3 %303 = OpConstantComposite %302 %302 %302 
                                         f32 %305 = OpConstant 3.674022E-40 
                                       f32_3 %306 = OpConstantComposite %305 %305 %305 
                               Output f32_3* %315 = OpVariable Output 
                                       f32_3 %326 = OpConstantComposite %37 %37 %37 
                               Output f32_4* %330 = OpVariable Output 
                               Output f32_4* %342 = OpVariable Output 
                                       f32_4 %343 = OpConstantComposite %281 %281 %281 %281 
                                             %344 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %91 = OpAccessChain %17 %60 %84 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %47 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                                      OpStore %90 %99 
                                       f32_4 %100 = OpLoad %82 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %17 %102 %61 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %102 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %82 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %17 %102 %74 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %82 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %9 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                              Uniform f32_4* %120 = OpAccessChain %17 %102 %84 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %9 %126 
                                       f32_4 %131 = OpLoad %9 
                               Output f32_4* %133 = OpAccessChain %130 %66 
                                                      OpStore %133 %131 
                                       f32_4 %137 = OpLoad %135 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %140 = OpAccessChain %17 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %138 %142 
                              Uniform f32_4* %144 = OpAccessChain %17 %139 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %134 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 3 
                                                      OpStore %134 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                              Uniform f32_4* %154 = OpAccessChain %17 %153 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_2 %157 = OpFMul %152 %156 
                              Uniform f32_4* %158 = OpAccessChain %17 %153 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 2 3 
                                       f32_2 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %134 
                                       f32_4 %163 = OpVectorShuffle %162 %161 0 1 4 5 
                                                      OpStore %134 %163 
                                       f32_3 %166 = OpLoad %165 
                              Uniform f32_4* %168 = OpAccessChain %17 %167 %66 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %166 %170 
                                Private f32* %172 = OpAccessChain %82 %25 
                                                      OpStore %172 %171 
                                       f32_3 %173 = OpLoad %165 
                              Uniform f32_4* %174 = OpAccessChain %17 %167 %61 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %82 %48 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %165 
                              Uniform f32_4* %180 = OpAccessChain %17 %167 %74 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %82 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %82 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %82 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %194 = OpLoad %186 
                                       f32_3 %195 = OpCompositeConstruct %194 %194 %194 
                                       f32_4 %196 = OpLoad %82 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %82 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %82 %200 
                                       f32_4 %202 = OpLoad %82 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                                      OpStore %201 %203 
                                       f32_4 %206 = OpLoad %205 
                                                      OpStore %204 %206 
                                Private f32* %209 = OpAccessChain %82 %48 
                                         f32 %210 = OpLoad %209 
                                Private f32* %211 = OpAccessChain %82 %48 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                Private f32* %214 = OpAccessChain %208 %25 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %82 %25 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %82 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %208 %25 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFNegate %221 
                                         f32 %223 = OpFAdd %219 %222 
                                Private f32* %224 = OpAccessChain %208 %25 
                                                      OpStore %224 %223 
                                       f32_4 %226 = OpLoad %82 
                                       f32_4 %227 = OpVectorShuffle %226 %226 1 2 2 0 
                                       f32_4 %228 = OpLoad %82 
                                       f32_4 %229 = OpVectorShuffle %228 %228 0 1 2 2 
                                       f32_4 %230 = OpFMul %227 %229 
                                                      OpStore %225 %230 
                              Uniform f32_4* %233 = OpAccessChain %17 %232 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpLoad %225 
                                         f32 %236 = OpDot %234 %235 
                                Private f32* %237 = OpAccessChain %231 %25 
                                                      OpStore %237 %236 
                              Uniform f32_4* %239 = OpAccessChain %17 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %225 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %231 %48 
                                                      OpStore %243 %242 
                              Uniform f32_4* %245 = OpAccessChain %17 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %225 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %231 %184 
                                                      OpStore %249 %248 
                              Uniform f32_4* %251 = OpAccessChain %17 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpLoad %208 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %231 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %208 %258 
                                Private f32* %260 = OpAccessChain %82 %259 
                                                      OpStore %260 %44 
                              Uniform f32_4* %261 = OpAccessChain %17 %61 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %82 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %225 %25 
                                                      OpStore %265 %264 
                              Uniform f32_4* %266 = OpAccessChain %17 %74 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpLoad %82 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %225 %48 
                                                      OpStore %270 %269 
                              Uniform f32_4* %271 = OpAccessChain %17 %84 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpLoad %82 
                                         f32 %274 = OpDot %272 %273 
                                Private f32* %275 = OpAccessChain %225 %184 
                                                      OpStore %275 %274 
                                       f32_3 %276 = OpLoad %208 
                                       f32_4 %277 = OpLoad %225 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                                      OpStore %208 %279 
                                       f32_3 %280 = OpLoad %208 
                                       f32_3 %283 = OpExtInst %1 40 %280 %282 
                                                      OpStore %208 %283 
                                       f32_3 %284 = OpLoad %208 
                                       f32_3 %285 = OpExtInst %1 30 %284 
                                       f32_4 %286 = OpLoad %82 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %82 %287 
                                       f32_4 %288 = OpLoad %82 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %82 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %82 %294 
                                       f32_4 %295 = OpLoad %82 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpExtInst %1 29 %296 
                                       f32_4 %298 = OpLoad %82 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %82 %299 
                                       f32_4 %300 = OpLoad %82 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %307 = OpFAdd %304 %306 
                                       f32_4 %308 = OpLoad %82 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %82 %309 
                                       f32_4 %310 = OpLoad %82 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpExtInst %1 40 %311 %282 
                                       f32_4 %313 = OpLoad %82 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %82 %314 
                                       f32_4 %316 = OpLoad %82 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                Private f32* %318 = OpAccessChain %9 %48 
                                         f32 %319 = OpLoad %318 
                                Uniform f32* %320 = OpAccessChain %17 %66 %25 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFMul %319 %321 
                                Private f32* %323 = OpAccessChain %9 %48 
                                                      OpStore %323 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 3 1 
                                       f32_3 %327 = OpFMul %325 %326 
                                       f32_4 %328 = OpLoad %82 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 1 5 6 
                                                      OpStore %82 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_2 %332 = OpVectorShuffle %331 %331 2 3 
                                       f32_4 %333 = OpLoad %330 
                                       f32_4 %334 = OpVectorShuffle %333 %332 0 1 4 5 
                                                      OpStore %330 %334 
                                       f32_4 %335 = OpLoad %82 
                                       f32_2 %336 = OpVectorShuffle %335 %335 2 2 
                                       f32_4 %337 = OpLoad %82 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 3 
                                       f32_2 %339 = OpFAdd %336 %338 
                                       f32_4 %340 = OpLoad %330 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 2 3 
                                                      OpStore %330 %341 
                                                      OpStore %342 %343 
                                 Output f32* %345 = OpAccessChain %130 %66 %48 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFNegate %346 
                                 Output f32* %348 = OpAccessChain %130 %66 %48 
                                                      OpStore %348 %347 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 489
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %225 %405 %458 %464 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 RelaxedPrecision 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 RelaxedPrecision 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 RelaxedPrecision 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %305 SpecId 305 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %458 Location 458 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %464 Location 464 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                              %21 = OpTypeVector %6 3 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeArray %7 %22 
                                              %25 = OpTypeStruct %21 %7 %7 %7 %23 %7 %24 %21 %21 %7 %6 %6 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 13 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 12 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                              Private f32_3* %179 = OpVariable Private 
                                         i32 %184 = OpConstant 11 
                                         i32 %206 = OpConstant 14 
                               Private bool* %212 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                             %224 = OpTypePointer Input %21 
                                Input f32_3* %225 = OpVariable Input 
                                             %228 = OpTypePointer Uniform %21 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %240 = OpConstant 2 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %250 = OpConstant 3 
                                         f32 %291 = OpConstant 3.674022E-40 
                               Private bool* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 5 
                                        bool %299 = OpConstantFalse 
                                        bool %305 = OpSpecConstantFalse 
                               Private bool* %308 = OpVariable Private 
                                         i32 %314 = OpConstant 6 
                                             %340 = OpTypePointer Function %21 
                                         i32 %350 = OpConstant 8 
                              Private f32_4* %355 = OpVariable Private 
                                         i32 %357 = OpConstant 7 
                              Private f32_2* %363 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                Private f32* %370 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                             %381 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %382 = OpTypeSampledImage %381 
                                             %383 = OpTypePointer UniformConstant %382 
 UniformConstant read_only Texture3DSampled* %384 = OpVariable UniformConstant 
                              Private f32_3* %395 = OpVariable Private 
                                Input f32_4* %405 = OpVariable Input 
                                Private f32* %411 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %412 = OpVariable UniformConstant 
                              Private f32_3* %417 = OpVariable Private 
                                             %433 = OpTypePointer Function %6 
                                         i32 %447 = OpConstant 9 
                                Input f32_3* %458 = OpVariable Input 
                                             %463 = OpTypePointer Output %7 
                               Output f32_4* %464 = OpVariable Output 
                                             %467 = OpTypePointer Output %6 
                                         i32 %469 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %341 = OpVariable Function 
                               Function f32* %434 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                       f32_4 %180 = OpLoad %75 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpExtInst %1 30 %181 
                                                      OpStore %179 %182 
                                       f32_3 %183 = OpLoad %179 
                                Uniform f32* %185 = OpAccessChain %27 %184 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %184 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %27 %184 
                                         f32 %190 = OpLoad %189 
                                       f32_3 %191 = OpCompositeConstruct %186 %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                         f32 %194 = OpCompositeExtract %191 2 
                                       f32_3 %195 = OpCompositeConstruct %192 %193 %194 
                                       f32_3 %196 = OpFMul %183 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpExtInst %1 29 %200 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %9 %203 
                                Private f32* %204 = OpAccessChain %9 %158 
                                         f32 %205 = OpLoad %204 
                                Uniform f32* %207 = OpAccessChain %27 %206 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %205 %209 
                                Private f32* %211 = OpAccessChain %66 %13 
                                                      OpStore %211 %210 
                                Private f32* %213 = OpAccessChain %66 %13 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %167 
                                                      OpStore %212 %215 
                                        bool %216 = OpLoad %212 
                                         i32 %217 = OpSelect %216 %171 %170 
                                         i32 %218 = OpIMul %217 %173 
                                        bool %219 = OpINotEqual %218 %170 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                       f32_3 %226 = OpLoad %225 
                                       f32_3 %227 = OpFNegate %226 
                              Uniform f32_3* %229 = OpAccessChain %27 %170 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFAdd %227 %230 
                                                      OpStore %223 %231 
                                Uniform f32* %234 = OpAccessChain %27 %233 %170 %30 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %232 %13 
                                                      OpStore %236 %235 
                                Uniform f32* %237 = OpAccessChain %27 %233 %171 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %232 %48 
                                                      OpStore %239 %238 
                                Uniform f32* %241 = OpAccessChain %27 %233 %240 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %232 %30 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %223 
                                       f32_3 %245 = OpLoad %232 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %223 %13 
                                                      OpStore %247 %246 
                                       f32_3 %249 = OpLoad %225 
                              Uniform f32_4* %251 = OpAccessChain %27 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpFNegate %253 
                                       f32_3 %255 = OpFAdd %249 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %248 
                                       f32_3 %257 = OpLoad %248 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %248 %13 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %248 %13 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 31 %261 
                                Private f32* %263 = OpAccessChain %248 %13 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %223 %13 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %248 %13 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %248 %13 
                                                      OpStore %270 %269 
                                Uniform f32* %271 = OpAccessChain %27 %250 %158 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %248 %13 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %223 %13 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFAdd %275 %277 
                                Private f32* %279 = OpAccessChain %223 %13 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %223 %13 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %27 %240 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Uniform f32* %285 = OpAccessChain %27 %240 %158 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %223 %13 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %223 %13 
                                         f32 %290 = OpLoad %289 
                                         f32 %292 = OpExtInst %1 43 %290 %167 %291 
                                Private f32* %293 = OpAccessChain %223 %13 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %27 %295 %13 
                                         f32 %297 = OpLoad %296 
                                        bool %298 = OpFOrdEqual %297 %291 
                                                      OpStore %294 %298 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                        bool %302 = OpLoad %294 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %304 
                                             %303 = OpLabel 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %390 
                                             %306 = OpLabel 
                                Uniform f32* %309 = OpAccessChain %27 %295 %48 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdEqual %310 %291 
                                                      OpStore %308 %311 
                                       f32_3 %312 = OpLoad %225 
                                       f32_3 %313 = OpVectorShuffle %312 %312 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %27 %314 %171 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                                      OpStore %232 %318 
                              Uniform f32_4* %319 = OpAccessChain %27 %314 %170 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpLoad %225 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 0 0 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_3 %325 = OpLoad %232 
                                       f32_3 %326 = OpFAdd %324 %325 
                                                      OpStore %232 %326 
                              Uniform f32_4* %327 = OpAccessChain %27 %314 %240 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpLoad %225 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_3 %333 = OpLoad %232 
                                       f32_3 %334 = OpFAdd %332 %333 
                                                      OpStore %232 %334 
                                       f32_3 %335 = OpLoad %232 
                              Uniform f32_4* %336 = OpAccessChain %27 %314 %250 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                                      OpStore %232 %339 
                                        bool %342 = OpLoad %308 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %346 
                                             %343 = OpLabel 
                                       f32_3 %345 = OpLoad %232 
                                                      OpStore %341 %345 
                                                      OpBranch %344 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %225 
                                                      OpStore %341 %347 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %348 = OpLoad %341 
                                                      OpStore %232 %348 
                                       f32_3 %349 = OpLoad %232 
                              Uniform f32_3* %351 = OpAccessChain %27 %350 
                                       f32_3 %352 = OpLoad %351 
                                       f32_3 %353 = OpFNegate %352 
                                       f32_3 %354 = OpFAdd %349 %353 
                                                      OpStore %232 %354 
                                       f32_3 %356 = OpLoad %232 
                              Uniform f32_3* %358 = OpAccessChain %27 %357 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpFMul %356 %359 
                                       f32_4 %361 = OpLoad %355 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 5 6 
                                                      OpStore %355 %362 
                                Private f32* %364 = OpAccessChain %355 %48 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %365 %96 
                                         f32 %368 = OpFAdd %366 %367 
                                Private f32* %369 = OpAccessChain %363 %13 
                                                      OpStore %369 %368 
                                Uniform f32* %371 = OpAccessChain %27 %295 %30 
                                         f32 %372 = OpLoad %371 
                                         f32 %374 = OpFMul %372 %373 
                                         f32 %375 = OpFAdd %374 %367 
                                                      OpStore %370 %375 
                                         f32 %376 = OpLoad %370 
                                Private f32* %377 = OpAccessChain %363 %13 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 40 %376 %378 
                                Private f32* %380 = OpAccessChain %355 %13 
                                                      OpStore %380 %379 
                  read_only Texture3DSampled %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %355 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 2 3 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                                      OpStore %355 %388 
                                       f32_4 %389 = OpLoad %355 
                                                      OpStore %66 %389 
                                                      OpBranch %307 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %66 %13 
                                                      OpStore %391 %291 
                                Private f32* %392 = OpAccessChain %66 %48 
                                                      OpStore %392 %291 
                                Private f32* %393 = OpAccessChain %66 %30 
                                                      OpStore %393 %291 
                                Private f32* %394 = OpAccessChain %66 %158 
                                                      OpStore %394 %291 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_4 %396 = OpLoad %66 
                              Uniform f32_4* %397 = OpAccessChain %27 %171 
                                       f32_4 %398 = OpLoad %397 
                                         f32 %399 = OpDot %396 %398 
                                Private f32* %400 = OpAccessChain %395 %13 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %395 %13 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 43 %402 %167 %291 
                                Private f32* %404 = OpAccessChain %395 %13 
                                                      OpStore %404 %403 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                                       f32_4 %408 = OpLoad %405 
                                       f32_2 %409 = OpVectorShuffle %408 %408 3 3 
                                       f32_2 %410 = OpFDiv %407 %409 
                                                      OpStore %363 %410 
                  read_only Texture2DSampled %413 = OpLoad %412 
                                       f32_2 %414 = OpLoad %363 
                                       f32_4 %415 = OpImageSampleImplicitLod %413 %414 
                                         f32 %416 = OpCompositeExtract %415 0 
                                                      OpStore %411 %416 
                                Private f32* %418 = OpAccessChain %223 %13 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %411 
                                         f32 %421 = OpFAdd %419 %420 
                                Private f32* %422 = OpAccessChain %417 %13 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %417 %13 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 43 %424 %167 %291 
                                Private f32* %426 = OpAccessChain %417 %13 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %417 %13 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %395 %13 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 37 %428 %430 
                                Private f32* %432 = OpAccessChain %395 %13 
                                                      OpStore %432 %431 
                                        bool %435 = OpLoad %294 
                                                      OpSelectionMerge %437 None 
                                                      OpBranchConditional %435 %436 %440 
                                             %436 = OpLabel 
                                Private f32* %438 = OpAccessChain %395 %13 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %434 %439 
                                                      OpBranch %437 
                                             %440 = OpLabel 
                                Private f32* %441 = OpAccessChain %417 %13 
                                         f32 %442 = OpLoad %441 
                                                      OpStore %434 %442 
                                                      OpBranch %437 
                                             %437 = OpLabel 
                                         f32 %443 = OpLoad %434 
                                Private f32* %444 = OpAccessChain %395 %13 
                                                      OpStore %444 %443 
                                       f32_4 %445 = OpLoad %75 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                              Uniform f32_4* %448 = OpAccessChain %27 %447 
                                       f32_4 %449 = OpLoad %448 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFMul %446 %450 
                                                      OpStore %417 %451 
                                       f32_3 %452 = OpLoad %395 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 0 0 
                                       f32_3 %454 = OpLoad %417 
                                       f32_3 %455 = OpFMul %453 %454 
                                                      OpStore %395 %455 
                                       f32_4 %456 = OpLoad %75 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %459 = OpLoad %458 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_3 %461 = OpLoad %395 
                                       f32_3 %462 = OpFAdd %460 %461 
                                                      OpStore %395 %462 
                                Private f32* %465 = OpAccessChain %9 %158 
                                         f32 %466 = OpLoad %465 
                                 Output f32* %468 = OpAccessChain %464 %158 
                                                      OpStore %468 %466 
                                Uniform f32* %470 = OpAccessChain %27 %469 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %472 = OpAccessChain %27 %469 
                                         f32 %473 = OpLoad %472 
                                Uniform f32* %474 = OpAccessChain %27 %469 
                                         f32 %475 = OpLoad %474 
                                       f32_3 %476 = OpCompositeConstruct %471 %473 %475 
                                         f32 %477 = OpCompositeExtract %476 0 
                                         f32 %478 = OpCompositeExtract %476 1 
                                         f32 %479 = OpCompositeExtract %476 2 
                                       f32_3 %480 = OpCompositeConstruct %477 %478 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %395 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %464 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %464 %487 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat15;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = max(u_xlat2, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 338
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %126 %136 %137 %152 %167 %204 %207 %210 %211 %328 %331 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %124 0 BuiltIn 124 
                                                      OpMemberDecorate %124 1 BuiltIn 124 
                                                      OpMemberDecorate %124 2 BuiltIn 124 
                                                      OpDecorate %124 Block 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %328 Location 328 
                                                      OpDecorate %331 Location 331 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 8 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 9 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 5 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 7 
                                             %123 = OpTypeArray %6 %50 
                                             %124 = OpTypeStruct %7 %6 %123 
                                             %125 = OpTypePointer Output %124 
        Output struct {f32_4; f32; f32[1];}* %126 = OpVariable Output 
                                             %134 = OpTypePointer Output %7 
                               Output f32_4* %136 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                             %138 = OpTypeVector %6 2 
                                         i32 %141 = OpConstant 10 
                                Input f32_4* %152 = OpVariable Input 
                                         i32 %155 = OpConstant 11 
                                             %166 = OpTypePointer Input %90 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 6 
                                         u32 %186 = OpConstant 2 
                                Private f32* %188 = OpVariable Private 
                                             %203 = OpTypePointer Output %90 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                Input f32_4* %211 = OpVariable Input 
                              Private f32_4* %219 = OpVariable Private 
                              Private f32_4* %227 = OpVariable Private 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_4 %264 = OpConstantComposite %263 %263 %263 %263 
                                       f32_4 %272 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_4 %281 = OpConstantComposite %280 %280 %280 %280 
                                         i32 %288 = OpConstant 4 
                               Output f32_3* %328 = OpVariable Output 
                               Output f32_4* %331 = OpVariable Output 
                                             %332 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %127 = OpAccessChain %19 %105 %86 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %84 
                                       f32_4 %130 = OpVectorShuffle %129 %129 3 3 3 3 
                                       f32_4 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %102 
                                       f32_4 %133 = OpFAdd %131 %132 
                               Output f32_4* %135 = OpAccessChain %126 %68 
                                                      OpStore %135 %133 
                                       f32_4 %139 = OpLoad %137 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %19 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %19 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                       f32_4 %150 = OpLoad %136 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %136 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %19 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %136 
                                       f32_4 %165 = OpVectorShuffle %164 %163 0 1 4 5 
                                                      OpStore %136 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %19 %169 %68 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %174 = OpAccessChain %84 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %167 
                              Uniform f32_4* %176 = OpAccessChain %19 %169 %63 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %180 = OpAccessChain %84 %50 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %167 
                              Uniform f32_4* %182 = OpAccessChain %19 %169 %76 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %84 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %84 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %84 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                         f32 %196 = OpLoad %188 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_4 %198 = OpLoad %84 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %84 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %84 %202 
                                       f32_4 %205 = OpLoad %84 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                                      OpStore %204 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %207 %209 
                                       f32_4 %212 = OpLoad %211 
                                                      OpStore %210 %212 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %213 1 1 1 1 
                                       f32_4 %215 = OpFNegate %214 
                              Uniform f32_4* %216 = OpAccessChain %19 %63 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpFAdd %215 %217 
                                                      OpStore %102 %218 
                                       f32_4 %220 = OpLoad %84 
                                       f32_4 %221 = OpVectorShuffle %220 %220 1 1 1 1 
                                       f32_4 %222 = OpLoad %102 
                                       f32_4 %223 = OpFMul %221 %222 
                                                      OpStore %219 %223 
                                       f32_4 %224 = OpLoad %102 
                                       f32_4 %225 = OpLoad %102 
                                       f32_4 %226 = OpFMul %224 %225 
                                                      OpStore %102 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpVectorShuffle %228 %228 0 0 0 0 
                                       f32_4 %230 = OpFNegate %229 
                              Uniform f32_4* %231 = OpAccessChain %19 %68 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpFAdd %230 %232 
                                                      OpStore %227 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %234 2 2 2 2 
                                       f32_4 %236 = OpFNegate %235 
                              Uniform f32_4* %237 = OpAccessChain %19 %76 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpFAdd %236 %238 
                                                      OpStore %9 %239 
                                       f32_4 %240 = OpLoad %227 
                                       f32_4 %241 = OpLoad %84 
                                       f32_4 %242 = OpVectorShuffle %241 %241 0 0 0 0 
                                       f32_4 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %219 
                                       f32_4 %245 = OpFAdd %243 %244 
                                                      OpStore %219 %245 
                                       f32_4 %246 = OpLoad %227 
                                       f32_4 %247 = OpLoad %227 
                                       f32_4 %248 = OpFMul %246 %247 
                                       f32_4 %249 = OpLoad %102 
                                       f32_4 %250 = OpFAdd %248 %249 
                                                      OpStore %102 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpFMul %251 %252 
                                       f32_4 %254 = OpLoad %102 
                                       f32_4 %255 = OpFAdd %253 %254 
                                                      OpStore %102 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpLoad %84 
                                       f32_4 %258 = OpVectorShuffle %257 %257 2 2 2 2 
                                       f32_4 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %219 
                                       f32_4 %261 = OpFAdd %259 %260 
                                                      OpStore %9 %261 
                                       f32_4 %262 = OpLoad %102 
                                       f32_4 %265 = OpExtInst %1 40 %262 %264 
                                                      OpStore %84 %265 
                                       f32_4 %266 = OpLoad %84 
                                       f32_4 %267 = OpExtInst %1 32 %266 
                                                      OpStore %102 %267 
                                       f32_4 %268 = OpLoad %84 
                              Uniform f32_4* %269 = OpAccessChain %19 %86 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpFMul %268 %270 
                                       f32_4 %273 = OpFAdd %271 %272 
                                                      OpStore %84 %273 
                                       f32_4 %274 = OpLoad %84 
                                       f32_4 %275 = OpFDiv %272 %274 
                                                      OpStore %84 %275 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpLoad %102 
                                       f32_4 %278 = OpFMul %276 %277 
                                                      OpStore %9 %278 
                                       f32_4 %279 = OpLoad %9 
                                       f32_4 %282 = OpExtInst %1 40 %279 %281 
                                                      OpStore %9 %282 
                                       f32_4 %283 = OpLoad %84 
                                       f32_4 %284 = OpLoad %9 
                                       f32_4 %285 = OpFMul %283 %284 
                                                      OpStore %9 %285 
                                       f32_4 %286 = OpLoad %9 
                                       f32_3 %287 = OpVectorShuffle %286 %286 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %19 %288 %63 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %287 %291 
                                       f32_4 %293 = OpLoad %84 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %84 %294 
                              Uniform f32_4* %295 = OpAccessChain %19 %288 %68 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %84 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %84 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %84 %305 
                              Uniform f32_4* %306 = OpAccessChain %19 %288 %76 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 2 2 2 
                                       f32_3 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %84 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %9 %316 
                              Uniform f32_4* %317 = OpAccessChain %19 %288 %86 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 3 3 3 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_3 %325 = OpFAdd %322 %324 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %9 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                                      OpStore %328 %330 
                                                      OpStore %331 %281 
                                 Output f32* %333 = OpAccessChain %126 %68 %50 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFNegate %334 
                                 Output f32* %336 = OpAccessChain %126 %68 %50 
                                                      OpStore %336 %335 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 381
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %240 %350 %356 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %24 0 RelaxedPrecision 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 RelaxedPrecision 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 RelaxedPrecision 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 Location 356 
                                                      OpDecorate %376 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeStruct %7 %7 %22 %23 %23 %7 %6 %6 %6 %7 %6 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %26 = OpVariable Uniform 
                                              %27 = OpTypeInt 32 1 
                                          i32 %28 = OpConstant 9 
                                          u32 %29 = OpConstant 2 
                                              %30 = OpTypePointer Uniform %6 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          u32 %47 = OpConstant 1 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                        f32_3 %71 = OpConstantComposite %68 %69 %70 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 8 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                             %100 = OpTypePointer Private %61 
                              Private f32_2* %101 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_2 %107 = OpConstantComposite %106 %106 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                             %116 = OpTypePointer Private %23 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %124 %125 %126 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         u32 %157 = OpConstant 3 
                                         f32 %160 = OpConstant 3.674022E-40 
                               Private bool* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         i32 %169 = OpConstant 0 
                                         i32 %170 = OpConstant 1 
                                         i32 %172 = OpConstant -1 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %183 = OpConstant 7 
                                         i32 %205 = OpConstant 10 
                               Private bool* %211 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                              Private f32_3* %238 = OpVariable Private 
                                             %239 = OpTypePointer Input %23 
                                Input f32_3* %240 = OpVariable Input 
                                         i32 %243 = OpConstant 2 
                                         i32 %265 = OpConstant 3 
                              Private f32_3* %270 = OpVariable Private 
                                             %271 = OpTypePointer Function %23 
                                         i32 %281 = OpConstant 4 
                                             %282 = OpTypePointer Uniform %23 
                              Private f32_4* %287 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %312 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %313 = OpTypeSampledImage %312 
                                             %314 = OpTypePointer UniformConstant %313 
 UniformConstant read_only Texture3DSampled* %315 = OpVariable UniformConstant 
                              Private f32_3* %326 = OpVariable Private 
                              Private f32_3* %336 = OpVariable Private 
                                         i32 %339 = OpConstant 5 
                                Input f32_3* %350 = OpVariable Input 
                                             %355 = OpTypePointer Output %7 
                               Output f32_4* %356 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                         i32 %361 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %272 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %31 = OpAccessChain %26 %28 %29 
                                          f32 %32 = OpLoad %31 
                                          f32 %34 = OpFMul %32 %33 
                                 Private f32* %35 = OpAccessChain %9 %13 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFAdd %34 %36 
                                 Private f32* %38 = OpAccessChain %9 %13 
                                                      OpStore %38 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpExtInst %1 13 %40 
                                 Private f32* %42 = OpAccessChain %9 %13 
                                                      OpStore %42 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %47 
                                                      OpStore %51 %50 
                                   Input f32* %52 = OpAccessChain %11 %13 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %9 %13 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_4 %62 = OpLoad %9 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %60 %63 
                                                      OpStore %55 %64 
                                        f32_4 %66 = OpLoad %55 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %72 = OpDot %67 %71 
                                 Private f32* %73 = OpAccessChain %65 %13 
                                                      OpStore %73 %72 
                                        f32_4 %75 = OpLoad %55 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %55 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %26 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %55 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                 Private f32* %93 = OpAccessChain %65 %13 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdLessThan %94 %95 
                                                      OpStore %92 %96 
                                         bool %97 = OpLoad %92 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %152 
                                              %98 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %26 %28 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %108 = OpFMul %105 %107 
                                                      OpStore %101 %108 
                                       f32_4 %109 = OpLoad %11 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %113 = OpFMul %110 %112 
                                       f32_2 %114 = OpLoad %101 
                                       f32_2 %115 = OpFAdd %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %120 = OpLoad %101 
                                       f32_4 %121 = OpImageSampleImplicitLod %119 %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                                      OpStore %117 %122 
                                       f32_3 %123 = OpLoad %117 
                                       f32_3 %128 = OpFMul %123 %127 
                                       f32_4 %129 = OpLoad %74 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %74 %130 
                                       f32_4 %131 = OpLoad %74 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpExtInst %1 30 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %74 %135 
                                       f32_4 %136 = OpLoad %74 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %74 %142 
                                       f32_4 %143 = OpLoad %74 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 29 %144 
                                       f32_4 %146 = OpLoad %74 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %74 %147 
                                       f32_4 %148 = OpLoad %74 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %74 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %74 %151 
                                                      OpBranch %99 
                                             %152 = OpLabel 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                Private f32* %158 = OpAccessChain %9 %157 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFAdd %159 %160 
                                Private f32* %162 = OpAccessChain %65 %13 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %65 %13 
                                         f32 %165 = OpLoad %164 
                                        bool %167 = OpFOrdLessThan %165 %166 
                                                      OpStore %163 %167 
                                        bool %168 = OpLoad %163 
                                         i32 %171 = OpSelect %168 %170 %169 
                                         i32 %173 = OpIMul %171 %172 
                                        bool %174 = OpINotEqual %173 %169 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpKill
                                             %176 = OpLabel 
                                       f32_4 %179 = OpLoad %74 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %178 %181 
                                       f32_3 %182 = OpLoad %178 
                                Uniform f32* %184 = OpAccessChain %26 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %26 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %26 %183 
                                         f32 %189 = OpLoad %188 
                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                         f32 %192 = OpCompositeExtract %190 1 
                                         f32 %193 = OpCompositeExtract %190 2 
                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
                                       f32_3 %195 = OpFMul %182 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %9 %197 
                                       f32_4 %198 = OpLoad %9 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpExtInst %1 29 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %9 %202 
                                Private f32* %203 = OpAccessChain %9 %157 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %26 %205 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %204 %208 
                                Private f32* %210 = OpAccessChain %65 %13 
                                                      OpStore %210 %209 
                                Private f32* %212 = OpAccessChain %65 %13 
                                         f32 %213 = OpLoad %212 
                                        bool %214 = OpFOrdLessThan %213 %166 
                                                      OpStore %211 %214 
                                        bool %215 = OpLoad %211 
                                         i32 %216 = OpSelect %215 %170 %169 
                                         i32 %217 = OpIMul %216 %172 
                                        bool %218 = OpINotEqual %217 %169 
                                                      OpSelectionMerge %220 None 
                                                      OpBranchConditional %218 %219 %220 
                                             %219 = OpLabel 
                                                      OpKill
                                             %220 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %26 %170 %13 
                                         f32 %223 = OpLoad %222 
                                        bool %225 = OpFOrdEqual %223 %224 
                                                      OpStore %211 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %211 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %321 
                                             %233 = OpLabel 
                                Uniform f32* %235 = OpAccessChain %26 %170 %47 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdEqual %236 %224 
                                                      OpStore %211 %237 
                                       f32_3 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %26 %243 %170 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                                      OpStore %238 %247 
                              Uniform f32_4* %248 = OpAccessChain %26 %243 %169 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpLoad %240 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %238 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %238 %255 
                              Uniform f32_4* %256 = OpAccessChain %26 %243 %243 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %240 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %238 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %238 %263 
                                       f32_3 %264 = OpLoad %238 
                              Uniform f32_4* %266 = OpAccessChain %26 %243 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %264 %268 
                                                      OpStore %238 %269 
                                        bool %273 = OpLoad %211 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %277 
                                             %274 = OpLabel 
                                       f32_3 %276 = OpLoad %238 
                                                      OpStore %272 %276 
                                                      OpBranch %275 
                                             %277 = OpLabel 
                                       f32_3 %278 = OpLoad %240 
                                                      OpStore %272 %278 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                       f32_3 %279 = OpLoad %272 
                                                      OpStore %270 %279 
                                       f32_3 %280 = OpLoad %270 
                              Uniform f32_3* %283 = OpAccessChain %26 %281 
                                       f32_3 %284 = OpLoad %283 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_3 %286 = OpFAdd %280 %285 
                                                      OpStore %270 %286 
                                       f32_3 %288 = OpLoad %270 
                              Uniform f32_3* %289 = OpAccessChain %26 %265 
                                       f32_3 %290 = OpLoad %289 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %287 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 4 5 6 
                                                      OpStore %287 %293 
                                Private f32* %294 = OpAccessChain %287 %47 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %295 %95 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %270 %13 
                                                      OpStore %299 %298 
                                Uniform f32* %300 = OpAccessChain %26 %170 %29 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFMul %301 %302 
                                         f32 %304 = OpFAdd %303 %297 
                                Private f32* %305 = OpAccessChain %238 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %238 %13 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %270 %13 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 40 %307 %309 
                                Private f32* %311 = OpAccessChain %287 %13 
                                                      OpStore %311 %310 
                  read_only Texture3DSampled %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %287 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 2 3 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %287 %319 
                                       f32_4 %320 = OpLoad %287 
                                                      OpStore %65 %320 
                                                      OpBranch %234 
                                             %321 = OpLabel 
                                Private f32* %322 = OpAccessChain %65 %13 
                                                      OpStore %322 %224 
                                Private f32* %323 = OpAccessChain %65 %47 
                                                      OpStore %323 %224 
                                Private f32* %324 = OpAccessChain %65 %29 
                                                      OpStore %324 %224 
                                Private f32* %325 = OpAccessChain %65 %157 
                                                      OpStore %325 %224 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %327 = OpLoad %65 
                              Uniform f32_4* %328 = OpAccessChain %26 %169 
                                       f32_4 %329 = OpLoad %328 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %326 %13 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %326 %13 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 43 %333 %166 %224 
                                Private f32* %335 = OpAccessChain %326 %13 
                                                      OpStore %335 %334 
                                       f32_4 %337 = OpLoad %74 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %26 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %336 %343 
                                       f32_3 %344 = OpLoad %326 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpLoad %336 
                                       f32_3 %347 = OpFMul %345 %346 
                                                      OpStore %326 %347 
                                       f32_4 %348 = OpLoad %74 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_3 %353 = OpLoad %326 
                                       f32_3 %354 = OpFAdd %352 %353 
                                                      OpStore %326 %354 
                                Private f32* %357 = OpAccessChain %9 %157 
                                         f32 %358 = OpLoad %357 
                                 Output f32* %360 = OpAccessChain %356 %157 
                                                      OpStore %360 %358 
                                Uniform f32* %362 = OpAccessChain %26 %361 
                                         f32 %363 = OpLoad %362 
                                Uniform f32* %364 = OpAccessChain %26 %361 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %366 = OpAccessChain %26 %361 
                                         f32 %367 = OpLoad %366 
                                       f32_3 %368 = OpCompositeConstruct %363 %365 %367 
                                         f32 %369 = OpCompositeExtract %368 0 
                                         f32 %370 = OpCompositeExtract %368 1 
                                         f32 %371 = OpCompositeExtract %368 2 
                                       f32_3 %372 = OpCompositeConstruct %369 %370 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %326 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %356 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %356 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat18;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat1 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 440
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %126 %136 %137 %152 %167 %204 %207 %210 %211 %430 %433 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %124 0 BuiltIn 124 
                                                      OpMemberDecorate %124 1 BuiltIn 124 
                                                      OpMemberDecorate %124 2 BuiltIn 124 
                                                      OpDecorate %124 Block 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %430 Location 430 
                                                      OpDecorate %433 Location 433 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 15 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 16 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 12 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 14 
                                             %123 = OpTypeArray %6 %50 
                                             %124 = OpTypeStruct %7 %6 %123 
                                             %125 = OpTypePointer Output %124 
        Output struct {f32_4; f32; f32[1];}* %126 = OpVariable Output 
                                             %134 = OpTypePointer Output %7 
                               Output f32_4* %136 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                             %138 = OpTypeVector %6 2 
                                         i32 %141 = OpConstant 17 
                                Input f32_4* %152 = OpVariable Input 
                                         i32 %155 = OpConstant 18 
                                             %166 = OpTypePointer Input %90 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 13 
                                         u32 %186 = OpConstant 2 
                                Private f32* %188 = OpVariable Private 
                                             %203 = OpTypePointer Output %90 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                Input f32_4* %211 = OpVariable Input 
                                             %213 = OpTypePointer Private %90 
                              Private f32_3* %214 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                              Private f32_3* %237 = OpVariable Private 
                                         i32 %238 = OpConstant 8 
                                         i32 %244 = OpConstant 9 
                                         i32 %250 = OpConstant 10 
                                         i32 %256 = OpConstant 11 
                                         u32 %265 = OpConstant 3 
                                         i32 %267 = OpConstant 5 
                                         i32 %273 = OpConstant 6 
                                         i32 %279 = OpConstant 7 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_3 %290 = OpConstantComposite %289 %289 %289 
                              Private f32_3* %292 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                       f32_3 %297 = OpConstantComposite %296 %296 %296 
                                         f32 %302 = OpConstant 3.674022E-40 
                                       f32_3 %303 = OpConstantComposite %302 %302 %302 
                                         f32 %305 = OpConstant 3.674022E-40 
                                       f32_3 %306 = OpConstantComposite %305 %305 %305 
                              Private f32_4* %316 = OpVariable Private 
                              Private f32_4* %324 = OpVariable Private 
                                         f32 %360 = OpConstant 3.674022E-40 
                                       f32_4 %361 = OpConstantComposite %360 %360 %360 %360 
                                       f32_4 %369 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %377 = OpConstantComposite %289 %289 %289 %289 
                                         i32 %384 = OpConstant 4 
                               Output f32_3* %430 = OpVariable Output 
                               Output f32_4* %433 = OpVariable Output 
                                             %434 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %127 = OpAccessChain %19 %105 %86 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %84 
                                       f32_4 %130 = OpVectorShuffle %129 %129 3 3 3 3 
                                       f32_4 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %102 
                                       f32_4 %133 = OpFAdd %131 %132 
                               Output f32_4* %135 = OpAccessChain %126 %68 
                                                      OpStore %135 %133 
                                       f32_4 %139 = OpLoad %137 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %19 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %19 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                       f32_4 %150 = OpLoad %136 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %136 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %19 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %136 
                                       f32_4 %165 = OpVectorShuffle %164 %163 0 1 4 5 
                                                      OpStore %136 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %19 %169 %68 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %174 = OpAccessChain %84 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %167 
                              Uniform f32_4* %176 = OpAccessChain %19 %169 %63 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %180 = OpAccessChain %84 %50 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %167 
                              Uniform f32_4* %182 = OpAccessChain %19 %169 %76 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %84 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %84 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %84 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                         f32 %196 = OpLoad %188 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_4 %198 = OpLoad %84 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %84 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %84 %202 
                                       f32_4 %205 = OpLoad %84 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                                      OpStore %204 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %207 %209 
                                       f32_4 %212 = OpLoad %211 
                                                      OpStore %210 %212 
                                Private f32* %215 = OpAccessChain %84 %50 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %84 %50 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %214 %27 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %84 %27 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %84 %27 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %214 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %214 %27 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %84 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %84 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %239 = OpAccessChain %19 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %231 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %237 %27 
                                                      OpStore %243 %242 
                              Uniform f32_4* %245 = OpAccessChain %19 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %231 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %237 %50 
                                                      OpStore %249 %248 
                              Uniform f32_4* %251 = OpAccessChain %19 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpLoad %231 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %237 %186 
                                                      OpStore %255 %254 
                              Uniform f32_4* %257 = OpAccessChain %19 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpLoad %214 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 0 0 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_3 %263 = OpLoad %237 
                                       f32_3 %264 = OpFAdd %262 %263 
                                                      OpStore %214 %264 
                                Private f32* %266 = OpAccessChain %84 %265 
                                                      OpStore %266 %46 
                              Uniform f32_4* %268 = OpAccessChain %19 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpLoad %84 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %237 %27 
                                                      OpStore %272 %271 
                              Uniform f32_4* %274 = OpAccessChain %19 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %84 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %237 %50 
                                                      OpStore %278 %277 
                              Uniform f32_4* %280 = OpAccessChain %19 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpLoad %84 
                                         f32 %283 = OpDot %281 %282 
                                Private f32* %284 = OpAccessChain %237 %186 
                                                      OpStore %284 %283 
                                       f32_3 %285 = OpLoad %214 
                                       f32_3 %286 = OpLoad %237 
                                       f32_3 %287 = OpFAdd %285 %286 
                                                      OpStore %214 %287 
                                       f32_3 %288 = OpLoad %214 
                                       f32_3 %291 = OpExtInst %1 40 %288 %290 
                                                      OpStore %214 %291 
                                       f32_3 %293 = OpLoad %214 
                                       f32_3 %294 = OpExtInst %1 30 %293 
                                                      OpStore %292 %294 
                                       f32_3 %295 = OpLoad %292 
                                       f32_3 %298 = OpFMul %295 %297 
                                                      OpStore %292 %298 
                                       f32_3 %299 = OpLoad %292 
                                       f32_3 %300 = OpExtInst %1 29 %299 
                                                      OpStore %292 %300 
                                       f32_3 %301 = OpLoad %292 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_3 %307 = OpFAdd %304 %306 
                                                      OpStore %292 %307 
                                       f32_3 %308 = OpLoad %292 
                                       f32_3 %309 = OpExtInst %1 40 %308 %290 
                                                      OpStore %292 %309 
                                       f32_4 %310 = OpLoad %9 
                                       f32_4 %311 = OpVectorShuffle %310 %310 1 1 1 1 
                                       f32_4 %312 = OpFNegate %311 
                              Uniform f32_4* %313 = OpAccessChain %19 %63 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpFAdd %312 %314 
                                                      OpStore %102 %315 
                                       f32_4 %317 = OpLoad %84 
                                       f32_4 %318 = OpVectorShuffle %317 %317 1 1 1 1 
                                       f32_4 %319 = OpLoad %102 
                                       f32_4 %320 = OpFMul %318 %319 
                                                      OpStore %316 %320 
                                       f32_4 %321 = OpLoad %102 
                                       f32_4 %322 = OpLoad %102 
                                       f32_4 %323 = OpFMul %321 %322 
                                                      OpStore %102 %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_4 %326 = OpVectorShuffle %325 %325 0 0 0 0 
                                       f32_4 %327 = OpFNegate %326 
                              Uniform f32_4* %328 = OpAccessChain %19 %68 
                                       f32_4 %329 = OpLoad %328 
                                       f32_4 %330 = OpFAdd %327 %329 
                                                      OpStore %324 %330 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %331 2 2 2 2 
                                       f32_4 %333 = OpFNegate %332 
                              Uniform f32_4* %334 = OpAccessChain %19 %76 
                                       f32_4 %335 = OpLoad %334 
                                       f32_4 %336 = OpFAdd %333 %335 
                                                      OpStore %9 %336 
                                       f32_4 %337 = OpLoad %324 
                                       f32_4 %338 = OpLoad %84 
                                       f32_4 %339 = OpVectorShuffle %338 %338 0 0 0 0 
                                       f32_4 %340 = OpFMul %337 %339 
                                       f32_4 %341 = OpLoad %316 
                                       f32_4 %342 = OpFAdd %340 %341 
                                                      OpStore %316 %342 
                                       f32_4 %343 = OpLoad %324 
                                       f32_4 %344 = OpLoad %324 
                                       f32_4 %345 = OpFMul %343 %344 
                                       f32_4 %346 = OpLoad %102 
                                       f32_4 %347 = OpFAdd %345 %346 
                                                      OpStore %102 %347 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpLoad %9 
                                       f32_4 %350 = OpFMul %348 %349 
                                       f32_4 %351 = OpLoad %102 
                                       f32_4 %352 = OpFAdd %350 %351 
                                                      OpStore %102 %352 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpLoad %84 
                                       f32_4 %355 = OpVectorShuffle %354 %354 2 2 2 2 
                                       f32_4 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %316 
                                       f32_4 %358 = OpFAdd %356 %357 
                                                      OpStore %9 %358 
                                       f32_4 %359 = OpLoad %102 
                                       f32_4 %362 = OpExtInst %1 40 %359 %361 
                                                      OpStore %84 %362 
                                       f32_4 %363 = OpLoad %84 
                                       f32_4 %364 = OpExtInst %1 32 %363 
                                                      OpStore %102 %364 
                                       f32_4 %365 = OpLoad %84 
                              Uniform f32_4* %366 = OpAccessChain %19 %86 
                                       f32_4 %367 = OpLoad %366 
                                       f32_4 %368 = OpFMul %365 %367 
                                       f32_4 %370 = OpFAdd %368 %369 
                                                      OpStore %84 %370 
                                       f32_4 %371 = OpLoad %84 
                                       f32_4 %372 = OpFDiv %369 %371 
                                                      OpStore %84 %372 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpLoad %102 
                                       f32_4 %375 = OpFMul %373 %374 
                                                      OpStore %9 %375 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %378 = OpExtInst %1 40 %376 %377 
                                                      OpStore %9 %378 
                                       f32_4 %379 = OpLoad %84 
                                       f32_4 %380 = OpLoad %9 
                                       f32_4 %381 = OpFMul %379 %380 
                                                      OpStore %9 %381 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 1 1 1 
                              Uniform f32_4* %385 = OpAccessChain %19 %384 %63 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFMul %383 %387 
                                       f32_4 %389 = OpLoad %84 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %84 %390 
                              Uniform f32_4* %391 = OpAccessChain %19 %384 %68 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 0 0 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_4 %397 = OpLoad %84 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFAdd %396 %398 
                                       f32_4 %400 = OpLoad %84 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %84 %401 
                              Uniform f32_4* %402 = OpAccessChain %19 %384 %76 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 2 2 2 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %84 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %9 %412 
                              Uniform f32_4* %413 = OpAccessChain %19 %384 %86 
                                       f32_4 %414 = OpLoad %413 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 3 3 3 
                                       f32_3 %418 = OpFMul %415 %417 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpFAdd %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %9 %423 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %426 = OpLoad %292 
                                       f32_3 %427 = OpFAdd %425 %426 
                                       f32_4 %428 = OpLoad %9 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %9 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                                      OpStore %430 %432 
                                                      OpStore %433 %377 
                                 Output f32* %435 = OpAccessChain %126 %68 %50 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpFNegate %436 
                                 Output f32* %438 = OpAccessChain %126 %68 %50 
                                                      OpStore %438 %437 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 381
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %240 %350 %356 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %24 0 RelaxedPrecision 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 RelaxedPrecision 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 RelaxedPrecision 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %232 SpecId 232 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 Location 356 
                                                      OpDecorate %376 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeStruct %7 %7 %22 %23 %23 %7 %6 %6 %6 %7 %6 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %26 = OpVariable Uniform 
                                              %27 = OpTypeInt 32 1 
                                          i32 %28 = OpConstant 9 
                                          u32 %29 = OpConstant 2 
                                              %30 = OpTypePointer Uniform %6 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          u32 %47 = OpConstant 1 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                        f32_3 %71 = OpConstantComposite %68 %69 %70 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 8 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                             %100 = OpTypePointer Private %61 
                              Private f32_2* %101 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_2 %107 = OpConstantComposite %106 %106 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                             %116 = OpTypePointer Private %23 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %124 %125 %126 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         u32 %157 = OpConstant 3 
                                         f32 %160 = OpConstant 3.674022E-40 
                               Private bool* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         i32 %169 = OpConstant 0 
                                         i32 %170 = OpConstant 1 
                                         i32 %172 = OpConstant -1 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %183 = OpConstant 7 
                                         i32 %205 = OpConstant 10 
                               Private bool* %211 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
                                        bool %226 = OpConstantFalse 
                                        bool %232 = OpSpecConstantFalse 
                              Private f32_3* %238 = OpVariable Private 
                                             %239 = OpTypePointer Input %23 
                                Input f32_3* %240 = OpVariable Input 
                                         i32 %243 = OpConstant 2 
                                         i32 %265 = OpConstant 3 
                              Private f32_3* %270 = OpVariable Private 
                                             %271 = OpTypePointer Function %23 
                                         i32 %281 = OpConstant 4 
                                             %282 = OpTypePointer Uniform %23 
                              Private f32_4* %287 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %312 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %313 = OpTypeSampledImage %312 
                                             %314 = OpTypePointer UniformConstant %313 
 UniformConstant read_only Texture3DSampled* %315 = OpVariable UniformConstant 
                              Private f32_3* %326 = OpVariable Private 
                              Private f32_3* %336 = OpVariable Private 
                                         i32 %339 = OpConstant 5 
                                Input f32_3* %350 = OpVariable Input 
                                             %355 = OpTypePointer Output %7 
                               Output f32_4* %356 = OpVariable Output 
                                             %359 = OpTypePointer Output %6 
                                         i32 %361 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %272 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %31 = OpAccessChain %26 %28 %29 
                                          f32 %32 = OpLoad %31 
                                          f32 %34 = OpFMul %32 %33 
                                 Private f32* %35 = OpAccessChain %9 %13 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFAdd %34 %36 
                                 Private f32* %38 = OpAccessChain %9 %13 
                                                      OpStore %38 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpExtInst %1 13 %40 
                                 Private f32* %42 = OpAccessChain %9 %13 
                                                      OpStore %42 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %47 
                                                      OpStore %51 %50 
                                   Input f32* %52 = OpAccessChain %11 %13 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %9 %13 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_4 %62 = OpLoad %9 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %60 %63 
                                                      OpStore %55 %64 
                                        f32_4 %66 = OpLoad %55 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %72 = OpDot %67 %71 
                                 Private f32* %73 = OpAccessChain %65 %13 
                                                      OpStore %73 %72 
                                        f32_4 %75 = OpLoad %55 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %55 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %26 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %55 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                 Private f32* %93 = OpAccessChain %65 %13 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdLessThan %94 %95 
                                                      OpStore %92 %96 
                                         bool %97 = OpLoad %92 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %152 
                                              %98 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %26 %28 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %108 = OpFMul %105 %107 
                                                      OpStore %101 %108 
                                       f32_4 %109 = OpLoad %11 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %113 = OpFMul %110 %112 
                                       f32_2 %114 = OpLoad %101 
                                       f32_2 %115 = OpFAdd %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %120 = OpLoad %101 
                                       f32_4 %121 = OpImageSampleImplicitLod %119 %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                                      OpStore %117 %122 
                                       f32_3 %123 = OpLoad %117 
                                       f32_3 %128 = OpFMul %123 %127 
                                       f32_4 %129 = OpLoad %74 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %74 %130 
                                       f32_4 %131 = OpLoad %74 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpExtInst %1 30 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %74 %135 
                                       f32_4 %136 = OpLoad %74 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %74 %142 
                                       f32_4 %143 = OpLoad %74 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 29 %144 
                                       f32_4 %146 = OpLoad %74 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %74 %147 
                                       f32_4 %148 = OpLoad %74 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %74 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %74 %151 
                                                      OpBranch %99 
                                             %152 = OpLabel 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                Private f32* %158 = OpAccessChain %9 %157 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFAdd %159 %160 
                                Private f32* %162 = OpAccessChain %65 %13 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %65 %13 
                                         f32 %165 = OpLoad %164 
                                        bool %167 = OpFOrdLessThan %165 %166 
                                                      OpStore %163 %167 
                                        bool %168 = OpLoad %163 
                                         i32 %171 = OpSelect %168 %170 %169 
                                         i32 %173 = OpIMul %171 %172 
                                        bool %174 = OpINotEqual %173 %169 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpKill
                                             %176 = OpLabel 
                                       f32_4 %179 = OpLoad %74 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %178 %181 
                                       f32_3 %182 = OpLoad %178 
                                Uniform f32* %184 = OpAccessChain %26 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %26 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %26 %183 
                                         f32 %189 = OpLoad %188 
                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                         f32 %192 = OpCompositeExtract %190 1 
                                         f32 %193 = OpCompositeExtract %190 2 
                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
                                       f32_3 %195 = OpFMul %182 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %9 %197 
                                       f32_4 %198 = OpLoad %9 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpExtInst %1 29 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %9 %202 
                                Private f32* %203 = OpAccessChain %9 %157 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %26 %205 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %204 %208 
                                Private f32* %210 = OpAccessChain %65 %13 
                                                      OpStore %210 %209 
                                Private f32* %212 = OpAccessChain %65 %13 
                                         f32 %213 = OpLoad %212 
                                        bool %214 = OpFOrdLessThan %213 %166 
                                                      OpStore %211 %214 
                                        bool %215 = OpLoad %211 
                                         i32 %216 = OpSelect %215 %170 %169 
                                         i32 %217 = OpIMul %216 %172 
                                        bool %218 = OpINotEqual %217 %169 
                                                      OpSelectionMerge %220 None 
                                                      OpBranchConditional %218 %219 %220 
                                             %219 = OpLabel 
                                                      OpKill
                                             %220 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %26 %170 %13 
                                         f32 %223 = OpLoad %222 
                                        bool %225 = OpFOrdEqual %223 %224 
                                                      OpStore %211 %225 
                                                      OpSelectionMerge %228 None 
                                                      OpBranchConditional %226 %227 %228 
                                             %227 = OpLabel 
                                        bool %229 = OpLoad %211 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                                      OpBranch %228 
                                             %228 = OpLabel 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %321 
                                             %233 = OpLabel 
                                Uniform f32* %235 = OpAccessChain %26 %170 %47 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdEqual %236 %224 
                                                      OpStore %211 %237 
                                       f32_3 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %26 %243 %170 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                                      OpStore %238 %247 
                              Uniform f32_4* %248 = OpAccessChain %26 %243 %169 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpLoad %240 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %238 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %238 %255 
                              Uniform f32_4* %256 = OpAccessChain %26 %243 %243 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %240 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %238 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %238 %263 
                                       f32_3 %264 = OpLoad %238 
                              Uniform f32_4* %266 = OpAccessChain %26 %243 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %264 %268 
                                                      OpStore %238 %269 
                                        bool %273 = OpLoad %211 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %277 
                                             %274 = OpLabel 
                                       f32_3 %276 = OpLoad %238 
                                                      OpStore %272 %276 
                                                      OpBranch %275 
                                             %277 = OpLabel 
                                       f32_3 %278 = OpLoad %240 
                                                      OpStore %272 %278 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                       f32_3 %279 = OpLoad %272 
                                                      OpStore %270 %279 
                                       f32_3 %280 = OpLoad %270 
                              Uniform f32_3* %283 = OpAccessChain %26 %281 
                                       f32_3 %284 = OpLoad %283 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_3 %286 = OpFAdd %280 %285 
                                                      OpStore %270 %286 
                                       f32_3 %288 = OpLoad %270 
                              Uniform f32_3* %289 = OpAccessChain %26 %265 
                                       f32_3 %290 = OpLoad %289 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %287 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 4 5 6 
                                                      OpStore %287 %293 
                                Private f32* %294 = OpAccessChain %287 %47 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %295 %95 
                                         f32 %298 = OpFAdd %296 %297 
                                Private f32* %299 = OpAccessChain %270 %13 
                                                      OpStore %299 %298 
                                Uniform f32* %300 = OpAccessChain %26 %170 %29 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFMul %301 %302 
                                         f32 %304 = OpFAdd %303 %297 
                                Private f32* %305 = OpAccessChain %238 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %238 %13 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %270 %13 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 40 %307 %309 
                                Private f32* %311 = OpAccessChain %287 %13 
                                                      OpStore %311 %310 
                  read_only Texture3DSampled %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %287 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 2 3 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %287 %319 
                                       f32_4 %320 = OpLoad %287 
                                                      OpStore %65 %320 
                                                      OpBranch %234 
                                             %321 = OpLabel 
                                Private f32* %322 = OpAccessChain %65 %13 
                                                      OpStore %322 %224 
                                Private f32* %323 = OpAccessChain %65 %47 
                                                      OpStore %323 %224 
                                Private f32* %324 = OpAccessChain %65 %29 
                                                      OpStore %324 %224 
                                Private f32* %325 = OpAccessChain %65 %157 
                                                      OpStore %325 %224 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %327 = OpLoad %65 
                              Uniform f32_4* %328 = OpAccessChain %26 %169 
                                       f32_4 %329 = OpLoad %328 
                                         f32 %330 = OpDot %327 %329 
                                Private f32* %331 = OpAccessChain %326 %13 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %326 %13 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpExtInst %1 43 %333 %166 %224 
                                Private f32* %335 = OpAccessChain %326 %13 
                                                      OpStore %335 %334 
                                       f32_4 %337 = OpLoad %74 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              Uniform f32_4* %340 = OpAccessChain %26 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %336 %343 
                                       f32_3 %344 = OpLoad %326 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpLoad %336 
                                       f32_3 %347 = OpFMul %345 %346 
                                                      OpStore %326 %347 
                                       f32_4 %348 = OpLoad %74 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_3 %353 = OpLoad %326 
                                       f32_3 %354 = OpFAdd %352 %353 
                                                      OpStore %326 %354 
                                Private f32* %357 = OpAccessChain %9 %157 
                                         f32 %358 = OpLoad %357 
                                 Output f32* %360 = OpAccessChain %356 %157 
                                                      OpStore %360 %358 
                                Uniform f32* %362 = OpAccessChain %26 %361 
                                         f32 %363 = OpLoad %362 
                                Uniform f32* %364 = OpAccessChain %26 %361 
                                         f32 %365 = OpLoad %364 
                                Uniform f32* %366 = OpAccessChain %26 %361 
                                         f32 %367 = OpLoad %366 
                                       f32_3 %368 = OpCompositeConstruct %363 %365 %367 
                                         f32 %369 = OpCompositeExtract %368 0 
                                         f32 %370 = OpCompositeExtract %368 1 
                                         f32 %371 = OpCompositeExtract %368 2 
                                       f32_3 %372 = OpCompositeConstruct %369 %370 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %376 = OpLoad %326 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %356 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %356 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat18;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 370
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %133 %137 %138 %153 %168 %205 %208 %211 %212 %331 %351 %363 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %131 0 BuiltIn 131 
                                                      OpMemberDecorate %131 1 BuiltIn 131 
                                                      OpMemberDecorate %131 2 BuiltIn 131 
                                                      OpDecorate %131 Block 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %351 Location 351 
                                                      OpDecorate %363 Location 363 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 9 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 10 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 6 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 8 
                                             %130 = OpTypeArray %6 %50 
                                             %131 = OpTypeStruct %7 %6 %130 
                                             %132 = OpTypePointer Output %131 
        Output struct {f32_4; f32; f32[1];}* %133 = OpVariable Output 
                                             %135 = OpTypePointer Output %7 
                               Output f32_4* %137 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %139 = OpTypeVector %6 2 
                                         i32 %142 = OpConstant 11 
                                Input f32_4* %153 = OpVariable Input 
                                         i32 %156 = OpConstant 12 
                                             %167 = OpTypePointer Input %90 
                                Input f32_3* %168 = OpVariable Input 
                                         i32 %170 = OpConstant 7 
                                         u32 %187 = OpConstant 2 
                                Private f32* %189 = OpVariable Private 
                                             %204 = OpTypePointer Output %90 
                               Output f32_3* %205 = OpVariable Output 
                               Output f32_3* %208 = OpVariable Output 
                               Output f32_4* %211 = OpVariable Output 
                                Input f32_4* %212 = OpVariable Input 
                              Private f32_4* %214 = OpVariable Private 
                              Private f32_4* %221 = OpVariable Private 
                              Private f32_4* %229 = OpVariable Private 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_4 %266 = OpConstantComposite %265 %265 %265 %265 
                                         i32 %271 = OpConstant 4 
                                       f32_4 %275 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_4 %284 = OpConstantComposite %283 %283 %283 %283 
                                         i32 %291 = OpConstant 5 
                               Output f32_3* %331 = OpVariable Output 
                                         u32 %343 = OpConstant 3 
                                       f32_2 %347 = OpConstantComposite %39 %39 
                               Output f32_4* %351 = OpVariable Output 
                               Output f32_4* %363 = OpVariable Output 
                                             %364 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %123 = OpAccessChain %19 %105 %86 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %84 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %102 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %84 %129 
                                       f32_4 %134 = OpLoad %84 
                               Output f32_4* %136 = OpAccessChain %133 %68 
                                                      OpStore %136 %134 
                                       f32_4 %140 = OpLoad %138 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                              Uniform f32_4* %143 = OpAccessChain %19 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %141 %145 
                              Uniform f32_4* %147 = OpAccessChain %19 %142 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %137 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %137 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              Uniform f32_4* %157 = OpAccessChain %19 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %19 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                       f32_4 %165 = OpLoad %137 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %137 %166 
                                       f32_3 %169 = OpLoad %168 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 %68 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %169 %173 
                                Private f32* %175 = OpAccessChain %102 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %168 
                              Uniform f32_4* %177 = OpAccessChain %19 %170 %63 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %181 = OpAccessChain %102 %50 
                                                      OpStore %181 %180 
                                       f32_3 %182 = OpLoad %168 
                              Uniform f32_4* %183 = OpAccessChain %19 %170 %76 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %102 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %102 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %102 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                         f32 %197 = OpLoad %189 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_4 %199 = OpLoad %102 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %102 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %102 %203 
                                       f32_4 %206 = OpLoad %102 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                                      OpStore %208 %210 
                                       f32_4 %213 = OpLoad %212 
                                                      OpStore %211 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %216 = OpVectorShuffle %215 %215 1 1 1 1 
                                       f32_4 %217 = OpFNegate %216 
                              Uniform f32_4* %218 = OpAccessChain %19 %76 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFAdd %217 %219 
                                                      OpStore %214 %220 
                                       f32_4 %222 = OpLoad %102 
                                       f32_4 %223 = OpVectorShuffle %222 %222 1 1 1 1 
                                       f32_4 %224 = OpLoad %214 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %221 %225 
                                       f32_4 %226 = OpLoad %214 
                                       f32_4 %227 = OpLoad %214 
                                       f32_4 %228 = OpFMul %226 %227 
                                                      OpStore %214 %228 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
                                       f32_4 %232 = OpFNegate %231 
                              Uniform f32_4* %233 = OpAccessChain %19 %63 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFAdd %232 %234 
                                                      OpStore %229 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
                                       f32_4 %238 = OpFNegate %237 
                              Uniform f32_4* %239 = OpAccessChain %19 %86 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpFAdd %238 %240 
                                                      OpStore %9 %241 
                                       f32_4 %242 = OpLoad %229 
                                       f32_4 %243 = OpLoad %102 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 0 0 0 
                                       f32_4 %245 = OpFMul %242 %244 
                                       f32_4 %246 = OpLoad %221 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %221 %247 
                                       f32_4 %248 = OpLoad %229 
                                       f32_4 %249 = OpLoad %229 
                                       f32_4 %250 = OpFMul %248 %249 
                                       f32_4 %251 = OpLoad %214 
                                       f32_4 %252 = OpFAdd %250 %251 
                                                      OpStore %214 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpFMul %253 %254 
                                       f32_4 %256 = OpLoad %214 
                                       f32_4 %257 = OpFAdd %255 %256 
                                                      OpStore %214 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpLoad %102 
                                       f32_4 %260 = OpVectorShuffle %259 %259 2 2 2 2 
                                       f32_4 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %221 
                                       f32_4 %263 = OpFAdd %261 %262 
                                                      OpStore %9 %263 
                                       f32_4 %264 = OpLoad %214 
                                       f32_4 %267 = OpExtInst %1 40 %264 %266 
                                                      OpStore %102 %267 
                                       f32_4 %268 = OpLoad %102 
                                       f32_4 %269 = OpExtInst %1 32 %268 
                                                      OpStore %214 %269 
                                       f32_4 %270 = OpLoad %102 
                              Uniform f32_4* %272 = OpAccessChain %19 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpFMul %270 %273 
                                       f32_4 %276 = OpFAdd %274 %275 
                                                      OpStore %102 %276 
                                       f32_4 %277 = OpLoad %102 
                                       f32_4 %278 = OpFDiv %275 %277 
                                                      OpStore %102 %278 
                                       f32_4 %279 = OpLoad %9 
                                       f32_4 %280 = OpLoad %214 
                                       f32_4 %281 = OpFMul %279 %280 
                                                      OpStore %9 %281 
                                       f32_4 %282 = OpLoad %9 
                                       f32_4 %285 = OpExtInst %1 40 %282 %284 
                                                      OpStore %9 %285 
                                       f32_4 %286 = OpLoad %102 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpFMul %286 %287 
                                                      OpStore %9 %288 
                                       f32_4 %289 = OpLoad %9 
                                       f32_3 %290 = OpVectorShuffle %289 %289 1 1 1 
                              Uniform f32_4* %292 = OpAccessChain %19 %291 %63 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %295 = OpFMul %290 %294 
                                       f32_4 %296 = OpLoad %102 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                                      OpStore %102 %297 
                              Uniform f32_4* %298 = OpAccessChain %19 %291 %68 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %9 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 0 0 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %102 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFAdd %303 %305 
                                       f32_4 %307 = OpLoad %102 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %102 %308 
                              Uniform f32_4* %309 = OpAccessChain %19 %291 %76 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 2 2 2 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %102 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %9 %319 
                              Uniform f32_4* %320 = OpAccessChain %19 %291 %86 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 3 3 3 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %9 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %9 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                                      OpStore %331 %333 
                                Private f32* %334 = OpAccessChain %84 %50 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %336 = OpAccessChain %19 %68 %27 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFMul %335 %337 
                                Private f32* %339 = OpAccessChain %9 %27 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %9 %27 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %341 %39 
                                Private f32* %344 = OpAccessChain %9 %343 
                                                      OpStore %344 %342 
                                       f32_4 %345 = OpLoad %84 
                                       f32_2 %346 = OpVectorShuffle %345 %345 0 3 
                                       f32_2 %348 = OpFMul %346 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 1 5 3 
                                                      OpStore %9 %350 
                                       f32_4 %352 = OpLoad %84 
                                       f32_2 %353 = OpVectorShuffle %352 %352 2 3 
                                       f32_4 %354 = OpLoad %351 
                                       f32_4 %355 = OpVectorShuffle %354 %353 0 1 4 5 
                                                      OpStore %351 %355 
                                       f32_4 %356 = OpLoad %9 
                                       f32_2 %357 = OpVectorShuffle %356 %356 2 2 
                                       f32_4 %358 = OpLoad %9 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 3 
                                       f32_2 %360 = OpFAdd %357 %359 
                                       f32_4 %361 = OpLoad %351 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 2 3 
                                                      OpStore %351 %362 
                                                      OpStore %363 %284 
                                 Output f32* %365 = OpAccessChain %133 %68 %50 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFNegate %366 
                                 Output f32* %368 = OpAccessChain %133 %68 %50 
                                                      OpStore %368 %367 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 489
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %225 %405 %458 %464 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 RelaxedPrecision 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 RelaxedPrecision 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 RelaxedPrecision 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %305 SpecId 305 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %458 Location 458 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %464 Location 464 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                              %21 = OpTypeVector %6 3 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeArray %7 %22 
                                              %25 = OpTypeStruct %21 %7 %7 %7 %23 %7 %24 %21 %21 %7 %6 %6 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 13 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 12 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                              Private f32_3* %179 = OpVariable Private 
                                         i32 %184 = OpConstant 11 
                                         i32 %206 = OpConstant 14 
                               Private bool* %212 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                             %224 = OpTypePointer Input %21 
                                Input f32_3* %225 = OpVariable Input 
                                             %228 = OpTypePointer Uniform %21 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %240 = OpConstant 2 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %250 = OpConstant 3 
                                         f32 %291 = OpConstant 3.674022E-40 
                               Private bool* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 5 
                                        bool %299 = OpConstantFalse 
                                        bool %305 = OpSpecConstantFalse 
                               Private bool* %308 = OpVariable Private 
                                         i32 %314 = OpConstant 6 
                                             %340 = OpTypePointer Function %21 
                                         i32 %350 = OpConstant 8 
                              Private f32_4* %355 = OpVariable Private 
                                         i32 %357 = OpConstant 7 
                              Private f32_2* %363 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                Private f32* %370 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                             %381 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %382 = OpTypeSampledImage %381 
                                             %383 = OpTypePointer UniformConstant %382 
 UniformConstant read_only Texture3DSampled* %384 = OpVariable UniformConstant 
                              Private f32_3* %395 = OpVariable Private 
                                Input f32_4* %405 = OpVariable Input 
                                Private f32* %411 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %412 = OpVariable UniformConstant 
                              Private f32_3* %417 = OpVariable Private 
                                             %433 = OpTypePointer Function %6 
                                         i32 %447 = OpConstant 9 
                                Input f32_3* %458 = OpVariable Input 
                                             %463 = OpTypePointer Output %7 
                               Output f32_4* %464 = OpVariable Output 
                                             %467 = OpTypePointer Output %6 
                                         i32 %469 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %341 = OpVariable Function 
                               Function f32* %434 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                       f32_4 %180 = OpLoad %75 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpExtInst %1 30 %181 
                                                      OpStore %179 %182 
                                       f32_3 %183 = OpLoad %179 
                                Uniform f32* %185 = OpAccessChain %27 %184 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %184 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %27 %184 
                                         f32 %190 = OpLoad %189 
                                       f32_3 %191 = OpCompositeConstruct %186 %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                         f32 %194 = OpCompositeExtract %191 2 
                                       f32_3 %195 = OpCompositeConstruct %192 %193 %194 
                                       f32_3 %196 = OpFMul %183 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpExtInst %1 29 %200 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %9 %203 
                                Private f32* %204 = OpAccessChain %9 %158 
                                         f32 %205 = OpLoad %204 
                                Uniform f32* %207 = OpAccessChain %27 %206 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %205 %209 
                                Private f32* %211 = OpAccessChain %66 %13 
                                                      OpStore %211 %210 
                                Private f32* %213 = OpAccessChain %66 %13 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %167 
                                                      OpStore %212 %215 
                                        bool %216 = OpLoad %212 
                                         i32 %217 = OpSelect %216 %171 %170 
                                         i32 %218 = OpIMul %217 %173 
                                        bool %219 = OpINotEqual %218 %170 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                       f32_3 %226 = OpLoad %225 
                                       f32_3 %227 = OpFNegate %226 
                              Uniform f32_3* %229 = OpAccessChain %27 %170 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFAdd %227 %230 
                                                      OpStore %223 %231 
                                Uniform f32* %234 = OpAccessChain %27 %233 %170 %30 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %232 %13 
                                                      OpStore %236 %235 
                                Uniform f32* %237 = OpAccessChain %27 %233 %171 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %232 %48 
                                                      OpStore %239 %238 
                                Uniform f32* %241 = OpAccessChain %27 %233 %240 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %232 %30 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %223 
                                       f32_3 %245 = OpLoad %232 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %223 %13 
                                                      OpStore %247 %246 
                                       f32_3 %249 = OpLoad %225 
                              Uniform f32_4* %251 = OpAccessChain %27 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpFNegate %253 
                                       f32_3 %255 = OpFAdd %249 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %248 
                                       f32_3 %257 = OpLoad %248 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %248 %13 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %248 %13 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 31 %261 
                                Private f32* %263 = OpAccessChain %248 %13 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %223 %13 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %248 %13 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %248 %13 
                                                      OpStore %270 %269 
                                Uniform f32* %271 = OpAccessChain %27 %250 %158 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %248 %13 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %223 %13 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFAdd %275 %277 
                                Private f32* %279 = OpAccessChain %223 %13 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %223 %13 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %27 %240 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Uniform f32* %285 = OpAccessChain %27 %240 %158 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %223 %13 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %223 %13 
                                         f32 %290 = OpLoad %289 
                                         f32 %292 = OpExtInst %1 43 %290 %167 %291 
                                Private f32* %293 = OpAccessChain %223 %13 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %27 %295 %13 
                                         f32 %297 = OpLoad %296 
                                        bool %298 = OpFOrdEqual %297 %291 
                                                      OpStore %294 %298 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                        bool %302 = OpLoad %294 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %304 
                                             %303 = OpLabel 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %390 
                                             %306 = OpLabel 
                                Uniform f32* %309 = OpAccessChain %27 %295 %48 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdEqual %310 %291 
                                                      OpStore %308 %311 
                                       f32_3 %312 = OpLoad %225 
                                       f32_3 %313 = OpVectorShuffle %312 %312 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %27 %314 %171 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                                      OpStore %232 %318 
                              Uniform f32_4* %319 = OpAccessChain %27 %314 %170 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpLoad %225 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 0 0 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_3 %325 = OpLoad %232 
                                       f32_3 %326 = OpFAdd %324 %325 
                                                      OpStore %232 %326 
                              Uniform f32_4* %327 = OpAccessChain %27 %314 %240 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpLoad %225 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_3 %333 = OpLoad %232 
                                       f32_3 %334 = OpFAdd %332 %333 
                                                      OpStore %232 %334 
                                       f32_3 %335 = OpLoad %232 
                              Uniform f32_4* %336 = OpAccessChain %27 %314 %250 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                                      OpStore %232 %339 
                                        bool %342 = OpLoad %308 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %346 
                                             %343 = OpLabel 
                                       f32_3 %345 = OpLoad %232 
                                                      OpStore %341 %345 
                                                      OpBranch %344 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %225 
                                                      OpStore %341 %347 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %348 = OpLoad %341 
                                                      OpStore %232 %348 
                                       f32_3 %349 = OpLoad %232 
                              Uniform f32_3* %351 = OpAccessChain %27 %350 
                                       f32_3 %352 = OpLoad %351 
                                       f32_3 %353 = OpFNegate %352 
                                       f32_3 %354 = OpFAdd %349 %353 
                                                      OpStore %232 %354 
                                       f32_3 %356 = OpLoad %232 
                              Uniform f32_3* %358 = OpAccessChain %27 %357 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpFMul %356 %359 
                                       f32_4 %361 = OpLoad %355 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 5 6 
                                                      OpStore %355 %362 
                                Private f32* %364 = OpAccessChain %355 %48 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %365 %96 
                                         f32 %368 = OpFAdd %366 %367 
                                Private f32* %369 = OpAccessChain %363 %13 
                                                      OpStore %369 %368 
                                Uniform f32* %371 = OpAccessChain %27 %295 %30 
                                         f32 %372 = OpLoad %371 
                                         f32 %374 = OpFMul %372 %373 
                                         f32 %375 = OpFAdd %374 %367 
                                                      OpStore %370 %375 
                                         f32 %376 = OpLoad %370 
                                Private f32* %377 = OpAccessChain %363 %13 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 40 %376 %378 
                                Private f32* %380 = OpAccessChain %355 %13 
                                                      OpStore %380 %379 
                  read_only Texture3DSampled %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %355 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 2 3 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                                      OpStore %355 %388 
                                       f32_4 %389 = OpLoad %355 
                                                      OpStore %66 %389 
                                                      OpBranch %307 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %66 %13 
                                                      OpStore %391 %291 
                                Private f32* %392 = OpAccessChain %66 %48 
                                                      OpStore %392 %291 
                                Private f32* %393 = OpAccessChain %66 %30 
                                                      OpStore %393 %291 
                                Private f32* %394 = OpAccessChain %66 %158 
                                                      OpStore %394 %291 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_4 %396 = OpLoad %66 
                              Uniform f32_4* %397 = OpAccessChain %27 %171 
                                       f32_4 %398 = OpLoad %397 
                                         f32 %399 = OpDot %396 %398 
                                Private f32* %400 = OpAccessChain %395 %13 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %395 %13 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 43 %402 %167 %291 
                                Private f32* %404 = OpAccessChain %395 %13 
                                                      OpStore %404 %403 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                                       f32_4 %408 = OpLoad %405 
                                       f32_2 %409 = OpVectorShuffle %408 %408 3 3 
                                       f32_2 %410 = OpFDiv %407 %409 
                                                      OpStore %363 %410 
                  read_only Texture2DSampled %413 = OpLoad %412 
                                       f32_2 %414 = OpLoad %363 
                                       f32_4 %415 = OpImageSampleImplicitLod %413 %414 
                                         f32 %416 = OpCompositeExtract %415 0 
                                                      OpStore %411 %416 
                                Private f32* %418 = OpAccessChain %223 %13 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %411 
                                         f32 %421 = OpFAdd %419 %420 
                                Private f32* %422 = OpAccessChain %417 %13 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %417 %13 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 43 %424 %167 %291 
                                Private f32* %426 = OpAccessChain %417 %13 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %417 %13 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %395 %13 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 37 %428 %430 
                                Private f32* %432 = OpAccessChain %395 %13 
                                                      OpStore %432 %431 
                                        bool %435 = OpLoad %294 
                                                      OpSelectionMerge %437 None 
                                                      OpBranchConditional %435 %436 %440 
                                             %436 = OpLabel 
                                Private f32* %438 = OpAccessChain %395 %13 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %434 %439 
                                                      OpBranch %437 
                                             %440 = OpLabel 
                                Private f32* %441 = OpAccessChain %417 %13 
                                         f32 %442 = OpLoad %441 
                                                      OpStore %434 %442 
                                                      OpBranch %437 
                                             %437 = OpLabel 
                                         f32 %443 = OpLoad %434 
                                Private f32* %444 = OpAccessChain %395 %13 
                                                      OpStore %444 %443 
                                       f32_4 %445 = OpLoad %75 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                              Uniform f32_4* %448 = OpAccessChain %27 %447 
                                       f32_4 %449 = OpLoad %448 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFMul %446 %450 
                                                      OpStore %417 %451 
                                       f32_3 %452 = OpLoad %395 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 0 0 
                                       f32_3 %454 = OpLoad %417 
                                       f32_3 %455 = OpFMul %453 %454 
                                                      OpStore %395 %455 
                                       f32_4 %456 = OpLoad %75 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %459 = OpLoad %458 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_3 %461 = OpLoad %395 
                                       f32_3 %462 = OpFAdd %460 %461 
                                                      OpStore %395 %462 
                                Private f32* %465 = OpAccessChain %9 %158 
                                         f32 %466 = OpLoad %465 
                                 Output f32* %468 = OpAccessChain %464 %158 
                                                      OpStore %468 %466 
                                Uniform f32* %470 = OpAccessChain %27 %469 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %472 = OpAccessChain %27 %469 
                                         f32 %473 = OpLoad %472 
                                Uniform f32* %474 = OpAccessChain %27 %469 
                                         f32 %475 = OpLoad %474 
                                       f32_3 %476 = OpCompositeConstruct %471 %473 %475 
                                         f32 %477 = OpCompositeExtract %476 0 
                                         f32 %478 = OpCompositeExtract %476 1 
                                         f32 %479 = OpCompositeExtract %476 2 
                                       f32_3 %480 = OpCompositeConstruct %477 %478 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %395 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %464 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %464 %487 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat21;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat7 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat7 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat2 = max(u_xlat4, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower)) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 472
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %133 %137 %138 %153 %168 %205 %208 %211 %212 %434 %453 %465 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 RelaxedPrecision 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpMemberDecorate %17 19 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %131 0 BuiltIn 131 
                                                      OpMemberDecorate %131 1 BuiltIn 131 
                                                      OpMemberDecorate %131 2 BuiltIn 131 
                                                      OpDecorate %131 Block 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %434 Location 434 
                                                      OpDecorate %453 Location 453 
                                                      OpDecorate %465 Location 465 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 16 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 17 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 13 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 15 
                                             %130 = OpTypeArray %6 %50 
                                             %131 = OpTypeStruct %7 %6 %130 
                                             %132 = OpTypePointer Output %131 
        Output struct {f32_4; f32; f32[1];}* %133 = OpVariable Output 
                                             %135 = OpTypePointer Output %7 
                               Output f32_4* %137 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %139 = OpTypeVector %6 2 
                                         i32 %142 = OpConstant 18 
                                Input f32_4* %153 = OpVariable Input 
                                         i32 %156 = OpConstant 19 
                                             %167 = OpTypePointer Input %90 
                                Input f32_3* %168 = OpVariable Input 
                                         i32 %170 = OpConstant 14 
                                         u32 %187 = OpConstant 2 
                                Private f32* %189 = OpVariable Private 
                                             %204 = OpTypePointer Output %90 
                               Output f32_3* %205 = OpVariable Output 
                               Output f32_3* %208 = OpVariable Output 
                               Output f32_4* %211 = OpVariable Output 
                                Input f32_4* %212 = OpVariable Input 
                                             %214 = OpTypePointer Private %90 
                              Private f32_3* %215 = OpVariable Private 
                              Private f32_4* %232 = OpVariable Private 
                              Private f32_3* %238 = OpVariable Private 
                                         i32 %239 = OpConstant 9 
                                         i32 %245 = OpConstant 10 
                                         i32 %251 = OpConstant 11 
                                         i32 %257 = OpConstant 12 
                                         u32 %266 = OpConstant 3 
                                         i32 %268 = OpConstant 6 
                                         i32 %274 = OpConstant 7 
                                         i32 %280 = OpConstant 8 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_3 %292 = OpConstantComposite %291 %291 %291 
                              Private f32_3* %294 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_3 %299 = OpConstantComposite %298 %298 %298 
                                         f32 %304 = OpConstant 3.674022E-40 
                                       f32_3 %305 = OpConstantComposite %304 %304 %304 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
                              Private f32_4* %312 = OpVariable Private 
                              Private f32_4* %319 = OpVariable Private 
                              Private f32_4* %327 = OpVariable Private 
                                         f32 %363 = OpConstant 3.674022E-40 
                                       f32_4 %364 = OpConstantComposite %363 %363 %363 %363 
                                         i32 %369 = OpConstant 4 
                                       f32_4 %373 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %381 = OpConstantComposite %291 %291 %291 %291 
                                         i32 %388 = OpConstant 5 
                               Output f32_3* %434 = OpVariable Output 
                                       f32_2 %449 = OpConstantComposite %39 %39 
                               Output f32_4* %453 = OpVariable Output 
                               Output f32_4* %465 = OpVariable Output 
                                             %466 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %123 = OpAccessChain %19 %105 %86 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %84 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %102 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %84 %129 
                                       f32_4 %134 = OpLoad %84 
                               Output f32_4* %136 = OpAccessChain %133 %68 
                                                      OpStore %136 %134 
                                       f32_4 %140 = OpLoad %138 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                              Uniform f32_4* %143 = OpAccessChain %19 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %141 %145 
                              Uniform f32_4* %147 = OpAccessChain %19 %142 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %137 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %137 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              Uniform f32_4* %157 = OpAccessChain %19 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %19 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                       f32_4 %165 = OpLoad %137 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %137 %166 
                                       f32_3 %169 = OpLoad %168 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 %68 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %169 %173 
                                Private f32* %175 = OpAccessChain %102 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %168 
                              Uniform f32_4* %177 = OpAccessChain %19 %170 %63 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %181 = OpAccessChain %102 %50 
                                                      OpStore %181 %180 
                                       f32_3 %182 = OpLoad %168 
                              Uniform f32_4* %183 = OpAccessChain %19 %170 %76 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %102 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %102 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %102 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                         f32 %197 = OpLoad %189 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_4 %199 = OpLoad %102 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %102 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %102 %203 
                                       f32_4 %206 = OpLoad %102 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                                      OpStore %208 %210 
                                       f32_4 %213 = OpLoad %212 
                                                      OpStore %211 %213 
                                Private f32* %216 = OpAccessChain %102 %50 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %102 %50 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                Private f32* %221 = OpAccessChain %215 %27 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %102 %27 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %102 %27 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %215 %27 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFNegate %228 
                                         f32 %230 = OpFAdd %226 %229 
                                Private f32* %231 = OpAccessChain %215 %27 
                                                      OpStore %231 %230 
                                       f32_4 %233 = OpLoad %102 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 2 2 0 
                                       f32_4 %235 = OpLoad %102 
                                       f32_4 %236 = OpVectorShuffle %235 %235 0 1 2 2 
                                       f32_4 %237 = OpFMul %234 %236 
                                                      OpStore %232 %237 
                              Uniform f32_4* %240 = OpAccessChain %19 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %232 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %238 %27 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %19 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %232 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %238 %50 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %19 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %232 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %238 %187 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %19 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpLoad %215 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %238 
                                       f32_3 %265 = OpFAdd %263 %264 
                                                      OpStore %215 %265 
                                Private f32* %267 = OpAccessChain %102 %266 
                                                      OpStore %267 %46 
                              Uniform f32_4* %269 = OpAccessChain %19 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %102 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %232 %27 
                                                      OpStore %273 %272 
                              Uniform f32_4* %275 = OpAccessChain %19 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpLoad %102 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %232 %50 
                                                      OpStore %279 %278 
                              Uniform f32_4* %281 = OpAccessChain %19 %280 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %102 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %285 = OpAccessChain %232 %187 
                                                      OpStore %285 %284 
                                       f32_3 %286 = OpLoad %215 
                                       f32_4 %287 = OpLoad %232 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore %215 %289 
                                       f32_3 %290 = OpLoad %215 
                                       f32_3 %293 = OpExtInst %1 40 %290 %292 
                                                      OpStore %215 %293 
                                       f32_3 %295 = OpLoad %215 
                                       f32_3 %296 = OpExtInst %1 30 %295 
                                                      OpStore %294 %296 
                                       f32_3 %297 = OpLoad %294 
                                       f32_3 %300 = OpFMul %297 %299 
                                                      OpStore %294 %300 
                                       f32_3 %301 = OpLoad %294 
                                       f32_3 %302 = OpExtInst %1 29 %301 
                                                      OpStore %294 %302 
                                       f32_3 %303 = OpLoad %294 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %309 = OpFAdd %306 %308 
                                                      OpStore %294 %309 
                                       f32_3 %310 = OpLoad %294 
                                       f32_3 %311 = OpExtInst %1 40 %310 %292 
                                                      OpStore %294 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpVectorShuffle %313 %313 1 1 1 1 
                                       f32_4 %315 = OpFNegate %314 
                              Uniform f32_4* %316 = OpAccessChain %19 %76 
                                       f32_4 %317 = OpLoad %316 
                                       f32_4 %318 = OpFAdd %315 %317 
                                                      OpStore %312 %318 
                                       f32_4 %320 = OpLoad %102 
                                       f32_4 %321 = OpVectorShuffle %320 %320 1 1 1 1 
                                       f32_4 %322 = OpLoad %312 
                                       f32_4 %323 = OpFMul %321 %322 
                                                      OpStore %319 %323 
                                       f32_4 %324 = OpLoad %312 
                                       f32_4 %325 = OpLoad %312 
                                       f32_4 %326 = OpFMul %324 %325 
                                                      OpStore %312 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_4 %329 = OpVectorShuffle %328 %328 0 0 0 0 
                                       f32_4 %330 = OpFNegate %329 
                              Uniform f32_4* %331 = OpAccessChain %19 %63 
                                       f32_4 %332 = OpLoad %331 
                                       f32_4 %333 = OpFAdd %330 %332 
                                                      OpStore %327 %333 
                                       f32_4 %334 = OpLoad %9 
                                       f32_4 %335 = OpVectorShuffle %334 %334 2 2 2 2 
                                       f32_4 %336 = OpFNegate %335 
                              Uniform f32_4* %337 = OpAccessChain %19 %86 
                                       f32_4 %338 = OpLoad %337 
                                       f32_4 %339 = OpFAdd %336 %338 
                                                      OpStore %9 %339 
                                       f32_4 %340 = OpLoad %327 
                                       f32_4 %341 = OpLoad %102 
                                       f32_4 %342 = OpVectorShuffle %341 %341 0 0 0 0 
                                       f32_4 %343 = OpFMul %340 %342 
                                       f32_4 %344 = OpLoad %319 
                                       f32_4 %345 = OpFAdd %343 %344 
                                                      OpStore %319 %345 
                                       f32_4 %346 = OpLoad %327 
                                       f32_4 %347 = OpLoad %327 
                                       f32_4 %348 = OpFMul %346 %347 
                                       f32_4 %349 = OpLoad %312 
                                       f32_4 %350 = OpFAdd %348 %349 
                                                      OpStore %312 %350 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpFMul %351 %352 
                                       f32_4 %354 = OpLoad %312 
                                       f32_4 %355 = OpFAdd %353 %354 
                                                      OpStore %312 %355 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpLoad %102 
                                       f32_4 %358 = OpVectorShuffle %357 %357 2 2 2 2 
                                       f32_4 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %319 
                                       f32_4 %361 = OpFAdd %359 %360 
                                                      OpStore %9 %361 
                                       f32_4 %362 = OpLoad %312 
                                       f32_4 %365 = OpExtInst %1 40 %362 %364 
                                                      OpStore %102 %365 
                                       f32_4 %366 = OpLoad %102 
                                       f32_4 %367 = OpExtInst %1 32 %366 
                                                      OpStore %312 %367 
                                       f32_4 %368 = OpLoad %102 
                              Uniform f32_4* %370 = OpAccessChain %19 %369 
                                       f32_4 %371 = OpLoad %370 
                                       f32_4 %372 = OpFMul %368 %371 
                                       f32_4 %374 = OpFAdd %372 %373 
                                                      OpStore %102 %374 
                                       f32_4 %375 = OpLoad %102 
                                       f32_4 %376 = OpFDiv %373 %375 
                                                      OpStore %102 %376 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpLoad %312 
                                       f32_4 %379 = OpFMul %377 %378 
                                                      OpStore %9 %379 
                                       f32_4 %380 = OpLoad %9 
                                       f32_4 %382 = OpExtInst %1 40 %380 %381 
                                                      OpStore %9 %382 
                                       f32_4 %383 = OpLoad %102 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpFMul %383 %384 
                                                      OpStore %9 %385 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 1 1 1 
                              Uniform f32_4* %389 = OpAccessChain %19 %388 %63 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFMul %387 %391 
                                       f32_4 %393 = OpLoad %102 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                                      OpStore %102 %394 
                              Uniform f32_4* %395 = OpAccessChain %19 %388 %68 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 0 0 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %102 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %102 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %102 %405 
                              Uniform f32_4* %406 = OpAccessChain %19 %388 %76 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_3 %410 = OpVectorShuffle %409 %409 2 2 2 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %102 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %9 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 6 3 
                                                      OpStore %9 %416 
                              Uniform f32_4* %417 = OpAccessChain %19 %388 %86 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_4 %420 = OpLoad %9 
                                       f32_3 %421 = OpVectorShuffle %420 %420 3 3 3 
                                       f32_3 %422 = OpFMul %419 %421 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFAdd %422 %424 
                                       f32_4 %426 = OpLoad %9 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %9 %427 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpLoad %294 
                                       f32_3 %431 = OpFAdd %429 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %9 %433 
                                       f32_4 %435 = OpLoad %9 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                                      OpStore %434 %436 
                                Private f32* %437 = OpAccessChain %84 %50 
                                         f32 %438 = OpLoad %437 
                                Uniform f32* %439 = OpAccessChain %19 %68 %27 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFMul %438 %440 
                                Private f32* %442 = OpAccessChain %9 %27 
                                                      OpStore %442 %441 
                                Private f32* %443 = OpAccessChain %9 %27 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpFMul %444 %39 
                                Private f32* %446 = OpAccessChain %9 %266 
                                                      OpStore %446 %445 
                                       f32_4 %447 = OpLoad %84 
                                       f32_2 %448 = OpVectorShuffle %447 %447 0 3 
                                       f32_2 %450 = OpFMul %448 %449 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %450 4 1 5 3 
                                                      OpStore %9 %452 
                                       f32_4 %454 = OpLoad %84 
                                       f32_2 %455 = OpVectorShuffle %454 %454 2 3 
                                       f32_4 %456 = OpLoad %453 
                                       f32_4 %457 = OpVectorShuffle %456 %455 0 1 4 5 
                                                      OpStore %453 %457 
                                       f32_4 %458 = OpLoad %9 
                                       f32_2 %459 = OpVectorShuffle %458 %458 2 2 
                                       f32_4 %460 = OpLoad %9 
                                       f32_2 %461 = OpVectorShuffle %460 %460 0 3 
                                       f32_2 %462 = OpFAdd %459 %461 
                                       f32_4 %463 = OpLoad %453 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 2 3 
                                                      OpStore %453 %464 
                                                      OpStore %465 %381 
                                 Output f32* %467 = OpAccessChain %133 %68 %50 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                 Output f32* %470 = OpAccessChain %133 %68 %50 
                                                      OpStore %470 %469 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 489
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %225 %405 %458 %464 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 RelaxedPrecision 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 RelaxedPrecision 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpMemberDecorate %25 10 Offset 25 
                                                      OpMemberDecorate %25 11 Offset 25 
                                                      OpMemberDecorate %25 12 Offset 25 
                                                      OpMemberDecorate %25 13 Offset 25 
                                                      OpMemberDecorate %25 14 RelaxedPrecision 
                                                      OpMemberDecorate %25 14 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %305 SpecId 305 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %458 Location 458 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %464 Location 464 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                              %21 = OpTypeVector %6 3 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeArray %7 %22 
                                              %25 = OpTypeStruct %21 %7 %7 %7 %23 %7 %24 %21 %21 %7 %6 %6 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 13 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 12 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %21 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                              Private f32_3* %179 = OpVariable Private 
                                         i32 %184 = OpConstant 11 
                                         i32 %206 = OpConstant 14 
                               Private bool* %212 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                             %224 = OpTypePointer Input %21 
                                Input f32_3* %225 = OpVariable Input 
                                             %228 = OpTypePointer Uniform %21 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %240 = OpConstant 2 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %250 = OpConstant 3 
                                         f32 %291 = OpConstant 3.674022E-40 
                               Private bool* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 5 
                                        bool %299 = OpConstantFalse 
                                        bool %305 = OpSpecConstantFalse 
                               Private bool* %308 = OpVariable Private 
                                         i32 %314 = OpConstant 6 
                                             %340 = OpTypePointer Function %21 
                                         i32 %350 = OpConstant 8 
                              Private f32_4* %355 = OpVariable Private 
                                         i32 %357 = OpConstant 7 
                              Private f32_2* %363 = OpVariable Private 
                                         f32 %367 = OpConstant 3.674022E-40 
                                Private f32* %370 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                             %381 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %382 = OpTypeSampledImage %381 
                                             %383 = OpTypePointer UniformConstant %382 
 UniformConstant read_only Texture3DSampled* %384 = OpVariable UniformConstant 
                              Private f32_3* %395 = OpVariable Private 
                                Input f32_4* %405 = OpVariable Input 
                                Private f32* %411 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %412 = OpVariable UniformConstant 
                              Private f32_3* %417 = OpVariable Private 
                                             %433 = OpTypePointer Function %6 
                                         i32 %447 = OpConstant 9 
                                Input f32_3* %458 = OpVariable Input 
                                             %463 = OpTypePointer Output %7 
                               Output f32_4* %464 = OpVariable Output 
                                             %467 = OpTypePointer Output %6 
                                         i32 %469 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %341 = OpVariable Function 
                               Function f32* %434 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                       f32_4 %180 = OpLoad %75 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpExtInst %1 30 %181 
                                                      OpStore %179 %182 
                                       f32_3 %183 = OpLoad %179 
                                Uniform f32* %185 = OpAccessChain %27 %184 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %184 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %189 = OpAccessChain %27 %184 
                                         f32 %190 = OpLoad %189 
                                       f32_3 %191 = OpCompositeConstruct %186 %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                         f32 %193 = OpCompositeExtract %191 1 
                                         f32 %194 = OpCompositeExtract %191 2 
                                       f32_3 %195 = OpCompositeConstruct %192 %193 %194 
                                       f32_3 %196 = OpFMul %183 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpExtInst %1 29 %200 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %9 %203 
                                Private f32* %204 = OpAccessChain %9 %158 
                                         f32 %205 = OpLoad %204 
                                Uniform f32* %207 = OpAccessChain %27 %206 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %205 %209 
                                Private f32* %211 = OpAccessChain %66 %13 
                                                      OpStore %211 %210 
                                Private f32* %213 = OpAccessChain %66 %13 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %167 
                                                      OpStore %212 %215 
                                        bool %216 = OpLoad %212 
                                         i32 %217 = OpSelect %216 %171 %170 
                                         i32 %218 = OpIMul %217 %173 
                                        bool %219 = OpINotEqual %218 %170 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                       f32_3 %226 = OpLoad %225 
                                       f32_3 %227 = OpFNegate %226 
                              Uniform f32_3* %229 = OpAccessChain %27 %170 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFAdd %227 %230 
                                                      OpStore %223 %231 
                                Uniform f32* %234 = OpAccessChain %27 %233 %170 %30 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %232 %13 
                                                      OpStore %236 %235 
                                Uniform f32* %237 = OpAccessChain %27 %233 %171 %30 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %232 %48 
                                                      OpStore %239 %238 
                                Uniform f32* %241 = OpAccessChain %27 %233 %240 %30 
                                         f32 %242 = OpLoad %241 
                                Private f32* %243 = OpAccessChain %232 %30 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %223 
                                       f32_3 %245 = OpLoad %232 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %223 %13 
                                                      OpStore %247 %246 
                                       f32_3 %249 = OpLoad %225 
                              Uniform f32_4* %251 = OpAccessChain %27 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpFNegate %253 
                                       f32_3 %255 = OpFAdd %249 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %248 
                                       f32_3 %257 = OpLoad %248 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %248 %13 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %248 %13 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 31 %261 
                                Private f32* %263 = OpAccessChain %248 %13 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %223 %13 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                Private f32* %267 = OpAccessChain %248 %13 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %248 %13 
                                                      OpStore %270 %269 
                                Uniform f32* %271 = OpAccessChain %27 %250 %158 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %248 %13 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %223 %13 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFAdd %275 %277 
                                Private f32* %279 = OpAccessChain %223 %13 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %223 %13 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %27 %240 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Uniform f32* %285 = OpAccessChain %27 %240 %158 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %223 %13 
                                                      OpStore %288 %287 
                                Private f32* %289 = OpAccessChain %223 %13 
                                         f32 %290 = OpLoad %289 
                                         f32 %292 = OpExtInst %1 43 %290 %167 %291 
                                Private f32* %293 = OpAccessChain %223 %13 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %27 %295 %13 
                                         f32 %297 = OpLoad %296 
                                        bool %298 = OpFOrdEqual %297 %291 
                                                      OpStore %294 %298 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                        bool %302 = OpLoad %294 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %304 
                                             %303 = OpLabel 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %390 
                                             %306 = OpLabel 
                                Uniform f32* %309 = OpAccessChain %27 %295 %48 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdEqual %310 %291 
                                                      OpStore %308 %311 
                                       f32_3 %312 = OpLoad %225 
                                       f32_3 %313 = OpVectorShuffle %312 %312 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %27 %314 %171 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                                      OpStore %232 %318 
                              Uniform f32_4* %319 = OpAccessChain %27 %314 %170 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpLoad %225 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 0 0 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_3 %325 = OpLoad %232 
                                       f32_3 %326 = OpFAdd %324 %325 
                                                      OpStore %232 %326 
                              Uniform f32_4* %327 = OpAccessChain %27 %314 %240 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpLoad %225 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_3 %333 = OpLoad %232 
                                       f32_3 %334 = OpFAdd %332 %333 
                                                      OpStore %232 %334 
                                       f32_3 %335 = OpLoad %232 
                              Uniform f32_4* %336 = OpAccessChain %27 %314 %250 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                                      OpStore %232 %339 
                                        bool %342 = OpLoad %308 
                                                      OpSelectionMerge %344 None 
                                                      OpBranchConditional %342 %343 %346 
                                             %343 = OpLabel 
                                       f32_3 %345 = OpLoad %232 
                                                      OpStore %341 %345 
                                                      OpBranch %344 
                                             %346 = OpLabel 
                                       f32_3 %347 = OpLoad %225 
                                                      OpStore %341 %347 
                                                      OpBranch %344 
                                             %344 = OpLabel 
                                       f32_3 %348 = OpLoad %341 
                                                      OpStore %232 %348 
                                       f32_3 %349 = OpLoad %232 
                              Uniform f32_3* %351 = OpAccessChain %27 %350 
                                       f32_3 %352 = OpLoad %351 
                                       f32_3 %353 = OpFNegate %352 
                                       f32_3 %354 = OpFAdd %349 %353 
                                                      OpStore %232 %354 
                                       f32_3 %356 = OpLoad %232 
                              Uniform f32_3* %358 = OpAccessChain %27 %357 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpFMul %356 %359 
                                       f32_4 %361 = OpLoad %355 
                                       f32_4 %362 = OpVectorShuffle %361 %360 0 4 5 6 
                                                      OpStore %355 %362 
                                Private f32* %364 = OpAccessChain %355 %48 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %365 %96 
                                         f32 %368 = OpFAdd %366 %367 
                                Private f32* %369 = OpAccessChain %363 %13 
                                                      OpStore %369 %368 
                                Uniform f32* %371 = OpAccessChain %27 %295 %30 
                                         f32 %372 = OpLoad %371 
                                         f32 %374 = OpFMul %372 %373 
                                         f32 %375 = OpFAdd %374 %367 
                                                      OpStore %370 %375 
                                         f32 %376 = OpLoad %370 
                                Private f32* %377 = OpAccessChain %363 %13 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpExtInst %1 40 %376 %378 
                                Private f32* %380 = OpAccessChain %355 %13 
                                                      OpStore %380 %379 
                  read_only Texture3DSampled %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %355 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 2 3 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                                      OpStore %355 %388 
                                       f32_4 %389 = OpLoad %355 
                                                      OpStore %66 %389 
                                                      OpBranch %307 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %66 %13 
                                                      OpStore %391 %291 
                                Private f32* %392 = OpAccessChain %66 %48 
                                                      OpStore %392 %291 
                                Private f32* %393 = OpAccessChain %66 %30 
                                                      OpStore %393 %291 
                                Private f32* %394 = OpAccessChain %66 %158 
                                                      OpStore %394 %291 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_4 %396 = OpLoad %66 
                              Uniform f32_4* %397 = OpAccessChain %27 %171 
                                       f32_4 %398 = OpLoad %397 
                                         f32 %399 = OpDot %396 %398 
                                Private f32* %400 = OpAccessChain %395 %13 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %395 %13 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 43 %402 %167 %291 
                                Private f32* %404 = OpAccessChain %395 %13 
                                                      OpStore %404 %403 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                                       f32_4 %408 = OpLoad %405 
                                       f32_2 %409 = OpVectorShuffle %408 %408 3 3 
                                       f32_2 %410 = OpFDiv %407 %409 
                                                      OpStore %363 %410 
                  read_only Texture2DSampled %413 = OpLoad %412 
                                       f32_2 %414 = OpLoad %363 
                                       f32_4 %415 = OpImageSampleImplicitLod %413 %414 
                                         f32 %416 = OpCompositeExtract %415 0 
                                                      OpStore %411 %416 
                                Private f32* %418 = OpAccessChain %223 %13 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %411 
                                         f32 %421 = OpFAdd %419 %420 
                                Private f32* %422 = OpAccessChain %417 %13 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %417 %13 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpExtInst %1 43 %424 %167 %291 
                                Private f32* %426 = OpAccessChain %417 %13 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %417 %13 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %395 %13 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpExtInst %1 37 %428 %430 
                                Private f32* %432 = OpAccessChain %395 %13 
                                                      OpStore %432 %431 
                                        bool %435 = OpLoad %294 
                                                      OpSelectionMerge %437 None 
                                                      OpBranchConditional %435 %436 %440 
                                             %436 = OpLabel 
                                Private f32* %438 = OpAccessChain %395 %13 
                                         f32 %439 = OpLoad %438 
                                                      OpStore %434 %439 
                                                      OpBranch %437 
                                             %440 = OpLabel 
                                Private f32* %441 = OpAccessChain %417 %13 
                                         f32 %442 = OpLoad %441 
                                                      OpStore %434 %442 
                                                      OpBranch %437 
                                             %437 = OpLabel 
                                         f32 %443 = OpLoad %434 
                                Private f32* %444 = OpAccessChain %395 %13 
                                                      OpStore %444 %443 
                                       f32_4 %445 = OpLoad %75 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                              Uniform f32_4* %448 = OpAccessChain %27 %447 
                                       f32_4 %449 = OpLoad %448 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFMul %446 %450 
                                                      OpStore %417 %451 
                                       f32_3 %452 = OpLoad %395 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 0 0 
                                       f32_3 %454 = OpLoad %417 
                                       f32_3 %455 = OpFMul %453 %454 
                                                      OpStore %395 %455 
                                       f32_4 %456 = OpLoad %75 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %459 = OpLoad %458 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_3 %461 = OpLoad %395 
                                       f32_3 %462 = OpFAdd %460 %461 
                                                      OpStore %395 %462 
                                Private f32* %465 = OpAccessChain %9 %158 
                                         f32 %466 = OpLoad %465 
                                 Output f32* %468 = OpAccessChain %464 %158 
                                                      OpStore %468 %466 
                                Uniform f32* %470 = OpAccessChain %27 %469 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %472 = OpAccessChain %27 %469 
                                         f32 %473 = OpLoad %472 
                                Uniform f32* %474 = OpAccessChain %27 %469 
                                         f32 %475 = OpLoad %474 
                                       f32_3 %476 = OpCompositeConstruct %471 %473 %475 
                                         f32 %477 = OpCompositeExtract %476 0 
                                         f32 %478 = OpCompositeExtract %476 1 
                                         f32 %479 = OpCompositeExtract %476 2 
                                       f32_3 %480 = OpCompositeConstruct %477 %478 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %395 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %464 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %464 %487 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 71724
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat5;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                                             %198 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                 Output f32* %199 = OpAccessChain %120 %60 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %120 %60 %48 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 376
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %199 %364 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %241 SpecId 241 
                                                      OpDecorate %318 DescriptorSet 318 
                                                      OpDecorate %318 Binding 318 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %343 DescriptorSet 343 
                                                      OpDecorate %343 Binding 343 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %364 Location 364 
                                                      OpDecorate %367 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeArray %7 %21 
                                              %25 = OpTypeStruct %7 %7 %22 %23 %23 %7 %24 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 8 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 7 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %23 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                                         i32 %181 = OpConstant 9 
                              Private f32_3* %197 = OpVariable Private 
                                             %198 = OpTypePointer Input %23 
                                Input f32_3* %199 = OpVariable Input 
                                         i32 %202 = OpConstant 6 
                                         i32 %215 = OpConstant 2 
                                         i32 %225 = OpConstant 3 
                               Private bool* %230 = OpVariable Private 
                                         f32 %233 = OpConstant 3.674022E-40 
                                        bool %235 = OpConstantFalse 
                                        bool %241 = OpSpecConstantFalse 
                              Private f32_3* %247 = OpVariable Private 
                                             %275 = OpTypePointer Function %23 
                                         i32 %285 = OpConstant 4 
                                             %286 = OpTypePointer Uniform %23 
                              Private f32_4* %291 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                             %315 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %316 = OpTypeSampledImage %315 
                                             %317 = OpTypePointer UniformConstant %316 
 UniformConstant read_only Texture3DSampled* %318 = OpVariable UniformConstant 
                              Private f32_3* %329 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %343 = OpVariable UniformConstant 
                                         i32 %358 = OpConstant 5 
                                             %363 = OpTypePointer Output %7 
                               Output f32_4* %364 = OpVariable Output 
                                             %373 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                Private f32* %179 = OpAccessChain %9 %158 
                                         f32 %180 = OpLoad %179 
                                Uniform f32* %182 = OpAccessChain %27 %181 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %180 %184 
                                Private f32* %186 = OpAccessChain %66 %13 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %66 %13 
                                         f32 %188 = OpLoad %187 
                                        bool %189 = OpFOrdLessThan %188 %167 
                                                      OpStore %164 %189 
                                        bool %190 = OpLoad %164 
                                         i32 %191 = OpSelect %190 %171 %170 
                                         i32 %192 = OpIMul %191 %173 
                                        bool %193 = OpINotEqual %192 %170 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %193 %194 %195 
                                             %194 = OpLabel 
                                                      OpKill
                                             %195 = OpLabel 
                                       f32_3 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 1 1 
                              Uniform f32_4* %203 = OpAccessChain %27 %202 %171 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFMul %201 %205 
                                                      OpStore %197 %206 
                              Uniform f32_4* %207 = OpAccessChain %27 %202 %170 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpLoad %199 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 0 0 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %197 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %197 %214 
                              Uniform f32_4* %216 = OpAccessChain %27 %202 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpLoad %199 
                                       f32_3 %220 = OpVectorShuffle %219 %219 2 2 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_3 %222 = OpLoad %197 
                                       f32_3 %223 = OpFAdd %221 %222 
                                                      OpStore %197 %223 
                                       f32_3 %224 = OpLoad %197 
                              Uniform f32_4* %226 = OpAccessChain %27 %202 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %224 %228 
                                                      OpStore %197 %229 
                                Uniform f32* %231 = OpAccessChain %27 %171 %13 
                                         f32 %232 = OpLoad %231 
                                        bool %234 = OpFOrdEqual %232 %233 
                                                      OpStore %230 %234 
                                                      OpSelectionMerge %237 None 
                                                      OpBranchConditional %235 %236 %237 
                                             %236 = OpLabel 
                                        bool %238 = OpLoad %230 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                                      OpBranch %237 
                                             %237 = OpLabel 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %241 %242 %324 
                                             %242 = OpLabel 
                                Uniform f32* %244 = OpAccessChain %27 %171 %48 
                                         f32 %245 = OpLoad %244 
                                        bool %246 = OpFOrdEqual %245 %233 
                                                      OpStore %230 %246 
                                       f32_3 %248 = OpLoad %199 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %27 %215 %171 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %249 %252 
                                                      OpStore %247 %253 
                              Uniform f32_4* %254 = OpAccessChain %27 %215 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %199 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %247 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %247 %261 
                              Uniform f32_4* %262 = OpAccessChain %27 %215 %215 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpLoad %199 
                                       f32_3 %266 = OpVectorShuffle %265 %265 2 2 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %247 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %247 %269 
                                       f32_3 %270 = OpLoad %247 
                              Uniform f32_4* %271 = OpAccessChain %27 %215 %225 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %270 %273 
                                                      OpStore %247 %274 
                                        bool %277 = OpLoad %230 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                       f32_3 %280 = OpLoad %247 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %199 
                                                      OpStore %276 %282 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %283 = OpLoad %276 
                                                      OpStore %247 %283 
                                       f32_3 %284 = OpLoad %247 
                              Uniform f32_3* %287 = OpAccessChain %27 %285 
                                       f32_3 %288 = OpLoad %287 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %284 %289 
                                                      OpStore %247 %290 
                                       f32_3 %292 = OpLoad %247 
                              Uniform f32_3* %293 = OpAccessChain %27 %225 
                                       f32_3 %294 = OpLoad %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %291 
                                       f32_4 %297 = OpVectorShuffle %296 %295 0 4 5 6 
                                                      OpStore %291 %297 
                                Private f32* %299 = OpAccessChain %291 %48 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %300 %96 
                                         f32 %303 = OpFAdd %301 %302 
                                                      OpStore %298 %303 
                                Uniform f32* %304 = OpAccessChain %27 %171 %30 
                                         f32 %305 = OpLoad %304 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %302 
                                Private f32* %309 = OpAccessChain %247 %13 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %298 
                                Private f32* %311 = OpAccessChain %247 %13 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpExtInst %1 40 %310 %312 
                                Private f32* %314 = OpAccessChain %291 %13 
                                                      OpStore %314 %313 
                  read_only Texture3DSampled %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %291 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 2 3 
                                       f32_4 %322 = OpImageSampleImplicitLod %319 %321 
                                                      OpStore %291 %322 
                                       f32_4 %323 = OpLoad %291 
                                                      OpStore %66 %323 
                                                      OpBranch %243 
                                             %324 = OpLabel 
                                Private f32* %325 = OpAccessChain %66 %13 
                                                      OpStore %325 %233 
                                Private f32* %326 = OpAccessChain %66 %48 
                                                      OpStore %326 %233 
                                Private f32* %327 = OpAccessChain %66 %30 
                                                      OpStore %327 %233 
                                Private f32* %328 = OpAccessChain %66 %158 
                                                      OpStore %328 %233 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                       f32_4 %330 = OpLoad %66 
                              Uniform f32_4* %331 = OpAccessChain %27 %170 
                                       f32_4 %332 = OpLoad %331 
                                         f32 %333 = OpDot %330 %332 
                                Private f32* %334 = OpAccessChain %329 %13 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %329 %13 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 43 %336 %167 %233 
                                Private f32* %338 = OpAccessChain %329 %13 
                                                      OpStore %338 %337 
                                       f32_3 %339 = OpLoad %197 
                                       f32_3 %340 = OpLoad %197 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %197 %13 
                                                      OpStore %342 %341 
                  read_only Texture2DSampled %344 = OpLoad %343 
                                       f32_3 %345 = OpLoad %197 
                                       f32_2 %346 = OpVectorShuffle %345 %345 0 0 
                                       f32_4 %347 = OpImageSampleImplicitLod %344 %346 
                                         f32 %348 = OpCompositeExtract %347 3 
                                Private f32* %349 = OpAccessChain %197 %13 
                                                      OpStore %349 %348 
                                Private f32* %350 = OpAccessChain %329 %13 
                                         f32 %351 = OpLoad %350 
                                Private f32* %352 = OpAccessChain %197 %13 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpFMul %351 %353 
                                Private f32* %355 = OpAccessChain %197 %13 
                                                      OpStore %355 %354 
                                       f32_4 %356 = OpLoad %75 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                              Uniform f32_4* %359 = OpAccessChain %27 %358 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFMul %357 %361 
                                                      OpStore %329 %362 
                                       f32_3 %365 = OpLoad %197 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                                       f32_3 %367 = OpLoad %329 
                                       f32_3 %368 = OpFMul %366 %367 
                                       f32_4 %369 = OpLoad %364 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %364 %370 
                                Private f32* %371 = OpAccessChain %9 %158 
                                         f32 %372 = OpLoad %371 
                                 Output f32* %374 = OpAccessChain %364 %158 
                                                      OpStore %374 %372 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat4;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                                             %198 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                 Output f32* %199 = OpAccessChain %120 %60 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %120 %60 %48 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 332
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %214 %320 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %24 0 RelaxedPrecision 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 RelaxedPrecision 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 RelaxedPrecision 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %206 SpecId 206 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %293 DescriptorSet 293 
                                                      OpDecorate %293 Binding 293 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %320 Location 320 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeStruct %7 %7 %22 %23 %23 %7 %6 %7 %6 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32_4; f32;}* %26 = OpVariable Uniform 
                                              %27 = OpTypeInt 32 1 
                                          i32 %28 = OpConstant 7 
                                          u32 %29 = OpConstant 2 
                                              %30 = OpTypePointer Uniform %6 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %45 = OpConstant 3.674022E-40 
                                          u32 %47 = OpConstant 1 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                               Private f32_4* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                        f32_3 %71 = OpConstantComposite %68 %69 %70 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 6 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                             %100 = OpTypePointer Private %61 
                              Private f32_2* %101 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                                         f32 %106 = OpConstant 3.674022E-40 
                                       f32_2 %107 = OpConstantComposite %106 %106 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %111 %111 
                                             %116 = OpTypePointer Private %23 
                              Private f32_3* %117 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %118 = OpVariable UniformConstant 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %124 %125 %126 
                                         f32 %138 = OpConstant 3.674022E-40 
                                       f32_3 %139 = OpConstantComposite %138 %138 %138 
                                         u32 %157 = OpConstant 3 
                                         f32 %160 = OpConstant 3.674022E-40 
                               Private bool* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         i32 %169 = OpConstant 0 
                                         i32 %170 = OpConstant 1 
                                         i32 %172 = OpConstant -1 
                                         i32 %180 = OpConstant 8 
                                         f32 %198 = OpConstant 3.674022E-40 
                                        bool %200 = OpConstantFalse 
                                        bool %206 = OpSpecConstantFalse 
                              Private f32_3* %212 = OpVariable Private 
                                             %213 = OpTypePointer Input %23 
                                Input f32_3* %214 = OpVariable Input 
                                         i32 %217 = OpConstant 2 
                                         i32 %239 = OpConstant 3 
                                             %244 = OpTypePointer Function %23 
                                         i32 %257 = OpConstant 4 
                                             %258 = OpTypePointer Uniform %23 
                              Private f32_4* %265 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                Private f32* %279 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                             %290 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %291 = OpTypeSampledImage %290 
                                             %292 = OpTypePointer UniformConstant %291 
 UniformConstant read_only Texture3DSampled* %293 = OpVariable UniformConstant 
                                Private f32* %304 = OpVariable Private 
                              Private f32_3* %311 = OpVariable Private 
                                         i32 %314 = OpConstant 5 
                                             %319 = OpTypePointer Output %7 
                               Output f32_4* %320 = OpVariable Output 
                                             %329 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %245 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %31 = OpAccessChain %26 %28 %29 
                                          f32 %32 = OpLoad %31 
                                          f32 %34 = OpFMul %32 %33 
                                 Private f32* %35 = OpAccessChain %9 %13 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFAdd %34 %36 
                                 Private f32* %38 = OpAccessChain %9 %13 
                                                      OpStore %38 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpExtInst %1 13 %40 
                                 Private f32* %42 = OpAccessChain %9 %13 
                                                      OpStore %42 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %47 
                                                      OpStore %51 %50 
                                   Input f32* %52 = OpAccessChain %11 %13 
                                          f32 %53 = OpLoad %52 
                                 Private f32* %54 = OpAccessChain %9 %13 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_4 %62 = OpLoad %9 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %60 %63 
                                                      OpStore %55 %64 
                                        f32_4 %66 = OpLoad %55 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                          f32 %72 = OpDot %67 %71 
                                 Private f32* %73 = OpAccessChain %65 %13 
                                                      OpStore %73 %72 
                                        f32_4 %75 = OpLoad %55 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %55 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %26 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %55 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                 Private f32* %93 = OpAccessChain %65 %13 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdLessThan %94 %95 
                                                      OpStore %92 %96 
                                         bool %97 = OpLoad %92 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %152 
                                              %98 = OpLabel 
                              Uniform f32_4* %103 = OpAccessChain %26 %28 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %108 = OpFMul %105 %107 
                                                      OpStore %101 %108 
                                       f32_4 %109 = OpLoad %11 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %113 = OpFMul %110 %112 
                                       f32_2 %114 = OpLoad %101 
                                       f32_2 %115 = OpFAdd %113 %114 
                                                      OpStore %101 %115 
                  read_only Texture2DSampled %119 = OpLoad %118 
                                       f32_2 %120 = OpLoad %101 
                                       f32_4 %121 = OpImageSampleImplicitLod %119 %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                                      OpStore %117 %122 
                                       f32_3 %123 = OpLoad %117 
                                       f32_3 %128 = OpFMul %123 %127 
                                       f32_4 %129 = OpLoad %74 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %74 %130 
                                       f32_4 %131 = OpLoad %74 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpExtInst %1 30 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %74 %135 
                                       f32_4 %136 = OpLoad %74 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                                      OpStore %74 %142 
                                       f32_4 %143 = OpLoad %74 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 29 %144 
                                       f32_4 %146 = OpLoad %74 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %74 %147 
                                       f32_4 %148 = OpLoad %74 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %74 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %74 %151 
                                                      OpBranch %99 
                                             %152 = OpLabel 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                Private f32* %158 = OpAccessChain %9 %157 
                                         f32 %159 = OpLoad %158 
                                         f32 %161 = OpFAdd %159 %160 
                                Private f32* %162 = OpAccessChain %65 %13 
                                                      OpStore %162 %161 
                                Private f32* %164 = OpAccessChain %65 %13 
                                         f32 %165 = OpLoad %164 
                                        bool %167 = OpFOrdLessThan %165 %166 
                                                      OpStore %163 %167 
                                        bool %168 = OpLoad %163 
                                         i32 %171 = OpSelect %168 %170 %169 
                                         i32 %173 = OpIMul %171 %172 
                                        bool %174 = OpINotEqual %173 %169 
                                                      OpSelectionMerge %176 None 
                                                      OpBranchConditional %174 %175 %176 
                                             %175 = OpLabel 
                                                      OpKill
                                             %176 = OpLabel 
                                Private f32* %178 = OpAccessChain %9 %157 
                                         f32 %179 = OpLoad %178 
                                Uniform f32* %181 = OpAccessChain %26 %180 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFNegate %182 
                                         f32 %184 = OpFAdd %179 %183 
                                Private f32* %185 = OpAccessChain %65 %13 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %65 %13 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdLessThan %187 %166 
                                                      OpStore %163 %188 
                                        bool %189 = OpLoad %163 
                                         i32 %190 = OpSelect %189 %170 %169 
                                         i32 %191 = OpIMul %190 %172 
                                        bool %192 = OpINotEqual %191 %169 
                                                      OpSelectionMerge %194 None 
                                                      OpBranchConditional %192 %193 %194 
                                             %193 = OpLabel 
                                                      OpKill
                                             %194 = OpLabel 
                                Uniform f32* %196 = OpAccessChain %26 %170 %13 
                                         f32 %197 = OpLoad %196 
                                        bool %199 = OpFOrdEqual %197 %198 
                                                      OpStore %163 %199 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %202 
                                             %201 = OpLabel 
                                        bool %203 = OpLoad %163 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %205 
                                             %204 = OpLabel 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                                      OpBranch %202 
                                             %202 = OpLabel 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %299 
                                             %207 = OpLabel 
                                Uniform f32* %209 = OpAccessChain %26 %170 %47 
                                         f32 %210 = OpLoad %209 
                                        bool %211 = OpFOrdEqual %210 %198 
                                                      OpStore %163 %211 
                                       f32_3 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %218 = OpAccessChain %26 %217 %170 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFMul %216 %220 
                                                      OpStore %212 %221 
                              Uniform f32_4* %222 = OpAccessChain %26 %217 %169 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpLoad %214 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 0 0 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_3 %228 = OpLoad %212 
                                       f32_3 %229 = OpFAdd %227 %228 
                                                      OpStore %212 %229 
                              Uniform f32_4* %230 = OpAccessChain %26 %217 %217 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %214 
                                       f32_3 %234 = OpVectorShuffle %233 %233 2 2 2 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %212 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %212 %237 
                                       f32_3 %238 = OpLoad %212 
                              Uniform f32_4* %240 = OpAccessChain %26 %217 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFAdd %238 %242 
                                                      OpStore %212 %243 
                                        bool %246 = OpLoad %163 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %246 %247 %250 
                                             %247 = OpLabel 
                                       f32_3 %249 = OpLoad %212 
                                                      OpStore %245 %249 
                                                      OpBranch %248 
                                             %250 = OpLabel 
                                       f32_3 %251 = OpLoad %214 
                                                      OpStore %245 %251 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                       f32_3 %252 = OpLoad %245 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %9 %254 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                              Uniform f32_3* %259 = OpAccessChain %26 %257 
                                       f32_3 %260 = OpLoad %259 
                                       f32_3 %261 = OpFNegate %260 
                                       f32_3 %262 = OpFAdd %256 %261 
                                       f32_4 %263 = OpLoad %9 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %9 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_3* %268 = OpAccessChain %26 %239 
                                       f32_3 %269 = OpLoad %268 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_4 %271 = OpLoad %265 
                                       f32_4 %272 = OpVectorShuffle %271 %270 0 4 5 6 
                                                      OpStore %265 %272 
                                Private f32* %273 = OpAccessChain %265 %47 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %274 %95 
                                         f32 %277 = OpFAdd %275 %276 
                                Private f32* %278 = OpAccessChain %9 %13 
                                                      OpStore %278 %277 
                                Uniform f32* %280 = OpAccessChain %26 %170 %29 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %276 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                Private f32* %286 = OpAccessChain %9 %13 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpExtInst %1 40 %285 %287 
                                Private f32* %289 = OpAccessChain %265 %13 
                                                      OpStore %289 %288 
                  read_only Texture3DSampled %294 = OpLoad %293 
                                       f32_4 %295 = OpLoad %265 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 2 3 
                                       f32_4 %297 = OpImageSampleImplicitLod %294 %296 
                                                      OpStore %265 %297 
                                       f32_4 %298 = OpLoad %265 
                                                      OpStore %65 %298 
                                                      OpBranch %208 
                                             %299 = OpLabel 
                                Private f32* %300 = OpAccessChain %65 %13 
                                                      OpStore %300 %198 
                                Private f32* %301 = OpAccessChain %65 %47 
                                                      OpStore %301 %198 
                                Private f32* %302 = OpAccessChain %65 %29 
                                                      OpStore %302 %198 
                                Private f32* %303 = OpAccessChain %65 %157 
                                                      OpStore %303 %198 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                       f32_4 %305 = OpLoad %65 
                              Uniform f32_4* %306 = OpAccessChain %26 %169 
                                       f32_4 %307 = OpLoad %306 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %304 %308 
                                         f32 %309 = OpLoad %304 
                                         f32 %310 = OpExtInst %1 43 %309 %166 %198 
                                                      OpStore %304 %310 
                                       f32_4 %312 = OpLoad %74 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                              Uniform f32_4* %315 = OpAccessChain %26 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                                      OpStore %311 %318 
                                         f32 %321 = OpLoad %304 
                                       f32_3 %322 = OpCompositeConstruct %321 %321 %321 
                                       f32_3 %323 = OpLoad %311 
                                       f32_3 %324 = OpFMul %322 %323 
                                       f32_4 %325 = OpLoad %320 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %320 %326 
                                Private f32* %327 = OpAccessChain %9 %157 
                                         f32 %328 = OpLoad %327 
                                 Output f32* %330 = OpAccessChain %320 %157 
                                                      OpStore %330 %328 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                                             %198 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                 Output f32* %199 = OpAccessChain %120 %60 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %120 %60 %48 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 410
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %76 %193 %398 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %117 DescriptorSet 117 
                                                      OpDecorate %117 Binding 117 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %230 SpecId 230 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %355 DescriptorSet 355 
                                                      OpDecorate %355 Binding 355 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %398 Location 398 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeArray %7 %21 
                                              %25 = OpTypeStruct %7 %7 %22 %23 %23 %7 %24 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 8 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                                 Private f32* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %74 = OpVariable Private 
                                 Input f32_4* %76 = OpVariable Input 
                                          i32 %82 = OpConstant 7 
                                              %90 = OpTypeBool 
                                              %91 = OpTypePointer Private %90 
                                Private bool* %92 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Private %62 
                              Private f32_2* %100 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %105 %105 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_2 %111 = OpConstantComposite %110 %110 
                                             %115 = OpTypePointer Private %23 
                              Private f32_3* %116 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %117 = OpVariable UniformConstant 
                                         f32 %123 = OpConstant 3.674022E-40 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_3 %126 = OpConstantComposite %123 %124 %125 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                         u32 %156 = OpConstant 3 
                                         f32 %159 = OpConstant 3.674022E-40 
                               Private bool* %161 = OpVariable Private 
                                         f32 %163 = OpConstant 3.674022E-40 
                                         i32 %166 = OpConstant 0 
                                         i32 %167 = OpConstant 1 
                                         i32 %169 = OpConstant -1 
                                         i32 %177 = OpConstant 9 
                              Private f32_4* %191 = OpVariable Private 
                                             %192 = OpTypePointer Input %23 
                                Input f32_3* %193 = OpVariable Input 
                                         i32 %196 = OpConstant 6 
                                         i32 %207 = OpConstant 2 
                                         i32 %216 = OpConstant 3 
                                         f32 %222 = OpConstant 3.674022E-40 
                                        bool %224 = OpConstantFalse 
                                        bool %230 = OpSpecConstantFalse 
                              Private f32_3* %236 = OpVariable Private 
                              Private f32_4* %264 = OpVariable Private 
                                             %265 = OpTypePointer Function %23 
                                         i32 %278 = OpConstant 4 
                                             %279 = OpTypePointer Uniform %23 
                                         f32 %296 = OpConstant 3.674022E-40 
                              Private f32_2* %299 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %312 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %313 = OpTypeSampledImage %312 
                                             %314 = OpTypePointer UniformConstant %313 
 UniformConstant read_only Texture3DSampled* %315 = OpVariable UniformConstant 
                              Private f32_4* %320 = OpVariable Private 
                                Private f32* %327 = OpVariable Private 
                               Private bool* %334 = OpVariable Private 
                              Private f32_3* %338 = OpVariable Private 
                                             %339 = OpTypePointer Function %6 
                                       f32_2 %353 = OpConstantComposite %302 %302 
 UniformConstant read_only Texture2DSampled* %355 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %373 = OpVariable UniformConstant 
                                         i32 %392 = OpConstant 5 
                                             %397 = OpTypePointer Output %7 
                               Output f32_4* %398 = OpVariable Output 
                                             %407 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %266 = OpVariable Function 
                               Function f32* %340 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                                      OpStore %66 %73 
                                        f32_4 %75 = OpLoad %56 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %56 
                                        f32_4 %80 = OpFNegate %79 
                                        f32_4 %81 = OpFAdd %78 %80 
                                                      OpStore %74 %81 
                                 Uniform f32* %83 = OpAccessChain %27 %82 
                                          f32 %84 = OpLoad %83 
                                        f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                                        f32_4 %86 = OpLoad %74 
                                        f32_4 %87 = OpFMul %85 %86 
                                        f32_4 %88 = OpLoad %56 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                          f32 %93 = OpLoad %66 
                                         bool %95 = OpFOrdLessThan %93 %94 
                                                      OpStore %92 %95 
                                         bool %96 = OpLoad %92 
                                                      OpSelectionMerge %98 None 
                                                      OpBranchConditional %96 %97 %151 
                                              %97 = OpLabel 
                              Uniform f32_4* %102 = OpAccessChain %27 %29 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %107 = OpFMul %104 %106 
                                                      OpStore %100 %107 
                                       f32_4 %108 = OpLoad %11 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %112 = OpFMul %109 %111 
                                       f32_2 %113 = OpLoad %100 
                                       f32_2 %114 = OpFAdd %112 %113 
                                                      OpStore %100 %114 
                  read_only Texture2DSampled %118 = OpLoad %117 
                                       f32_2 %119 = OpLoad %100 
                                       f32_4 %120 = OpImageSampleImplicitLod %118 %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                                      OpStore %116 %121 
                                       f32_3 %122 = OpLoad %116 
                                       f32_3 %127 = OpFMul %122 %126 
                                       f32_4 %128 = OpLoad %74 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %74 %129 
                                       f32_4 %130 = OpLoad %74 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpExtInst %1 30 %131 
                                       f32_4 %133 = OpLoad %74 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %74 %134 
                                       f32_4 %135 = OpLoad %74 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %74 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %74 %141 
                                       f32_4 %142 = OpLoad %74 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpExtInst %1 29 %143 
                                       f32_4 %145 = OpLoad %74 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %74 %146 
                                       f32_4 %147 = OpLoad %74 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %74 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %74 %150 
                                                      OpBranch %98 
                                             %151 = OpLabel 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %74 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %74 %155 
                                                      OpBranch %98 
                                              %98 = OpLabel 
                                Private f32* %157 = OpAccessChain %9 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFAdd %158 %159 
                                                      OpStore %66 %160 
                                         f32 %162 = OpLoad %66 
                                        bool %164 = OpFOrdLessThan %162 %163 
                                                      OpStore %161 %164 
                                        bool %165 = OpLoad %161 
                                         i32 %168 = OpSelect %165 %167 %166 
                                         i32 %170 = OpIMul %168 %169 
                                        bool %171 = OpINotEqual %170 %166 
                                                      OpSelectionMerge %173 None 
                                                      OpBranchConditional %171 %172 %173 
                                             %172 = OpLabel 
                                                      OpKill
                                             %173 = OpLabel 
                                Private f32* %175 = OpAccessChain %9 %156 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %178 = OpAccessChain %27 %177 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                         f32 %181 = OpFAdd %176 %180 
                                                      OpStore %66 %181 
                                         f32 %182 = OpLoad %66 
                                        bool %183 = OpFOrdLessThan %182 %163 
                                                      OpStore %161 %183 
                                        bool %184 = OpLoad %161 
                                         i32 %185 = OpSelect %184 %167 %166 
                                         i32 %186 = OpIMul %185 %169 
                                        bool %187 = OpINotEqual %186 %166 
                                                      OpSelectionMerge %189 None 
                                                      OpBranchConditional %187 %188 %189 
                                             %188 = OpLabel 
                                                      OpKill
                                             %189 = OpLabel 
                                       f32_3 %194 = OpLoad %193 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 1 1 1 
                              Uniform f32_4* %197 = OpAccessChain %27 %196 %167 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpFMul %195 %198 
                                                      OpStore %191 %199 
                              Uniform f32_4* %200 = OpAccessChain %27 %196 %166 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpLoad %193 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 0 0 0 
                                       f32_4 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %191 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %191 %206 
                              Uniform f32_4* %208 = OpAccessChain %27 %196 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpLoad %193 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %191 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %191 %214 
                                       f32_4 %215 = OpLoad %191 
                              Uniform f32_4* %217 = OpAccessChain %27 %196 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFAdd %215 %218 
                                                      OpStore %191 %219 
                                Uniform f32* %220 = OpAccessChain %27 %167 %13 
                                         f32 %221 = OpLoad %220 
                                        bool %223 = OpFOrdEqual %221 %222 
                                                      OpStore %161 %223 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %226 
                                             %225 = OpLabel 
                                        bool %227 = OpLoad %161 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %229 
                                             %228 = OpLabel 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %322 
                                             %231 = OpLabel 
                                Uniform f32* %233 = OpAccessChain %27 %167 %48 
                                         f32 %234 = OpLoad %233 
                                        bool %235 = OpFOrdEqual %234 %222 
                                                      OpStore %161 %235 
                                       f32_3 %237 = OpLoad %193 
                                       f32_3 %238 = OpVectorShuffle %237 %237 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %27 %207 %167 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %238 %241 
                                                      OpStore %236 %242 
                              Uniform f32_4* %243 = OpAccessChain %27 %207 %166 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpLoad %193 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 0 0 
                                       f32_3 %248 = OpFMul %245 %247 
                                       f32_3 %249 = OpLoad %236 
                                       f32_3 %250 = OpFAdd %248 %249 
                                                      OpStore %236 %250 
                              Uniform f32_4* %251 = OpAccessChain %27 %207 %207 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_3 %254 = OpLoad %193 
                                       f32_3 %255 = OpVectorShuffle %254 %254 2 2 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %236 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore %236 %258 
                                       f32_3 %259 = OpLoad %236 
                              Uniform f32_4* %260 = OpAccessChain %27 %207 %216 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %259 %262 
                                                      OpStore %236 %263 
                                        bool %267 = OpLoad %161 
                                                      OpSelectionMerge %269 None 
                                                      OpBranchConditional %267 %268 %271 
                                             %268 = OpLabel 
                                       f32_3 %270 = OpLoad %236 
                                                      OpStore %266 %270 
                                                      OpBranch %269 
                                             %271 = OpLabel 
                                       f32_3 %272 = OpLoad %193 
                                                      OpStore %266 %272 
                                                      OpBranch %269 
                                             %269 = OpLabel 
                                       f32_3 %273 = OpLoad %266 
                                       f32_4 %274 = OpLoad %264 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %264 %275 
                                       f32_4 %276 = OpLoad %264 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                              Uniform f32_3* %280 = OpAccessChain %27 %278 
                                       f32_3 %281 = OpLoad %280 
                                       f32_3 %282 = OpFNegate %281 
                                       f32_3 %283 = OpFAdd %277 %282 
                                       f32_4 %284 = OpLoad %264 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %264 %285 
                                       f32_4 %286 = OpLoad %264 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                              Uniform f32_3* %288 = OpAccessChain %27 %216 
                                       f32_3 %289 = OpLoad %288 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %264 
                                       f32_4 %292 = OpVectorShuffle %291 %290 0 4 5 6 
                                                      OpStore %264 %292 
                                Private f32* %293 = OpAccessChain %264 %48 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %294 %94 
                                         f32 %297 = OpFAdd %295 %296 
                                Private f32* %298 = OpAccessChain %236 %13 
                                                      OpStore %298 %297 
                                Uniform f32* %300 = OpAccessChain %27 %167 %30 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpFMul %301 %302 
                                         f32 %304 = OpFAdd %303 %296 
                                Private f32* %305 = OpAccessChain %299 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %236 %13 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %299 %13 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 40 %307 %309 
                                Private f32* %311 = OpAccessChain %264 %13 
                                                      OpStore %311 %310 
                  read_only Texture3DSampled %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %264 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 2 3 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %264 %319 
                                       f32_4 %321 = OpLoad %264 
                                                      OpStore %320 %321 
                                                      OpBranch %232 
                                             %322 = OpLabel 
                                Private f32* %323 = OpAccessChain %320 %13 
                                                      OpStore %323 %222 
                                Private f32* %324 = OpAccessChain %320 %48 
                                                      OpStore %324 %222 
                                Private f32* %325 = OpAccessChain %320 %30 
                                                      OpStore %325 %222 
                                Private f32* %326 = OpAccessChain %320 %156 
                                                      OpStore %326 %222 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                       f32_4 %328 = OpLoad %320 
                              Uniform f32_4* %329 = OpAccessChain %27 %166 
                                       f32_4 %330 = OpLoad %329 
                                         f32 %331 = OpDot %328 %330 
                                                      OpStore %327 %331 
                                         f32 %332 = OpLoad %327 
                                         f32 %333 = OpExtInst %1 43 %332 %163 %222 
                                                      OpStore %327 %333 
                                Private f32* %335 = OpAccessChain %191 %30 
                                         f32 %336 = OpLoad %335 
                                        bool %337 = OpFOrdLessThan %163 %336 
                                                      OpStore %334 %337 
                                        bool %341 = OpLoad %334 
                                                      OpSelectionMerge %343 None 
                                                      OpBranchConditional %341 %342 %344 
                                             %342 = OpLabel 
                                                      OpStore %340 %222 
                                                      OpBranch %343 
                                             %344 = OpLabel 
                                                      OpStore %340 %163 
                                                      OpBranch %343 
                                             %343 = OpLabel 
                                         f32 %345 = OpLoad %340 
                                Private f32* %346 = OpAccessChain %338 %13 
                                                      OpStore %346 %345 
                                       f32_4 %347 = OpLoad %191 
                                       f32_2 %348 = OpVectorShuffle %347 %347 0 1 
                                       f32_4 %349 = OpLoad %191 
                                       f32_2 %350 = OpVectorShuffle %349 %349 3 3 
                                       f32_2 %351 = OpFDiv %348 %350 
                                                      OpStore %299 %351 
                                       f32_2 %352 = OpLoad %299 
                                       f32_2 %354 = OpFAdd %352 %353 
                                                      OpStore %299 %354 
                  read_only Texture2DSampled %356 = OpLoad %355 
                                       f32_2 %357 = OpLoad %299 
                                       f32_4 %358 = OpImageSampleImplicitLod %356 %357 
                                         f32 %359 = OpCompositeExtract %358 3 
                                Private f32* %360 = OpAccessChain %299 %13 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %299 %13 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %338 %13 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                Private f32* %366 = OpAccessChain %338 %13 
                                                      OpStore %366 %365 
                                       f32_4 %367 = OpLoad %191 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_4 %369 = OpLoad %191 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                         f32 %371 = OpDot %368 %370 
                                Private f32* %372 = OpAccessChain %299 %13 
                                                      OpStore %372 %371 
                  read_only Texture2DSampled %374 = OpLoad %373 
                                       f32_2 %375 = OpLoad %299 
                                       f32_2 %376 = OpVectorShuffle %375 %375 0 0 
                                       f32_4 %377 = OpImageSampleImplicitLod %374 %376 
                                         f32 %378 = OpCompositeExtract %377 3 
                                Private f32* %379 = OpAccessChain %299 %13 
                                                      OpStore %379 %378 
                                Private f32* %380 = OpAccessChain %299 %13 
                                         f32 %381 = OpLoad %380 
                                Private f32* %382 = OpAccessChain %338 %13 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFMul %381 %383 
                                Private f32* %385 = OpAccessChain %338 %13 
                                                      OpStore %385 %384 
                                         f32 %386 = OpLoad %327 
                                Private f32* %387 = OpAccessChain %338 %13 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                                      OpStore %327 %389 
                                       f32_4 %390 = OpLoad %74 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                              Uniform f32_4* %393 = OpAccessChain %27 %392 
                                       f32_4 %394 = OpLoad %393 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %391 %395 
                                                      OpStore %338 %396 
                                         f32 %399 = OpLoad %327 
                                       f32_3 %400 = OpCompositeConstruct %399 %399 %399 
                                       f32_3 %401 = OpLoad %338 
                                       f32_3 %402 = OpFMul %400 %401 
                                       f32_4 %403 = OpLoad %398 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %398 %404 
                                Private f32* %405 = OpAccessChain %9 %156 
                                         f32 %406 = OpLoad %405 
                                 Output f32* %408 = OpAccessChain %398 %156 
                                                      OpStore %408 %406 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1.x = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                                             %198 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                 Output f32* %199 = OpAccessChain %120 %60 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %120 %60 %48 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 388
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %199 %376 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %241 SpecId 241 
                                                      OpDecorate %318 DescriptorSet 318 
                                                      OpDecorate %318 Binding 318 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %376 Location 376 
                                                      OpDecorate %379 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeArray %7 %21 
                                              %25 = OpTypeStruct %7 %7 %22 %23 %23 %7 %24 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 8 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 7 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %23 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                                         i32 %181 = OpConstant 9 
                              Private f32_3* %197 = OpVariable Private 
                                             %198 = OpTypePointer Input %23 
                                Input f32_3* %199 = OpVariable Input 
                                         i32 %202 = OpConstant 6 
                                         i32 %215 = OpConstant 2 
                                         i32 %225 = OpConstant 3 
                               Private bool* %230 = OpVariable Private 
                                         f32 %233 = OpConstant 3.674022E-40 
                                        bool %235 = OpConstantFalse 
                                        bool %241 = OpSpecConstantFalse 
                              Private f32_3* %247 = OpVariable Private 
                                             %275 = OpTypePointer Function %23 
                                         i32 %285 = OpConstant 4 
                                             %286 = OpTypePointer Uniform %23 
                              Private f32_4* %291 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                             %315 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %316 = OpTypeSampledImage %315 
                                             %317 = OpTypePointer UniformConstant %316 
 UniformConstant read_only Texture3DSampled* %318 = OpVariable UniformConstant 
                              Private f32_3* %329 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %342 = OpVariable UniformConstant 
                                             %348 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %349 = OpTypeSampledImage %348 
                                             %350 = OpTypePointer UniformConstant %349 
UniformConstant read_only TextureCubeSampled* %351 = OpVariable UniformConstant 
                                         i32 %370 = OpConstant 5 
                                             %375 = OpTypePointer Output %7 
                               Output f32_4* %376 = OpVariable Output 
                                             %385 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                Private f32* %179 = OpAccessChain %9 %158 
                                         f32 %180 = OpLoad %179 
                                Uniform f32* %182 = OpAccessChain %27 %181 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %180 %184 
                                Private f32* %186 = OpAccessChain %66 %13 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %66 %13 
                                         f32 %188 = OpLoad %187 
                                        bool %189 = OpFOrdLessThan %188 %167 
                                                      OpStore %164 %189 
                                        bool %190 = OpLoad %164 
                                         i32 %191 = OpSelect %190 %171 %170 
                                         i32 %192 = OpIMul %191 %173 
                                        bool %193 = OpINotEqual %192 %170 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %193 %194 %195 
                                             %194 = OpLabel 
                                                      OpKill
                                             %195 = OpLabel 
                                       f32_3 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 1 1 
                              Uniform f32_4* %203 = OpAccessChain %27 %202 %171 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFMul %201 %205 
                                                      OpStore %197 %206 
                              Uniform f32_4* %207 = OpAccessChain %27 %202 %170 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpLoad %199 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 0 0 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %197 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %197 %214 
                              Uniform f32_4* %216 = OpAccessChain %27 %202 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpLoad %199 
                                       f32_3 %220 = OpVectorShuffle %219 %219 2 2 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_3 %222 = OpLoad %197 
                                       f32_3 %223 = OpFAdd %221 %222 
                                                      OpStore %197 %223 
                                       f32_3 %224 = OpLoad %197 
                              Uniform f32_4* %226 = OpAccessChain %27 %202 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFAdd %224 %228 
                                                      OpStore %197 %229 
                                Uniform f32* %231 = OpAccessChain %27 %171 %13 
                                         f32 %232 = OpLoad %231 
                                        bool %234 = OpFOrdEqual %232 %233 
                                                      OpStore %230 %234 
                                                      OpSelectionMerge %237 None 
                                                      OpBranchConditional %235 %236 %237 
                                             %236 = OpLabel 
                                        bool %238 = OpLoad %230 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                                      OpBranch %237 
                                             %237 = OpLabel 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %241 %242 %324 
                                             %242 = OpLabel 
                                Uniform f32* %244 = OpAccessChain %27 %171 %48 
                                         f32 %245 = OpLoad %244 
                                        bool %246 = OpFOrdEqual %245 %233 
                                                      OpStore %230 %246 
                                       f32_3 %248 = OpLoad %199 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %27 %215 %171 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %249 %252 
                                                      OpStore %247 %253 
                              Uniform f32_4* %254 = OpAccessChain %27 %215 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %199 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %247 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %247 %261 
                              Uniform f32_4* %262 = OpAccessChain %27 %215 %215 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpLoad %199 
                                       f32_3 %266 = OpVectorShuffle %265 %265 2 2 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %247 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %247 %269 
                                       f32_3 %270 = OpLoad %247 
                              Uniform f32_4* %271 = OpAccessChain %27 %215 %225 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %270 %273 
                                                      OpStore %247 %274 
                                        bool %277 = OpLoad %230 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                       f32_3 %280 = OpLoad %247 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %199 
                                                      OpStore %276 %282 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %283 = OpLoad %276 
                                                      OpStore %247 %283 
                                       f32_3 %284 = OpLoad %247 
                              Uniform f32_3* %287 = OpAccessChain %27 %285 
                                       f32_3 %288 = OpLoad %287 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %284 %289 
                                                      OpStore %247 %290 
                                       f32_3 %292 = OpLoad %247 
                              Uniform f32_3* %293 = OpAccessChain %27 %225 
                                       f32_3 %294 = OpLoad %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %291 
                                       f32_4 %297 = OpVectorShuffle %296 %295 0 4 5 6 
                                                      OpStore %291 %297 
                                Private f32* %299 = OpAccessChain %291 %48 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %300 %96 
                                         f32 %303 = OpFAdd %301 %302 
                                                      OpStore %298 %303 
                                Uniform f32* %304 = OpAccessChain %27 %171 %30 
                                         f32 %305 = OpLoad %304 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpFAdd %307 %302 
                                Private f32* %309 = OpAccessChain %247 %13 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %298 
                                Private f32* %311 = OpAccessChain %247 %13 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpExtInst %1 40 %310 %312 
                                Private f32* %314 = OpAccessChain %291 %13 
                                                      OpStore %314 %313 
                  read_only Texture3DSampled %319 = OpLoad %318 
                                       f32_4 %320 = OpLoad %291 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 2 3 
                                       f32_4 %322 = OpImageSampleImplicitLod %319 %321 
                                                      OpStore %291 %322 
                                       f32_4 %323 = OpLoad %291 
                                                      OpStore %66 %323 
                                                      OpBranch %243 
                                             %324 = OpLabel 
                                Private f32* %325 = OpAccessChain %66 %13 
                                                      OpStore %325 %233 
                                Private f32* %326 = OpAccessChain %66 %48 
                                                      OpStore %326 %233 
                                Private f32* %327 = OpAccessChain %66 %30 
                                                      OpStore %327 %233 
                                Private f32* %328 = OpAccessChain %66 %158 
                                                      OpStore %328 %233 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                       f32_4 %330 = OpLoad %66 
                              Uniform f32_4* %331 = OpAccessChain %27 %170 
                                       f32_4 %332 = OpLoad %331 
                                         f32 %333 = OpDot %330 %332 
                                Private f32* %334 = OpAccessChain %329 %13 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %329 %13 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 43 %336 %167 %233 
                                Private f32* %338 = OpAccessChain %329 %13 
                                                      OpStore %338 %337 
                                       f32_3 %339 = OpLoad %197 
                                       f32_3 %340 = OpLoad %197 
                                         f32 %341 = OpDot %339 %340 
                                                      OpStore %298 %341 
                  read_only Texture2DSampled %343 = OpLoad %342 
                                         f32 %344 = OpLoad %298 
                                       f32_2 %345 = OpCompositeConstruct %344 %344 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                         f32 %347 = OpCompositeExtract %346 3 
                                                      OpStore %298 %347 
                read_only TextureCubeSampled %352 = OpLoad %351 
                                       f32_3 %353 = OpLoad %197 
                                       f32_4 %354 = OpImageSampleImplicitLod %352 %353 
                                         f32 %355 = OpCompositeExtract %354 3 
                                Private f32* %356 = OpAccessChain %197 %13 
                                                      OpStore %356 %355 
                                Private f32* %357 = OpAccessChain %197 %13 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %298 
                                         f32 %360 = OpFMul %358 %359 
                                Private f32* %361 = OpAccessChain %197 %13 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %329 %13 
                                         f32 %363 = OpLoad %362 
                                Private f32* %364 = OpAccessChain %197 %13 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %363 %365 
                                Private f32* %367 = OpAccessChain %197 %13 
                                                      OpStore %367 %366 
                                       f32_4 %368 = OpLoad %75 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                              Uniform f32_4* %371 = OpAccessChain %27 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFMul %369 %373 
                                                      OpStore %329 %374 
                                       f32_3 %377 = OpLoad %197 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpLoad %329 
                                       f32_3 %380 = OpFMul %378 %379 
                                       f32_4 %381 = OpLoad %376 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %376 %382 
                                Private f32* %383 = OpAccessChain %9 %158 
                                         f32 %384 = OpLoad %383 
                                 Output f32* %386 = OpAccessChain %376 %158 
                                                      OpStore %386 %384 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %196 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                Input f32_4* %196 = OpVariable Input 
                                             %198 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %19 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %19 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %19 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %197 = OpLoad %196 
                                                      OpStore %195 %197 
                                 Output f32* %199 = OpAccessChain %120 %60 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %120 %60 %48 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 370
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %77 %199 %358 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 RelaxedPrecision 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %77 Location 77 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %241 SpecId 241 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %358 Location 358 
                                                      OpDecorate %361 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                          u32 %21 = OpConstant 4 
                                              %22 = OpTypeArray %7 %21 
                                              %23 = OpTypeVector %6 3 
                                              %24 = OpTypeArray %7 %21 
                                              %25 = OpTypeStruct %7 %7 %22 %23 %23 %7 %24 %6 %7 %6 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32_4; f32;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 8 
                                          u32 %30 = OpConstant 2 
                                              %31 = OpTypePointer Uniform %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          u32 %48 = OpConstant 1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %71 = OpConstant 3.674022E-40 
                                        f32_3 %72 = OpConstantComposite %69 %70 %71 
                               Private f32_4* %75 = OpVariable Private 
                                 Input f32_4* %77 = OpVariable Input 
                                          i32 %83 = OpConstant 7 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          f32 %96 = OpConstant 3.674022E-40 
                                             %101 = OpTypePointer Private %62 
                              Private f32_2* %102 = OpVariable Private 
                                             %103 = OpTypePointer Uniform %7 
                                         f32 %107 = OpConstant 3.674022E-40 
                                       f32_2 %108 = OpConstantComposite %107 %107 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %112 %112 
                                             %117 = OpTypePointer Private %23 
                              Private f32_3* %118 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %119 = OpVariable UniformConstant 
                                         f32 %125 = OpConstant 3.674022E-40 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %125 %126 %127 
                                         f32 %139 = OpConstant 3.674022E-40 
                                       f32_3 %140 = OpConstantComposite %139 %139 %139 
                                         u32 %158 = OpConstant 3 
                                         f32 %161 = OpConstant 3.674022E-40 
                               Private bool* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         i32 %170 = OpConstant 0 
                                         i32 %171 = OpConstant 1 
                                         i32 %173 = OpConstant -1 
                                         i32 %181 = OpConstant 9 
                              Private f32_2* %197 = OpVariable Private 
                                             %198 = OpTypePointer Input %23 
                                Input f32_3* %199 = OpVariable Input 
                                         i32 %202 = OpConstant 6 
                                         i32 %215 = OpConstant 2 
                                         i32 %225 = OpConstant 3 
                               Private bool* %230 = OpVariable Private 
                                         f32 %233 = OpConstant 3.674022E-40 
                                        bool %235 = OpConstantFalse 
                                        bool %241 = OpSpecConstantFalse 
                              Private f32_3* %247 = OpVariable Private 
                                             %275 = OpTypePointer Function %23 
                                         i32 %285 = OpConstant 4 
                                             %286 = OpTypePointer Uniform %23 
                              Private f32_4* %291 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         f32 %302 = OpConstant 3.674022E-40 
                                Private f32* %304 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                             %314 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %315 = OpTypeSampledImage %314 
                                             %316 = OpTypePointer UniformConstant %315 
 UniformConstant read_only Texture3DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %328 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %338 = OpVariable UniformConstant 
                                         i32 %352 = OpConstant 5 
                                             %357 = OpTypePointer Output %7 
                               Output f32_4* %358 = OpVariable Output 
                                             %367 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %276 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %32 = OpAccessChain %27 %29 %30 
                                          f32 %33 = OpLoad %32 
                                          f32 %35 = OpFMul %33 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFAdd %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %13 
                                                      OpStore %39 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpExtInst %1 13 %41 
                                 Private f32* %43 = OpAccessChain %9 %13 
                                                      OpStore %43 %42 
                                 Private f32* %44 = OpAccessChain %9 %13 
                                          f32 %45 = OpLoad %44 
                                          f32 %47 = OpFMul %45 %46 
                                   Input f32* %49 = OpAccessChain %11 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                 Private f32* %52 = OpAccessChain %9 %48 
                                                      OpStore %52 %51 
                                   Input f32* %53 = OpAccessChain %11 %13 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %55 = OpAccessChain %9 %13 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_4 %63 = OpLoad %9 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %61 %64 
                                                      OpStore %56 %65 
                                        f32_4 %67 = OpLoad %56 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                          f32 %73 = OpDot %68 %72 
                                 Private f32* %74 = OpAccessChain %66 %13 
                                                      OpStore %74 %73 
                                        f32_4 %76 = OpLoad %56 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %56 
                                        f32_4 %81 = OpFNegate %80 
                                        f32_4 %82 = OpFAdd %79 %81 
                                                      OpStore %75 %82 
                                 Uniform f32* %84 = OpAccessChain %27 %83 
                                          f32 %85 = OpLoad %84 
                                        f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
                                        f32_4 %87 = OpLoad %75 
                                        f32_4 %88 = OpFMul %86 %87 
                                        f32_4 %89 = OpLoad %56 
                                        f32_4 %90 = OpFAdd %88 %89 
                                                      OpStore %9 %90 
                                 Private f32* %94 = OpAccessChain %66 %13 
                                          f32 %95 = OpLoad %94 
                                         bool %97 = OpFOrdLessThan %95 %96 
                                                      OpStore %93 %97 
                                         bool %98 = OpLoad %93 
                                                      OpSelectionMerge %100 None 
                                                      OpBranchConditional %98 %99 %153 
                                              %99 = OpLabel 
                              Uniform f32_4* %104 = OpAccessChain %27 %29 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %109 = OpFMul %106 %108 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %11 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %114 = OpFMul %111 %113 
                                       f32_2 %115 = OpLoad %102 
                                       f32_2 %116 = OpFAdd %114 %115 
                                                      OpStore %102 %116 
                  read_only Texture2DSampled %120 = OpLoad %119 
                                       f32_2 %121 = OpLoad %102 
                                       f32_4 %122 = OpImageSampleImplicitLod %120 %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                      OpStore %118 %123 
                                       f32_3 %124 = OpLoad %118 
                                       f32_3 %129 = OpFMul %124 %128 
                                       f32_4 %130 = OpLoad %75 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %75 %131 
                                       f32_4 %132 = OpLoad %75 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpExtInst %1 30 %133 
                                       f32_4 %135 = OpLoad %75 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %75 %136 
                                       f32_4 %137 = OpLoad %75 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %75 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %75 %143 
                                       f32_4 %144 = OpLoad %75 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpExtInst %1 29 %145 
                                       f32_4 %147 = OpLoad %75 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %75 %148 
                                       f32_4 %149 = OpLoad %75 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %75 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %75 %152 
                                                      OpBranch %100 
                                             %153 = OpLabel 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %75 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %75 %157 
                                                      OpBranch %100 
                                             %100 = OpLabel 
                                Private f32* %159 = OpAccessChain %9 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %162 = OpFAdd %160 %161 
                                Private f32* %163 = OpAccessChain %66 %13 
                                                      OpStore %163 %162 
                                Private f32* %165 = OpAccessChain %66 %13 
                                         f32 %166 = OpLoad %165 
                                        bool %168 = OpFOrdLessThan %166 %167 
                                                      OpStore %164 %168 
                                        bool %169 = OpLoad %164 
                                         i32 %172 = OpSelect %169 %171 %170 
                                         i32 %174 = OpIMul %172 %173 
                                        bool %175 = OpINotEqual %174 %170 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %177 
                                             %176 = OpLabel 
                                                      OpKill
                                             %177 = OpLabel 
                                Private f32* %179 = OpAccessChain %9 %158 
                                         f32 %180 = OpLoad %179 
                                Uniform f32* %182 = OpAccessChain %27 %181 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %180 %184 
                                Private f32* %186 = OpAccessChain %66 %13 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %66 %13 
                                         f32 %188 = OpLoad %187 
                                        bool %189 = OpFOrdLessThan %188 %167 
                                                      OpStore %164 %189 
                                        bool %190 = OpLoad %164 
                                         i32 %191 = OpSelect %190 %171 %170 
                                         i32 %192 = OpIMul %191 %173 
                                        bool %193 = OpINotEqual %192 %170 
                                                      OpSelectionMerge %195 None 
                                                      OpBranchConditional %193 %194 %195 
                                             %194 = OpLabel 
                                                      OpKill
                                             %195 = OpLabel 
                                       f32_3 %200 = OpLoad %199 
                                       f32_2 %201 = OpVectorShuffle %200 %200 1 1 
                              Uniform f32_4* %203 = OpAccessChain %27 %202 %171 
                                       f32_4 %204 = OpLoad %203 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFMul %201 %205 
                                                      OpStore %197 %206 
                              Uniform f32_4* %207 = OpAccessChain %27 %202 %170 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_3 %210 = OpLoad %199 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 0 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_2 %213 = OpLoad %197 
                                       f32_2 %214 = OpFAdd %212 %213 
                                                      OpStore %197 %214 
                              Uniform f32_4* %216 = OpAccessChain %27 %202 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
                                       f32_3 %219 = OpLoad %199 
                                       f32_2 %220 = OpVectorShuffle %219 %219 2 2 
                                       f32_2 %221 = OpFMul %218 %220 
                                       f32_2 %222 = OpLoad %197 
                                       f32_2 %223 = OpFAdd %221 %222 
                                                      OpStore %197 %223 
                                       f32_2 %224 = OpLoad %197 
                              Uniform f32_4* %226 = OpAccessChain %27 %202 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %229 = OpFAdd %224 %228 
                                                      OpStore %197 %229 
                                Uniform f32* %231 = OpAccessChain %27 %171 %13 
                                         f32 %232 = OpLoad %231 
                                        bool %234 = OpFOrdEqual %232 %233 
                                                      OpStore %230 %234 
                                                      OpSelectionMerge %237 None 
                                                      OpBranchConditional %235 %236 %237 
                                             %236 = OpLabel 
                                        bool %238 = OpLoad %230 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                                      OpBranch %237 
                                             %237 = OpLabel 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %241 %242 %323 
                                             %242 = OpLabel 
                                Uniform f32* %244 = OpAccessChain %27 %171 %48 
                                         f32 %245 = OpLoad %244 
                                        bool %246 = OpFOrdEqual %245 %233 
                                                      OpStore %230 %246 
                                       f32_3 %248 = OpLoad %199 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %27 %215 %171 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %249 %252 
                                                      OpStore %247 %253 
                              Uniform f32_4* %254 = OpAccessChain %27 %215 %170 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %199 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %247 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %247 %261 
                              Uniform f32_4* %262 = OpAccessChain %27 %215 %215 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpLoad %199 
                                       f32_3 %266 = OpVectorShuffle %265 %265 2 2 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %268 = OpLoad %247 
                                       f32_3 %269 = OpFAdd %267 %268 
                                                      OpStore %247 %269 
                                       f32_3 %270 = OpLoad %247 
                              Uniform f32_4* %271 = OpAccessChain %27 %215 %225 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %270 %273 
                                                      OpStore %247 %274 
                                        bool %277 = OpLoad %230 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %281 
                                             %278 = OpLabel 
                                       f32_3 %280 = OpLoad %247 
                                                      OpStore %276 %280 
                                                      OpBranch %279 
                                             %281 = OpLabel 
                                       f32_3 %282 = OpLoad %199 
                                                      OpStore %276 %282 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                       f32_3 %283 = OpLoad %276 
                                                      OpStore %247 %283 
                                       f32_3 %284 = OpLoad %247 
                              Uniform f32_3* %287 = OpAccessChain %27 %285 
                                       f32_3 %288 = OpLoad %287 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %284 %289 
                                                      OpStore %247 %290 
                                       f32_3 %292 = OpLoad %247 
                              Uniform f32_3* %293 = OpAccessChain %27 %225 
                                       f32_3 %294 = OpLoad %293 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %291 
                                       f32_4 %297 = OpVectorShuffle %296 %295 0 4 5 6 
                                                      OpStore %291 %297 
                                Private f32* %299 = OpAccessChain %291 %48 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %300 %96 
                                         f32 %303 = OpFAdd %301 %302 
                                                      OpStore %298 %303 
                                Uniform f32* %305 = OpAccessChain %27 %171 %30 
                                         f32 %306 = OpLoad %305 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpFAdd %308 %302 
                                                      OpStore %304 %309 
                                         f32 %310 = OpLoad %304 
                                         f32 %311 = OpLoad %298 
                                         f32 %312 = OpExtInst %1 40 %310 %311 
                                Private f32* %313 = OpAccessChain %291 %13 
                                                      OpStore %313 %312 
                  read_only Texture3DSampled %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %291 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 2 3 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                                      OpStore %291 %321 
                                       f32_4 %322 = OpLoad %291 
                                                      OpStore %66 %322 
                                                      OpBranch %243 
                                             %323 = OpLabel 
                                Private f32* %324 = OpAccessChain %66 %13 
                                                      OpStore %324 %233 
                                Private f32* %325 = OpAccessChain %66 %48 
                                                      OpStore %325 %233 
                                Private f32* %326 = OpAccessChain %66 %30 
                                                      OpStore %326 %233 
                                Private f32* %327 = OpAccessChain %66 %158 
                                                      OpStore %327 %233 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                       f32_4 %329 = OpLoad %66 
                              Uniform f32_4* %330 = OpAccessChain %27 %170 
                                       f32_4 %331 = OpLoad %330 
                                         f32 %332 = OpDot %329 %331 
                                Private f32* %333 = OpAccessChain %328 %13 
                                                      OpStore %333 %332 
                                Private f32* %334 = OpAccessChain %328 %13 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 43 %335 %167 %233 
                                Private f32* %337 = OpAccessChain %328 %13 
                                                      OpStore %337 %336 
                  read_only Texture2DSampled %339 = OpLoad %338 
                                       f32_2 %340 = OpLoad %197 
                                       f32_4 %341 = OpImageSampleImplicitLod %339 %340 
                                         f32 %342 = OpCompositeExtract %341 3 
                                Private f32* %343 = OpAccessChain %197 %13 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %328 %13 
                                         f32 %345 = OpLoad %344 
                                Private f32* %346 = OpAccessChain %197 %13 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFMul %345 %347 
                                Private f32* %349 = OpAccessChain %197 %13 
                                                      OpStore %349 %348 
                                       f32_4 %350 = OpLoad %75 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                              Uniform f32_4* %353 = OpAccessChain %27 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFMul %351 %355 
                                                      OpStore %328 %356 
                                       f32_2 %359 = OpLoad %197 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpLoad %328 
                                       f32_3 %362 = OpFMul %360 %361 
                                       f32_4 %363 = OpLoad %358 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %358 %364 
                                Private f32* %365 = OpAccessChain %9 %158 
                                         f32 %366 = OpLoad %365 
                                 Output f32* %368 = OpAccessChain %358 %158 
                                                      OpStore %368 %366 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 150700
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _ReflectionYOffset;
uniform 	float _ReflectionYFactor;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _NoiseTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
in  vec4 in_COLOR0;
out vec4 vs_TEXCOORD0;
out vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
bool u_xlatb6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.y = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlatb6 = 0.0<in_POSITION0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xz = in_POSITION0.xz;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _VertexColor;
uniform 	vec4 _LocalTime;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _NoiseTex;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
bool u_xlatb10;
void main()
{
    u_xlat0.x = vs_TEXCOORD0.x * 250.0;
    u_xlat0.x = _LocalTime.z * -5.0 + u_xlat0.x;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.y = u_xlat0.x * 0.000714285707 + vs_TEXCOORD0.y;
    u_xlat0.x = vs_TEXCOORD0.x;
    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2 = u_xlat10_0 * vs_COLOR0 + (-u_xlat10_0);
    u_xlat0 = vec4(_VertexColor) * u_xlat2 + u_xlat10_0;
    u_xlatb1 = u_xlat1.x<0.25;
    if(u_xlatb1){
        u_xlat1.xy = _LocalTime.xy * vec2(0.0199999996, 0.0199999996);
        u_xlat1.xy = vs_TEXCOORD0.zw * vec2(0.200000003, 0.200000003) + u_xlat1.xy;
        u_xlat10_1 = texture(_NoiseTex, u_xlat1.xy);
        u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(0.850000024, 0.800000012, 0.699999988);
        u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
        u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(2.25, 2.25, 2.25);
        u_xlat0.xyz = exp2(u_xlat16_1.xyz);
    //ENDIF
    }
    u_xlat1.x = u_xlat0.w + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissivePower, _EmissivePower, _EmissivePower));
    u_xlat9 = u_xlat0.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat1.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat1 : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 249
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %76 %126 %202 %212 %213 %240 %241 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %126 Location 126 
                                                      OpMemberDecorate %200 0 BuiltIn 200 
                                                      OpMemberDecorate %200 1 BuiltIn 200 
                                                      OpMemberDecorate %200 2 BuiltIn 200 
                                                      OpDecorate %200 Block 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %241 Location 241 
                                                      OpDecorate %242 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeVector %10 4 
                                              %15 = OpTypeStruct %12 %13 %7 %7 %6 %6 %14 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; u32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 5 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                              %58 = OpTypeBool 
                                              %59 = OpTypePointer Private %58 
                                Private bool* %60 = OpVariable Private 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          u32 %62 = OpConstant 2 
                               Private f32_4* %66 = OpVariable Private 
                                              %67 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                 Input f32_4* %76 = OpVariable Input 
                                              %77 = OpTypeVector %6 2 
                                          i32 %80 = OpConstant 2 
                                              %81 = OpTypePointer Uniform %7 
                                              %96 = OpTypeVector %6 3 
                                              %97 = OpTypePointer Function %96 
                                          i32 %99 = OpConstant 6 
                                             %100 = OpTypeVector %58 4 
                                             %101 = OpTypePointer Uniform %14 
                                Input f32_4* %126 = OpVariable Input 
                                         i32 %129 = OpConstant 3 
                                         i32 %157 = OpConstant 0 
                                         i32 %158 = OpConstant 1 
                                             %199 = OpTypeArray %6 %48 
                                             %200 = OpTypeStruct %7 %6 %199 
                                             %201 = OpTypePointer Output %200 
        Output struct {f32_4; f32; f32[1];}* %202 = OpVariable Output 
                                             %210 = OpTypePointer Output %7 
                               Output f32_4* %212 = OpVariable Output 
                                Input f32_4* %213 = OpVariable Input 
                                         i32 %216 = OpConstant 7 
                                         i32 %229 = OpConstant 8 
                               Output f32_4* %240 = OpVariable Output 
                                Input f32_4* %241 = OpVariable Input 
                                             %243 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %68 = OpVariable Function 
                              Function f32_3* %98 = OpVariable Function 
                               Function f32* %119 = OpVariable Function 
                             Function f32_3* %140 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %48 
                                                      OpStore %57 %56 
                                   Input f32* %63 = OpAccessChain %47 %62 
                                          f32 %64 = OpLoad %63 
                                         bool %65 = OpFOrdLessThan %61 %64 
                                                      OpStore %60 %65 
                                         bool %69 = OpLoad %60 
                                                      OpSelectionMerge %71 None 
                                                      OpBranchConditional %69 %70 %73 
                                              %70 = OpLabel 
                                                      OpStore %68 %72 
                                                      OpBranch %71 
                                              %73 = OpLabel 
                                                      OpStore %68 %61 
                                                      OpBranch %71 
                                              %71 = OpLabel 
                                          f32 %74 = OpLoad %68 
                                 Private f32* %75 = OpAccessChain %66 %62 
                                                      OpStore %75 %74 
                                        f32_4 %78 = OpLoad %76 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                               Uniform f32_4* %82 = OpAccessChain %17 %80 
                                        f32_4 %83 = OpLoad %82 
                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
                                        f32_2 %85 = OpFMul %79 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %80 
                                        f32_4 %87 = OpLoad %86 
                                        f32_2 %88 = OpVectorShuffle %87 %87 2 3 
                                        f32_2 %89 = OpFAdd %85 %88 
                                        f32_4 %90 = OpLoad %66 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %66 %91 
                                        f32_4 %92 = OpLoad %47 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 1 5 3 
                                                      OpStore %9 %95 
                              Uniform u32_4* %102 = OpAccessChain %17 %99 
                                       u32_4 %103 = OpLoad %102 
                                         u32 %104 = OpCompositeExtract %103 0 
                                        bool %105 = OpINotEqual %104 %25 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %110 
                                             %106 = OpLabel 
                                       f32_4 %108 = OpLoad %66 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                                      OpStore %98 %109 
                                                      OpBranch %107 
                                             %110 = OpLabel 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %98 %112 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_3 %113 = OpLoad %98 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Private f32* %116 = OpAccessChain %9 %62 
                                         f32 %117 = OpLoad %116 
                                        bool %118 = OpFOrdLessThan %61 %117 
                                                      OpStore %60 %118 
                                        bool %120 = OpLoad %60 
                                                      OpSelectionMerge %122 None 
                                                      OpBranchConditional %120 %121 %123 
                                             %121 = OpLabel 
                                                      OpStore %119 %72 
                                                      OpBranch %122 
                                             %123 = OpLabel 
                                                      OpStore %119 %61 
                                                      OpBranch %122 
                                             %122 = OpLabel 
                                         f32 %124 = OpLoad %119 
                                Private f32* %125 = OpAccessChain %66 %62 
                                                      OpStore %125 %124 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                              Uniform f32_4* %130 = OpAccessChain %17 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_2 %133 = OpFMul %128 %132 
                              Uniform f32_4* %134 = OpAccessChain %17 %129 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_2 %137 = OpFAdd %133 %136 
                                       f32_4 %138 = OpLoad %66 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 2 3 
                                                      OpStore %66 %139 
                              Uniform u32_4* %141 = OpAccessChain %17 %99 
                                       u32_4 %142 = OpLoad %141 
                                         u32 %143 = OpCompositeExtract %142 1 
                                        bool %144 = OpINotEqual %143 %25 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %149 
                                             %145 = OpLabel 
                                       f32_4 %147 = OpLoad %66 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %140 %148 
                                                      OpBranch %146 
                                             %149 = OpLabel 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                                      OpStore %140 %151 
                                                      OpBranch %146 
                                             %146 = OpLabel 
                                       f32_3 %152 = OpLoad %140 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %155 1 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %17 %157 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_4 %161 = OpFMul %156 %160 
                                                      OpStore %66 %161 
                              Uniform f32_4* %162 = OpAccessChain %17 %157 %157 
                                       f32_4 %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %9 
                                       f32_4 %165 = OpVectorShuffle %164 %164 0 0 0 0 
                                       f32_4 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %66 
                                       f32_4 %168 = OpFAdd %166 %167 
                                                      OpStore %66 %168 
                              Uniform f32_4* %169 = OpAccessChain %17 %157 %80 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 2 2 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %66 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %17 %157 %129 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %180 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %17 %158 %158 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %181 %183 
                                                      OpStore %66 %184 
                              Uniform f32_4* %185 = OpAccessChain %17 %158 %157 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %66 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %66 %191 
                              Uniform f32_4* %192 = OpAccessChain %17 %158 %80 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %66 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %66 %198 
                              Uniform f32_4* %203 = OpAccessChain %17 %158 %129 
                                       f32_4 %204 = OpLoad %203 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpVectorShuffle %205 %205 3 3 3 3 
                                       f32_4 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %66 
                                       f32_4 %209 = OpFAdd %207 %208 
                               Output f32_4* %211 = OpAccessChain %202 %157 
                                                      OpStore %211 %209 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                              Uniform f32_4* %217 = OpAccessChain %17 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %220 = OpFMul %215 %219 
                              Uniform f32_4* %221 = OpAccessChain %17 %216 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 3 
                                       f32_2 %224 = OpFAdd %220 %223 
                                       f32_4 %225 = OpLoad %212 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 2 3 
                                                      OpStore %212 %226 
                                       f32_4 %227 = OpLoad %76 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %17 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %17 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                       f32_4 %238 = OpLoad %212 
                                       f32_4 %239 = OpVectorShuffle %238 %237 0 1 4 5 
                                                      OpStore %212 %239 
                                       f32_4 %242 = OpLoad %241 
                                                      OpStore %240 %242 
                                 Output f32* %244 = OpAccessChain %202 %157 %48 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                 Output f32* %247 = OpAccessChain %202 %157 %48 
                                                      OpStore %247 %246 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %75 %334 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 RelaxedPrecision 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %75 Location 75 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %117 DescriptorSet 117 
                                                      OpDecorate %117 Binding 117 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 0 
                                              %14 = OpTypePointer Input %6 
                                          f32 %17 = OpConstant 3.674022E-40 
                                              %19 = OpTypePointer Private %6 
                                              %21 = OpTypeVector %12 4 
                                              %22 = OpTypeStruct %6 %6 %6 %7 %21 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32; f32; f32; f32_4; u32_4; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 3 
                                          u32 %27 = OpConstant 2 
                                              %28 = OpTypePointer Uniform %6 
                                          f32 %31 = OpConstant 3.674022E-40 
                                          f32 %43 = OpConstant 3.674022E-40 
                                          u32 %45 = OpConstant 1 
                               Private f32_4* %53 = OpVariable Private 
                                              %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %55 = OpTypeSampledImage %54 
                                              %56 = OpTypePointer UniformConstant %55 
  UniformConstant read_only Texture2DSampled* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeVector %6 2 
                               Private f32_4* %63 = OpVariable Private 
                                              %64 = OpTypeVector %6 3 
                                          f32 %67 = OpConstant 3.674022E-40 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          f32 %69 = OpConstant 3.674022E-40 
                                        f32_3 %70 = OpConstantComposite %67 %68 %69 
                               Private f32_4* %73 = OpVariable Private 
                                 Input f32_4* %75 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %89 = OpTypeBool 
                                              %90 = OpTypePointer Private %89 
                                Private bool* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Private %59 
                              Private f32_2* %100 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %105 %105 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_2 %111 = OpConstantComposite %110 %110 
                                             %115 = OpTypePointer Private %64 
                              Private f32_3* %116 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %117 = OpVariable UniformConstant 
                                         f32 %123 = OpConstant 3.674022E-40 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_3 %126 = OpConstantComposite %123 %124 %125 
                                         f32 %137 = OpConstant 3.674022E-40 
                                       f32_3 %138 = OpConstantComposite %137 %137 %137 
                                         u32 %156 = OpConstant 3 
                                         f32 %159 = OpConstant 3.674022E-40 
                               Private bool* %162 = OpVariable Private 
                                         f32 %165 = OpConstant 3.674022E-40 
                                         i32 %168 = OpConstant 0 
                                         i32 %169 = OpConstant 1 
                                         i32 %171 = OpConstant -1 
                              Private f32_4* %177 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %215 = OpConstant 8 
                               Private bool* %221 = OpVariable Private 
                                Private f32* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 5 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         i32 %253 = OpConstant 6 
                                             %268 = OpTypePointer Function %64 
                                         i32 %270 = OpConstant 4 
                                             %271 = OpTypeVector %89 4 
                                             %272 = OpTypePointer Uniform %21 
                                       f32_3 %282 = OpConstantComposite %165 %165 %165 
                                             %286 = OpTypePointer Function %6 
                               Private bool* %297 = OpVariable Private 
                                       f32_4 %298 = OpConstantComposite %165 %165 %165 %165 
                                         i32 %299 = OpConstant 7 
                              Private f32_3* %305 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
                                         f32 %310 = OpConstant 3.674022E-40 
                                       f32_3 %311 = OpConstantComposite %310 %310 %310 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_3 %317 = OpConstantComposite %316 %316 %316 
                                             %333 = OpTypePointer Output %7 
                               Output f32_4* %334 = OpVariable Output 
                                             %335 = OpTypePointer Function %7 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %269 = OpVariable Function 
                               Function f32* %287 = OpVariable Function 
                             Function f32_3* %322 = OpVariable Function 
                             Function f32_4* %336 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                          f32 %18 = OpFMul %16 %17 
                                 Private f32* %20 = OpAccessChain %9 %13 
                                                      OpStore %20 %18 
                                 Uniform f32* %29 = OpAccessChain %24 %26 %27 
                                          f32 %30 = OpLoad %29 
                                          f32 %32 = OpFMul %30 %31 
                                 Private f32* %33 = OpAccessChain %9 %13 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFAdd %32 %34 
                                 Private f32* %36 = OpAccessChain %9 %13 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %13 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpExtInst %1 13 %38 
                                 Private f32* %40 = OpAccessChain %9 %13 
                                                      OpStore %40 %39 
                                 Private f32* %41 = OpAccessChain %9 %13 
                                          f32 %42 = OpLoad %41 
                                          f32 %44 = OpFMul %42 %43 
                                   Input f32* %46 = OpAccessChain %11 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFAdd %44 %47 
                                 Private f32* %49 = OpAccessChain %9 %45 
                                                      OpStore %49 %48 
                                   Input f32* %50 = OpAccessChain %11 %13 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %9 %13 
                                                      OpStore %52 %51 
                   read_only Texture2DSampled %58 = OpLoad %57 
                                        f32_4 %60 = OpLoad %9 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %58 %61 
                                                      OpStore %53 %62 
                                        f32_4 %65 = OpLoad %53 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                          f32 %71 = OpDot %66 %70 
                                 Private f32* %72 = OpAccessChain %63 %13 
                                                      OpStore %72 %71 
                                        f32_4 %74 = OpLoad %53 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %53 
                                        f32_4 %79 = OpFNegate %78 
                                        f32_4 %80 = OpFAdd %77 %79 
                                                      OpStore %73 %80 
                                 Uniform f32* %82 = OpAccessChain %24 %81 
                                          f32 %83 = OpLoad %82 
                                        f32_4 %84 = OpCompositeConstruct %83 %83 %83 %83 
                                        f32_4 %85 = OpLoad %73 
                                        f32_4 %86 = OpFMul %84 %85 
                                        f32_4 %87 = OpLoad %53 
                                        f32_4 %88 = OpFAdd %86 %87 
                                                      OpStore %9 %88 
                                 Private f32* %92 = OpAccessChain %63 %13 
                                          f32 %93 = OpLoad %92 
                                         bool %95 = OpFOrdLessThan %93 %94 
                                                      OpStore %91 %95 
                                         bool %96 = OpLoad %91 
                                                      OpSelectionMerge %98 None 
                                                      OpBranchConditional %96 %97 %151 
                                              %97 = OpLabel 
                              Uniform f32_4* %102 = OpAccessChain %24 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %107 = OpFMul %104 %106 
                                                      OpStore %100 %107 
                                       f32_4 %108 = OpLoad %11 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %112 = OpFMul %109 %111 
                                       f32_2 %113 = OpLoad %100 
                                       f32_2 %114 = OpFAdd %112 %113 
                                                      OpStore %100 %114 
                  read_only Texture2DSampled %118 = OpLoad %117 
                                       f32_2 %119 = OpLoad %100 
                                       f32_4 %120 = OpImageSampleImplicitLod %118 %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                                      OpStore %116 %121 
                                       f32_3 %122 = OpLoad %116 
                                       f32_3 %127 = OpFMul %122 %126 
                                       f32_4 %128 = OpLoad %73 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %73 %129 
                                       f32_4 %130 = OpLoad %73 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpExtInst %1 30 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %73 %134 
                                       f32_4 %135 = OpLoad %73 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %73 %141 
                                       f32_4 %142 = OpLoad %73 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpExtInst %1 29 %143 
                                       f32_4 %145 = OpLoad %73 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %73 %146 
                                       f32_4 %147 = OpLoad %73 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %73 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %73 %150 
                                                      OpBranch %98 
                                             %151 = OpLabel 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %73 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %73 %155 
                                                      OpBranch %98 
                                              %98 = OpLabel 
                                Private f32* %157 = OpAccessChain %9 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFAdd %158 %159 
                                Private f32* %161 = OpAccessChain %63 %13 
                                                      OpStore %161 %160 
                                Private f32* %163 = OpAccessChain %63 %13 
                                         f32 %164 = OpLoad %163 
                                        bool %166 = OpFOrdLessThan %164 %165 
                                                      OpStore %162 %166 
                                        bool %167 = OpLoad %162 
                                         i32 %170 = OpSelect %167 %169 %168 
                                         i32 %172 = OpIMul %170 %171 
                                        bool %173 = OpINotEqual %172 %168 
                                                      OpSelectionMerge %175 None 
                                                      OpBranchConditional %173 %174 %175 
                                             %174 = OpLabel 
                                                      OpKill
                                             %175 = OpLabel 
                                       f32_4 %178 = OpLoad %73 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpExtInst %1 30 %179 
                                       f32_4 %181 = OpLoad %177 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %177 %182 
                                       f32_4 %184 = OpLoad %177 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                Uniform f32* %186 = OpAccessChain %24 %169 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %24 %169 
                                         f32 %189 = OpLoad %188 
                                Uniform f32* %190 = OpAccessChain %24 %169 
                                         f32 %191 = OpLoad %190 
                                       f32_3 %192 = OpCompositeConstruct %187 %189 %191 
                                         f32 %193 = OpCompositeExtract %192 0 
                                         f32 %194 = OpCompositeExtract %192 1 
                                         f32 %195 = OpCompositeExtract %192 2 
                                       f32_3 %196 = OpCompositeConstruct %193 %194 %195 
                                       f32_3 %197 = OpFMul %185 %196 
                                                      OpStore %183 %197 
                                       f32_3 %198 = OpLoad %183 
                                       f32_3 %199 = OpExtInst %1 29 %198 
                                                      OpStore %183 %199 
                                       f32_3 %200 = OpLoad %183 
                                Uniform f32* %201 = OpAccessChain %24 %168 
                                         f32 %202 = OpLoad %201 
                                Uniform f32* %203 = OpAccessChain %24 %168 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %205 = OpAccessChain %24 %168 
                                         f32 %206 = OpLoad %205 
                                       f32_3 %207 = OpCompositeConstruct %202 %204 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                         f32 %209 = OpCompositeExtract %207 1 
                                         f32 %210 = OpCompositeExtract %207 2 
                                       f32_3 %211 = OpCompositeConstruct %208 %209 %210 
                                       f32_3 %212 = OpFMul %200 %211 
                                                      OpStore %183 %212 
                                Private f32* %213 = OpAccessChain %9 %156 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %216 = OpAccessChain %24 %215 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %214 %218 
                                Private f32* %220 = OpAccessChain %63 %13 
                                                      OpStore %220 %219 
                                Private f32* %222 = OpAccessChain %63 %13 
                                         f32 %223 = OpLoad %222 
                                        bool %224 = OpFOrdLessThan %223 %165 
                                                      OpStore %221 %224 
                                        bool %225 = OpLoad %221 
                                         i32 %226 = OpSelect %225 %169 %168 
                                         i32 %227 = OpIMul %226 %171 
                                        bool %228 = OpINotEqual %227 %168 
                                                      OpSelectionMerge %230 None 
                                                      OpBranchConditional %228 %229 %230 
                                             %229 = OpLabel 
                                                      OpKill
                                             %230 = OpLabel 
                                Uniform f32* %234 = OpAccessChain %24 %233 
                                         f32 %235 = OpLoad %234 
                                                      OpStore %232 %235 
                                         f32 %236 = OpLoad %232 
                                         f32 %238 = OpExtInst %1 43 %236 %165 %237 
                                                      OpStore %232 %238 
                                       f32_4 %239 = OpLoad %177 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpLoad %232 
                                       f32_3 %242 = OpCompositeConstruct %241 %241 %241 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpExtInst %1 29 %247 
                                       f32_4 %249 = OpLoad %9 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %9 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                Uniform f32* %254 = OpAccessChain %24 %253 
                                         f32 %255 = OpLoad %254 
                                Uniform f32* %256 = OpAccessChain %24 %253 
                                         f32 %257 = OpLoad %256 
                                Uniform f32* %258 = OpAccessChain %24 %253 
                                         f32 %259 = OpLoad %258 
                                       f32_3 %260 = OpCompositeConstruct %255 %257 %259 
                                         f32 %261 = OpCompositeExtract %260 0 
                                         f32 %262 = OpCompositeExtract %260 1 
                                         f32 %263 = OpCompositeExtract %260 2 
                                       f32_3 %264 = OpCompositeConstruct %261 %262 %263 
                                       f32_3 %265 = OpExtInst %1 37 %252 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                              Uniform u32_4* %273 = OpAccessChain %24 %270 
                                       u32_4 %274 = OpLoad %273 
                                         u32 %275 = OpCompositeExtract %274 0 
                                        bool %276 = OpINotEqual %275 %13 
                                                      OpSelectionMerge %278 None 
                                                      OpBranchConditional %276 %277 %281 
                                             %277 = OpLabel 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                                      OpStore %269 %280 
                                                      OpBranch %278 
                                             %281 = OpLabel 
                                                      OpStore %269 %282 
                                                      OpBranch %278 
                                             %278 = OpLabel 
                                       f32_3 %283 = OpLoad %269 
                                       f32_4 %284 = OpLoad %177 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %177 %285 
                              Uniform u32_4* %288 = OpAccessChain %24 %270 
                                       u32_4 %289 = OpLoad %288 
                                         u32 %290 = OpCompositeExtract %289 0 
                                        bool %291 = OpINotEqual %290 %13 
                                                      OpSelectionMerge %293 None 
                                                      OpBranchConditional %291 %292 %294 
                                             %292 = OpLabel 
                                                      OpStore %287 %237 
                                                      OpBranch %293 
                                             %294 = OpLabel 
                                                      OpStore %287 %165 
                                                      OpBranch %293 
                                             %293 = OpLabel 
                                         f32 %295 = OpLoad %287 
                                Private f32* %296 = OpAccessChain %177 %156 
                                                      OpStore %296 %295 
                                Uniform f32* %300 = OpAccessChain %24 %299 
                                         f32 %301 = OpLoad %300 
                                       f32_4 %302 = OpCompositeConstruct %301 %301 %301 %301 
                                      bool_4 %303 = OpFOrdNotEqual %298 %302 
                                        bool %304 = OpAny %303 
                                                      OpStore %297 %304 
                                       f32_3 %306 = OpLoad %183 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_3 %312 = OpFAdd %309 %311 
                                                      OpStore %305 %312 
                                       f32_3 %313 = OpLoad %183 
                                       f32_3 %314 = OpLoad %305 
                                       f32_3 %315 = OpFMul %313 %314 
                                       f32_3 %318 = OpFAdd %315 %317 
                                                      OpStore %305 %318 
                                       f32_3 %319 = OpLoad %183 
                                       f32_3 %320 = OpLoad %305 
                                       f32_3 %321 = OpFMul %319 %320 
                                                      OpStore %305 %321 
                                        bool %323 = OpLoad %297 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %323 %324 %327 
                                             %324 = OpLabel 
                                       f32_3 %326 = OpLoad %183 
                                                      OpStore %322 %326 
                                                      OpBranch %325 
                                             %327 = OpLabel 
                                       f32_3 %328 = OpLoad %305 
                                                      OpStore %322 %328 
                                                      OpBranch %325 
                                             %325 = OpLabel 
                                       f32_3 %329 = OpLoad %322 
                                       f32_4 %330 = OpLoad %63 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %63 %331 
                                Private f32* %332 = OpAccessChain %63 %156 
                                                      OpStore %332 %237 
                              Uniform u32_4* %337 = OpAccessChain %24 %270 
                                       u32_4 %338 = OpLoad %337 
                                         u32 %339 = OpCompositeExtract %338 1 
                                        bool %340 = OpINotEqual %339 %13 
                                                      OpSelectionMerge %342 None 
                                                      OpBranchConditional %340 %341 %344 
                                             %341 = OpLabel 
                                       f32_4 %343 = OpLoad %63 
                                                      OpStore %336 %343 
                                                      OpBranch %342 
                                             %344 = OpLabel 
                                       f32_4 %345 = OpLoad %177 
                                                      OpStore %336 %345 
                                                      OpBranch %342 
                                             %342 = OpLabel 
                                       f32_4 %346 = OpLoad %336 
                                                      OpStore %334 %346 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "VertexLit"
}