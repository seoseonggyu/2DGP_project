//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/GungeonTilemapFloorReflection" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_MaskTex ("Mask (RGB)", 2D) = "white" { }
_DistortAmount ("Distort Amount", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_ReflPower ("Reflection Power", Float) = 1
_BoostPower ("Boost", Float) = 1
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 58299
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat5;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat4.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = u_xlat4.x * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat4.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat10 = u_xlat0.w + (-_Cutoff);
    u_xlatb10 = u_xlat10<0.0;
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 185
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 %177 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %177 Location 177 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_3* %174 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_3 %176 = OpConstantComposite %175 %175 %175 
                               Output f32_4* %177 = OpVariable Output 
                                       f32_4 %178 = OpConstantComposite %175 %175 %175 %175 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                                      OpStore %174 %176 
                                                      OpStore %177 %178 
                                 Output f32* %180 = OpAccessChain %92 %28 %88 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                 Output f32* %183 = OpAccessChain %92 %28 %88 
                                                      OpStore %183 %182 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %221 %334 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 RelaxedPrecision 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 RelaxedPrecision 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpMemberDecorate %43 11 RelaxedPrecision 
                                                      OpMemberDecorate %43 11 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %214 SpecId 214 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %301 DescriptorSet 301 
                                                      OpDecorate %301 Binding 301 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %7 %7 %7 %42 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 0 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 8 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %94 %95 %96 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %107 = OpConstant 9 
                                Private f32* %112 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 7 
                                         f32 %152 = OpConstant 3.674022E-40 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %163 = OpConstant 10 
                                         f32 %166 = OpConstant 3.674022E-40 
                              Private f32_4* %169 = OpVariable Private 
                                         u32 %180 = OpConstant 3 
                                         i32 %183 = OpConstant 11 
                                             %189 = OpTypeBool 
                                             %190 = OpTypePointer Private %189 
                               Private bool* %191 = OpVariable Private 
                                         i32 %196 = OpConstant 1 
                                         i32 %198 = OpConstant -1 
                                         i32 %204 = OpConstant 2 
                                        bool %208 = OpConstantFalse 
                                        bool %214 = OpSpecConstantFalse 
                                             %220 = OpTypePointer Input %29 
                                Input f32_3* %221 = OpVariable Input 
                                         i32 %224 = OpConstant 3 
                                             %225 = OpTypePointer Uniform %7 
                                             %251 = OpTypePointer Function %29 
                                         i32 %264 = OpConstant 5 
                                             %265 = OpTypePointer Uniform %29 
                                         i32 %274 = OpConstant 4 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %288 = OpConstant 3.674022E-40 
                                             %298 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %299 = OpTypeSampledImage %298 
                                             %300 = OpTypePointer UniformConstant %299 
 UniformConstant read_only Texture3DSampled* %301 = OpVariable UniformConstant 
                              Private f32_4* %306 = OpVariable Private 
                              Private f32_3* %322 = OpVariable Private 
                                         i32 %324 = OpConstant 6 
                                             %333 = OpTypePointer Output %7 
                               Output f32_4* %334 = OpVariable Output 
                                Input f32_3* %336 = OpVariable Input 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %252 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %50 = OpAccessChain %45 %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %31 %27 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %31 %27 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpExtInst %1 13 %59 
                                 Private f32* %61 = OpAccessChain %31 %27 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                          f32 %63 = OpLoad %62 
                                 Uniform f32* %65 = OpAccessChain %45 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFMul %63 %66 
                                 Private f32* %68 = OpAccessChain %31 %27 
                                                      OpStore %68 %67 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_2 %78 = OpLoad %70 
                                        f32_4 %79 = OpLoad %33 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFAdd %78 %80 
                                        f32_3 %82 = OpLoad %31 
                                        f32_3 %83 = OpVectorShuffle %82 %81 3 4 2 
                                                      OpStore %31 %83 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %84 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %98 = OpDot %93 %97 
                                 Private f32* %99 = OpAccessChain %91 %27 
                                                      OpStore %99 %98 
                                Private f32* %100 = OpAccessChain %91 %27 
                                         f32 %101 = OpLoad %100 
                                         f32 %103 = OpFMul %101 %102 
                                Private f32* %104 = OpAccessChain %91 %27 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %91 %27 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %108 = OpAccessChain %45 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                Private f32* %111 = OpAccessChain %70 %27 
                                                      OpStore %111 %110 
                                  Input f32* %113 = OpAccessChain %33 %34 
                                         f32 %114 = OpLoad %113 
                                         f32 %116 = OpFAdd %114 %115 
                                                      OpStore %112 %116 
                                         f32 %117 = OpLoad %112 
                                         f32 %119 = OpExtInst %1 43 %117 %76 %118 
                                                      OpStore %112 %119 
                                         f32 %120 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %112 %122 
                                         f32 %123 = OpLoad %112 
                                         f32 %124 = OpExtInst %1 37 %123 %118 
                                                      OpStore %112 %124 
                                         f32 %125 = OpLoad %112 
                                Private f32* %126 = OpAccessChain %70 %27 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFNegate %127 
                                         f32 %129 = OpFMul %125 %128 
                                Private f32* %130 = OpAccessChain %70 %27 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFAdd %129 %131 
                                Private f32* %133 = OpAccessChain %70 %27 
                                                      OpStore %133 %132 
                                         f32 %134 = OpLoad %21 
                                Private f32* %135 = OpAccessChain %70 %27 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFMul %134 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                         f32 %140 = OpLoad %139 
                                Uniform f32* %142 = OpAccessChain %45 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %140 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %147 %102 
                                Private f32* %149 = OpAccessChain %70 %27 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %70 %27 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpExtInst %1 37 %151 %152 
                                Private f32* %154 = OpAccessChain %70 %27 
                                                      OpStore %154 %153 
                                       f32_3 %156 = OpLoad %84 
                                       f32_2 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 0 0 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                                      OpStore %155 %162 
                                Uniform f32* %164 = OpAccessChain %45 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %31 %27 
                                                      OpStore %168 %167 
                                         f32 %170 = OpLoad %21 
                                Private f32* %171 = OpAccessChain %31 %27 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpFAdd %173 %118 
                                Private f32* %175 = OpAccessChain %169 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %155 
                                       f32_4 %177 = OpLoad %169 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 0 0 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %155 %179 
                                Private f32* %181 = OpAccessChain %9 %180 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %45 %183 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFNegate %185 
                                         f32 %187 = OpFAdd %182 %186 
                                Private f32* %188 = OpAccessChain %91 %27 
                                                      OpStore %188 %187 
                                Private f32* %192 = OpAccessChain %91 %27 
                                         f32 %193 = OpLoad %192 
                                        bool %194 = OpFOrdLessThan %193 %76 
                                                      OpStore %191 %194 
                                        bool %195 = OpLoad %191 
                                         i32 %197 = OpSelect %195 %196 %47 
                                         i32 %199 = OpIMul %197 %198 
                                        bool %200 = OpINotEqual %199 %47 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %202 
                                             %201 = OpLabel 
                                                      OpKill
                                             %202 = OpLabel 
                                Uniform f32* %205 = OpAccessChain %45 %204 %27 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdEqual %206 %118 
                                                      OpStore %191 %207 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %210 
                                             %209 = OpLabel 
                                        bool %211 = OpLoad %191 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %213 
                                             %212 = OpLabel 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %308 
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %45 %204 %34 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %118 
                                                      OpStore %191 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %45 %224 %196 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %223 %228 
                                                      OpStore %31 %229 
                              Uniform f32_4* %230 = OpAccessChain %45 %224 %47 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %31 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %31 %237 
                              Uniform f32_4* %238 = OpAccessChain %45 %224 %204 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpLoad %221 
                                       f32_3 %242 = OpVectorShuffle %241 %241 2 2 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %244 = OpLoad %31 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %31 %245 
                                       f32_3 %246 = OpLoad %31 
                              Uniform f32_4* %247 = OpAccessChain %45 %224 %224 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %246 %249 
                                                      OpStore %31 %250 
                                        bool %253 = OpLoad %191 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %257 
                                             %254 = OpLabel 
                                       f32_3 %256 = OpLoad %31 
                                                      OpStore %252 %256 
                                                      OpBranch %255 
                                             %257 = OpLabel 
                                       f32_3 %258 = OpLoad %221 
                                                      OpStore %252 %258 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                       f32_3 %259 = OpLoad %252 
                                       f32_4 %260 = OpLoad %169 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %169 %261 
                                       f32_4 %262 = OpLoad %169 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_3* %266 = OpAccessChain %45 %264 
                                       f32_3 %267 = OpLoad %266 
                                       f32_3 %268 = OpFNegate %267 
                                       f32_3 %269 = OpFAdd %263 %268 
                                       f32_4 %270 = OpLoad %169 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %169 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_3* %275 = OpAccessChain %45 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_4 %278 = OpLoad %169 
                                       f32_4 %279 = OpVectorShuffle %278 %277 0 4 5 6 
                                                      OpStore %169 %279 
                                Private f32* %280 = OpAccessChain %169 %34 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %102 
                                Private f32* %285 = OpAccessChain %31 %27 
                                                      OpStore %285 %284 
                                Uniform f32* %286 = OpAccessChain %45 %204 %48 
                                         f32 %287 = OpLoad %286 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %102 
                                Private f32* %291 = OpAccessChain %70 %27 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %31 %27 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %70 %27 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %293 %295 
                                Private f32* %297 = OpAccessChain %169 %27 
                                                      OpStore %297 %296 
                  read_only Texture3DSampled %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %169 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 2 3 
                                       f32_4 %305 = OpImageSampleImplicitLod %302 %304 
                                                      OpStore %169 %305 
                                       f32_4 %307 = OpLoad %169 
                                                      OpStore %306 %307 
                                                      OpBranch %216 
                                             %308 = OpLabel 
                                Private f32* %309 = OpAccessChain %306 %27 
                                                      OpStore %309 %118 
                                Private f32* %310 = OpAccessChain %306 %34 
                                                      OpStore %310 %118 
                                Private f32* %311 = OpAccessChain %306 %48 
                                                      OpStore %311 %118 
                                Private f32* %312 = OpAccessChain %306 %180 
                                                      OpStore %312 %118 
                                                      OpBranch %216 
                                             %216 = OpLabel 
                                       f32_4 %313 = OpLoad %306 
                              Uniform f32_4* %314 = OpAccessChain %45 %196 
                                       f32_4 %315 = OpLoad %314 
                                         f32 %316 = OpDot %313 %315 
                                Private f32* %317 = OpAccessChain %91 %27 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %91 %27 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpExtInst %1 43 %319 %76 %118 
                                Private f32* %321 = OpAccessChain %91 %27 
                                                      OpStore %321 %320 
                                       f32_3 %323 = OpLoad %155 
                              Uniform f32_4* %325 = OpAccessChain %45 %324 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFMul %323 %327 
                                                      OpStore %322 %328 
                                       f32_3 %329 = OpLoad %91 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpLoad %322 
                                       f32_3 %332 = OpFMul %330 %331 
                                                      OpStore %91 %332 
                                       f32_3 %335 = OpLoad %155 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %91 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %334 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %334 %342 
                                Private f32* %343 = OpAccessChain %9 %180 
                                         f32 %344 = OpLoad %343 
                                 Output f32* %346 = OpAccessChain %334 %180 
                                                      OpStore %346 %344 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat5;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat4.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = u_xlat4.x * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat4.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat10 = u_xlat0.w + (-_Cutoff);
    u_xlatb10 = u_xlat10<0.0;
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %170 %290 %293 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %293 Location 293 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 9 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                               Output f32_3* %152 = OpVariable Output 
                                             %157 = OpTypePointer Uniform %6 
                              Private f32_4* %162 = OpVariable Private 
                                         f32 %165 = OpConstant 3.674022E-40 
                                       f32_3 %166 = OpConstantComposite %165 %165 %165 
                               Output f32_4* %170 = OpVariable Output 
                                             %182 = OpTypePointer Private %51 
                              Private f32_3* %183 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                              Private f32_3* %206 = OpVariable Private 
                                         i32 %207 = OpConstant 4 
                                         i32 %213 = OpConstant 5 
                                         i32 %219 = OpConstant 6 
                                         i32 %225 = OpConstant 7 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %235 = OpConstant 3 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_3 %257 = OpConstantComposite %256 %256 %256 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_3 %266 = OpConstantComposite %265 %265 %265 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                               Output f32_3* %290 = OpVariable Output 
                               Output f32_4* %293 = OpVariable Output 
                                       f32_4 %294 = OpConstantComposite %256 %256 %256 %256 
                                             %295 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                Private f32* %155 = OpAccessChain %9 %90 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %158 = OpAccessChain %21 %29 %121 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %156 %159 
                                Private f32* %161 = OpAccessChain %9 %90 
                                                      OpStore %161 %160 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 3 1 
                                       f32_3 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %162 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 1 5 6 
                                                      OpStore %162 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_2 %172 = OpVectorShuffle %171 %171 2 3 
                                       f32_4 %173 = OpLoad %170 
                                       f32_4 %174 = OpVectorShuffle %173 %172 0 1 4 5 
                                                      OpStore %170 %174 
                                       f32_4 %175 = OpLoad %162 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %162 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad %170 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore %170 %181 
                                Private f32* %184 = OpAccessChain %45 %90 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %45 %90 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %183 %121 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %45 %121 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %45 %121 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                Private f32* %195 = OpAccessChain %183 %121 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %194 %197 
                                Private f32* %199 = OpAccessChain %183 %121 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %45 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 2 2 0 
                                       f32_4 %203 = OpLoad %45 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 1 2 2 
                                       f32_4 %205 = OpFMul %202 %204 
                                                      OpStore %200 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %200 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %206 %121 
                                                      OpStore %212 %211 
                              Uniform f32_4* %214 = OpAccessChain %21 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %200 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %206 %90 
                                                      OpStore %218 %217 
                              Uniform f32_4* %220 = OpAccessChain %21 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %200 
                                         f32 %223 = OpDot %221 %222 
                                Private f32* %224 = OpAccessChain %206 %135 
                                                      OpStore %224 %223 
                              Uniform f32_4* %226 = OpAccessChain %21 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpLoad %183 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 0 0 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_3 %232 = OpLoad %206 
                                       f32_3 %233 = OpFAdd %231 %232 
                                                      OpStore %183 %233 
                                Private f32* %236 = OpAccessChain %45 %235 
                                                      OpStore %236 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %24 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %45 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %206 %121 
                                                      OpStore %241 %240 
                              Uniform f32_4* %242 = OpAccessChain %21 %37 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %45 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %206 %90 
                                                      OpStore %246 %245 
                              Uniform f32_4* %247 = OpAccessChain %21 %47 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %45 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %206 %135 
                                                      OpStore %251 %250 
                                       f32_3 %252 = OpLoad %183 
                                       f32_3 %253 = OpLoad %206 
                                       f32_3 %254 = OpFAdd %252 %253 
                                                      OpStore %183 %254 
                                       f32_3 %255 = OpLoad %183 
                                       f32_3 %258 = OpExtInst %1 40 %255 %257 
                                                      OpStore %183 %258 
                                       f32_3 %259 = OpLoad %183 
                                       f32_3 %260 = OpExtInst %1 30 %259 
                                       f32_4 %261 = OpLoad %45 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %45 %262 
                                       f32_4 %263 = OpLoad %45 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %45 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %45 %269 
                                       f32_4 %270 = OpLoad %45 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpExtInst %1 29 %271 
                                       f32_4 %273 = OpLoad %45 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %45 %274 
                                       f32_4 %275 = OpLoad %45 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %45 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %45 %284 
                                       f32_4 %285 = OpLoad %45 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpExtInst %1 40 %286 %257 
                                       f32_4 %288 = OpLoad %45 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %45 %289 
                                       f32_4 %291 = OpLoad %45 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                                      OpStore %290 %292 
                                                      OpStore %293 %294 
                                 Output f32* %296 = OpAccessChain %94 %29 %90 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                 Output f32* %299 = OpAccessChain %94 %29 %90 
                                                      OpStore %299 %298 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %221 %334 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 RelaxedPrecision 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 RelaxedPrecision 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpMemberDecorate %43 11 RelaxedPrecision 
                                                      OpMemberDecorate %43 11 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %214 SpecId 214 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %301 DescriptorSet 301 
                                                      OpDecorate %301 Binding 301 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %7 %7 %7 %42 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 0 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 8 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %94 %95 %96 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %107 = OpConstant 9 
                                Private f32* %112 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 7 
                                         f32 %152 = OpConstant 3.674022E-40 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %163 = OpConstant 10 
                                         f32 %166 = OpConstant 3.674022E-40 
                              Private f32_4* %169 = OpVariable Private 
                                         u32 %180 = OpConstant 3 
                                         i32 %183 = OpConstant 11 
                                             %189 = OpTypeBool 
                                             %190 = OpTypePointer Private %189 
                               Private bool* %191 = OpVariable Private 
                                         i32 %196 = OpConstant 1 
                                         i32 %198 = OpConstant -1 
                                         i32 %204 = OpConstant 2 
                                        bool %208 = OpConstantFalse 
                                        bool %214 = OpSpecConstantFalse 
                                             %220 = OpTypePointer Input %29 
                                Input f32_3* %221 = OpVariable Input 
                                         i32 %224 = OpConstant 3 
                                             %225 = OpTypePointer Uniform %7 
                                             %251 = OpTypePointer Function %29 
                                         i32 %264 = OpConstant 5 
                                             %265 = OpTypePointer Uniform %29 
                                         i32 %274 = OpConstant 4 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %288 = OpConstant 3.674022E-40 
                                             %298 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %299 = OpTypeSampledImage %298 
                                             %300 = OpTypePointer UniformConstant %299 
 UniformConstant read_only Texture3DSampled* %301 = OpVariable UniformConstant 
                              Private f32_4* %306 = OpVariable Private 
                              Private f32_3* %322 = OpVariable Private 
                                         i32 %324 = OpConstant 6 
                                             %333 = OpTypePointer Output %7 
                               Output f32_4* %334 = OpVariable Output 
                                Input f32_3* %336 = OpVariable Input 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %252 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %50 = OpAccessChain %45 %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %31 %27 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %31 %27 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpExtInst %1 13 %59 
                                 Private f32* %61 = OpAccessChain %31 %27 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                          f32 %63 = OpLoad %62 
                                 Uniform f32* %65 = OpAccessChain %45 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFMul %63 %66 
                                 Private f32* %68 = OpAccessChain %31 %27 
                                                      OpStore %68 %67 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_2 %78 = OpLoad %70 
                                        f32_4 %79 = OpLoad %33 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFAdd %78 %80 
                                        f32_3 %82 = OpLoad %31 
                                        f32_3 %83 = OpVectorShuffle %82 %81 3 4 2 
                                                      OpStore %31 %83 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %84 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %98 = OpDot %93 %97 
                                 Private f32* %99 = OpAccessChain %91 %27 
                                                      OpStore %99 %98 
                                Private f32* %100 = OpAccessChain %91 %27 
                                         f32 %101 = OpLoad %100 
                                         f32 %103 = OpFMul %101 %102 
                                Private f32* %104 = OpAccessChain %91 %27 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %91 %27 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %108 = OpAccessChain %45 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                Private f32* %111 = OpAccessChain %70 %27 
                                                      OpStore %111 %110 
                                  Input f32* %113 = OpAccessChain %33 %34 
                                         f32 %114 = OpLoad %113 
                                         f32 %116 = OpFAdd %114 %115 
                                                      OpStore %112 %116 
                                         f32 %117 = OpLoad %112 
                                         f32 %119 = OpExtInst %1 43 %117 %76 %118 
                                                      OpStore %112 %119 
                                         f32 %120 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %112 %122 
                                         f32 %123 = OpLoad %112 
                                         f32 %124 = OpExtInst %1 37 %123 %118 
                                                      OpStore %112 %124 
                                         f32 %125 = OpLoad %112 
                                Private f32* %126 = OpAccessChain %70 %27 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFNegate %127 
                                         f32 %129 = OpFMul %125 %128 
                                Private f32* %130 = OpAccessChain %70 %27 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFAdd %129 %131 
                                Private f32* %133 = OpAccessChain %70 %27 
                                                      OpStore %133 %132 
                                         f32 %134 = OpLoad %21 
                                Private f32* %135 = OpAccessChain %70 %27 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFMul %134 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                         f32 %140 = OpLoad %139 
                                Uniform f32* %142 = OpAccessChain %45 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %140 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %147 %102 
                                Private f32* %149 = OpAccessChain %70 %27 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %70 %27 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpExtInst %1 37 %151 %152 
                                Private f32* %154 = OpAccessChain %70 %27 
                                                      OpStore %154 %153 
                                       f32_3 %156 = OpLoad %84 
                                       f32_2 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 0 0 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                                      OpStore %155 %162 
                                Uniform f32* %164 = OpAccessChain %45 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %31 %27 
                                                      OpStore %168 %167 
                                         f32 %170 = OpLoad %21 
                                Private f32* %171 = OpAccessChain %31 %27 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpFAdd %173 %118 
                                Private f32* %175 = OpAccessChain %169 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %155 
                                       f32_4 %177 = OpLoad %169 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 0 0 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %155 %179 
                                Private f32* %181 = OpAccessChain %9 %180 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %45 %183 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFNegate %185 
                                         f32 %187 = OpFAdd %182 %186 
                                Private f32* %188 = OpAccessChain %91 %27 
                                                      OpStore %188 %187 
                                Private f32* %192 = OpAccessChain %91 %27 
                                         f32 %193 = OpLoad %192 
                                        bool %194 = OpFOrdLessThan %193 %76 
                                                      OpStore %191 %194 
                                        bool %195 = OpLoad %191 
                                         i32 %197 = OpSelect %195 %196 %47 
                                         i32 %199 = OpIMul %197 %198 
                                        bool %200 = OpINotEqual %199 %47 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %202 
                                             %201 = OpLabel 
                                                      OpKill
                                             %202 = OpLabel 
                                Uniform f32* %205 = OpAccessChain %45 %204 %27 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdEqual %206 %118 
                                                      OpStore %191 %207 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %210 
                                             %209 = OpLabel 
                                        bool %211 = OpLoad %191 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %213 
                                             %212 = OpLabel 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %308 
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %45 %204 %34 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %118 
                                                      OpStore %191 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %45 %224 %196 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %223 %228 
                                                      OpStore %31 %229 
                              Uniform f32_4* %230 = OpAccessChain %45 %224 %47 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %31 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %31 %237 
                              Uniform f32_4* %238 = OpAccessChain %45 %224 %204 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpLoad %221 
                                       f32_3 %242 = OpVectorShuffle %241 %241 2 2 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %244 = OpLoad %31 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %31 %245 
                                       f32_3 %246 = OpLoad %31 
                              Uniform f32_4* %247 = OpAccessChain %45 %224 %224 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %246 %249 
                                                      OpStore %31 %250 
                                        bool %253 = OpLoad %191 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %257 
                                             %254 = OpLabel 
                                       f32_3 %256 = OpLoad %31 
                                                      OpStore %252 %256 
                                                      OpBranch %255 
                                             %257 = OpLabel 
                                       f32_3 %258 = OpLoad %221 
                                                      OpStore %252 %258 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                       f32_3 %259 = OpLoad %252 
                                       f32_4 %260 = OpLoad %169 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %169 %261 
                                       f32_4 %262 = OpLoad %169 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_3* %266 = OpAccessChain %45 %264 
                                       f32_3 %267 = OpLoad %266 
                                       f32_3 %268 = OpFNegate %267 
                                       f32_3 %269 = OpFAdd %263 %268 
                                       f32_4 %270 = OpLoad %169 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %169 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_3* %275 = OpAccessChain %45 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_4 %278 = OpLoad %169 
                                       f32_4 %279 = OpVectorShuffle %278 %277 0 4 5 6 
                                                      OpStore %169 %279 
                                Private f32* %280 = OpAccessChain %169 %34 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %102 
                                Private f32* %285 = OpAccessChain %31 %27 
                                                      OpStore %285 %284 
                                Uniform f32* %286 = OpAccessChain %45 %204 %48 
                                         f32 %287 = OpLoad %286 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %102 
                                Private f32* %291 = OpAccessChain %70 %27 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %31 %27 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %70 %27 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %293 %295 
                                Private f32* %297 = OpAccessChain %169 %27 
                                                      OpStore %297 %296 
                  read_only Texture3DSampled %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %169 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 2 3 
                                       f32_4 %305 = OpImageSampleImplicitLod %302 %304 
                                                      OpStore %169 %305 
                                       f32_4 %307 = OpLoad %169 
                                                      OpStore %306 %307 
                                                      OpBranch %216 
                                             %308 = OpLabel 
                                Private f32* %309 = OpAccessChain %306 %27 
                                                      OpStore %309 %118 
                                Private f32* %310 = OpAccessChain %306 %34 
                                                      OpStore %310 %118 
                                Private f32* %311 = OpAccessChain %306 %48 
                                                      OpStore %311 %118 
                                Private f32* %312 = OpAccessChain %306 %180 
                                                      OpStore %312 %118 
                                                      OpBranch %216 
                                             %216 = OpLabel 
                                       f32_4 %313 = OpLoad %306 
                              Uniform f32_4* %314 = OpAccessChain %45 %196 
                                       f32_4 %315 = OpLoad %314 
                                         f32 %316 = OpDot %313 %315 
                                Private f32* %317 = OpAccessChain %91 %27 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %91 %27 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpExtInst %1 43 %319 %76 %118 
                                Private f32* %321 = OpAccessChain %91 %27 
                                                      OpStore %321 %320 
                                       f32_3 %323 = OpLoad %155 
                              Uniform f32_4* %325 = OpAccessChain %45 %324 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFMul %323 %327 
                                                      OpStore %322 %328 
                                       f32_3 %329 = OpLoad %91 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpLoad %322 
                                       f32_3 %332 = OpFMul %330 %331 
                                                      OpStore %91 %332 
                                       f32_3 %335 = OpLoad %155 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %91 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %334 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %334 %342 
                                Private f32* %343 = OpAccessChain %9 %180 
                                         f32 %344 = OpLoad %343 
                                 Output f32* %346 = OpAccessChain %334 %180 
                                                      OpStore %346 %344 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat1.x * 0.5;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat9;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat5.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = u_xlat5.x * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat5.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 189
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %174 %176 %178 %181 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %174 Location 174 
                                                      OpDecorate %176 Location 176 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                         u32 %159 = OpConstant 3 
                                       f32_2 %163 = OpConstantComposite %157 %157 
                               Output f32_4* %174 = OpVariable Output 
                               Output f32_4* %176 = OpVariable Output 
                               Output f32_3* %178 = OpVariable Output 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                               Output f32_4* %181 = OpVariable Output 
                                       f32_4 %182 = OpConstantComposite %179 %179 %179 %179 
                                             %183 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %44 %118 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %44 %118 
                                         f32 %156 = OpLoad %155 
                                         f32 %158 = OpFMul %156 %157 
                                Private f32* %160 = OpAccessChain %44 %159 
                                                      OpStore %160 %158 
                                       f32_4 %161 = OpLoad %9 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 3 
                                       f32_2 %164 = OpFMul %162 %163 
                                       f32_4 %165 = OpLoad %44 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 1 5 3 
                                                      OpStore %44 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %9 %173 
                                       f32_4 %175 = OpLoad %9 
                                                      OpStore %174 %175 
                                       f32_4 %177 = OpLoad %9 
                                                      OpStore %176 %177 
                                                      OpStore %178 %180 
                                                      OpStore %181 %182 
                                 Output f32* %184 = OpAccessChain %92 %28 %88 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFNegate %185 
                                 Output f32* %187 = OpAccessChain %92 %28 %88 
                                                      OpStore %187 %186 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 469
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %206 %404 %455 %457 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 RelaxedPrecision 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 RelaxedPrecision 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 RelaxedPrecision 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpMemberDecorate %44 13 Offset 44 
                                                      OpMemberDecorate %44 14 Offset 44 
                                                      OpMemberDecorate %44 15 RelaxedPrecision 
                                                      OpMemberDecorate %44 15 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %86 DescriptorSet 86 
                                                      OpDecorate %86 Binding 86 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %286 SpecId 286 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 Location 404 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %455 Location 455 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %7 %29 %7 %7 %7 %42 %7 %43 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 12 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %85 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %86 = OpVariable UniformConstant 
                               Private f32_3* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %95 %96 %97 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         i32 %108 = OpConstant 13 
                                Private f32* %113 = OpVariable Private 
                                         f32 %116 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         i32 %142 = OpConstant 11 
                                         f32 %153 = OpConstant 3.674022E-40 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %164 = OpConstant 14 
                                         f32 %167 = OpConstant 3.674022E-40 
                              Private f32_3* %170 = OpVariable Private 
                                         u32 %181 = OpConstant 3 
                                         i32 %184 = OpConstant 15 
                                             %190 = OpTypeBool 
                                             %191 = OpTypePointer Private %190 
                               Private bool* %192 = OpVariable Private 
                                         i32 %197 = OpConstant 1 
                                         i32 %199 = OpConstant -1 
                                             %205 = OpTypePointer Input %29 
                                Input f32_3* %206 = OpVariable Input 
                                             %209 = OpTypePointer Uniform %29 
                                         i32 %213 = OpConstant 5 
                                         i32 %220 = OpConstant 2 
                                         i32 %230 = OpConstant 4 
                                             %231 = OpTypePointer Uniform %7 
                                         i32 %263 = OpConstant 3 
                               Private bool* %275 = OpVariable Private 
                                         i32 %276 = OpConstant 6 
                                        bool %280 = OpConstantFalse 
                                        bool %286 = OpSpecConstantFalse 
                               Private bool* %289 = OpVariable Private 
                                         i32 %295 = OpConstant 7 
                                             %332 = OpTypePointer Function %29 
                                         i32 %346 = OpConstant 9 
                                         i32 %355 = OpConstant 8 
                                             %361 = OpTypePointer Private %15 
                              Private f32_2* %362 = OpVariable Private 
                                         f32 %365 = OpConstant 3.674022E-40 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                             %380 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %381 = OpTypeSampledImage %380 
                                             %382 = OpTypePointer UniformConstant %381 
 UniformConstant read_only Texture3DSampled* %383 = OpVariable UniformConstant 
                              Private f32_4* %388 = OpVariable Private 
                                Input f32_4* %404 = OpVariable Input 
                                Private f32* %410 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %411 = OpVariable UniformConstant 
                              Private f32_3* %416 = OpVariable Private 
                                             %432 = OpTypePointer Function %6 
                                         i32 %445 = OpConstant 10 
                                             %454 = OpTypePointer Output %7 
                               Output f32_4* %455 = OpVariable Output 
                                Input f32_3* %457 = OpVariable Input 
                                             %466 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %31 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %31 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %31 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %31 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %33 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                        f32_3 %83 = OpLoad %31 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %31 %84 
                   read_only Texture2DSampled %87 = OpLoad %86 
                                        f32_3 %88 = OpLoad %31 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %90 = OpImageSampleImplicitLod %87 %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                                      OpStore %85 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %99 = OpDot %94 %98 
                                Private f32* %100 = OpAccessChain %92 %27 
                                                      OpStore %100 %99 
                                Private f32* %101 = OpAccessChain %92 %27 
                                         f32 %102 = OpLoad %101 
                                         f32 %104 = OpFMul %102 %103 
                                Private f32* %105 = OpAccessChain %92 %27 
                                                      OpStore %105 %104 
                                Private f32* %106 = OpAccessChain %92 %27 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %46 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %70 %27 
                                                      OpStore %112 %111 
                                  Input f32* %114 = OpAccessChain %33 %34 
                                         f32 %115 = OpLoad %114 
                                         f32 %117 = OpFAdd %115 %116 
                                                      OpStore %113 %117 
                                         f32 %118 = OpLoad %113 
                                         f32 %120 = OpExtInst %1 43 %118 %76 %119 
                                                      OpStore %113 %120 
                                         f32 %121 = OpLoad %113 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %113 %123 
                                         f32 %124 = OpLoad %113 
                                         f32 %125 = OpExtInst %1 37 %124 %119 
                                                      OpStore %113 %125 
                                         f32 %126 = OpLoad %113 
                                Private f32* %127 = OpAccessChain %70 %27 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFMul %126 %129 
                                Private f32* %131 = OpAccessChain %70 %27 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFAdd %130 %132 
                                Private f32* %134 = OpAccessChain %70 %27 
                                                      OpStore %134 %133 
                                         f32 %135 = OpLoad %21 
                                Private f32* %136 = OpAccessChain %70 %27 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %135 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %70 %27 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %143 = OpAccessChain %46 %142 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %141 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %70 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %148 %103 
                                Private f32* %150 = OpAccessChain %70 %27 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %70 %27 
                                         f32 %152 = OpLoad %151 
                                         f32 %154 = OpExtInst %1 37 %152 %153 
                                Private f32* %155 = OpAccessChain %70 %27 
                                                      OpStore %155 %154 
                                       f32_3 %157 = OpLoad %85 
                                       f32_4 %158 = OpLoad %70 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                                      OpStore %156 %163 
                                Uniform f32* %165 = OpAccessChain %46 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFAdd %166 %167 
                                Private f32* %169 = OpAccessChain %31 %27 
                                                      OpStore %169 %168 
                                         f32 %171 = OpLoad %21 
                                Private f32* %172 = OpAccessChain %31 %27 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %171 %173 
                                         f32 %175 = OpFAdd %174 %119 
                                Private f32* %176 = OpAccessChain %170 %27 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %156 
                                       f32_3 %178 = OpLoad %170 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                                      OpStore %156 %180 
                                Private f32* %182 = OpAccessChain %9 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %46 %184 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %183 %187 
                                Private f32* %189 = OpAccessChain %92 %27 
                                                      OpStore %189 %188 
                                Private f32* %193 = OpAccessChain %92 %27 
                                         f32 %194 = OpLoad %193 
                                        bool %195 = OpFOrdLessThan %194 %76 
                                                      OpStore %192 %195 
                                        bool %196 = OpLoad %192 
                                         i32 %198 = OpSelect %196 %197 %48 
                                         i32 %200 = OpIMul %198 %199 
                                        bool %201 = OpINotEqual %200 %48 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                       f32_3 %207 = OpLoad %206 
                                       f32_3 %208 = OpFNegate %207 
                              Uniform f32_3* %210 = OpAccessChain %46 %197 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFAdd %208 %211 
                                                      OpStore %170 %212 
                                Uniform f32* %214 = OpAccessChain %46 %213 %48 %49 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %70 %27 
                                                      OpStore %216 %215 
                                Uniform f32* %217 = OpAccessChain %46 %213 %197 %49 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %70 %34 
                                                      OpStore %219 %218 
                                Uniform f32* %221 = OpAccessChain %46 %213 %220 %49 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %70 %49 
                                                      OpStore %223 %222 
                                       f32_3 %224 = OpLoad %170 
                                       f32_4 %225 = OpLoad %70 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                         f32 %227 = OpDot %224 %226 
                                Private f32* %228 = OpAccessChain %170 %27 
                                                      OpStore %228 %227 
                                       f32_3 %229 = OpLoad %206 
                              Uniform f32_4* %232 = OpAccessChain %46 %230 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFNegate %234 
                                       f32_3 %236 = OpFAdd %229 %235 
                                                      OpStore %31 %236 
                                       f32_3 %237 = OpLoad %31 
                                       f32_3 %238 = OpLoad %31 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %31 %27 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %31 %27 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 31 %242 
                                Private f32* %244 = OpAccessChain %31 %27 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %170 %27 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                Private f32* %248 = OpAccessChain %31 %27 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %31 %27 
                                                      OpStore %251 %250 
                                Uniform f32* %252 = OpAccessChain %46 %230 %181 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %31 %27 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %170 %27 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %170 %27 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %170 %27 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %46 %263 %49 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %46 %263 %181 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %170 %27 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %170 %27 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %76 %119 
                                Private f32* %274 = OpAccessChain %170 %27 
                                                      OpStore %274 %273 
                                Uniform f32* %277 = OpAccessChain %46 %276 %27 
                                         f32 %278 = OpLoad %277 
                                        bool %279 = OpFOrdEqual %278 %119 
                                                      OpStore %275 %279 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %282 
                                             %281 = OpLabel 
                                        bool %283 = OpLoad %275 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %285 
                                             %284 = OpLabel 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %390 
                                             %287 = OpLabel 
                                Uniform f32* %290 = OpAccessChain %46 %276 %34 
                                         f32 %291 = OpLoad %290 
                                        bool %292 = OpFOrdEqual %291 %119 
                                                      OpStore %289 %292 
                                       f32_3 %293 = OpLoad %206 
                                       f32_3 %294 = OpVectorShuffle %293 %293 1 1 1 
                              Uniform f32_4* %296 = OpAccessChain %46 %295 %197 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                              Uniform f32_4* %302 = OpAccessChain %46 %295 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpLoad %206 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %70 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                       f32_4 %311 = OpLoad %70 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %70 %312 
                              Uniform f32_4* %313 = OpAccessChain %46 %295 %220 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpLoad %206 
                                       f32_3 %317 = OpVectorShuffle %316 %316 2 2 2 
                                       f32_3 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %70 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %70 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %70 %323 
                                       f32_4 %324 = OpLoad %70 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %46 %295 %263 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                       f32_4 %330 = OpLoad %70 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %70 %331 
                                        bool %334 = OpLoad %289 
                                                      OpSelectionMerge %336 None 
                                                      OpBranchConditional %334 %335 %339 
                                             %335 = OpLabel 
                                       f32_4 %337 = OpLoad %70 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                                      OpStore %333 %338 
                                                      OpBranch %336 
                                             %339 = OpLabel 
                                       f32_3 %340 = OpLoad %206 
                                                      OpStore %333 %340 
                                                      OpBranch %336 
                                             %336 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %70 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %70 %343 
                                       f32_4 %344 = OpLoad %70 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_3* %347 = OpAccessChain %46 %346 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpFNegate %348 
                                       f32_3 %350 = OpFAdd %345 %349 
                                       f32_4 %351 = OpLoad %70 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %70 %352 
                                       f32_4 %353 = OpLoad %70 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %46 %355 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpFMul %354 %357 
                                       f32_4 %359 = OpLoad %70 
                                       f32_4 %360 = OpVectorShuffle %359 %358 0 4 5 6 
                                                      OpStore %70 %360 
                                Private f32* %363 = OpAccessChain %70 %34 
                                         f32 %364 = OpLoad %363 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %103 
                                Private f32* %368 = OpAccessChain %362 %27 
                                                      OpStore %368 %367 
                                Uniform f32* %370 = OpAccessChain %46 %276 %49 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %103 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                Private f32* %376 = OpAccessChain %362 %27 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpExtInst %1 40 %375 %377 
                                Private f32* %379 = OpAccessChain %70 %27 
                                                      OpStore %379 %378 
                  read_only Texture3DSampled %384 = OpLoad %383 
                                       f32_4 %385 = OpLoad %70 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 2 3 
                                       f32_4 %387 = OpImageSampleImplicitLod %384 %386 
                                                      OpStore %70 %387 
                                       f32_4 %389 = OpLoad %70 
                                                      OpStore %388 %389 
                                                      OpBranch %288 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %388 %27 
                                                      OpStore %391 %119 
                                Private f32* %392 = OpAccessChain %388 %34 
                                                      OpStore %392 %119 
                                Private f32* %393 = OpAccessChain %388 %49 
                                                      OpStore %393 %119 
                                Private f32* %394 = OpAccessChain %388 %181 
                                                      OpStore %394 %119 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                       f32_4 %395 = OpLoad %388 
                              Uniform f32_4* %396 = OpAccessChain %46 %220 
                                       f32_4 %397 = OpLoad %396 
                                         f32 %398 = OpDot %395 %397 
                                Private f32* %399 = OpAccessChain %92 %27 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %92 %27 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpExtInst %1 43 %401 %76 %119 
                                Private f32* %403 = OpAccessChain %92 %27 
                                                      OpStore %403 %402 
                                       f32_4 %405 = OpLoad %404 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpLoad %404 
                                       f32_2 %408 = OpVectorShuffle %407 %407 3 3 
                                       f32_2 %409 = OpFDiv %406 %408 
                                                      OpStore %362 %409 
                  read_only Texture2DSampled %412 = OpLoad %411 
                                       f32_2 %413 = OpLoad %362 
                                       f32_4 %414 = OpImageSampleImplicitLod %412 %413 
                                         f32 %415 = OpCompositeExtract %414 0 
                                                      OpStore %410 %415 
                                Private f32* %417 = OpAccessChain %170 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpLoad %410 
                                         f32 %420 = OpFAdd %418 %419 
                                Private f32* %421 = OpAccessChain %416 %27 
                                                      OpStore %421 %420 
                                Private f32* %422 = OpAccessChain %416 %27 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 43 %423 %76 %119 
                                Private f32* %425 = OpAccessChain %416 %27 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %416 %27 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %92 %27 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 37 %427 %429 
                                Private f32* %431 = OpAccessChain %92 %27 
                                                      OpStore %431 %430 
                                        bool %434 = OpLoad %275 
                                                      OpSelectionMerge %436 None 
                                                      OpBranchConditional %434 %435 %439 
                                             %435 = OpLabel 
                                Private f32* %437 = OpAccessChain %92 %27 
                                         f32 %438 = OpLoad %437 
                                                      OpStore %433 %438 
                                                      OpBranch %436 
                                             %439 = OpLabel 
                                Private f32* %440 = OpAccessChain %416 %27 
                                         f32 %441 = OpLoad %440 
                                                      OpStore %433 %441 
                                                      OpBranch %436 
                                             %436 = OpLabel 
                                         f32 %442 = OpLoad %433 
                                Private f32* %443 = OpAccessChain %92 %27 
                                                      OpStore %443 %442 
                                       f32_3 %444 = OpLoad %156 
                              Uniform f32_4* %446 = OpAccessChain %46 %445 
                                       f32_4 %447 = OpLoad %446 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFMul %444 %448 
                                                      OpStore %416 %449 
                                       f32_3 %450 = OpLoad %92 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                                       f32_3 %452 = OpLoad %416 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %92 %453 
                                       f32_3 %456 = OpLoad %156 
                                       f32_3 %458 = OpLoad %457 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_3 %460 = OpLoad %92 
                                       f32_3 %461 = OpFAdd %459 %460 
                                       f32_4 %462 = OpLoad %455 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %455 %463 
                                Private f32* %464 = OpAccessChain %9 %181 
                                         f32 %465 = OpLoad %464 
                                 Output f32* %467 = OpAccessChain %455 %181 
                                                      OpStore %467 %465 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat2.x * 0.5;
    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD5 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat9;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat5.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = u_xlat5.x * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat5.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 304
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %182 %184 %293 %296 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %293 Location 293 
                                                      OpDecorate %296 Location 296 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 9 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                               Output f32_3* %152 = OpVariable Output 
                              Private f32_4* %155 = OpVariable Private 
                                             %158 = OpTypePointer Uniform %6 
                                         f32 %165 = OpConstant 3.674022E-40 
                                         u32 %167 = OpConstant 3 
                                       f32_2 %171 = OpConstantComposite %165 %165 
                               Output f32_4* %182 = OpVariable Output 
                               Output f32_4* %184 = OpVariable Output 
                                             %186 = OpTypePointer Private %51 
                              Private f32_3* %187 = OpVariable Private 
                              Private f32_4* %204 = OpVariable Private 
                              Private f32_3* %210 = OpVariable Private 
                                         i32 %211 = OpConstant 4 
                                         i32 %217 = OpConstant 5 
                                         i32 %223 = OpConstant 6 
                                         i32 %229 = OpConstant 7 
                                         f32 %238 = OpConstant 3.674022E-40 
                                         f32 %259 = OpConstant 3.674022E-40 
                                       f32_3 %260 = OpConstantComposite %259 %259 %259 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_3 %284 = OpConstantComposite %283 %283 %283 
                               Output f32_3* %293 = OpVariable Output 
                               Output f32_4* %296 = OpVariable Output 
                                       f32_4 %297 = OpConstantComposite %259 %259 %259 %259 
                                             %298 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                Private f32* %156 = OpAccessChain %9 %90 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %159 = OpAccessChain %21 %29 %121 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                Private f32* %162 = OpAccessChain %155 %121 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %155 %121 
                                         f32 %164 = OpLoad %163 
                                         f32 %166 = OpFMul %164 %165 
                                Private f32* %168 = OpAccessChain %155 %167 
                                                      OpStore %168 %166 
                                       f32_4 %169 = OpLoad %9 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %172 = OpFMul %170 %171 
                                       f32_4 %173 = OpLoad %155 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 1 5 3 
                                                      OpStore %155 %174 
                                       f32_4 %175 = OpLoad %155 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %155 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore %9 %181 
                                       f32_4 %183 = OpLoad %9 
                                                      OpStore %182 %183 
                                       f32_4 %185 = OpLoad %9 
                                                      OpStore %184 %185 
                                Private f32* %188 = OpAccessChain %45 %90 
                                         f32 %189 = OpLoad %188 
                                Private f32* %190 = OpAccessChain %45 %90 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFMul %189 %191 
                                Private f32* %193 = OpAccessChain %187 %121 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %45 %121 
                                         f32 %195 = OpLoad %194 
                                Private f32* %196 = OpAccessChain %45 %121 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %195 %197 
                                Private f32* %199 = OpAccessChain %187 %121 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %198 %201 
                                Private f32* %203 = OpAccessChain %187 %121 
                                                      OpStore %203 %202 
                                       f32_4 %205 = OpLoad %45 
                                       f32_4 %206 = OpVectorShuffle %205 %205 1 2 2 0 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %207 0 1 2 2 
                                       f32_4 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %204 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %210 %121 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %21 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %204 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %210 %90 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %204 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %210 %135 
                                                      OpStore %228 %227 
                              Uniform f32_4* %230 = OpAccessChain %21 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %187 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %210 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %187 %237 
                                Private f32* %239 = OpAccessChain %45 %167 
                                                      OpStore %239 %238 
                              Uniform f32_4* %240 = OpAccessChain %21 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %45 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %210 %121 
                                                      OpStore %244 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %45 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %210 %90 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %47 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %45 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %210 %135 
                                                      OpStore %254 %253 
                                       f32_3 %255 = OpLoad %187 
                                       f32_3 %256 = OpLoad %210 
                                       f32_3 %257 = OpFAdd %255 %256 
                                                      OpStore %187 %257 
                                       f32_3 %258 = OpLoad %187 
                                       f32_3 %261 = OpExtInst %1 40 %258 %260 
                                                      OpStore %187 %261 
                                       f32_3 %262 = OpLoad %187 
                                       f32_3 %263 = OpExtInst %1 30 %262 
                                       f32_4 %264 = OpLoad %45 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %45 %265 
                                       f32_4 %266 = OpLoad %45 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_4 %271 = OpLoad %45 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %45 %272 
                                       f32_4 %273 = OpLoad %45 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpExtInst %1 29 %274 
                                       f32_4 %276 = OpLoad %45 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %45 %277 
                                       f32_4 %278 = OpLoad %45 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %282 = OpFMul %279 %281 
                                       f32_3 %285 = OpFAdd %282 %284 
                                       f32_4 %286 = OpLoad %45 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %45 %287 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpExtInst %1 40 %289 %260 
                                       f32_4 %291 = OpLoad %45 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %45 %292 
                                       f32_4 %294 = OpLoad %45 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                                      OpStore %293 %295 
                                                      OpStore %296 %297 
                                 Output f32* %299 = OpAccessChain %94 %29 %90 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFNegate %300 
                                 Output f32* %302 = OpAccessChain %94 %29 %90 
                                                      OpStore %302 %301 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 469
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %206 %404 %455 %457 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 RelaxedPrecision 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 RelaxedPrecision 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 RelaxedPrecision 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpMemberDecorate %44 13 Offset 44 
                                                      OpMemberDecorate %44 14 Offset 44 
                                                      OpMemberDecorate %44 15 RelaxedPrecision 
                                                      OpMemberDecorate %44 15 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %86 DescriptorSet 86 
                                                      OpDecorate %86 Binding 86 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %286 SpecId 286 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 Location 404 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %455 Location 455 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %7 %29 %7 %7 %7 %42 %7 %43 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 12 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %85 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %86 = OpVariable UniformConstant 
                               Private f32_3* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %95 %96 %97 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         i32 %108 = OpConstant 13 
                                Private f32* %113 = OpVariable Private 
                                         f32 %116 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         i32 %142 = OpConstant 11 
                                         f32 %153 = OpConstant 3.674022E-40 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %164 = OpConstant 14 
                                         f32 %167 = OpConstant 3.674022E-40 
                              Private f32_3* %170 = OpVariable Private 
                                         u32 %181 = OpConstant 3 
                                         i32 %184 = OpConstant 15 
                                             %190 = OpTypeBool 
                                             %191 = OpTypePointer Private %190 
                               Private bool* %192 = OpVariable Private 
                                         i32 %197 = OpConstant 1 
                                         i32 %199 = OpConstant -1 
                                             %205 = OpTypePointer Input %29 
                                Input f32_3* %206 = OpVariable Input 
                                             %209 = OpTypePointer Uniform %29 
                                         i32 %213 = OpConstant 5 
                                         i32 %220 = OpConstant 2 
                                         i32 %230 = OpConstant 4 
                                             %231 = OpTypePointer Uniform %7 
                                         i32 %263 = OpConstant 3 
                               Private bool* %275 = OpVariable Private 
                                         i32 %276 = OpConstant 6 
                                        bool %280 = OpConstantFalse 
                                        bool %286 = OpSpecConstantFalse 
                               Private bool* %289 = OpVariable Private 
                                         i32 %295 = OpConstant 7 
                                             %332 = OpTypePointer Function %29 
                                         i32 %346 = OpConstant 9 
                                         i32 %355 = OpConstant 8 
                                             %361 = OpTypePointer Private %15 
                              Private f32_2* %362 = OpVariable Private 
                                         f32 %365 = OpConstant 3.674022E-40 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                             %380 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %381 = OpTypeSampledImage %380 
                                             %382 = OpTypePointer UniformConstant %381 
 UniformConstant read_only Texture3DSampled* %383 = OpVariable UniformConstant 
                              Private f32_4* %388 = OpVariable Private 
                                Input f32_4* %404 = OpVariable Input 
                                Private f32* %410 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %411 = OpVariable UniformConstant 
                              Private f32_3* %416 = OpVariable Private 
                                             %432 = OpTypePointer Function %6 
                                         i32 %445 = OpConstant 10 
                                             %454 = OpTypePointer Output %7 
                               Output f32_4* %455 = OpVariable Output 
                                Input f32_3* %457 = OpVariable Input 
                                             %466 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %31 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %31 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %31 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %31 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %33 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                        f32_3 %83 = OpLoad %31 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %31 %84 
                   read_only Texture2DSampled %87 = OpLoad %86 
                                        f32_3 %88 = OpLoad %31 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %90 = OpImageSampleImplicitLod %87 %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                                      OpStore %85 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %99 = OpDot %94 %98 
                                Private f32* %100 = OpAccessChain %92 %27 
                                                      OpStore %100 %99 
                                Private f32* %101 = OpAccessChain %92 %27 
                                         f32 %102 = OpLoad %101 
                                         f32 %104 = OpFMul %102 %103 
                                Private f32* %105 = OpAccessChain %92 %27 
                                                      OpStore %105 %104 
                                Private f32* %106 = OpAccessChain %92 %27 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %46 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %70 %27 
                                                      OpStore %112 %111 
                                  Input f32* %114 = OpAccessChain %33 %34 
                                         f32 %115 = OpLoad %114 
                                         f32 %117 = OpFAdd %115 %116 
                                                      OpStore %113 %117 
                                         f32 %118 = OpLoad %113 
                                         f32 %120 = OpExtInst %1 43 %118 %76 %119 
                                                      OpStore %113 %120 
                                         f32 %121 = OpLoad %113 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %113 %123 
                                         f32 %124 = OpLoad %113 
                                         f32 %125 = OpExtInst %1 37 %124 %119 
                                                      OpStore %113 %125 
                                         f32 %126 = OpLoad %113 
                                Private f32* %127 = OpAccessChain %70 %27 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFMul %126 %129 
                                Private f32* %131 = OpAccessChain %70 %27 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFAdd %130 %132 
                                Private f32* %134 = OpAccessChain %70 %27 
                                                      OpStore %134 %133 
                                         f32 %135 = OpLoad %21 
                                Private f32* %136 = OpAccessChain %70 %27 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %135 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %70 %27 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %143 = OpAccessChain %46 %142 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %141 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %70 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %148 %103 
                                Private f32* %150 = OpAccessChain %70 %27 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %70 %27 
                                         f32 %152 = OpLoad %151 
                                         f32 %154 = OpExtInst %1 37 %152 %153 
                                Private f32* %155 = OpAccessChain %70 %27 
                                                      OpStore %155 %154 
                                       f32_3 %157 = OpLoad %85 
                                       f32_4 %158 = OpLoad %70 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                                      OpStore %156 %163 
                                Uniform f32* %165 = OpAccessChain %46 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFAdd %166 %167 
                                Private f32* %169 = OpAccessChain %31 %27 
                                                      OpStore %169 %168 
                                         f32 %171 = OpLoad %21 
                                Private f32* %172 = OpAccessChain %31 %27 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %171 %173 
                                         f32 %175 = OpFAdd %174 %119 
                                Private f32* %176 = OpAccessChain %170 %27 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %156 
                                       f32_3 %178 = OpLoad %170 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                                      OpStore %156 %180 
                                Private f32* %182 = OpAccessChain %9 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %46 %184 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %183 %187 
                                Private f32* %189 = OpAccessChain %92 %27 
                                                      OpStore %189 %188 
                                Private f32* %193 = OpAccessChain %92 %27 
                                         f32 %194 = OpLoad %193 
                                        bool %195 = OpFOrdLessThan %194 %76 
                                                      OpStore %192 %195 
                                        bool %196 = OpLoad %192 
                                         i32 %198 = OpSelect %196 %197 %48 
                                         i32 %200 = OpIMul %198 %199 
                                        bool %201 = OpINotEqual %200 %48 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                       f32_3 %207 = OpLoad %206 
                                       f32_3 %208 = OpFNegate %207 
                              Uniform f32_3* %210 = OpAccessChain %46 %197 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFAdd %208 %211 
                                                      OpStore %170 %212 
                                Uniform f32* %214 = OpAccessChain %46 %213 %48 %49 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %70 %27 
                                                      OpStore %216 %215 
                                Uniform f32* %217 = OpAccessChain %46 %213 %197 %49 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %70 %34 
                                                      OpStore %219 %218 
                                Uniform f32* %221 = OpAccessChain %46 %213 %220 %49 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %70 %49 
                                                      OpStore %223 %222 
                                       f32_3 %224 = OpLoad %170 
                                       f32_4 %225 = OpLoad %70 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                         f32 %227 = OpDot %224 %226 
                                Private f32* %228 = OpAccessChain %170 %27 
                                                      OpStore %228 %227 
                                       f32_3 %229 = OpLoad %206 
                              Uniform f32_4* %232 = OpAccessChain %46 %230 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFNegate %234 
                                       f32_3 %236 = OpFAdd %229 %235 
                                                      OpStore %31 %236 
                                       f32_3 %237 = OpLoad %31 
                                       f32_3 %238 = OpLoad %31 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %31 %27 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %31 %27 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 31 %242 
                                Private f32* %244 = OpAccessChain %31 %27 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %170 %27 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                Private f32* %248 = OpAccessChain %31 %27 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %31 %27 
                                                      OpStore %251 %250 
                                Uniform f32* %252 = OpAccessChain %46 %230 %181 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %31 %27 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %170 %27 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %170 %27 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %170 %27 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %46 %263 %49 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %46 %263 %181 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %170 %27 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %170 %27 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %76 %119 
                                Private f32* %274 = OpAccessChain %170 %27 
                                                      OpStore %274 %273 
                                Uniform f32* %277 = OpAccessChain %46 %276 %27 
                                         f32 %278 = OpLoad %277 
                                        bool %279 = OpFOrdEqual %278 %119 
                                                      OpStore %275 %279 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %282 
                                             %281 = OpLabel 
                                        bool %283 = OpLoad %275 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %285 
                                             %284 = OpLabel 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %390 
                                             %287 = OpLabel 
                                Uniform f32* %290 = OpAccessChain %46 %276 %34 
                                         f32 %291 = OpLoad %290 
                                        bool %292 = OpFOrdEqual %291 %119 
                                                      OpStore %289 %292 
                                       f32_3 %293 = OpLoad %206 
                                       f32_3 %294 = OpVectorShuffle %293 %293 1 1 1 
                              Uniform f32_4* %296 = OpAccessChain %46 %295 %197 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                              Uniform f32_4* %302 = OpAccessChain %46 %295 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpLoad %206 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %70 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                       f32_4 %311 = OpLoad %70 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %70 %312 
                              Uniform f32_4* %313 = OpAccessChain %46 %295 %220 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpLoad %206 
                                       f32_3 %317 = OpVectorShuffle %316 %316 2 2 2 
                                       f32_3 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %70 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %70 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %70 %323 
                                       f32_4 %324 = OpLoad %70 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %46 %295 %263 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                       f32_4 %330 = OpLoad %70 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %70 %331 
                                        bool %334 = OpLoad %289 
                                                      OpSelectionMerge %336 None 
                                                      OpBranchConditional %334 %335 %339 
                                             %335 = OpLabel 
                                       f32_4 %337 = OpLoad %70 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                                      OpStore %333 %338 
                                                      OpBranch %336 
                                             %339 = OpLabel 
                                       f32_3 %340 = OpLoad %206 
                                                      OpStore %333 %340 
                                                      OpBranch %336 
                                             %336 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %70 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %70 %343 
                                       f32_4 %344 = OpLoad %70 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_3* %347 = OpAccessChain %46 %346 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpFNegate %348 
                                       f32_3 %350 = OpFAdd %345 %349 
                                       f32_4 %351 = OpLoad %70 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %70 %352 
                                       f32_4 %353 = OpLoad %70 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %46 %355 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpFMul %354 %357 
                                       f32_4 %359 = OpLoad %70 
                                       f32_4 %360 = OpVectorShuffle %359 %358 0 4 5 6 
                                                      OpStore %70 %360 
                                Private f32* %363 = OpAccessChain %70 %34 
                                         f32 %364 = OpLoad %363 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %103 
                                Private f32* %368 = OpAccessChain %362 %27 
                                                      OpStore %368 %367 
                                Uniform f32* %370 = OpAccessChain %46 %276 %49 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %103 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                Private f32* %376 = OpAccessChain %362 %27 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpExtInst %1 40 %375 %377 
                                Private f32* %379 = OpAccessChain %70 %27 
                                                      OpStore %379 %378 
                  read_only Texture3DSampled %384 = OpLoad %383 
                                       f32_4 %385 = OpLoad %70 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 2 3 
                                       f32_4 %387 = OpImageSampleImplicitLod %384 %386 
                                                      OpStore %70 %387 
                                       f32_4 %389 = OpLoad %70 
                                                      OpStore %388 %389 
                                                      OpBranch %288 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %388 %27 
                                                      OpStore %391 %119 
                                Private f32* %392 = OpAccessChain %388 %34 
                                                      OpStore %392 %119 
                                Private f32* %393 = OpAccessChain %388 %49 
                                                      OpStore %393 %119 
                                Private f32* %394 = OpAccessChain %388 %181 
                                                      OpStore %394 %119 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                       f32_4 %395 = OpLoad %388 
                              Uniform f32_4* %396 = OpAccessChain %46 %220 
                                       f32_4 %397 = OpLoad %396 
                                         f32 %398 = OpDot %395 %397 
                                Private f32* %399 = OpAccessChain %92 %27 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %92 %27 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpExtInst %1 43 %401 %76 %119 
                                Private f32* %403 = OpAccessChain %92 %27 
                                                      OpStore %403 %402 
                                       f32_4 %405 = OpLoad %404 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpLoad %404 
                                       f32_2 %408 = OpVectorShuffle %407 %407 3 3 
                                       f32_2 %409 = OpFDiv %406 %408 
                                                      OpStore %362 %409 
                  read_only Texture2DSampled %412 = OpLoad %411 
                                       f32_2 %413 = OpLoad %362 
                                       f32_4 %414 = OpImageSampleImplicitLod %412 %413 
                                         f32 %415 = OpCompositeExtract %414 0 
                                                      OpStore %410 %415 
                                Private f32* %417 = OpAccessChain %170 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpLoad %410 
                                         f32 %420 = OpFAdd %418 %419 
                                Private f32* %421 = OpAccessChain %416 %27 
                                                      OpStore %421 %420 
                                Private f32* %422 = OpAccessChain %416 %27 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 43 %423 %76 %119 
                                Private f32* %425 = OpAccessChain %416 %27 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %416 %27 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %92 %27 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 37 %427 %429 
                                Private f32* %431 = OpAccessChain %92 %27 
                                                      OpStore %431 %430 
                                        bool %434 = OpLoad %275 
                                                      OpSelectionMerge %436 None 
                                                      OpBranchConditional %434 %435 %439 
                                             %435 = OpLabel 
                                Private f32* %437 = OpAccessChain %92 %27 
                                         f32 %438 = OpLoad %437 
                                                      OpStore %433 %438 
                                                      OpBranch %436 
                                             %439 = OpLabel 
                                Private f32* %440 = OpAccessChain %416 %27 
                                         f32 %441 = OpLoad %440 
                                                      OpStore %433 %441 
                                                      OpBranch %436 
                                             %436 = OpLabel 
                                         f32 %442 = OpLoad %433 
                                Private f32* %443 = OpAccessChain %92 %27 
                                                      OpStore %443 %442 
                                       f32_3 %444 = OpLoad %156 
                              Uniform f32_4* %446 = OpAccessChain %46 %445 
                                       f32_4 %447 = OpLoad %446 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFMul %444 %448 
                                                      OpStore %416 %449 
                                       f32_3 %450 = OpLoad %92 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                                       f32_3 %452 = OpLoad %416 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %92 %453 
                                       f32_3 %456 = OpLoad %156 
                                       f32_3 %458 = OpLoad %457 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_3 %460 = OpLoad %92 
                                       f32_3 %461 = OpFAdd %459 %460 
                                       f32_4 %462 = OpLoad %455 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %455 %463 
                                Private f32* %464 = OpAccessChain %9 %181 
                                         f32 %465 = OpLoad %464 
                                 Output f32* %467 = OpAccessChain %455 %181 
                                                      OpStore %467 %465 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat15 * 0.5;
    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat5;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat4.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = u_xlat4.x * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat4.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat10 = u_xlat0.w + (-_Cutoff);
    u_xlatb10 = u_xlat10<0.0;
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 318
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %180 %308 %311 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %311 Location 311 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 8 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 9 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 7 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                                             %164 = OpTypePointer Uniform %6 
                              Private f32_4* %168 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         u32 %172 = OpConstant 3 
                                       f32_2 %176 = OpConstantComposite %170 %170 
                               Output f32_4* %180 = OpVariable Output 
                              Private f32_4* %205 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_4 %242 = OpConstantComposite %241 %241 %241 %241 
                                         i32 %247 = OpConstant 4 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_4 %252 = OpConstantComposite %251 %251 %251 %251 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_4 %261 = OpConstantComposite %260 %260 %260 %260 
                                         i32 %268 = OpConstant 5 
                               Output f32_3* %308 = OpVariable Output 
                               Output f32_4* %311 = OpVariable Output 
                                             %312 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                Private f32* %162 = OpAccessChain %47 %93 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %165 = OpAccessChain %23 %31 %124 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                                      OpStore %140 %167 
                                         f32 %169 = OpLoad %140 
                                         f32 %171 = OpFMul %169 %170 
                                Private f32* %173 = OpAccessChain %168 %172 
                                                      OpStore %173 %171 
                                       f32_4 %174 = OpLoad %47 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %177 = OpFMul %175 %176 
                                       f32_4 %178 = OpLoad %168 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 1 5 3 
                                                      OpStore %168 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
                                       f32_4 %183 = OpLoad %180 
                                       f32_4 %184 = OpVectorShuffle %183 %182 0 1 4 5 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %168 
                                       f32_2 %186 = OpVectorShuffle %185 %185 2 2 
                                       f32_4 %187 = OpLoad %168 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 3 
                                       f32_2 %189 = OpFAdd %186 %188 
                                       f32_4 %190 = OpLoad %180 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %180 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpVectorShuffle %192 %192 1 1 1 1 
                                       f32_4 %194 = OpFNegate %193 
                              Uniform f32_4* %195 = OpAccessChain %23 %39 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpFAdd %194 %196 
                                                      OpStore %47 %197 
                                       f32_4 %198 = OpLoad %65 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 1 1 1 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpFMul %199 %200 
                                                      OpStore %168 %201 
                                       f32_4 %202 = OpLoad %47 
                                       f32_4 %203 = OpLoad %47 
                                       f32_4 %204 = OpFMul %202 %203 
                                                      OpStore %47 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpVectorShuffle %206 %206 0 0 0 0 
                                       f32_4 %208 = OpFNegate %207 
                              Uniform f32_4* %209 = OpAccessChain %23 %26 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpFAdd %208 %210 
                                                      OpStore %205 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpVectorShuffle %212 %212 2 2 2 2 
                                       f32_4 %214 = OpFNegate %213 
                              Uniform f32_4* %215 = OpAccessChain %23 %49 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFAdd %214 %216 
                                                      OpStore %9 %217 
                                       f32_4 %218 = OpLoad %205 
                                       f32_4 %219 = OpLoad %65 
                                       f32_4 %220 = OpVectorShuffle %219 %219 0 0 0 0 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %168 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %168 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpVectorShuffle %225 %225 2 2 2 2 
                                       f32_4 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %168 
                                       f32_4 %229 = OpFAdd %227 %228 
                                                      OpStore %65 %229 
                                       f32_4 %230 = OpLoad %205 
                                       f32_4 %231 = OpLoad %205 
                                       f32_4 %232 = OpFMul %230 %231 
                                       f32_4 %233 = OpLoad %47 
                                       f32_4 %234 = OpFAdd %232 %233 
                                                      OpStore %47 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpLoad %9 
                                       f32_4 %237 = OpFMul %235 %236 
                                       f32_4 %238 = OpLoad %47 
                                       f32_4 %239 = OpFAdd %237 %238 
                                                      OpStore %9 %239 
                                       f32_4 %240 = OpLoad %9 
                                       f32_4 %243 = OpExtInst %1 40 %240 %242 
                                                      OpStore %9 %243 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpExtInst %1 32 %244 
                                                      OpStore %47 %245 
                                       f32_4 %246 = OpLoad %9 
                              Uniform f32_4* %248 = OpAccessChain %23 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpFMul %246 %249 
                                       f32_4 %253 = OpFAdd %250 %252 
                                                      OpStore %9 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpFDiv %252 %254 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %47 
                                       f32_4 %257 = OpLoad %65 
                                       f32_4 %258 = OpFMul %256 %257 
                                                      OpStore %47 %258 
                                       f32_4 %259 = OpLoad %47 
                                       f32_4 %262 = OpExtInst %1 40 %259 %261 
                                                      OpStore %47 %262 
                                       f32_4 %263 = OpLoad %9 
                                       f32_4 %264 = OpLoad %47 
                                       f32_4 %265 = OpFMul %263 %264 
                                                      OpStore %9 %265 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 1 1 1 
                              Uniform f32_4* %269 = OpAccessChain %23 %268 %26 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFMul %267 %271 
                                       f32_4 %273 = OpLoad %47 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %47 %274 
                              Uniform f32_4* %275 = OpAccessChain %23 %268 %31 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_4 %278 = OpLoad %9 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %47 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %47 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %47 %285 
                              Uniform f32_4* %286 = OpAccessChain %23 %268 %39 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %9 
                                       f32_3 %290 = OpVectorShuffle %289 %289 2 2 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %47 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %9 %296 
                              Uniform f32_4* %297 = OpAccessChain %23 %268 %49 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %9 
                                       f32_3 %301 = OpVectorShuffle %300 %300 3 3 3 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpFAdd %302 %304 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                                      OpStore %9 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                                      OpStore %308 %310 
                                                      OpStore %311 %261 
                                 Output f32* %313 = OpAccessChain %97 %31 %93 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                 Output f32* %316 = OpAccessChain %97 %31 %93 
                                                      OpStore %316 %315 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %221 %334 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 RelaxedPrecision 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 RelaxedPrecision 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpMemberDecorate %43 11 RelaxedPrecision 
                                                      OpMemberDecorate %43 11 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %214 SpecId 214 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %301 DescriptorSet 301 
                                                      OpDecorate %301 Binding 301 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %7 %7 %7 %42 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 0 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 8 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %94 %95 %96 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %107 = OpConstant 9 
                                Private f32* %112 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 7 
                                         f32 %152 = OpConstant 3.674022E-40 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %163 = OpConstant 10 
                                         f32 %166 = OpConstant 3.674022E-40 
                              Private f32_4* %169 = OpVariable Private 
                                         u32 %180 = OpConstant 3 
                                         i32 %183 = OpConstant 11 
                                             %189 = OpTypeBool 
                                             %190 = OpTypePointer Private %189 
                               Private bool* %191 = OpVariable Private 
                                         i32 %196 = OpConstant 1 
                                         i32 %198 = OpConstant -1 
                                         i32 %204 = OpConstant 2 
                                        bool %208 = OpConstantFalse 
                                        bool %214 = OpSpecConstantFalse 
                                             %220 = OpTypePointer Input %29 
                                Input f32_3* %221 = OpVariable Input 
                                         i32 %224 = OpConstant 3 
                                             %225 = OpTypePointer Uniform %7 
                                             %251 = OpTypePointer Function %29 
                                         i32 %264 = OpConstant 5 
                                             %265 = OpTypePointer Uniform %29 
                                         i32 %274 = OpConstant 4 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %288 = OpConstant 3.674022E-40 
                                             %298 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %299 = OpTypeSampledImage %298 
                                             %300 = OpTypePointer UniformConstant %299 
 UniformConstant read_only Texture3DSampled* %301 = OpVariable UniformConstant 
                              Private f32_4* %306 = OpVariable Private 
                              Private f32_3* %322 = OpVariable Private 
                                         i32 %324 = OpConstant 6 
                                             %333 = OpTypePointer Output %7 
                               Output f32_4* %334 = OpVariable Output 
                                Input f32_3* %336 = OpVariable Input 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %252 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %50 = OpAccessChain %45 %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %31 %27 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %31 %27 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpExtInst %1 13 %59 
                                 Private f32* %61 = OpAccessChain %31 %27 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                          f32 %63 = OpLoad %62 
                                 Uniform f32* %65 = OpAccessChain %45 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFMul %63 %66 
                                 Private f32* %68 = OpAccessChain %31 %27 
                                                      OpStore %68 %67 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_2 %78 = OpLoad %70 
                                        f32_4 %79 = OpLoad %33 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFAdd %78 %80 
                                        f32_3 %82 = OpLoad %31 
                                        f32_3 %83 = OpVectorShuffle %82 %81 3 4 2 
                                                      OpStore %31 %83 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %84 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %98 = OpDot %93 %97 
                                 Private f32* %99 = OpAccessChain %91 %27 
                                                      OpStore %99 %98 
                                Private f32* %100 = OpAccessChain %91 %27 
                                         f32 %101 = OpLoad %100 
                                         f32 %103 = OpFMul %101 %102 
                                Private f32* %104 = OpAccessChain %91 %27 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %91 %27 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %108 = OpAccessChain %45 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                Private f32* %111 = OpAccessChain %70 %27 
                                                      OpStore %111 %110 
                                  Input f32* %113 = OpAccessChain %33 %34 
                                         f32 %114 = OpLoad %113 
                                         f32 %116 = OpFAdd %114 %115 
                                                      OpStore %112 %116 
                                         f32 %117 = OpLoad %112 
                                         f32 %119 = OpExtInst %1 43 %117 %76 %118 
                                                      OpStore %112 %119 
                                         f32 %120 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %112 %122 
                                         f32 %123 = OpLoad %112 
                                         f32 %124 = OpExtInst %1 37 %123 %118 
                                                      OpStore %112 %124 
                                         f32 %125 = OpLoad %112 
                                Private f32* %126 = OpAccessChain %70 %27 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFNegate %127 
                                         f32 %129 = OpFMul %125 %128 
                                Private f32* %130 = OpAccessChain %70 %27 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFAdd %129 %131 
                                Private f32* %133 = OpAccessChain %70 %27 
                                                      OpStore %133 %132 
                                         f32 %134 = OpLoad %21 
                                Private f32* %135 = OpAccessChain %70 %27 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFMul %134 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                         f32 %140 = OpLoad %139 
                                Uniform f32* %142 = OpAccessChain %45 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %140 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %147 %102 
                                Private f32* %149 = OpAccessChain %70 %27 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %70 %27 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpExtInst %1 37 %151 %152 
                                Private f32* %154 = OpAccessChain %70 %27 
                                                      OpStore %154 %153 
                                       f32_3 %156 = OpLoad %84 
                                       f32_2 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 0 0 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                                      OpStore %155 %162 
                                Uniform f32* %164 = OpAccessChain %45 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %31 %27 
                                                      OpStore %168 %167 
                                         f32 %170 = OpLoad %21 
                                Private f32* %171 = OpAccessChain %31 %27 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpFAdd %173 %118 
                                Private f32* %175 = OpAccessChain %169 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %155 
                                       f32_4 %177 = OpLoad %169 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 0 0 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %155 %179 
                                Private f32* %181 = OpAccessChain %9 %180 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %45 %183 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFNegate %185 
                                         f32 %187 = OpFAdd %182 %186 
                                Private f32* %188 = OpAccessChain %91 %27 
                                                      OpStore %188 %187 
                                Private f32* %192 = OpAccessChain %91 %27 
                                         f32 %193 = OpLoad %192 
                                        bool %194 = OpFOrdLessThan %193 %76 
                                                      OpStore %191 %194 
                                        bool %195 = OpLoad %191 
                                         i32 %197 = OpSelect %195 %196 %47 
                                         i32 %199 = OpIMul %197 %198 
                                        bool %200 = OpINotEqual %199 %47 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %202 
                                             %201 = OpLabel 
                                                      OpKill
                                             %202 = OpLabel 
                                Uniform f32* %205 = OpAccessChain %45 %204 %27 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdEqual %206 %118 
                                                      OpStore %191 %207 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %210 
                                             %209 = OpLabel 
                                        bool %211 = OpLoad %191 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %213 
                                             %212 = OpLabel 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %308 
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %45 %204 %34 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %118 
                                                      OpStore %191 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %45 %224 %196 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %223 %228 
                                                      OpStore %31 %229 
                              Uniform f32_4* %230 = OpAccessChain %45 %224 %47 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %31 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %31 %237 
                              Uniform f32_4* %238 = OpAccessChain %45 %224 %204 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpLoad %221 
                                       f32_3 %242 = OpVectorShuffle %241 %241 2 2 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %244 = OpLoad %31 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %31 %245 
                                       f32_3 %246 = OpLoad %31 
                              Uniform f32_4* %247 = OpAccessChain %45 %224 %224 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %246 %249 
                                                      OpStore %31 %250 
                                        bool %253 = OpLoad %191 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %257 
                                             %254 = OpLabel 
                                       f32_3 %256 = OpLoad %31 
                                                      OpStore %252 %256 
                                                      OpBranch %255 
                                             %257 = OpLabel 
                                       f32_3 %258 = OpLoad %221 
                                                      OpStore %252 %258 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                       f32_3 %259 = OpLoad %252 
                                       f32_4 %260 = OpLoad %169 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %169 %261 
                                       f32_4 %262 = OpLoad %169 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_3* %266 = OpAccessChain %45 %264 
                                       f32_3 %267 = OpLoad %266 
                                       f32_3 %268 = OpFNegate %267 
                                       f32_3 %269 = OpFAdd %263 %268 
                                       f32_4 %270 = OpLoad %169 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %169 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_3* %275 = OpAccessChain %45 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_4 %278 = OpLoad %169 
                                       f32_4 %279 = OpVectorShuffle %278 %277 0 4 5 6 
                                                      OpStore %169 %279 
                                Private f32* %280 = OpAccessChain %169 %34 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %102 
                                Private f32* %285 = OpAccessChain %31 %27 
                                                      OpStore %285 %284 
                                Uniform f32* %286 = OpAccessChain %45 %204 %48 
                                         f32 %287 = OpLoad %286 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %102 
                                Private f32* %291 = OpAccessChain %70 %27 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %31 %27 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %70 %27 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %293 %295 
                                Private f32* %297 = OpAccessChain %169 %27 
                                                      OpStore %297 %296 
                  read_only Texture3DSampled %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %169 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 2 3 
                                       f32_4 %305 = OpImageSampleImplicitLod %302 %304 
                                                      OpStore %169 %305 
                                       f32_4 %307 = OpLoad %169 
                                                      OpStore %306 %307 
                                                      OpBranch %216 
                                             %308 = OpLabel 
                                Private f32* %309 = OpAccessChain %306 %27 
                                                      OpStore %309 %118 
                                Private f32* %310 = OpAccessChain %306 %34 
                                                      OpStore %310 %118 
                                Private f32* %311 = OpAccessChain %306 %48 
                                                      OpStore %311 %118 
                                Private f32* %312 = OpAccessChain %306 %180 
                                                      OpStore %312 %118 
                                                      OpBranch %216 
                                             %216 = OpLabel 
                                       f32_4 %313 = OpLoad %306 
                              Uniform f32_4* %314 = OpAccessChain %45 %196 
                                       f32_4 %315 = OpLoad %314 
                                         f32 %316 = OpDot %313 %315 
                                Private f32* %317 = OpAccessChain %91 %27 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %91 %27 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpExtInst %1 43 %319 %76 %118 
                                Private f32* %321 = OpAccessChain %91 %27 
                                                      OpStore %321 %320 
                                       f32_3 %323 = OpLoad %155 
                              Uniform f32_4* %325 = OpAccessChain %45 %324 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFMul %323 %327 
                                                      OpStore %322 %328 
                                       f32_3 %329 = OpLoad %91 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpLoad %322 
                                       f32_3 %332 = OpFMul %330 %331 
                                                      OpStore %91 %332 
                                       f32_3 %335 = OpLoad %155 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %91 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %334 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %334 %342 
                                Private f32* %343 = OpAccessChain %9 %180 
                                         f32 %344 = OpLoad %343 
                                 Output f32* %346 = OpAccessChain %334 %180 
                                                      OpStore %346 %344 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat18 * 0.5;
    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat1);
    u_xlat3.y = dot(unity_SHBg, u_xlat1);
    u_xlat3.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat5;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat4.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = u_xlat4.x * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat4.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat10 = u_xlat0.w + (-_Cutoff);
    u_xlatb10 = u_xlat10<0.0;
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 434
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %180 %424 %427 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %424 Location 424 
                                                      OpDecorate %427 Location 427 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 16 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 14 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                                             %164 = OpTypePointer Uniform %6 
                              Private f32_4* %168 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         u32 %172 = OpConstant 3 
                                       f32_2 %176 = OpConstantComposite %170 %170 
                               Output f32_4* %180 = OpVariable Output 
                                             %192 = OpTypePointer Private %53 
                              Private f32_3* %193 = OpVariable Private 
                              Private f32_4* %210 = OpVariable Private 
                              Private f32_3* %216 = OpVariable Private 
                                         i32 %217 = OpConstant 9 
                                         i32 %223 = OpConstant 10 
                                         i32 %229 = OpConstant 11 
                                         i32 %235 = OpConstant 12 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         i32 %246 = OpConstant 6 
                                         i32 %252 = OpConstant 7 
                                         i32 %258 = OpConstant 8 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_3 %290 = OpConstantComposite %289 %289 %289 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_3 %293 = OpConstantComposite %292 %292 %292 
                              Private f32_4* %308 = OpVariable Private 
                              Private f32_4* %316 = OpVariable Private 
                                         f32 %352 = OpConstant 3.674022E-40 
                                       f32_4 %353 = OpConstantComposite %352 %352 %352 %352 
                                         i32 %358 = OpConstant 4 
                                       f32_4 %362 = OpConstantComposite %244 %244 %244 %244 
                                       f32_4 %370 = OpConstantComposite %268 %268 %268 %268 
                                         i32 %377 = OpConstant 5 
                               Output f32_3* %424 = OpVariable Output 
                               Output f32_4* %427 = OpVariable Output 
                                             %428 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                Private f32* %162 = OpAccessChain %47 %93 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %165 = OpAccessChain %23 %31 %124 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                                      OpStore %140 %167 
                                         f32 %169 = OpLoad %140 
                                         f32 %171 = OpFMul %169 %170 
                                Private f32* %173 = OpAccessChain %168 %172 
                                                      OpStore %173 %171 
                                       f32_4 %174 = OpLoad %47 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %177 = OpFMul %175 %176 
                                       f32_4 %178 = OpLoad %168 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 1 5 3 
                                                      OpStore %168 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
                                       f32_4 %183 = OpLoad %180 
                                       f32_4 %184 = OpVectorShuffle %183 %182 0 1 4 5 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %168 
                                       f32_2 %186 = OpVectorShuffle %185 %185 2 2 
                                       f32_4 %187 = OpLoad %168 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 3 
                                       f32_2 %189 = OpFAdd %186 %188 
                                       f32_4 %190 = OpLoad %180 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %180 %191 
                                Private f32* %194 = OpAccessChain %65 %93 
                                         f32 %195 = OpLoad %194 
                                Private f32* %196 = OpAccessChain %65 %93 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %195 %197 
                                Private f32* %199 = OpAccessChain %193 %124 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %65 %124 
                                         f32 %201 = OpLoad %200 
                                Private f32* %202 = OpAccessChain %65 %124 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFMul %201 %203 
                                Private f32* %205 = OpAccessChain %193 %124 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                         f32 %208 = OpFAdd %204 %207 
                                Private f32* %209 = OpAccessChain %193 %124 
                                                      OpStore %209 %208 
                                       f32_4 %211 = OpLoad %65 
                                       f32_4 %212 = OpVectorShuffle %211 %211 1 2 2 0 
                                       f32_4 %213 = OpLoad %65 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                                      OpStore %210 %215 
                              Uniform f32_4* %218 = OpAccessChain %23 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %210 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %216 %124 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %23 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %210 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %216 %93 
                                                      OpStore %228 %227 
                              Uniform f32_4* %230 = OpAccessChain %23 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %210 
                                         f32 %233 = OpDot %231 %232 
                                Private f32* %234 = OpAccessChain %216 %138 
                                                      OpStore %234 %233 
                              Uniform f32_4* %236 = OpAccessChain %23 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpLoad %193 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 0 0 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %216 
                                       f32_3 %243 = OpFAdd %241 %242 
                                                      OpStore %193 %243 
                                Private f32* %245 = OpAccessChain %65 %172 
                                                      OpStore %245 %244 
                              Uniform f32_4* %247 = OpAccessChain %23 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %65 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %216 %124 
                                                      OpStore %251 %250 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %65 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %216 %93 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %23 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %65 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %216 %138 
                                                      OpStore %263 %262 
                                       f32_3 %264 = OpLoad %193 
                                       f32_3 %265 = OpLoad %216 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %193 %266 
                                       f32_3 %267 = OpLoad %193 
                                       f32_3 %270 = OpExtInst %1 40 %267 %269 
                                                      OpStore %193 %270 
                                       f32_3 %271 = OpLoad %193 
                                       f32_3 %272 = OpExtInst %1 30 %271 
                                       f32_4 %273 = OpLoad %168 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %168 %274 
                                       f32_4 %275 = OpLoad %168 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %168 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %168 %281 
                                       f32_4 %282 = OpLoad %168 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpExtInst %1 29 %283 
                                       f32_4 %285 = OpLoad %168 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %168 %286 
                                       f32_4 %287 = OpLoad %168 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %168 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %168 %296 
                                       f32_4 %297 = OpLoad %168 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpExtInst %1 40 %298 %269 
                                       f32_4 %300 = OpLoad %168 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %168 %301 
                                       f32_4 %302 = OpLoad %9 
                                       f32_4 %303 = OpVectorShuffle %302 %302 1 1 1 1 
                                       f32_4 %304 = OpFNegate %303 
                              Uniform f32_4* %305 = OpAccessChain %23 %39 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpFAdd %304 %306 
                                                      OpStore %47 %307 
                                       f32_4 %309 = OpLoad %65 
                                       f32_4 %310 = OpVectorShuffle %309 %309 1 1 1 1 
                                       f32_4 %311 = OpLoad %47 
                                       f32_4 %312 = OpFMul %310 %311 
                                                      OpStore %308 %312 
                                       f32_4 %313 = OpLoad %47 
                                       f32_4 %314 = OpLoad %47 
                                       f32_4 %315 = OpFMul %313 %314 
                                                      OpStore %47 %315 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpVectorShuffle %317 %317 0 0 0 0 
                                       f32_4 %319 = OpFNegate %318 
                              Uniform f32_4* %320 = OpAccessChain %23 %26 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpFAdd %319 %321 
                                                      OpStore %316 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_4 %324 = OpVectorShuffle %323 %323 2 2 2 2 
                                       f32_4 %325 = OpFNegate %324 
                              Uniform f32_4* %326 = OpAccessChain %23 %49 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpFAdd %325 %327 
                                                      OpStore %9 %328 
                                       f32_4 %329 = OpLoad %316 
                                       f32_4 %330 = OpLoad %65 
                                       f32_4 %331 = OpVectorShuffle %330 %330 0 0 0 0 
                                       f32_4 %332 = OpFMul %329 %331 
                                       f32_4 %333 = OpLoad %308 
                                       f32_4 %334 = OpFAdd %332 %333 
                                                      OpStore %308 %334 
                                       f32_4 %335 = OpLoad %9 
                                       f32_4 %336 = OpLoad %65 
                                       f32_4 %337 = OpVectorShuffle %336 %336 2 2 2 2 
                                       f32_4 %338 = OpFMul %335 %337 
                                       f32_4 %339 = OpLoad %308 
                                       f32_4 %340 = OpFAdd %338 %339 
                                                      OpStore %65 %340 
                                       f32_4 %341 = OpLoad %316 
                                       f32_4 %342 = OpLoad %316 
                                       f32_4 %343 = OpFMul %341 %342 
                                       f32_4 %344 = OpLoad %47 
                                       f32_4 %345 = OpFAdd %343 %344 
                                                      OpStore %47 %345 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpFMul %346 %347 
                                       f32_4 %349 = OpLoad %47 
                                       f32_4 %350 = OpFAdd %348 %349 
                                                      OpStore %9 %350 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %354 = OpExtInst %1 40 %351 %353 
                                                      OpStore %9 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_4 %356 = OpExtInst %1 32 %355 
                                                      OpStore %47 %356 
                                       f32_4 %357 = OpLoad %9 
                              Uniform f32_4* %359 = OpAccessChain %23 %358 
                                       f32_4 %360 = OpLoad %359 
                                       f32_4 %361 = OpFMul %357 %360 
                                       f32_4 %363 = OpFAdd %361 %362 
                                                      OpStore %9 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpFDiv %362 %364 
                                                      OpStore %9 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_4 %367 = OpLoad %65 
                                       f32_4 %368 = OpFMul %366 %367 
                                                      OpStore %47 %368 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %371 = OpExtInst %1 40 %369 %370 
                                                      OpStore %47 %371 
                                       f32_4 %372 = OpLoad %9 
                                       f32_4 %373 = OpLoad %47 
                                       f32_4 %374 = OpFMul %372 %373 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %9 
                                       f32_3 %376 = OpVectorShuffle %375 %375 1 1 1 
                              Uniform f32_4* %378 = OpAccessChain %23 %377 %26 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %376 %380 
                                       f32_4 %382 = OpLoad %65 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %65 %383 
                              Uniform f32_4* %384 = OpAccessChain %23 %377 %31 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 0 0 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %65 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                       f32_4 %393 = OpLoad %65 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                                      OpStore %65 %394 
                              Uniform f32_4* %395 = OpAccessChain %23 %377 %39 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 2 2 2 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %65 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                              Uniform f32_4* %406 = OpAccessChain %23 %377 %49 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_3 %410 = OpVectorShuffle %409 %409 3 3 3 
                                       f32_3 %411 = OpFMul %408 %410 
                                       f32_4 %412 = OpLoad %9 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %411 %413 
                                       f32_4 %415 = OpLoad %9 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 6 3 
                                                      OpStore %9 %416 
                                       f32_4 %417 = OpLoad %9 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %168 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpFAdd %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %9 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                                      OpStore %424 %426 
                                                      OpStore %427 %370 
                                 Output f32* %429 = OpAccessChain %97 %31 %93 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFNegate %430 
                                 Output f32* %432 = OpAccessChain %97 %31 %93 
                                                      OpStore %432 %431 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %221 %334 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 RelaxedPrecision 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 RelaxedPrecision 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpMemberDecorate %43 11 RelaxedPrecision 
                                                      OpMemberDecorate %43 11 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %214 SpecId 214 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %301 DescriptorSet 301 
                                                      OpDecorate %301 Binding 301 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %336 Location 336 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %7 %7 %7 %42 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 0 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 8 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %94 %95 %96 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %107 = OpConstant 9 
                                Private f32* %112 = OpVariable Private 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %141 = OpConstant 7 
                                         f32 %152 = OpConstant 3.674022E-40 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %163 = OpConstant 10 
                                         f32 %166 = OpConstant 3.674022E-40 
                              Private f32_4* %169 = OpVariable Private 
                                         u32 %180 = OpConstant 3 
                                         i32 %183 = OpConstant 11 
                                             %189 = OpTypeBool 
                                             %190 = OpTypePointer Private %189 
                               Private bool* %191 = OpVariable Private 
                                         i32 %196 = OpConstant 1 
                                         i32 %198 = OpConstant -1 
                                         i32 %204 = OpConstant 2 
                                        bool %208 = OpConstantFalse 
                                        bool %214 = OpSpecConstantFalse 
                                             %220 = OpTypePointer Input %29 
                                Input f32_3* %221 = OpVariable Input 
                                         i32 %224 = OpConstant 3 
                                             %225 = OpTypePointer Uniform %7 
                                             %251 = OpTypePointer Function %29 
                                         i32 %264 = OpConstant 5 
                                             %265 = OpTypePointer Uniform %29 
                                         i32 %274 = OpConstant 4 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %288 = OpConstant 3.674022E-40 
                                             %298 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %299 = OpTypeSampledImage %298 
                                             %300 = OpTypePointer UniformConstant %299 
 UniformConstant read_only Texture3DSampled* %301 = OpVariable UniformConstant 
                              Private f32_4* %306 = OpVariable Private 
                              Private f32_3* %322 = OpVariable Private 
                                         i32 %324 = OpConstant 6 
                                             %333 = OpTypePointer Output %7 
                               Output f32_4* %334 = OpVariable Output 
                                Input f32_3* %336 = OpVariable Input 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %252 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %50 = OpAccessChain %45 %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %31 %27 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %31 %27 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpExtInst %1 13 %59 
                                 Private f32* %61 = OpAccessChain %31 %27 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                          f32 %63 = OpLoad %62 
                                 Uniform f32* %65 = OpAccessChain %45 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFMul %63 %66 
                                 Private f32* %68 = OpAccessChain %31 %27 
                                                      OpStore %68 %67 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_2 %78 = OpLoad %70 
                                        f32_4 %79 = OpLoad %33 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFAdd %78 %80 
                                        f32_3 %82 = OpLoad %31 
                                        f32_3 %83 = OpVectorShuffle %82 %81 3 4 2 
                                                      OpStore %31 %83 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %84 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %98 = OpDot %93 %97 
                                 Private f32* %99 = OpAccessChain %91 %27 
                                                      OpStore %99 %98 
                                Private f32* %100 = OpAccessChain %91 %27 
                                         f32 %101 = OpLoad %100 
                                         f32 %103 = OpFMul %101 %102 
                                Private f32* %104 = OpAccessChain %91 %27 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %91 %27 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %108 = OpAccessChain %45 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                Private f32* %111 = OpAccessChain %70 %27 
                                                      OpStore %111 %110 
                                  Input f32* %113 = OpAccessChain %33 %34 
                                         f32 %114 = OpLoad %113 
                                         f32 %116 = OpFAdd %114 %115 
                                                      OpStore %112 %116 
                                         f32 %117 = OpLoad %112 
                                         f32 %119 = OpExtInst %1 43 %117 %76 %118 
                                                      OpStore %112 %119 
                                         f32 %120 = OpLoad %112 
                                         f32 %122 = OpFMul %120 %121 
                                                      OpStore %112 %122 
                                         f32 %123 = OpLoad %112 
                                         f32 %124 = OpExtInst %1 37 %123 %118 
                                                      OpStore %112 %124 
                                         f32 %125 = OpLoad %112 
                                Private f32* %126 = OpAccessChain %70 %27 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFNegate %127 
                                         f32 %129 = OpFMul %125 %128 
                                Private f32* %130 = OpAccessChain %70 %27 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFAdd %129 %131 
                                Private f32* %133 = OpAccessChain %70 %27 
                                                      OpStore %133 %132 
                                         f32 %134 = OpLoad %21 
                                Private f32* %135 = OpAccessChain %70 %27 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFMul %134 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                         f32 %140 = OpLoad %139 
                                Uniform f32* %142 = OpAccessChain %45 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %140 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %147 %102 
                                Private f32* %149 = OpAccessChain %70 %27 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %70 %27 
                                         f32 %151 = OpLoad %150 
                                         f32 %153 = OpExtInst %1 37 %151 %152 
                                Private f32* %154 = OpAccessChain %70 %27 
                                                      OpStore %154 %153 
                                       f32_3 %156 = OpLoad %84 
                                       f32_2 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 0 0 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %159 %161 
                                                      OpStore %155 %162 
                                Uniform f32* %164 = OpAccessChain %45 %163 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %31 %27 
                                                      OpStore %168 %167 
                                         f32 %170 = OpLoad %21 
                                Private f32* %171 = OpAccessChain %31 %27 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpFAdd %173 %118 
                                Private f32* %175 = OpAccessChain %169 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %155 
                                       f32_4 %177 = OpLoad %169 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 0 0 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %155 %179 
                                Private f32* %181 = OpAccessChain %9 %180 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %184 = OpAccessChain %45 %183 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFNegate %185 
                                         f32 %187 = OpFAdd %182 %186 
                                Private f32* %188 = OpAccessChain %91 %27 
                                                      OpStore %188 %187 
                                Private f32* %192 = OpAccessChain %91 %27 
                                         f32 %193 = OpLoad %192 
                                        bool %194 = OpFOrdLessThan %193 %76 
                                                      OpStore %191 %194 
                                        bool %195 = OpLoad %191 
                                         i32 %197 = OpSelect %195 %196 %47 
                                         i32 %199 = OpIMul %197 %198 
                                        bool %200 = OpINotEqual %199 %47 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %202 
                                             %201 = OpLabel 
                                                      OpKill
                                             %202 = OpLabel 
                                Uniform f32* %205 = OpAccessChain %45 %204 %27 
                                         f32 %206 = OpLoad %205 
                                        bool %207 = OpFOrdEqual %206 %118 
                                                      OpStore %191 %207 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %210 
                                             %209 = OpLabel 
                                        bool %211 = OpLoad %191 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %213 
                                             %212 = OpLabel 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %308 
                                             %215 = OpLabel 
                                Uniform f32* %217 = OpAccessChain %45 %204 %34 
                                         f32 %218 = OpLoad %217 
                                        bool %219 = OpFOrdEqual %218 %118 
                                                      OpStore %191 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %45 %224 %196 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %223 %228 
                                                      OpStore %31 %229 
                              Uniform f32_4* %230 = OpAccessChain %45 %224 %47 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %221 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %31 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %31 %237 
                              Uniform f32_4* %238 = OpAccessChain %45 %224 %204 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpLoad %221 
                                       f32_3 %242 = OpVectorShuffle %241 %241 2 2 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %244 = OpLoad %31 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %31 %245 
                                       f32_3 %246 = OpLoad %31 
                              Uniform f32_4* %247 = OpAccessChain %45 %224 %224 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %246 %249 
                                                      OpStore %31 %250 
                                        bool %253 = OpLoad %191 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %257 
                                             %254 = OpLabel 
                                       f32_3 %256 = OpLoad %31 
                                                      OpStore %252 %256 
                                                      OpBranch %255 
                                             %257 = OpLabel 
                                       f32_3 %258 = OpLoad %221 
                                                      OpStore %252 %258 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                       f32_3 %259 = OpLoad %252 
                                       f32_4 %260 = OpLoad %169 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %169 %261 
                                       f32_4 %262 = OpLoad %169 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_3* %266 = OpAccessChain %45 %264 
                                       f32_3 %267 = OpLoad %266 
                                       f32_3 %268 = OpFNegate %267 
                                       f32_3 %269 = OpFAdd %263 %268 
                                       f32_4 %270 = OpLoad %169 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %169 %271 
                                       f32_4 %272 = OpLoad %169 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_3* %275 = OpAccessChain %45 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_4 %278 = OpLoad %169 
                                       f32_4 %279 = OpVectorShuffle %278 %277 0 4 5 6 
                                                      OpStore %169 %279 
                                Private f32* %280 = OpAccessChain %169 %34 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %102 
                                Private f32* %285 = OpAccessChain %31 %27 
                                                      OpStore %285 %284 
                                Uniform f32* %286 = OpAccessChain %45 %204 %48 
                                         f32 %287 = OpLoad %286 
                                         f32 %289 = OpFMul %287 %288 
                                         f32 %290 = OpFAdd %289 %102 
                                Private f32* %291 = OpAccessChain %70 %27 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %31 %27 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %70 %27 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %293 %295 
                                Private f32* %297 = OpAccessChain %169 %27 
                                                      OpStore %297 %296 
                  read_only Texture3DSampled %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %169 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 2 3 
                                       f32_4 %305 = OpImageSampleImplicitLod %302 %304 
                                                      OpStore %169 %305 
                                       f32_4 %307 = OpLoad %169 
                                                      OpStore %306 %307 
                                                      OpBranch %216 
                                             %308 = OpLabel 
                                Private f32* %309 = OpAccessChain %306 %27 
                                                      OpStore %309 %118 
                                Private f32* %310 = OpAccessChain %306 %34 
                                                      OpStore %310 %118 
                                Private f32* %311 = OpAccessChain %306 %48 
                                                      OpStore %311 %118 
                                Private f32* %312 = OpAccessChain %306 %180 
                                                      OpStore %312 %118 
                                                      OpBranch %216 
                                             %216 = OpLabel 
                                       f32_4 %313 = OpLoad %306 
                              Uniform f32_4* %314 = OpAccessChain %45 %196 
                                       f32_4 %315 = OpLoad %314 
                                         f32 %316 = OpDot %313 %315 
                                Private f32* %317 = OpAccessChain %91 %27 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %91 %27 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpExtInst %1 43 %319 %76 %118 
                                Private f32* %321 = OpAccessChain %91 %27 
                                                      OpStore %321 %320 
                                       f32_3 %323 = OpLoad %155 
                              Uniform f32_4* %325 = OpAccessChain %45 %324 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFMul %323 %327 
                                                      OpStore %322 %328 
                                       f32_3 %329 = OpLoad %91 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpLoad %322 
                                       f32_3 %332 = OpFMul %330 %331 
                                                      OpStore %91 %332 
                                       f32_3 %335 = OpLoad %155 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_3 %339 = OpLoad %91 
                                       f32_3 %340 = OpFAdd %338 %339 
                                       f32_4 %341 = OpLoad %334 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %334 %342 
                                Private f32* %343 = OpAccessChain %9 %180 
                                         f32 %344 = OpLoad %343 
                                 Output f32* %346 = OpAccessChain %334 %180 
                                                      OpStore %346 %344 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat15 * 0.5;
    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.xy = u_xlat3.zz + u_xlat3.xw;
    vs_TEXCOORD3 = u_xlat1;
    vs_TEXCOORD5 = u_xlat1;
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat1 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat9;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat5.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = u_xlat5.x * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat5.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 317
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %187 %189 %307 %310 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %307 Location 307 
                                                      OpDecorate %310 Location 310 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 8 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 9 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 7 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                                             %164 = OpTypePointer Uniform %6 
                              Private f32_4* %168 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         u32 %172 = OpConstant 3 
                                       f32_2 %176 = OpConstantComposite %170 %170 
                               Output f32_4* %187 = OpVariable Output 
                               Output f32_4* %189 = OpVariable Output 
                              Private f32_4* %204 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_4 %241 = OpConstantComposite %240 %240 %240 %240 
                                         i32 %246 = OpConstant 4 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_4 %251 = OpConstantComposite %250 %250 %250 %250 
                                         f32 %259 = OpConstant 3.674022E-40 
                                       f32_4 %260 = OpConstantComposite %259 %259 %259 %259 
                                         i32 %267 = OpConstant 5 
                               Output f32_3* %307 = OpVariable Output 
                               Output f32_4* %310 = OpVariable Output 
                                             %311 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                Private f32* %162 = OpAccessChain %47 %93 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %165 = OpAccessChain %23 %31 %124 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                                      OpStore %140 %167 
                                         f32 %169 = OpLoad %140 
                                         f32 %171 = OpFMul %169 %170 
                                Private f32* %173 = OpAccessChain %168 %172 
                                                      OpStore %173 %171 
                                       f32_4 %174 = OpLoad %47 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %177 = OpFMul %175 %176 
                                       f32_4 %178 = OpLoad %168 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 1 5 3 
                                                      OpStore %168 %179 
                                       f32_4 %180 = OpLoad %168 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 2 
                                       f32_4 %182 = OpLoad %168 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 3 
                                       f32_2 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %47 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 2 3 
                                                      OpStore %47 %186 
                                       f32_4 %188 = OpLoad %47 
                                                      OpStore %187 %188 
                                       f32_4 %190 = OpLoad %47 
                                                      OpStore %189 %190 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpVectorShuffle %191 %191 1 1 1 1 
                                       f32_4 %193 = OpFNegate %192 
                              Uniform f32_4* %194 = OpAccessChain %23 %39 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpFAdd %193 %195 
                                                      OpStore %47 %196 
                                       f32_4 %197 = OpLoad %65 
                                       f32_4 %198 = OpVectorShuffle %197 %197 1 1 1 1 
                                       f32_4 %199 = OpLoad %47 
                                       f32_4 %200 = OpFMul %198 %199 
                                                      OpStore %168 %200 
                                       f32_4 %201 = OpLoad %47 
                                       f32_4 %202 = OpLoad %47 
                                       f32_4 %203 = OpFMul %201 %202 
                                                      OpStore %47 %203 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpVectorShuffle %205 %205 0 0 0 0 
                                       f32_4 %207 = OpFNegate %206 
                              Uniform f32_4* %208 = OpAccessChain %23 %26 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpFAdd %207 %209 
                                                      OpStore %204 %210 
                                       f32_4 %211 = OpLoad %9 
                                       f32_4 %212 = OpVectorShuffle %211 %211 2 2 2 2 
                                       f32_4 %213 = OpFNegate %212 
                              Uniform f32_4* %214 = OpAccessChain %23 %49 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpFAdd %213 %215 
                                                      OpStore %9 %216 
                                       f32_4 %217 = OpLoad %204 
                                       f32_4 %218 = OpLoad %65 
                                       f32_4 %219 = OpVectorShuffle %218 %218 0 0 0 0 
                                       f32_4 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %168 
                                       f32_4 %222 = OpFAdd %220 %221 
                                                      OpStore %168 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpLoad %65 
                                       f32_4 %225 = OpVectorShuffle %224 %224 2 2 2 2 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %168 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %65 %228 
                                       f32_4 %229 = OpLoad %204 
                                       f32_4 %230 = OpLoad %204 
                                       f32_4 %231 = OpFMul %229 %230 
                                       f32_4 %232 = OpLoad %47 
                                       f32_4 %233 = OpFAdd %231 %232 
                                                      OpStore %47 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpFMul %234 %235 
                                       f32_4 %237 = OpLoad %47 
                                       f32_4 %238 = OpFAdd %236 %237 
                                                      OpStore %9 %238 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %242 = OpExtInst %1 40 %239 %241 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpExtInst %1 32 %243 
                                                      OpStore %47 %244 
                                       f32_4 %245 = OpLoad %9 
                              Uniform f32_4* %247 = OpAccessChain %23 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpFMul %245 %248 
                                       f32_4 %252 = OpFAdd %249 %251 
                                                      OpStore %9 %252 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpFDiv %251 %253 
                                                      OpStore %9 %254 
                                       f32_4 %255 = OpLoad %47 
                                       f32_4 %256 = OpLoad %65 
                                       f32_4 %257 = OpFMul %255 %256 
                                                      OpStore %47 %257 
                                       f32_4 %258 = OpLoad %47 
                                       f32_4 %261 = OpExtInst %1 40 %258 %260 
                                                      OpStore %47 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpLoad %47 
                                       f32_4 %264 = OpFMul %262 %263 
                                                      OpStore %9 %264 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 1 1 1 
                              Uniform f32_4* %268 = OpAccessChain %23 %267 %26 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFMul %266 %270 
                                       f32_4 %272 = OpLoad %47 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %47 %273 
                              Uniform f32_4* %274 = OpAccessChain %23 %267 %31 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 0 0 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %47 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFAdd %279 %281 
                                       f32_4 %283 = OpLoad %47 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %47 %284 
                              Uniform f32_4* %285 = OpAccessChain %23 %267 %39 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 2 2 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %47 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %9 %295 
                              Uniform f32_4* %296 = OpAccessChain %23 %267 %49 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 3 3 3 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %9 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                                      OpStore %307 %309 
                                                      OpStore %310 %260 
                                 Output f32* %312 = OpAccessChain %97 %31 %93 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFNegate %313 
                                 Output f32* %315 = OpAccessChain %97 %31 %93 
                                                      OpStore %315 %314 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 469
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %206 %404 %455 %457 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 RelaxedPrecision 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 RelaxedPrecision 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 RelaxedPrecision 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpMemberDecorate %44 13 Offset 44 
                                                      OpMemberDecorate %44 14 Offset 44 
                                                      OpMemberDecorate %44 15 RelaxedPrecision 
                                                      OpMemberDecorate %44 15 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %86 DescriptorSet 86 
                                                      OpDecorate %86 Binding 86 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %286 SpecId 286 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 Location 404 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %455 Location 455 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %7 %29 %7 %7 %7 %42 %7 %43 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 12 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %85 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %86 = OpVariable UniformConstant 
                               Private f32_3* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %95 %96 %97 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         i32 %108 = OpConstant 13 
                                Private f32* %113 = OpVariable Private 
                                         f32 %116 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         i32 %142 = OpConstant 11 
                                         f32 %153 = OpConstant 3.674022E-40 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %164 = OpConstant 14 
                                         f32 %167 = OpConstant 3.674022E-40 
                              Private f32_3* %170 = OpVariable Private 
                                         u32 %181 = OpConstant 3 
                                         i32 %184 = OpConstant 15 
                                             %190 = OpTypeBool 
                                             %191 = OpTypePointer Private %190 
                               Private bool* %192 = OpVariable Private 
                                         i32 %197 = OpConstant 1 
                                         i32 %199 = OpConstant -1 
                                             %205 = OpTypePointer Input %29 
                                Input f32_3* %206 = OpVariable Input 
                                             %209 = OpTypePointer Uniform %29 
                                         i32 %213 = OpConstant 5 
                                         i32 %220 = OpConstant 2 
                                         i32 %230 = OpConstant 4 
                                             %231 = OpTypePointer Uniform %7 
                                         i32 %263 = OpConstant 3 
                               Private bool* %275 = OpVariable Private 
                                         i32 %276 = OpConstant 6 
                                        bool %280 = OpConstantFalse 
                                        bool %286 = OpSpecConstantFalse 
                               Private bool* %289 = OpVariable Private 
                                         i32 %295 = OpConstant 7 
                                             %332 = OpTypePointer Function %29 
                                         i32 %346 = OpConstant 9 
                                         i32 %355 = OpConstant 8 
                                             %361 = OpTypePointer Private %15 
                              Private f32_2* %362 = OpVariable Private 
                                         f32 %365 = OpConstant 3.674022E-40 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                             %380 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %381 = OpTypeSampledImage %380 
                                             %382 = OpTypePointer UniformConstant %381 
 UniformConstant read_only Texture3DSampled* %383 = OpVariable UniformConstant 
                              Private f32_4* %388 = OpVariable Private 
                                Input f32_4* %404 = OpVariable Input 
                                Private f32* %410 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %411 = OpVariable UniformConstant 
                              Private f32_3* %416 = OpVariable Private 
                                             %432 = OpTypePointer Function %6 
                                         i32 %445 = OpConstant 10 
                                             %454 = OpTypePointer Output %7 
                               Output f32_4* %455 = OpVariable Output 
                                Input f32_3* %457 = OpVariable Input 
                                             %466 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %31 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %31 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %31 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %31 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %33 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                        f32_3 %83 = OpLoad %31 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %31 %84 
                   read_only Texture2DSampled %87 = OpLoad %86 
                                        f32_3 %88 = OpLoad %31 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %90 = OpImageSampleImplicitLod %87 %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                                      OpStore %85 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %99 = OpDot %94 %98 
                                Private f32* %100 = OpAccessChain %92 %27 
                                                      OpStore %100 %99 
                                Private f32* %101 = OpAccessChain %92 %27 
                                         f32 %102 = OpLoad %101 
                                         f32 %104 = OpFMul %102 %103 
                                Private f32* %105 = OpAccessChain %92 %27 
                                                      OpStore %105 %104 
                                Private f32* %106 = OpAccessChain %92 %27 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %46 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %70 %27 
                                                      OpStore %112 %111 
                                  Input f32* %114 = OpAccessChain %33 %34 
                                         f32 %115 = OpLoad %114 
                                         f32 %117 = OpFAdd %115 %116 
                                                      OpStore %113 %117 
                                         f32 %118 = OpLoad %113 
                                         f32 %120 = OpExtInst %1 43 %118 %76 %119 
                                                      OpStore %113 %120 
                                         f32 %121 = OpLoad %113 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %113 %123 
                                         f32 %124 = OpLoad %113 
                                         f32 %125 = OpExtInst %1 37 %124 %119 
                                                      OpStore %113 %125 
                                         f32 %126 = OpLoad %113 
                                Private f32* %127 = OpAccessChain %70 %27 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFMul %126 %129 
                                Private f32* %131 = OpAccessChain %70 %27 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFAdd %130 %132 
                                Private f32* %134 = OpAccessChain %70 %27 
                                                      OpStore %134 %133 
                                         f32 %135 = OpLoad %21 
                                Private f32* %136 = OpAccessChain %70 %27 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %135 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %70 %27 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %143 = OpAccessChain %46 %142 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %141 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %70 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %148 %103 
                                Private f32* %150 = OpAccessChain %70 %27 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %70 %27 
                                         f32 %152 = OpLoad %151 
                                         f32 %154 = OpExtInst %1 37 %152 %153 
                                Private f32* %155 = OpAccessChain %70 %27 
                                                      OpStore %155 %154 
                                       f32_3 %157 = OpLoad %85 
                                       f32_4 %158 = OpLoad %70 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                                      OpStore %156 %163 
                                Uniform f32* %165 = OpAccessChain %46 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFAdd %166 %167 
                                Private f32* %169 = OpAccessChain %31 %27 
                                                      OpStore %169 %168 
                                         f32 %171 = OpLoad %21 
                                Private f32* %172 = OpAccessChain %31 %27 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %171 %173 
                                         f32 %175 = OpFAdd %174 %119 
                                Private f32* %176 = OpAccessChain %170 %27 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %156 
                                       f32_3 %178 = OpLoad %170 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                                      OpStore %156 %180 
                                Private f32* %182 = OpAccessChain %9 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %46 %184 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %183 %187 
                                Private f32* %189 = OpAccessChain %92 %27 
                                                      OpStore %189 %188 
                                Private f32* %193 = OpAccessChain %92 %27 
                                         f32 %194 = OpLoad %193 
                                        bool %195 = OpFOrdLessThan %194 %76 
                                                      OpStore %192 %195 
                                        bool %196 = OpLoad %192 
                                         i32 %198 = OpSelect %196 %197 %48 
                                         i32 %200 = OpIMul %198 %199 
                                        bool %201 = OpINotEqual %200 %48 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                       f32_3 %207 = OpLoad %206 
                                       f32_3 %208 = OpFNegate %207 
                              Uniform f32_3* %210 = OpAccessChain %46 %197 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFAdd %208 %211 
                                                      OpStore %170 %212 
                                Uniform f32* %214 = OpAccessChain %46 %213 %48 %49 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %70 %27 
                                                      OpStore %216 %215 
                                Uniform f32* %217 = OpAccessChain %46 %213 %197 %49 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %70 %34 
                                                      OpStore %219 %218 
                                Uniform f32* %221 = OpAccessChain %46 %213 %220 %49 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %70 %49 
                                                      OpStore %223 %222 
                                       f32_3 %224 = OpLoad %170 
                                       f32_4 %225 = OpLoad %70 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                         f32 %227 = OpDot %224 %226 
                                Private f32* %228 = OpAccessChain %170 %27 
                                                      OpStore %228 %227 
                                       f32_3 %229 = OpLoad %206 
                              Uniform f32_4* %232 = OpAccessChain %46 %230 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFNegate %234 
                                       f32_3 %236 = OpFAdd %229 %235 
                                                      OpStore %31 %236 
                                       f32_3 %237 = OpLoad %31 
                                       f32_3 %238 = OpLoad %31 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %31 %27 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %31 %27 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 31 %242 
                                Private f32* %244 = OpAccessChain %31 %27 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %170 %27 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                Private f32* %248 = OpAccessChain %31 %27 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %31 %27 
                                                      OpStore %251 %250 
                                Uniform f32* %252 = OpAccessChain %46 %230 %181 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %31 %27 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %170 %27 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %170 %27 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %170 %27 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %46 %263 %49 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %46 %263 %181 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %170 %27 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %170 %27 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %76 %119 
                                Private f32* %274 = OpAccessChain %170 %27 
                                                      OpStore %274 %273 
                                Uniform f32* %277 = OpAccessChain %46 %276 %27 
                                         f32 %278 = OpLoad %277 
                                        bool %279 = OpFOrdEqual %278 %119 
                                                      OpStore %275 %279 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %282 
                                             %281 = OpLabel 
                                        bool %283 = OpLoad %275 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %285 
                                             %284 = OpLabel 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %390 
                                             %287 = OpLabel 
                                Uniform f32* %290 = OpAccessChain %46 %276 %34 
                                         f32 %291 = OpLoad %290 
                                        bool %292 = OpFOrdEqual %291 %119 
                                                      OpStore %289 %292 
                                       f32_3 %293 = OpLoad %206 
                                       f32_3 %294 = OpVectorShuffle %293 %293 1 1 1 
                              Uniform f32_4* %296 = OpAccessChain %46 %295 %197 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                              Uniform f32_4* %302 = OpAccessChain %46 %295 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpLoad %206 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %70 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                       f32_4 %311 = OpLoad %70 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %70 %312 
                              Uniform f32_4* %313 = OpAccessChain %46 %295 %220 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpLoad %206 
                                       f32_3 %317 = OpVectorShuffle %316 %316 2 2 2 
                                       f32_3 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %70 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %70 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %70 %323 
                                       f32_4 %324 = OpLoad %70 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %46 %295 %263 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                       f32_4 %330 = OpLoad %70 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %70 %331 
                                        bool %334 = OpLoad %289 
                                                      OpSelectionMerge %336 None 
                                                      OpBranchConditional %334 %335 %339 
                                             %335 = OpLabel 
                                       f32_4 %337 = OpLoad %70 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                                      OpStore %333 %338 
                                                      OpBranch %336 
                                             %339 = OpLabel 
                                       f32_3 %340 = OpLoad %206 
                                                      OpStore %333 %340 
                                                      OpBranch %336 
                                             %336 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %70 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %70 %343 
                                       f32_4 %344 = OpLoad %70 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_3* %347 = OpAccessChain %46 %346 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpFNegate %348 
                                       f32_3 %350 = OpFAdd %345 %349 
                                       f32_4 %351 = OpLoad %70 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %70 %352 
                                       f32_4 %353 = OpLoad %70 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %46 %355 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpFMul %354 %357 
                                       f32_4 %359 = OpLoad %70 
                                       f32_4 %360 = OpVectorShuffle %359 %358 0 4 5 6 
                                                      OpStore %70 %360 
                                Private f32* %363 = OpAccessChain %70 %34 
                                         f32 %364 = OpLoad %363 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %103 
                                Private f32* %368 = OpAccessChain %362 %27 
                                                      OpStore %368 %367 
                                Uniform f32* %370 = OpAccessChain %46 %276 %49 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %103 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                Private f32* %376 = OpAccessChain %362 %27 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpExtInst %1 40 %375 %377 
                                Private f32* %379 = OpAccessChain %70 %27 
                                                      OpStore %379 %378 
                  read_only Texture3DSampled %384 = OpLoad %383 
                                       f32_4 %385 = OpLoad %70 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 2 3 
                                       f32_4 %387 = OpImageSampleImplicitLod %384 %386 
                                                      OpStore %70 %387 
                                       f32_4 %389 = OpLoad %70 
                                                      OpStore %388 %389 
                                                      OpBranch %288 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %388 %27 
                                                      OpStore %391 %119 
                                Private f32* %392 = OpAccessChain %388 %34 
                                                      OpStore %392 %119 
                                Private f32* %393 = OpAccessChain %388 %49 
                                                      OpStore %393 %119 
                                Private f32* %394 = OpAccessChain %388 %181 
                                                      OpStore %394 %119 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                       f32_4 %395 = OpLoad %388 
                              Uniform f32_4* %396 = OpAccessChain %46 %220 
                                       f32_4 %397 = OpLoad %396 
                                         f32 %398 = OpDot %395 %397 
                                Private f32* %399 = OpAccessChain %92 %27 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %92 %27 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpExtInst %1 43 %401 %76 %119 
                                Private f32* %403 = OpAccessChain %92 %27 
                                                      OpStore %403 %402 
                                       f32_4 %405 = OpLoad %404 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpLoad %404 
                                       f32_2 %408 = OpVectorShuffle %407 %407 3 3 
                                       f32_2 %409 = OpFDiv %406 %408 
                                                      OpStore %362 %409 
                  read_only Texture2DSampled %412 = OpLoad %411 
                                       f32_2 %413 = OpLoad %362 
                                       f32_4 %414 = OpImageSampleImplicitLod %412 %413 
                                         f32 %415 = OpCompositeExtract %414 0 
                                                      OpStore %410 %415 
                                Private f32* %417 = OpAccessChain %170 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpLoad %410 
                                         f32 %420 = OpFAdd %418 %419 
                                Private f32* %421 = OpAccessChain %416 %27 
                                                      OpStore %421 %420 
                                Private f32* %422 = OpAccessChain %416 %27 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 43 %423 %76 %119 
                                Private f32* %425 = OpAccessChain %416 %27 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %416 %27 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %92 %27 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 37 %427 %429 
                                Private f32* %431 = OpAccessChain %92 %27 
                                                      OpStore %431 %430 
                                        bool %434 = OpLoad %275 
                                                      OpSelectionMerge %436 None 
                                                      OpBranchConditional %434 %435 %439 
                                             %435 = OpLabel 
                                Private f32* %437 = OpAccessChain %92 %27 
                                         f32 %438 = OpLoad %437 
                                                      OpStore %433 %438 
                                                      OpBranch %436 
                                             %439 = OpLabel 
                                Private f32* %440 = OpAccessChain %416 %27 
                                         f32 %441 = OpLoad %440 
                                                      OpStore %433 %441 
                                                      OpBranch %436 
                                             %436 = OpLabel 
                                         f32 %442 = OpLoad %433 
                                Private f32* %443 = OpAccessChain %92 %27 
                                                      OpStore %443 %442 
                                       f32_3 %444 = OpLoad %156 
                              Uniform f32_4* %446 = OpAccessChain %46 %445 
                                       f32_4 %447 = OpLoad %446 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFMul %444 %448 
                                                      OpStore %416 %449 
                                       f32_3 %450 = OpLoad %92 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                                       f32_3 %452 = OpLoad %416 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %92 %453 
                                       f32_3 %456 = OpLoad %156 
                                       f32_3 %458 = OpLoad %457 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_3 %460 = OpLoad %92 
                                       f32_3 %461 = OpFAdd %459 %460 
                                       f32_4 %462 = OpLoad %455 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %455 %463 
                                Private f32* %464 = OpAccessChain %9 %181 
                                         f32 %465 = OpLoad %464 
                                 Output f32* %467 = OpAccessChain %455 %181 
                                                      OpStore %467 %465 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat18 * 0.5;
    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.xy = u_xlat3.zz + u_xlat3.xw;
    vs_TEXCOORD3 = u_xlat1;
    vs_TEXCOORD5 = u_xlat1;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat1);
    u_xlat3.y = dot(unity_SHBg, u_xlat1);
    u_xlat3.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat9;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat5.x = dot(u_xlat0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = u_xlat5.x * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat5.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat0.xyz;
    u_xlat2.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat2.x + 1.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 433
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %187 %189 %423 %426 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %423 Location 423 
                                                      OpDecorate %426 Location 426 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 16 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 14 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                                             %164 = OpTypePointer Uniform %6 
                              Private f32_4* %168 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         u32 %172 = OpConstant 3 
                                       f32_2 %176 = OpConstantComposite %170 %170 
                               Output f32_4* %187 = OpVariable Output 
                               Output f32_4* %189 = OpVariable Output 
                                             %191 = OpTypePointer Private %53 
                              Private f32_3* %192 = OpVariable Private 
                              Private f32_4* %209 = OpVariable Private 
                              Private f32_3* %215 = OpVariable Private 
                                         i32 %216 = OpConstant 9 
                                         i32 %222 = OpConstant 10 
                                         i32 %228 = OpConstant 11 
                                         i32 %234 = OpConstant 12 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         i32 %245 = OpConstant 6 
                                         i32 %251 = OpConstant 7 
                                         i32 %257 = OpConstant 8 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_3 %268 = OpConstantComposite %267 %267 %267 
                                         f32 %276 = OpConstant 3.674022E-40 
                                       f32_3 %277 = OpConstantComposite %276 %276 %276 
                                         f32 %288 = OpConstant 3.674022E-40 
                                       f32_3 %289 = OpConstantComposite %288 %288 %288 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_3 %292 = OpConstantComposite %291 %291 %291 
                              Private f32_4* %307 = OpVariable Private 
                              Private f32_4* %315 = OpVariable Private 
                                         f32 %351 = OpConstant 3.674022E-40 
                                       f32_4 %352 = OpConstantComposite %351 %351 %351 %351 
                                         i32 %357 = OpConstant 4 
                                       f32_4 %361 = OpConstantComposite %243 %243 %243 %243 
                                       f32_4 %369 = OpConstantComposite %267 %267 %267 %267 
                                         i32 %376 = OpConstant 5 
                               Output f32_3* %423 = OpVariable Output 
                               Output f32_4* %426 = OpVariable Output 
                                             %427 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                Private f32* %162 = OpAccessChain %47 %93 
                                         f32 %163 = OpLoad %162 
                                Uniform f32* %165 = OpAccessChain %23 %31 %124 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %163 %166 
                                                      OpStore %140 %167 
                                         f32 %169 = OpLoad %140 
                                         f32 %171 = OpFMul %169 %170 
                                Private f32* %173 = OpAccessChain %168 %172 
                                                      OpStore %173 %171 
                                       f32_4 %174 = OpLoad %47 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %177 = OpFMul %175 %176 
                                       f32_4 %178 = OpLoad %168 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 1 5 3 
                                                      OpStore %168 %179 
                                       f32_4 %180 = OpLoad %168 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 2 
                                       f32_4 %182 = OpLoad %168 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 3 
                                       f32_2 %184 = OpFAdd %181 %183 
                                       f32_4 %185 = OpLoad %47 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 2 3 
                                                      OpStore %47 %186 
                                       f32_4 %188 = OpLoad %47 
                                                      OpStore %187 %188 
                                       f32_4 %190 = OpLoad %47 
                                                      OpStore %189 %190 
                                Private f32* %193 = OpAccessChain %65 %93 
                                         f32 %194 = OpLoad %193 
                                Private f32* %195 = OpAccessChain %65 %93 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %194 %196 
                                Private f32* %198 = OpAccessChain %192 %124 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %65 %124 
                                         f32 %200 = OpLoad %199 
                                Private f32* %201 = OpAccessChain %65 %124 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %200 %202 
                                Private f32* %204 = OpAccessChain %192 %124 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFNegate %205 
                                         f32 %207 = OpFAdd %203 %206 
                                Private f32* %208 = OpAccessChain %192 %124 
                                                      OpStore %208 %207 
                                       f32_4 %210 = OpLoad %65 
                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
                                       f32_4 %212 = OpLoad %65 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
                                       f32_4 %214 = OpFMul %211 %213 
                                                      OpStore %209 %214 
                              Uniform f32_4* %217 = OpAccessChain %23 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %209 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %215 %124 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %23 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %209 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %215 %93 
                                                      OpStore %227 %226 
                              Uniform f32_4* %229 = OpAccessChain %23 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %209 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %215 %138 
                                                      OpStore %233 %232 
                              Uniform f32_4* %235 = OpAccessChain %23 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpLoad %192 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 0 0 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_3 %241 = OpLoad %215 
                                       f32_3 %242 = OpFAdd %240 %241 
                                                      OpStore %192 %242 
                                Private f32* %244 = OpAccessChain %65 %172 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %23 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %65 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %215 %124 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %23 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %65 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %215 %93 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %23 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %65 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %215 %138 
                                                      OpStore %262 %261 
                                       f32_3 %263 = OpLoad %192 
                                       f32_3 %264 = OpLoad %215 
                                       f32_3 %265 = OpFAdd %263 %264 
                                                      OpStore %192 %265 
                                       f32_3 %266 = OpLoad %192 
                                       f32_3 %269 = OpExtInst %1 40 %266 %268 
                                                      OpStore %192 %269 
                                       f32_3 %270 = OpLoad %192 
                                       f32_3 %271 = OpExtInst %1 30 %270 
                                       f32_4 %272 = OpLoad %168 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %168 %273 
                                       f32_4 %274 = OpLoad %168 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %168 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %168 %280 
                                       f32_4 %281 = OpLoad %168 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpExtInst %1 29 %282 
                                       f32_4 %284 = OpLoad %168 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %168 %285 
                                       f32_4 %286 = OpLoad %168 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_3 %293 = OpFAdd %290 %292 
                                       f32_4 %294 = OpLoad %168 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %168 %295 
                                       f32_4 %296 = OpLoad %168 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpExtInst %1 40 %297 %268 
                                       f32_4 %299 = OpLoad %168 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %168 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpVectorShuffle %301 %301 1 1 1 1 
                                       f32_4 %303 = OpFNegate %302 
                              Uniform f32_4* %304 = OpAccessChain %23 %39 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpFAdd %303 %305 
                                                      OpStore %47 %306 
                                       f32_4 %308 = OpLoad %65 
                                       f32_4 %309 = OpVectorShuffle %308 %308 1 1 1 1 
                                       f32_4 %310 = OpLoad %47 
                                       f32_4 %311 = OpFMul %309 %310 
                                                      OpStore %307 %311 
                                       f32_4 %312 = OpLoad %47 
                                       f32_4 %313 = OpLoad %47 
                                       f32_4 %314 = OpFMul %312 %313 
                                                      OpStore %47 %314 
                                       f32_4 %316 = OpLoad %9 
                                       f32_4 %317 = OpVectorShuffle %316 %316 0 0 0 0 
                                       f32_4 %318 = OpFNegate %317 
                              Uniform f32_4* %319 = OpAccessChain %23 %26 
                                       f32_4 %320 = OpLoad %319 
                                       f32_4 %321 = OpFAdd %318 %320 
                                                      OpStore %315 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpVectorShuffle %322 %322 2 2 2 2 
                                       f32_4 %324 = OpFNegate %323 
                              Uniform f32_4* %325 = OpAccessChain %23 %49 
                                       f32_4 %326 = OpLoad %325 
                                       f32_4 %327 = OpFAdd %324 %326 
                                                      OpStore %9 %327 
                                       f32_4 %328 = OpLoad %315 
                                       f32_4 %329 = OpLoad %65 
                                       f32_4 %330 = OpVectorShuffle %329 %329 0 0 0 0 
                                       f32_4 %331 = OpFMul %328 %330 
                                       f32_4 %332 = OpLoad %307 
                                       f32_4 %333 = OpFAdd %331 %332 
                                                      OpStore %307 %333 
                                       f32_4 %334 = OpLoad %9 
                                       f32_4 %335 = OpLoad %65 
                                       f32_4 %336 = OpVectorShuffle %335 %335 2 2 2 2 
                                       f32_4 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %307 
                                       f32_4 %339 = OpFAdd %337 %338 
                                                      OpStore %65 %339 
                                       f32_4 %340 = OpLoad %315 
                                       f32_4 %341 = OpLoad %315 
                                       f32_4 %342 = OpFMul %340 %341 
                                       f32_4 %343 = OpLoad %47 
                                       f32_4 %344 = OpFAdd %342 %343 
                                                      OpStore %47 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpFMul %345 %346 
                                       f32_4 %348 = OpLoad %47 
                                       f32_4 %349 = OpFAdd %347 %348 
                                                      OpStore %9 %349 
                                       f32_4 %350 = OpLoad %9 
                                       f32_4 %353 = OpExtInst %1 40 %350 %352 
                                                      OpStore %9 %353 
                                       f32_4 %354 = OpLoad %9 
                                       f32_4 %355 = OpExtInst %1 32 %354 
                                                      OpStore %47 %355 
                                       f32_4 %356 = OpLoad %9 
                              Uniform f32_4* %358 = OpAccessChain %23 %357 
                                       f32_4 %359 = OpLoad %358 
                                       f32_4 %360 = OpFMul %356 %359 
                                       f32_4 %362 = OpFAdd %360 %361 
                                                      OpStore %9 %362 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpFDiv %361 %363 
                                                      OpStore %9 %364 
                                       f32_4 %365 = OpLoad %47 
                                       f32_4 %366 = OpLoad %65 
                                       f32_4 %367 = OpFMul %365 %366 
                                                      OpStore %47 %367 
                                       f32_4 %368 = OpLoad %47 
                                       f32_4 %370 = OpExtInst %1 40 %368 %369 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpLoad %47 
                                       f32_4 %373 = OpFMul %371 %372 
                                                      OpStore %9 %373 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 1 1 1 
                              Uniform f32_4* %377 = OpAccessChain %23 %376 %26 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                       f32_4 %381 = OpLoad %65 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %65 %382 
                              Uniform f32_4* %383 = OpAccessChain %23 %376 %31 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 0 0 
                                       f32_3 %388 = OpFMul %385 %387 
                                       f32_4 %389 = OpLoad %65 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                       f32_4 %392 = OpLoad %65 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %65 %393 
                              Uniform f32_4* %394 = OpAccessChain %23 %376 %39 
                                       f32_4 %395 = OpLoad %394 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 2 2 2 
                                       f32_3 %399 = OpFMul %396 %398 
                                       f32_4 %400 = OpLoad %65 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                                       f32_3 %402 = OpFAdd %399 %401 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %9 %404 
                              Uniform f32_4* %405 = OpAccessChain %23 %376 %49 
                                       f32_4 %406 = OpLoad %405 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 3 3 3 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_4 %418 = OpLoad %168 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %9 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %9 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                                      OpStore %423 %425 
                                                      OpStore %426 %369 
                                 Output f32* %428 = OpAccessChain %97 %31 %93 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFNegate %429 
                                 Output f32* %431 = OpAccessChain %97 %31 %93 
                                                      OpStore %431 %430 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 469
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %206 %404 %455 %457 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 RelaxedPrecision 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 RelaxedPrecision 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 RelaxedPrecision 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpMemberDecorate %44 13 Offset 44 
                                                      OpMemberDecorate %44 14 Offset 44 
                                                      OpMemberDecorate %44 15 RelaxedPrecision 
                                                      OpMemberDecorate %44 15 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %86 DescriptorSet 86 
                                                      OpDecorate %86 Binding 86 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %286 SpecId 286 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 Location 404 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %455 Location 455 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %7 %29 %7 %7 %7 %42 %7 %43 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 12 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %85 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %86 = OpVariable UniformConstant 
                               Private f32_3* %92 = OpVariable Private 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %95 %96 %97 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         i32 %108 = OpConstant 13 
                                Private f32* %113 = OpVariable Private 
                                         f32 %116 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                         i32 %142 = OpConstant 11 
                                         f32 %153 = OpConstant 3.674022E-40 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %164 = OpConstant 14 
                                         f32 %167 = OpConstant 3.674022E-40 
                              Private f32_3* %170 = OpVariable Private 
                                         u32 %181 = OpConstant 3 
                                         i32 %184 = OpConstant 15 
                                             %190 = OpTypeBool 
                                             %191 = OpTypePointer Private %190 
                               Private bool* %192 = OpVariable Private 
                                         i32 %197 = OpConstant 1 
                                         i32 %199 = OpConstant -1 
                                             %205 = OpTypePointer Input %29 
                                Input f32_3* %206 = OpVariable Input 
                                             %209 = OpTypePointer Uniform %29 
                                         i32 %213 = OpConstant 5 
                                         i32 %220 = OpConstant 2 
                                         i32 %230 = OpConstant 4 
                                             %231 = OpTypePointer Uniform %7 
                                         i32 %263 = OpConstant 3 
                               Private bool* %275 = OpVariable Private 
                                         i32 %276 = OpConstant 6 
                                        bool %280 = OpConstantFalse 
                                        bool %286 = OpSpecConstantFalse 
                               Private bool* %289 = OpVariable Private 
                                         i32 %295 = OpConstant 7 
                                             %332 = OpTypePointer Function %29 
                                         i32 %346 = OpConstant 9 
                                         i32 %355 = OpConstant 8 
                                             %361 = OpTypePointer Private %15 
                              Private f32_2* %362 = OpVariable Private 
                                         f32 %365 = OpConstant 3.674022E-40 
                                Private f32* %369 = OpVariable Private 
                                         f32 %372 = OpConstant 3.674022E-40 
                                             %380 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %381 = OpTypeSampledImage %380 
                                             %382 = OpTypePointer UniformConstant %381 
 UniformConstant read_only Texture3DSampled* %383 = OpVariable UniformConstant 
                              Private f32_4* %388 = OpVariable Private 
                                Input f32_4* %404 = OpVariable Input 
                                Private f32* %410 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %411 = OpVariable UniformConstant 
                              Private f32_3* %416 = OpVariable Private 
                                             %432 = OpTypePointer Function %6 
                                         i32 %445 = OpConstant 10 
                                             %454 = OpTypePointer Output %7 
                               Output f32_4* %455 = OpVariable Output 
                                Input f32_3* %457 = OpVariable Input 
                                             %466 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %333 = OpVariable Function 
                               Function f32* %433 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %31 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %31 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %31 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %31 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %33 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                        f32_3 %83 = OpLoad %31 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %31 %84 
                   read_only Texture2DSampled %87 = OpLoad %86 
                                        f32_3 %88 = OpLoad %31 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_4 %90 = OpImageSampleImplicitLod %87 %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                                      OpStore %85 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                          f32 %99 = OpDot %94 %98 
                                Private f32* %100 = OpAccessChain %92 %27 
                                                      OpStore %100 %99 
                                Private f32* %101 = OpAccessChain %92 %27 
                                         f32 %102 = OpLoad %101 
                                         f32 %104 = OpFMul %102 %103 
                                Private f32* %105 = OpAccessChain %92 %27 
                                                      OpStore %105 %104 
                                Private f32* %106 = OpAccessChain %92 %27 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %46 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %70 %27 
                                                      OpStore %112 %111 
                                  Input f32* %114 = OpAccessChain %33 %34 
                                         f32 %115 = OpLoad %114 
                                         f32 %117 = OpFAdd %115 %116 
                                                      OpStore %113 %117 
                                         f32 %118 = OpLoad %113 
                                         f32 %120 = OpExtInst %1 43 %118 %76 %119 
                                                      OpStore %113 %120 
                                         f32 %121 = OpLoad %113 
                                         f32 %123 = OpFMul %121 %122 
                                                      OpStore %113 %123 
                                         f32 %124 = OpLoad %113 
                                         f32 %125 = OpExtInst %1 37 %124 %119 
                                                      OpStore %113 %125 
                                         f32 %126 = OpLoad %113 
                                Private f32* %127 = OpAccessChain %70 %27 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFNegate %128 
                                         f32 %130 = OpFMul %126 %129 
                                Private f32* %131 = OpAccessChain %70 %27 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFAdd %130 %132 
                                Private f32* %134 = OpAccessChain %70 %27 
                                                      OpStore %134 %133 
                                         f32 %135 = OpLoad %21 
                                Private f32* %136 = OpAccessChain %70 %27 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %135 %137 
                                Private f32* %139 = OpAccessChain %70 %27 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %70 %27 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %143 = OpAccessChain %46 %142 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %141 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %70 %27 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %148 %103 
                                Private f32* %150 = OpAccessChain %70 %27 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %70 %27 
                                         f32 %152 = OpLoad %151 
                                         f32 %154 = OpExtInst %1 37 %152 %153 
                                Private f32* %155 = OpAccessChain %70 %27 
                                                      OpStore %155 %154 
                                       f32_3 %157 = OpLoad %85 
                                       f32_4 %158 = OpLoad %70 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                                      OpStore %156 %163 
                                Uniform f32* %165 = OpAccessChain %46 %164 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFAdd %166 %167 
                                Private f32* %169 = OpAccessChain %31 %27 
                                                      OpStore %169 %168 
                                         f32 %171 = OpLoad %21 
                                Private f32* %172 = OpAccessChain %31 %27 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %171 %173 
                                         f32 %175 = OpFAdd %174 %119 
                                Private f32* %176 = OpAccessChain %170 %27 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %156 
                                       f32_3 %178 = OpLoad %170 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                                      OpStore %156 %180 
                                Private f32* %182 = OpAccessChain %9 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %46 %184 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                         f32 %188 = OpFAdd %183 %187 
                                Private f32* %189 = OpAccessChain %92 %27 
                                                      OpStore %189 %188 
                                Private f32* %193 = OpAccessChain %92 %27 
                                         f32 %194 = OpLoad %193 
                                        bool %195 = OpFOrdLessThan %194 %76 
                                                      OpStore %192 %195 
                                        bool %196 = OpLoad %192 
                                         i32 %198 = OpSelect %196 %197 %48 
                                         i32 %200 = OpIMul %198 %199 
                                        bool %201 = OpINotEqual %200 %48 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                       f32_3 %207 = OpLoad %206 
                                       f32_3 %208 = OpFNegate %207 
                              Uniform f32_3* %210 = OpAccessChain %46 %197 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFAdd %208 %211 
                                                      OpStore %170 %212 
                                Uniform f32* %214 = OpAccessChain %46 %213 %48 %49 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %70 %27 
                                                      OpStore %216 %215 
                                Uniform f32* %217 = OpAccessChain %46 %213 %197 %49 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %70 %34 
                                                      OpStore %219 %218 
                                Uniform f32* %221 = OpAccessChain %46 %213 %220 %49 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %70 %49 
                                                      OpStore %223 %222 
                                       f32_3 %224 = OpLoad %170 
                                       f32_4 %225 = OpLoad %70 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                         f32 %227 = OpDot %224 %226 
                                Private f32* %228 = OpAccessChain %170 %27 
                                                      OpStore %228 %227 
                                       f32_3 %229 = OpLoad %206 
                              Uniform f32_4* %232 = OpAccessChain %46 %230 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFNegate %234 
                                       f32_3 %236 = OpFAdd %229 %235 
                                                      OpStore %31 %236 
                                       f32_3 %237 = OpLoad %31 
                                       f32_3 %238 = OpLoad %31 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %31 %27 
                                                      OpStore %240 %239 
                                Private f32* %241 = OpAccessChain %31 %27 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpExtInst %1 31 %242 
                                Private f32* %244 = OpAccessChain %31 %27 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %170 %27 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                Private f32* %248 = OpAccessChain %31 %27 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                Private f32* %251 = OpAccessChain %31 %27 
                                                      OpStore %251 %250 
                                Uniform f32* %252 = OpAccessChain %46 %230 %181 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %31 %27 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %170 %27 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFAdd %256 %258 
                                Private f32* %260 = OpAccessChain %170 %27 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %170 %27 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %264 = OpAccessChain %46 %263 %49 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %262 %265 
                                Uniform f32* %267 = OpAccessChain %46 %263 %181 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFAdd %266 %268 
                                Private f32* %270 = OpAccessChain %170 %27 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %170 %27 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 43 %272 %76 %119 
                                Private f32* %274 = OpAccessChain %170 %27 
                                                      OpStore %274 %273 
                                Uniform f32* %277 = OpAccessChain %46 %276 %27 
                                         f32 %278 = OpLoad %277 
                                        bool %279 = OpFOrdEqual %278 %119 
                                                      OpStore %275 %279 
                                                      OpSelectionMerge %282 None 
                                                      OpBranchConditional %280 %281 %282 
                                             %281 = OpLabel 
                                        bool %283 = OpLoad %275 
                                                      OpSelectionMerge %285 None 
                                                      OpBranchConditional %283 %284 %285 
                                             %284 = OpLabel 
                                                      OpBranch %285 
                                             %285 = OpLabel 
                                                      OpBranch %282 
                                             %282 = OpLabel 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %390 
                                             %287 = OpLabel 
                                Uniform f32* %290 = OpAccessChain %46 %276 %34 
                                         f32 %291 = OpLoad %290 
                                        bool %292 = OpFOrdEqual %291 %119 
                                                      OpStore %289 %292 
                                       f32_3 %293 = OpLoad %206 
                                       f32_3 %294 = OpVectorShuffle %293 %293 1 1 1 
                              Uniform f32_4* %296 = OpAccessChain %46 %295 %197 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                              Uniform f32_4* %302 = OpAccessChain %46 %295 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpLoad %206 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %70 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %307 %309 
                                       f32_4 %311 = OpLoad %70 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %70 %312 
                              Uniform f32_4* %313 = OpAccessChain %46 %295 %220 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpLoad %206 
                                       f32_3 %317 = OpVectorShuffle %316 %316 2 2 2 
                                       f32_3 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %70 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %70 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %70 %323 
                                       f32_4 %324 = OpLoad %70 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %46 %295 %263 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                       f32_4 %330 = OpLoad %70 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %70 %331 
                                        bool %334 = OpLoad %289 
                                                      OpSelectionMerge %336 None 
                                                      OpBranchConditional %334 %335 %339 
                                             %335 = OpLabel 
                                       f32_4 %337 = OpLoad %70 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                                      OpStore %333 %338 
                                                      OpBranch %336 
                                             %339 = OpLabel 
                                       f32_3 %340 = OpLoad %206 
                                                      OpStore %333 %340 
                                                      OpBranch %336 
                                             %336 = OpLabel 
                                       f32_3 %341 = OpLoad %333 
                                       f32_4 %342 = OpLoad %70 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %70 %343 
                                       f32_4 %344 = OpLoad %70 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                              Uniform f32_3* %347 = OpAccessChain %46 %346 
                                       f32_3 %348 = OpLoad %347 
                                       f32_3 %349 = OpFNegate %348 
                                       f32_3 %350 = OpFAdd %345 %349 
                                       f32_4 %351 = OpLoad %70 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %70 %352 
                                       f32_4 %353 = OpLoad %70 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %356 = OpAccessChain %46 %355 
                                       f32_3 %357 = OpLoad %356 
                                       f32_3 %358 = OpFMul %354 %357 
                                       f32_4 %359 = OpLoad %70 
                                       f32_4 %360 = OpVectorShuffle %359 %358 0 4 5 6 
                                                      OpStore %70 %360 
                                Private f32* %363 = OpAccessChain %70 %34 
                                         f32 %364 = OpLoad %363 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %103 
                                Private f32* %368 = OpAccessChain %362 %27 
                                                      OpStore %368 %367 
                                Uniform f32* %370 = OpAccessChain %46 %276 %49 
                                         f32 %371 = OpLoad %370 
                                         f32 %373 = OpFMul %371 %372 
                                         f32 %374 = OpFAdd %373 %103 
                                                      OpStore %369 %374 
                                         f32 %375 = OpLoad %369 
                                Private f32* %376 = OpAccessChain %362 %27 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpExtInst %1 40 %375 %377 
                                Private f32* %379 = OpAccessChain %70 %27 
                                                      OpStore %379 %378 
                  read_only Texture3DSampled %384 = OpLoad %383 
                                       f32_4 %385 = OpLoad %70 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 2 3 
                                       f32_4 %387 = OpImageSampleImplicitLod %384 %386 
                                                      OpStore %70 %387 
                                       f32_4 %389 = OpLoad %70 
                                                      OpStore %388 %389 
                                                      OpBranch %288 
                                             %390 = OpLabel 
                                Private f32* %391 = OpAccessChain %388 %27 
                                                      OpStore %391 %119 
                                Private f32* %392 = OpAccessChain %388 %34 
                                                      OpStore %392 %119 
                                Private f32* %393 = OpAccessChain %388 %49 
                                                      OpStore %393 %119 
                                Private f32* %394 = OpAccessChain %388 %181 
                                                      OpStore %394 %119 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                       f32_4 %395 = OpLoad %388 
                              Uniform f32_4* %396 = OpAccessChain %46 %220 
                                       f32_4 %397 = OpLoad %396 
                                         f32 %398 = OpDot %395 %397 
                                Private f32* %399 = OpAccessChain %92 %27 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %92 %27 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpExtInst %1 43 %401 %76 %119 
                                Private f32* %403 = OpAccessChain %92 %27 
                                                      OpStore %403 %402 
                                       f32_4 %405 = OpLoad %404 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpLoad %404 
                                       f32_2 %408 = OpVectorShuffle %407 %407 3 3 
                                       f32_2 %409 = OpFDiv %406 %408 
                                                      OpStore %362 %409 
                  read_only Texture2DSampled %412 = OpLoad %411 
                                       f32_2 %413 = OpLoad %362 
                                       f32_4 %414 = OpImageSampleImplicitLod %412 %413 
                                         f32 %415 = OpCompositeExtract %414 0 
                                                      OpStore %410 %415 
                                Private f32* %417 = OpAccessChain %170 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpLoad %410 
                                         f32 %420 = OpFAdd %418 %419 
                                Private f32* %421 = OpAccessChain %416 %27 
                                                      OpStore %421 %420 
                                Private f32* %422 = OpAccessChain %416 %27 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpExtInst %1 43 %423 %76 %119 
                                Private f32* %425 = OpAccessChain %416 %27 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %416 %27 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %92 %27 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 37 %427 %429 
                                Private f32* %431 = OpAccessChain %92 %27 
                                                      OpStore %431 %430 
                                        bool %434 = OpLoad %275 
                                                      OpSelectionMerge %436 None 
                                                      OpBranchConditional %434 %435 %439 
                                             %435 = OpLabel 
                                Private f32* %437 = OpAccessChain %92 %27 
                                         f32 %438 = OpLoad %437 
                                                      OpStore %433 %438 
                                                      OpBranch %436 
                                             %439 = OpLabel 
                                Private f32* %440 = OpAccessChain %416 %27 
                                         f32 %441 = OpLoad %440 
                                                      OpStore %433 %441 
                                                      OpBranch %436 
                                             %436 = OpLabel 
                                         f32 %442 = OpLoad %433 
                                Private f32* %443 = OpAccessChain %92 %27 
                                                      OpStore %443 %442 
                                       f32_3 %444 = OpLoad %156 
                              Uniform f32_4* %446 = OpAccessChain %46 %445 
                                       f32_4 %447 = OpLoad %446 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %449 = OpFMul %444 %448 
                                                      OpStore %416 %449 
                                       f32_3 %450 = OpLoad %92 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                                       f32_3 %452 = OpLoad %416 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %92 %453 
                                       f32_3 %456 = OpLoad %156 
                                       f32_3 %458 = OpLoad %457 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_3 %460 = OpLoad %92 
                                       f32_3 %461 = OpFAdd %459 %460 
                                       f32_4 %462 = OpLoad %455 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %455 %463 
                                Private f32* %464 = OpAccessChain %9 %181 
                                         f32 %465 = OpLoad %464 
                                 Output f32* %467 = OpAccessChain %455 %181 
                                                      OpStore %467 %465 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 73044
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat4;
float u_xlat16_4;
float u_xlat5;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat16_4 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4 = u_xlat16_4 * 0.75;
    u_xlat4.x = u_xlat16_4 * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat0.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat10_0.xyz;
    u_xlat4.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat4.x + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 180
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                                             %174 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                 Output f32* %175 = OpAccessChain %92 %28 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFNegate %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                                      OpStore %178 %177 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 395
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %32 %204 %383 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 RelaxedPrecision 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 RelaxedPrecision 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 RelaxedPrecision 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %246 SpecId 246 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %363 DescriptorSet 363 
                                                      OpDecorate %363 Binding 363 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %383 Location 383 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %15 
                               Private f32_2* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %7 
                                 Input f32_4* %32 = OpVariable Input 
                                          u32 %33 = OpConstant 1 
                                              %34 = OpTypePointer Input %6 
                                          f32 %37 = OpConstant 3.674022E-40 
                                          u32 %40 = OpConstant 4 
                                              %41 = OpTypeArray %7 %40 
                                              %42 = OpTypeVector %6 3 
                                              %43 = OpTypeArray %7 %40 
                                              %44 = OpTypeStruct %7 %7 %7 %41 %42 %42 %7 %43 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 9 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                                              %83 = OpTypePointer Private %42 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %90 = OpVariable Private 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                        f32_3 %96 = OpConstantComposite %93 %94 %95 
                                         f32 %101 = OpConstant 3.674022E-40 
                                         i32 %106 = OpConstant 10 
                                Private f32* %111 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %140 = OpConstant 8 
                                         f32 %151 = OpConstant 3.674022E-40 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %162 = OpConstant 11 
                                         f32 %165 = OpConstant 3.674022E-40 
                              Private f32_3* %168 = OpVariable Private 
                                         u32 %179 = OpConstant 3 
                                         i32 %182 = OpConstant 12 
                                             %188 = OpTypeBool 
                                             %189 = OpTypePointer Private %188 
                               Private bool* %190 = OpVariable Private 
                                         i32 %195 = OpConstant 1 
                                         i32 %197 = OpConstant -1 
                                             %203 = OpTypePointer Input %42 
                                Input f32_3* %204 = OpVariable Input 
                                         i32 %207 = OpConstant 7 
                                             %208 = OpTypePointer Uniform %7 
                                         i32 %221 = OpConstant 2 
                                         i32 %231 = OpConstant 3 
                               Private bool* %236 = OpVariable Private 
                                        bool %240 = OpConstantFalse 
                                        bool %246 = OpSpecConstantFalse 
                                             %290 = OpTypePointer Function %42 
                                         i32 %304 = OpConstant 5 
                                             %305 = OpTypePointer Uniform %42 
                                         i32 %314 = OpConstant 4 
                                Private f32* %320 = OpVariable Private 
                                         f32 %323 = OpConstant 3.674022E-40 
                                         f32 %328 = OpConstant 3.674022E-40 
                                             %335 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %336 = OpTypeSampledImage %335 
                                             %337 = OpTypePointer UniformConstant %336 
 UniformConstant read_only Texture3DSampled* %338 = OpVariable UniformConstant 
                              Private f32_4* %343 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %363 = OpVariable UniformConstant 
                                         i32 %377 = OpConstant 6 
                                             %382 = OpTypePointer Output %7 
                               Output f32_4* %383 = OpVariable Output 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %35 = OpAccessChain %32 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %30 %27 
                                                      OpStore %39 %38 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %30 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %30 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %30 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %30 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %30 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %30 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %30 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %33 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %32 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                                      OpStore %30 %82 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_2 %87 = OpLoad %30 
                                        f32_4 %88 = OpImageSampleImplicitLod %86 %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                                      OpStore %84 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                          f32 %97 = OpDot %92 %96 
                                 Private f32* %98 = OpAccessChain %90 %27 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %90 %27 
                                         f32 %100 = OpLoad %99 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %90 %27 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %90 %27 
                                         f32 %105 = OpLoad %104 
                                Uniform f32* %107 = OpAccessChain %46 %106 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %105 %108 
                                Private f32* %110 = OpAccessChain %70 %27 
                                                      OpStore %110 %109 
                                  Input f32* %112 = OpAccessChain %32 %33 
                                         f32 %113 = OpLoad %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %111 %115 
                                         f32 %116 = OpLoad %111 
                                         f32 %118 = OpExtInst %1 43 %116 %76 %117 
                                                      OpStore %111 %118 
                                         f32 %119 = OpLoad %111 
                                         f32 %121 = OpFMul %119 %120 
                                                      OpStore %111 %121 
                                         f32 %122 = OpLoad %111 
                                         f32 %123 = OpExtInst %1 37 %122 %117 
                                                      OpStore %111 %123 
                                         f32 %124 = OpLoad %111 
                                Private f32* %125 = OpAccessChain %70 %27 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFMul %124 %127 
                                Private f32* %129 = OpAccessChain %70 %27 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %70 %27 
                                                      OpStore %132 %131 
                                         f32 %133 = OpLoad %21 
                                Private f32* %134 = OpAccessChain %70 %27 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFMul %133 %135 
                                Private f32* %137 = OpAccessChain %70 %27 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                         f32 %139 = OpLoad %138 
                                Uniform f32* %141 = OpAccessChain %46 %140 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFMul %139 %142 
                                Private f32* %144 = OpAccessChain %70 %27 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %146 %101 
                                Private f32* %148 = OpAccessChain %70 %27 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %70 %27 
                                         f32 %150 = OpLoad %149 
                                         f32 %152 = OpExtInst %1 37 %150 %151 
                                Private f32* %153 = OpAccessChain %70 %27 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_4 %156 = OpLoad %70 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                                      OpStore %154 %161 
                                Uniform f32* %163 = OpAccessChain %46 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %166 = OpFAdd %164 %165 
                                Private f32* %167 = OpAccessChain %30 %27 
                                                      OpStore %167 %166 
                                         f32 %169 = OpLoad %21 
                                Private f32* %170 = OpAccessChain %30 %27 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                         f32 %173 = OpFAdd %172 %117 
                                Private f32* %174 = OpAccessChain %168 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %154 
                                       f32_3 %176 = OpLoad %168 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %154 %178 
                                Private f32* %180 = OpAccessChain %9 %179 
                                         f32 %181 = OpLoad %180 
                                Uniform f32* %183 = OpAccessChain %46 %182 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFNegate %184 
                                         f32 %186 = OpFAdd %181 %185 
                                Private f32* %187 = OpAccessChain %90 %27 
                                                      OpStore %187 %186 
                                Private f32* %191 = OpAccessChain %90 %27 
                                         f32 %192 = OpLoad %191 
                                        bool %193 = OpFOrdLessThan %192 %76 
                                                      OpStore %190 %193 
                                        bool %194 = OpLoad %190 
                                         i32 %196 = OpSelect %194 %195 %48 
                                         i32 %198 = OpIMul %196 %197 
                                        bool %199 = OpINotEqual %198 %48 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %201 
                                             %200 = OpLabel 
                                                      OpKill
                                             %201 = OpLabel 
                                       f32_3 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                              Uniform f32_4* %209 = OpAccessChain %46 %207 %195 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %206 %211 
                                                      OpStore %168 %212 
                              Uniform f32_4* %213 = OpAccessChain %46 %207 %48 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpLoad %204 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_3 %219 = OpLoad %168 
                                       f32_3 %220 = OpFAdd %218 %219 
                                                      OpStore %168 %220 
                              Uniform f32_4* %222 = OpAccessChain %46 %207 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpLoad %204 
                                       f32_3 %226 = OpVectorShuffle %225 %225 2 2 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_3 %228 = OpLoad %168 
                                       f32_3 %229 = OpFAdd %227 %228 
                                                      OpStore %168 %229 
                                       f32_3 %230 = OpLoad %168 
                              Uniform f32_4* %232 = OpAccessChain %46 %207 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFAdd %230 %234 
                                                      OpStore %168 %235 
                                Uniform f32* %237 = OpAccessChain %46 %221 %27 
                                         f32 %238 = OpLoad %237 
                                        bool %239 = OpFOrdEqual %238 %117 
                                                      OpStore %236 %239 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %242 
                                             %241 = OpLabel 
                                        bool %243 = OpLoad %236 
                                                      OpSelectionMerge %245 None 
                                                      OpBranchConditional %243 %244 %245 
                                             %244 = OpLabel 
                                                      OpBranch %245 
                                             %245 = OpLabel 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %246 %247 %345 
                                             %247 = OpLabel 
                                Uniform f32* %249 = OpAccessChain %46 %221 %33 
                                         f32 %250 = OpLoad %249 
                                        bool %251 = OpFOrdEqual %250 %117 
                                                      OpStore %236 %251 
                                       f32_3 %252 = OpLoad %204 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %254 = OpAccessChain %46 %231 %195 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %253 %256 
                                       f32_4 %258 = OpLoad %70 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %70 %259 
                              Uniform f32_4* %260 = OpAccessChain %46 %231 %48 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpLoad %204 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 0 0 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %70 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %70 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %70 %270 
                              Uniform f32_4* %271 = OpAccessChain %46 %231 %221 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %204 
                                       f32_3 %275 = OpVectorShuffle %274 %274 2 2 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %70 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %70 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %70 %281 
                                       f32_4 %282 = OpLoad %70 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %284 = OpAccessChain %46 %231 %231 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %283 %286 
                                       f32_4 %288 = OpLoad %70 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %70 %289 
                                        bool %292 = OpLoad %236 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                       f32_4 %295 = OpLoad %70 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                       f32_3 %298 = OpLoad %204 
                                                      OpStore %291 %298 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                       f32_3 %299 = OpLoad %291 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                                       f32_4 %302 = OpLoad %70 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_3* %306 = OpAccessChain %46 %304 
                                       f32_3 %307 = OpLoad %306 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpFAdd %303 %308 
                                       f32_4 %310 = OpLoad %70 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %70 %311 
                                       f32_4 %312 = OpLoad %70 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                              Uniform f32_3* %315 = OpAccessChain %46 %314 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %313 %316 
                                       f32_4 %318 = OpLoad %70 
                                       f32_4 %319 = OpVectorShuffle %318 %317 0 4 5 6 
                                                      OpStore %70 %319 
                                Private f32* %321 = OpAccessChain %70 %33 
                                         f32 %322 = OpLoad %321 
                                         f32 %324 = OpFMul %322 %323 
                                         f32 %325 = OpFAdd %324 %101 
                                                      OpStore %320 %325 
                                Uniform f32* %326 = OpAccessChain %46 %221 %49 
                                         f32 %327 = OpLoad %326 
                                         f32 %329 = OpFMul %327 %328 
                                         f32 %330 = OpFAdd %329 %101 
                                                      OpStore %111 %330 
                                         f32 %331 = OpLoad %320 
                                         f32 %332 = OpLoad %111 
                                         f32 %333 = OpExtInst %1 40 %331 %332 
                                Private f32* %334 = OpAccessChain %70 %27 
                                                      OpStore %334 %333 
                  read_only Texture3DSampled %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %70 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpImageSampleImplicitLod %339 %341 
                                                      OpStore %70 %342 
                                       f32_4 %344 = OpLoad %70 
                                                      OpStore %343 %344 
                                                      OpBranch %248 
                                             %345 = OpLabel 
                                Private f32* %346 = OpAccessChain %343 %27 
                                                      OpStore %346 %117 
                                Private f32* %347 = OpAccessChain %343 %33 
                                                      OpStore %347 %117 
                                Private f32* %348 = OpAccessChain %343 %49 
                                                      OpStore %348 %117 
                                Private f32* %349 = OpAccessChain %343 %179 
                                                      OpStore %349 %117 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                       f32_4 %350 = OpLoad %343 
                              Uniform f32_4* %351 = OpAccessChain %46 %195 
                                       f32_4 %352 = OpLoad %351 
                                         f32 %353 = OpDot %350 %352 
                                Private f32* %354 = OpAccessChain %90 %27 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %90 %27 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 43 %356 %76 %117 
                                Private f32* %358 = OpAccessChain %90 %27 
                                                      OpStore %358 %357 
                                       f32_3 %359 = OpLoad %168 
                                       f32_3 %360 = OpLoad %168 
                                         f32 %361 = OpDot %359 %360 
                                Private f32* %362 = OpAccessChain %168 %27 
                                                      OpStore %362 %361 
                  read_only Texture2DSampled %364 = OpLoad %363 
                                       f32_3 %365 = OpLoad %168 
                                       f32_2 %366 = OpVectorShuffle %365 %365 0 0 
                                       f32_4 %367 = OpImageSampleImplicitLod %364 %366 
                                         f32 %368 = OpCompositeExtract %367 3 
                                Private f32* %369 = OpAccessChain %168 %27 
                                                      OpStore %369 %368 
                                Private f32* %370 = OpAccessChain %90 %27 
                                         f32 %371 = OpLoad %370 
                                Private f32* %372 = OpAccessChain %168 %27 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                Private f32* %375 = OpAccessChain %168 %27 
                                                      OpStore %375 %374 
                                       f32_3 %376 = OpLoad %154 
                              Uniform f32_4* %378 = OpAccessChain %46 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %376 %380 
                                                      OpStore %90 %381 
                                       f32_3 %384 = OpLoad %168 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 0 0 
                                       f32_3 %386 = OpLoad %90 
                                       f32_3 %387 = OpFMul %385 %386 
                                       f32_4 %388 = OpLoad %383 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %383 %389 
                                Private f32* %390 = OpAccessChain %9 %179 
                                         f32 %391 = OpLoad %390 
                                 Output f32* %393 = OpAccessChain %383 %179 
                                                      OpStore %393 %391 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec2 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
float u_xlat16_4;
float u_xlat7;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat16_4 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4 = u_xlat16_4 * 0.75;
    u_xlat4.x = u_xlat16_4 * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat0.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat10_0.xyz;
    u_xlat4.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat4.x + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2.x);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 180
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                                             %174 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                 Output f32* %175 = OpAccessChain %92 %28 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFNegate %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                                      OpStore %178 %177 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 333
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %33 %215 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 RelaxedPrecision 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 RelaxedPrecision 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpMemberDecorate %43 11 RelaxedPrecision 
                                                      OpMemberDecorate %43 11 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %208 SpecId 208 
                                                      OpDecorate %215 Location 215 
                                                      OpDecorate %295 DescriptorSet 295 
                                                      OpDecorate %295 Binding 295 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 Location 321 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Private %29 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %7 
                                 Input f32_4* %33 = OpVariable Input 
                                          u32 %34 = OpConstant 1 
                                              %35 = OpTypePointer Input %6 
                                          f32 %38 = OpConstant 3.674022E-40 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %7 %7 %7 %42 %29 %29 %7 %6 %6 %6 %6 %6 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32; f32; f32;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 0 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 8 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                                 Private f32* %91 = OpVariable Private 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %94 %95 %96 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 9 
                                Private f32* %108 = OpVariable Private 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         i32 %137 = OpConstant 7 
                                         f32 %148 = OpConstant 3.674022E-40 
                              Private f32_3* %151 = OpVariable Private 
                                         i32 %159 = OpConstant 10 
                                         f32 %162 = OpConstant 3.674022E-40 
                              Private f32_4* %165 = OpVariable Private 
                                         u32 %176 = OpConstant 3 
                                         i32 %179 = OpConstant 11 
                                             %184 = OpTypeBool 
                                             %185 = OpTypePointer Private %184 
                               Private bool* %186 = OpVariable Private 
                                         i32 %190 = OpConstant 1 
                                         i32 %192 = OpConstant -1 
                                         i32 %198 = OpConstant 2 
                                        bool %202 = OpConstantFalse 
                                        bool %208 = OpSpecConstantFalse 
                                             %214 = OpTypePointer Input %29 
                                Input f32_3* %215 = OpVariable Input 
                                         i32 %218 = OpConstant 3 
                                             %219 = OpTypePointer Uniform %7 
                                             %245 = OpTypePointer Function %29 
                                         i32 %258 = OpConstant 5 
                                             %259 = OpTypePointer Uniform %29 
                                         i32 %268 = OpConstant 4 
                                         f32 %276 = OpConstant 3.674022E-40 
                                         f32 %282 = OpConstant 3.674022E-40 
                                             %292 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %293 = OpTypeSampledImage %292 
                                             %294 = OpTypePointer UniformConstant %293 
 UniformConstant read_only Texture3DSampled* %295 = OpVariable UniformConstant 
                              Private f32_4* %300 = OpVariable Private 
                              Private f32_3* %313 = OpVariable Private 
                                         i32 %315 = OpConstant 6 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                             %330 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %246 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %36 = OpAccessChain %33 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %39 = OpFMul %37 %38 
                                 Private f32* %40 = OpAccessChain %31 %27 
                                                      OpStore %40 %39 
                                 Uniform f32* %50 = OpAccessChain %45 %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %31 %27 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %31 %27 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %31 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpExtInst %1 13 %59 
                                 Private f32* %61 = OpAccessChain %31 %27 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %31 %27 
                                          f32 %63 = OpLoad %62 
                                 Uniform f32* %65 = OpAccessChain %45 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFMul %63 %66 
                                 Private f32* %68 = OpAccessChain %31 %27 
                                                      OpStore %68 %67 
                                 Private f32* %71 = OpAccessChain %31 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %34 
                                                      OpStore %77 %76 
                                        f32_2 %78 = OpLoad %70 
                                        f32_4 %79 = OpLoad %33 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFAdd %78 %80 
                                        f32_3 %82 = OpLoad %31 
                                        f32_3 %83 = OpVectorShuffle %82 %81 3 4 2 
                                                      OpStore %31 %83 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                        f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %84 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %98 = OpDot %93 %97 
                                                      OpStore %91 %98 
                                          f32 %99 = OpLoad %91 
                                         f32 %101 = OpFMul %99 %100 
                                                      OpStore %91 %101 
                                         f32 %102 = OpLoad %91 
                                Uniform f32* %104 = OpAccessChain %45 %103 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %102 %105 
                                Private f32* %107 = OpAccessChain %70 %27 
                                                      OpStore %107 %106 
                                  Input f32* %109 = OpAccessChain %33 %34 
                                         f32 %110 = OpLoad %109 
                                         f32 %112 = OpFAdd %110 %111 
                                                      OpStore %108 %112 
                                         f32 %113 = OpLoad %108 
                                         f32 %115 = OpExtInst %1 43 %113 %76 %114 
                                                      OpStore %108 %115 
                                         f32 %116 = OpLoad %108 
                                         f32 %118 = OpFMul %116 %117 
                                                      OpStore %108 %118 
                                         f32 %119 = OpLoad %108 
                                         f32 %120 = OpExtInst %1 37 %119 %114 
                                                      OpStore %108 %120 
                                         f32 %121 = OpLoad %108 
                                Private f32* %122 = OpAccessChain %70 %27 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFNegate %123 
                                         f32 %125 = OpFMul %121 %124 
                                Private f32* %126 = OpAccessChain %70 %27 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFAdd %125 %127 
                                Private f32* %129 = OpAccessChain %70 %27 
                                                      OpStore %129 %128 
                                         f32 %130 = OpLoad %21 
                                Private f32* %131 = OpAccessChain %70 %27 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFMul %130 %132 
                                Private f32* %134 = OpAccessChain %70 %27 
                                                      OpStore %134 %133 
                                Private f32* %135 = OpAccessChain %70 %27 
                                         f32 %136 = OpLoad %135 
                                Uniform f32* %138 = OpAccessChain %45 %137 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                Private f32* %141 = OpAccessChain %70 %27 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %70 %27 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %143 %100 
                                Private f32* %145 = OpAccessChain %70 %27 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %70 %27 
                                         f32 %147 = OpLoad %146 
                                         f32 %149 = OpExtInst %1 37 %147 %148 
                                Private f32* %150 = OpAccessChain %70 %27 
                                                      OpStore %150 %149 
                                       f32_3 %152 = OpLoad %84 
                                       f32_2 %153 = OpLoad %70 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 0 0 
                                       f32_3 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFAdd %155 %157 
                                                      OpStore %151 %158 
                                Uniform f32* %160 = OpAccessChain %45 %159 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpFAdd %161 %162 
                                Private f32* %164 = OpAccessChain %31 %27 
                                                      OpStore %164 %163 
                                         f32 %166 = OpLoad %21 
                                Private f32* %167 = OpAccessChain %31 %27 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                         f32 %170 = OpFAdd %169 %114 
                                Private f32* %171 = OpAccessChain %165 %27 
                                                      OpStore %171 %170 
                                       f32_3 %172 = OpLoad %151 
                                       f32_4 %173 = OpLoad %165 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 0 0 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore %151 %175 
                                Private f32* %177 = OpAccessChain %9 %176 
                                         f32 %178 = OpLoad %177 
                                Uniform f32* %180 = OpAccessChain %45 %179 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                         f32 %183 = OpFAdd %178 %182 
                                                      OpStore %91 %183 
                                         f32 %187 = OpLoad %91 
                                        bool %188 = OpFOrdLessThan %187 %76 
                                                      OpStore %186 %188 
                                        bool %189 = OpLoad %186 
                                         i32 %191 = OpSelect %189 %190 %47 
                                         i32 %193 = OpIMul %191 %192 
                                        bool %194 = OpINotEqual %193 %47 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %196 
                                             %195 = OpLabel 
                                                      OpKill
                                             %196 = OpLabel 
                                Uniform f32* %199 = OpAccessChain %45 %198 %27 
                                         f32 %200 = OpLoad %199 
                                        bool %201 = OpFOrdEqual %200 %114 
                                                      OpStore %186 %201 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %204 
                                             %203 = OpLabel 
                                        bool %205 = OpLoad %186 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %207 
                                             %206 = OpLabel 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %302 
                                             %209 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %45 %198 %34 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %114 
                                                      OpStore %186 %213 
                                       f32_3 %216 = OpLoad %215 
                                       f32_3 %217 = OpVectorShuffle %216 %216 1 1 1 
                              Uniform f32_4* %220 = OpAccessChain %45 %218 %190 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %217 %222 
                                                      OpStore %31 %223 
                              Uniform f32_4* %224 = OpAccessChain %45 %218 %47 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpLoad %215 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %31 
                                       f32_3 %231 = OpFAdd %229 %230 
                                                      OpStore %31 %231 
                              Uniform f32_4* %232 = OpAccessChain %45 %218 %198 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpLoad %215 
                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
                                       f32_3 %237 = OpFMul %234 %236 
                                       f32_3 %238 = OpLoad %31 
                                       f32_3 %239 = OpFAdd %237 %238 
                                                      OpStore %31 %239 
                                       f32_3 %240 = OpLoad %31 
                              Uniform f32_4* %241 = OpAccessChain %45 %218 %218 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFAdd %240 %243 
                                                      OpStore %31 %244 
                                        bool %247 = OpLoad %186 
                                                      OpSelectionMerge %249 None 
                                                      OpBranchConditional %247 %248 %251 
                                             %248 = OpLabel 
                                       f32_3 %250 = OpLoad %31 
                                                      OpStore %246 %250 
                                                      OpBranch %249 
                                             %251 = OpLabel 
                                       f32_3 %252 = OpLoad %215 
                                                      OpStore %246 %252 
                                                      OpBranch %249 
                                             %249 = OpLabel 
                                       f32_3 %253 = OpLoad %246 
                                       f32_4 %254 = OpLoad %165 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %165 %255 
                                       f32_4 %256 = OpLoad %165 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                              Uniform f32_3* %260 = OpAccessChain %45 %258 
                                       f32_3 %261 = OpLoad %260 
                                       f32_3 %262 = OpFNegate %261 
                                       f32_3 %263 = OpFAdd %257 %262 
                                       f32_4 %264 = OpLoad %165 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %165 %265 
                                       f32_4 %266 = OpLoad %165 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                              Uniform f32_3* %269 = OpAccessChain %45 %268 
                                       f32_3 %270 = OpLoad %269 
                                       f32_3 %271 = OpFMul %267 %270 
                                       f32_4 %272 = OpLoad %165 
                                       f32_4 %273 = OpVectorShuffle %272 %271 0 4 5 6 
                                                      OpStore %165 %273 
                                Private f32* %274 = OpAccessChain %165 %34 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %100 
                                Private f32* %279 = OpAccessChain %31 %27 
                                                      OpStore %279 %278 
                                Uniform f32* %280 = OpAccessChain %45 %198 %48 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %284 = OpFAdd %283 %100 
                                Private f32* %285 = OpAccessChain %70 %27 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %31 %27 
                                         f32 %287 = OpLoad %286 
                                Private f32* %288 = OpAccessChain %70 %27 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 40 %287 %289 
                                Private f32* %291 = OpAccessChain %165 %27 
                                                      OpStore %291 %290 
                  read_only Texture3DSampled %296 = OpLoad %295 
                                       f32_4 %297 = OpLoad %165 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 2 3 
                                       f32_4 %299 = OpImageSampleImplicitLod %296 %298 
                                                      OpStore %165 %299 
                                       f32_4 %301 = OpLoad %165 
                                                      OpStore %300 %301 
                                                      OpBranch %210 
                                             %302 = OpLabel 
                                Private f32* %303 = OpAccessChain %300 %27 
                                                      OpStore %303 %114 
                                Private f32* %304 = OpAccessChain %300 %34 
                                                      OpStore %304 %114 
                                Private f32* %305 = OpAccessChain %300 %48 
                                                      OpStore %305 %114 
                                Private f32* %306 = OpAccessChain %300 %176 
                                                      OpStore %306 %114 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                       f32_4 %307 = OpLoad %300 
                              Uniform f32_4* %308 = OpAccessChain %45 %190 
                                       f32_4 %309 = OpLoad %308 
                                         f32 %310 = OpDot %307 %309 
                                                      OpStore %91 %310 
                                         f32 %311 = OpLoad %91 
                                         f32 %312 = OpExtInst %1 43 %311 %76 %114 
                                                      OpStore %91 %312 
                                       f32_3 %314 = OpLoad %151 
                              Uniform f32_4* %316 = OpAccessChain %45 %315 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %319 = OpFMul %314 %318 
                                                      OpStore %313 %319 
                                         f32 %322 = OpLoad %91 
                                       f32_3 %323 = OpCompositeConstruct %322 %322 %322 
                                       f32_3 %324 = OpLoad %313 
                                       f32_3 %325 = OpFMul %323 %324 
                                       f32_4 %326 = OpLoad %321 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %321 %327 
                                Private f32* %328 = OpAccessChain %9 %176 
                                         f32 %329 = OpLoad %328 
                                 Output f32* %331 = OpAccessChain %321 %176 
                                                      OpStore %331 %329 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat5;
float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat9;
vec2 u_xlat10;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat16_5 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5 = u_xlat16_5 * 0.75;
    u_xlat5.x = u_xlat16_5 * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat0.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat10_0.xyz;
    u_xlat5.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat5.x + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 180
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                                             %174 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                 Output f32* %175 = OpAccessChain %92 %28 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFNegate %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                                      OpStore %178 %177 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 420
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %32 %206 %408 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 RelaxedPrecision 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 RelaxedPrecision 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 RelaxedPrecision 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %244 SpecId 244 
                                                      OpDecorate %328 DescriptorSet 328 
                                                      OpDecorate %328 Binding 328 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %368 DescriptorSet 368 
                                                      OpDecorate %368 Binding 368 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %408 Location 408 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %15 
                               Private f32_2* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %7 
                                 Input f32_4* %32 = OpVariable Input 
                                          u32 %33 = OpConstant 1 
                                              %34 = OpTypePointer Input %6 
                                          f32 %37 = OpConstant 3.674022E-40 
                                          u32 %40 = OpConstant 4 
                                              %41 = OpTypeArray %7 %40 
                                              %42 = OpTypeVector %6 3 
                                              %43 = OpTypeArray %7 %40 
                                              %44 = OpTypeStruct %7 %7 %7 %41 %42 %42 %7 %43 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 9 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                                              %83 = OpTypePointer Private %42 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                                 Private f32* %90 = OpVariable Private 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                        f32_3 %96 = OpConstantComposite %93 %94 %95 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         i32 %102 = OpConstant 10 
                              Private f32_3* %107 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %144 = OpConstant 8 
                                         f32 %155 = OpConstant 3.674022E-40 
                              Private f32_3* %158 = OpVariable Private 
                                         i32 %166 = OpConstant 11 
                                         f32 %169 = OpConstant 3.674022E-40 
                              Private f32_4* %172 = OpVariable Private 
                                         u32 %183 = OpConstant 3 
                                         i32 %186 = OpConstant 12 
                                             %191 = OpTypeBool 
                                             %192 = OpTypePointer Private %191 
                               Private bool* %193 = OpVariable Private 
                                         i32 %197 = OpConstant 1 
                                         i32 %199 = OpConstant -1 
                                             %205 = OpTypePointer Input %42 
                                Input f32_3* %206 = OpVariable Input 
                                         i32 %209 = OpConstant 7 
                                             %210 = OpTypePointer Uniform %7 
                                         i32 %221 = OpConstant 2 
                                         i32 %230 = OpConstant 3 
                               Private bool* %234 = OpVariable Private 
                                        bool %238 = OpConstantFalse 
                                        bool %244 = OpSpecConstantFalse 
                                             %277 = OpTypePointer Function %42 
                                         i32 %290 = OpConstant 5 
                                             %291 = OpTypePointer Uniform %42 
                                         i32 %300 = OpConstant 4 
                                         f32 %308 = OpConstant 3.674022E-40 
                              Private f32_2* %312 = OpVariable Private 
                                         f32 %315 = OpConstant 3.674022E-40 
                                             %325 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %326 = OpTypeSampledImage %325 
                                             %327 = OpTypePointer UniformConstant %326 
 UniformConstant read_only Texture3DSampled* %328 = OpVariable UniformConstant 
                              Private f32_4* %333 = OpVariable Private 
                               Private bool* %346 = OpVariable Private 
                              Private f32_3* %350 = OpVariable Private 
                                             %351 = OpTypePointer Function %6 
                                       f32_2 %365 = OpConstantComposite %315 %315 
                                Private f32* %367 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %368 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %384 = OpVariable UniformConstant 
                                         i32 %402 = OpConstant 6 
                                             %407 = OpTypePointer Output %7 
                               Output f32_4* %408 = OpVariable Output 
                                             %417 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %278 = OpVariable Function 
                               Function f32* %352 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %35 = OpAccessChain %32 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %30 %27 
                                                      OpStore %39 %38 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %30 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %30 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %30 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %30 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %30 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %30 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %30 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %33 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %32 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                                      OpStore %30 %82 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_2 %87 = OpLoad %30 
                                        f32_4 %88 = OpImageSampleImplicitLod %86 %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                                      OpStore %84 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                          f32 %97 = OpDot %92 %96 
                                                      OpStore %90 %97 
                                          f32 %98 = OpLoad %90 
                                         f32 %100 = OpFMul %98 %99 
                                                      OpStore %90 %100 
                                         f32 %101 = OpLoad %90 
                                Uniform f32* %103 = OpAccessChain %46 %102 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFMul %101 %104 
                                Private f32* %106 = OpAccessChain %70 %27 
                                                      OpStore %106 %105 
                                  Input f32* %108 = OpAccessChain %32 %33 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpFAdd %109 %110 
                                Private f32* %112 = OpAccessChain %107 %27 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %107 %27 
                                         f32 %114 = OpLoad %113 
                                         f32 %116 = OpExtInst %1 43 %114 %76 %115 
                                Private f32* %117 = OpAccessChain %107 %27 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %107 %27 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpFMul %119 %120 
                                Private f32* %122 = OpAccessChain %107 %27 
                                                      OpStore %122 %121 
                                Private f32* %123 = OpAccessChain %107 %27 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpExtInst %1 37 %124 %115 
                                Private f32* %126 = OpAccessChain %107 %27 
                                                      OpStore %126 %125 
                                Private f32* %127 = OpAccessChain %107 %27 
                                         f32 %128 = OpLoad %127 
                                Private f32* %129 = OpAccessChain %70 %27 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFMul %128 %131 
                                Private f32* %133 = OpAccessChain %70 %27 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %70 %27 
                                                      OpStore %136 %135 
                                         f32 %137 = OpLoad %21 
                                Private f32* %138 = OpAccessChain %70 %27 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %137 %139 
                                Private f32* %141 = OpAccessChain %70 %27 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %70 %27 
                                         f32 %143 = OpLoad %142 
                                Uniform f32* %145 = OpAccessChain %46 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %143 %146 
                                Private f32* %148 = OpAccessChain %70 %27 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %70 %27 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFMul %150 %99 
                                Private f32* %152 = OpAccessChain %70 %27 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %70 %27 
                                         f32 %154 = OpLoad %153 
                                         f32 %156 = OpExtInst %1 37 %154 %155 
                                Private f32* %157 = OpAccessChain %70 %27 
                                                      OpStore %157 %156 
                                       f32_3 %159 = OpLoad %84 
                                       f32_4 %160 = OpLoad %70 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                                      OpStore %158 %165 
                                Uniform f32* %167 = OpAccessChain %46 %166 
                                         f32 %168 = OpLoad %167 
                                         f32 %170 = OpFAdd %168 %169 
                                Private f32* %171 = OpAccessChain %30 %27 
                                                      OpStore %171 %170 
                                         f32 %173 = OpLoad %21 
                                Private f32* %174 = OpAccessChain %30 %27 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                         f32 %177 = OpFAdd %176 %115 
                                Private f32* %178 = OpAccessChain %172 %27 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %158 
                                       f32_4 %180 = OpLoad %172 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore %158 %182 
                                Private f32* %184 = OpAccessChain %9 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %187 = OpAccessChain %46 %186 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %185 %189 
                                                      OpStore %90 %190 
                                         f32 %194 = OpLoad %90 
                                        bool %195 = OpFOrdLessThan %194 %76 
                                                      OpStore %193 %195 
                                        bool %196 = OpLoad %193 
                                         i32 %198 = OpSelect %196 %197 %48 
                                         i32 %200 = OpIMul %198 %199 
                                        bool %201 = OpINotEqual %200 %48 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                       f32_3 %207 = OpLoad %206 
                                       f32_4 %208 = OpVectorShuffle %207 %207 1 1 1 1 
                              Uniform f32_4* %211 = OpAccessChain %46 %209 %197 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpFMul %208 %212 
                                                      OpStore %172 %213 
                              Uniform f32_4* %214 = OpAccessChain %46 %209 %48 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpLoad %206 
                                       f32_4 %217 = OpVectorShuffle %216 %216 0 0 0 0 
                                       f32_4 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %172 
                                       f32_4 %220 = OpFAdd %218 %219 
                                                      OpStore %172 %220 
                              Uniform f32_4* %222 = OpAccessChain %46 %209 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpLoad %206 
                                       f32_4 %225 = OpVectorShuffle %224 %224 2 2 2 2 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %172 
                                       f32_4 %228 = OpFAdd %226 %227 
                                                      OpStore %172 %228 
                                       f32_4 %229 = OpLoad %172 
                              Uniform f32_4* %231 = OpAccessChain %46 %209 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpFAdd %229 %232 
                                                      OpStore %172 %233 
                                Uniform f32* %235 = OpAccessChain %46 %221 %27 
                                         f32 %236 = OpLoad %235 
                                        bool %237 = OpFOrdEqual %236 %115 
                                                      OpStore %234 %237 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                        bool %241 = OpLoad %234 
                                                      OpSelectionMerge %243 None 
                                                      OpBranchConditional %241 %242 %243 
                                             %242 = OpLabel 
                                                      OpBranch %243 
                                             %243 = OpLabel 
                                                      OpBranch %240 
                                             %240 = OpLabel 
                                                      OpSelectionMerge %246 None 
                                                      OpBranchConditional %244 %245 %335 
                                             %245 = OpLabel 
                                Uniform f32* %247 = OpAccessChain %46 %221 %33 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdEqual %248 %115 
                                                      OpStore %234 %249 
                                       f32_3 %250 = OpLoad %206 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %46 %230 %197 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %251 %254 
                                                      OpStore %107 %255 
                              Uniform f32_4* %256 = OpAccessChain %46 %230 %48 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %206 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %107 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %107 %263 
                              Uniform f32_4* %264 = OpAccessChain %46 %230 %221 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpLoad %206 
                                       f32_3 %268 = OpVectorShuffle %267 %267 2 2 2 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %107 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %107 %271 
                                       f32_3 %272 = OpLoad %107 
                              Uniform f32_4* %273 = OpAccessChain %46 %230 %230 
                                       f32_4 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFAdd %272 %275 
                                                      OpStore %107 %276 
                                        bool %279 = OpLoad %234 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %283 
                                             %280 = OpLabel 
                                       f32_3 %282 = OpLoad %107 
                                                      OpStore %278 %282 
                                                      OpBranch %281 
                                             %283 = OpLabel 
                                       f32_3 %284 = OpLoad %206 
                                                      OpStore %278 %284 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                       f32_3 %285 = OpLoad %278 
                                       f32_4 %286 = OpLoad %70 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                                      OpStore %70 %287 
                                       f32_4 %288 = OpLoad %70 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                              Uniform f32_3* %292 = OpAccessChain %46 %290 
                                       f32_3 %293 = OpLoad %292 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %289 %294 
                                       f32_4 %296 = OpLoad %70 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                                      OpStore %70 %297 
                                       f32_4 %298 = OpLoad %70 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_3* %301 = OpAccessChain %46 %300 
                                       f32_3 %302 = OpLoad %301 
                                       f32_3 %303 = OpFMul %299 %302 
                                       f32_4 %304 = OpLoad %70 
                                       f32_4 %305 = OpVectorShuffle %304 %303 0 4 5 6 
                                                      OpStore %70 %305 
                                Private f32* %306 = OpAccessChain %70 %33 
                                         f32 %307 = OpLoad %306 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %310 = OpFAdd %309 %99 
                                Private f32* %311 = OpAccessChain %107 %27 
                                                      OpStore %311 %310 
                                Uniform f32* %313 = OpAccessChain %46 %221 %49 
                                         f32 %314 = OpLoad %313 
                                         f32 %316 = OpFMul %314 %315 
                                         f32 %317 = OpFAdd %316 %99 
                                Private f32* %318 = OpAccessChain %312 %27 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %107 %27 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %312 %27 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpExtInst %1 40 %320 %322 
                                Private f32* %324 = OpAccessChain %70 %27 
                                                      OpStore %324 %323 
                  read_only Texture3DSampled %329 = OpLoad %328 
                                       f32_4 %330 = OpLoad %70 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 2 3 
                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
                                                      OpStore %70 %332 
                                       f32_4 %334 = OpLoad %70 
                                                      OpStore %333 %334 
                                                      OpBranch %246 
                                             %335 = OpLabel 
                                Private f32* %336 = OpAccessChain %333 %27 
                                                      OpStore %336 %115 
                                Private f32* %337 = OpAccessChain %333 %33 
                                                      OpStore %337 %115 
                                Private f32* %338 = OpAccessChain %333 %49 
                                                      OpStore %338 %115 
                                Private f32* %339 = OpAccessChain %333 %183 
                                                      OpStore %339 %115 
                                                      OpBranch %246 
                                             %246 = OpLabel 
                                       f32_4 %340 = OpLoad %333 
                              Uniform f32_4* %341 = OpAccessChain %46 %197 
                                       f32_4 %342 = OpLoad %341 
                                         f32 %343 = OpDot %340 %342 
                                                      OpStore %90 %343 
                                         f32 %344 = OpLoad %90 
                                         f32 %345 = OpExtInst %1 43 %344 %76 %115 
                                                      OpStore %90 %345 
                                Private f32* %347 = OpAccessChain %172 %49 
                                         f32 %348 = OpLoad %347 
                                        bool %349 = OpFOrdLessThan %76 %348 
                                                      OpStore %346 %349 
                                        bool %353 = OpLoad %346 
                                                      OpSelectionMerge %355 None 
                                                      OpBranchConditional %353 %354 %356 
                                             %354 = OpLabel 
                                                      OpStore %352 %115 
                                                      OpBranch %355 
                                             %356 = OpLabel 
                                                      OpStore %352 %76 
                                                      OpBranch %355 
                                             %355 = OpLabel 
                                         f32 %357 = OpLoad %352 
                                Private f32* %358 = OpAccessChain %350 %27 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %172 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_4 %361 = OpLoad %172 
                                       f32_2 %362 = OpVectorShuffle %361 %361 3 3 
                                       f32_2 %363 = OpFDiv %360 %362 
                                                      OpStore %312 %363 
                                       f32_2 %364 = OpLoad %312 
                                       f32_2 %366 = OpFAdd %364 %365 
                                                      OpStore %312 %366 
                  read_only Texture2DSampled %369 = OpLoad %368 
                                       f32_2 %370 = OpLoad %312 
                                       f32_4 %371 = OpImageSampleImplicitLod %369 %370 
                                         f32 %372 = OpCompositeExtract %371 3 
                                                      OpStore %367 %372 
                                         f32 %373 = OpLoad %367 
                                Private f32* %374 = OpAccessChain %350 %27 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFMul %373 %375 
                                Private f32* %377 = OpAccessChain %350 %27 
                                                      OpStore %377 %376 
                                       f32_4 %378 = OpLoad %172 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_4 %380 = OpLoad %172 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                         f32 %382 = OpDot %379 %381 
                                Private f32* %383 = OpAccessChain %172 %27 
                                                      OpStore %383 %382 
                  read_only Texture2DSampled %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %172 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 0 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                         f32 %389 = OpCompositeExtract %388 3 
                                Private f32* %390 = OpAccessChain %172 %27 
                                                      OpStore %390 %389 
                                Private f32* %391 = OpAccessChain %172 %27 
                                         f32 %392 = OpLoad %391 
                                Private f32* %393 = OpAccessChain %350 %27 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                Private f32* %396 = OpAccessChain %350 %27 
                                                      OpStore %396 %395 
                                         f32 %397 = OpLoad %90 
                                Private f32* %398 = OpAccessChain %350 %27 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFMul %397 %399 
                                                      OpStore %90 %400 
                                       f32_3 %401 = OpLoad %158 
                              Uniform f32_4* %403 = OpAccessChain %46 %402 
                                       f32_4 %404 = OpLoad %403 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFMul %401 %405 
                                                      OpStore %350 %406 
                                         f32 %409 = OpLoad %90 
                                       f32_3 %410 = OpCompositeConstruct %409 %409 %409 
                                       f32_3 %411 = OpLoad %350 
                                       f32_3 %412 = OpFMul %410 %411 
                                       f32_4 %413 = OpLoad %408 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %408 %414 
                                Private f32* %415 = OpAccessChain %9 %183 
                                         f32 %416 = OpLoad %415 
                                 Output f32* %418 = OpAccessChain %408 %183 
                                                      OpStore %418 %416 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
vec2 u_xlat5;
float u_xlat16_5;
float u_xlat6;
float u_xlat9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat5.x = vs_TEXCOORD3.y * 500.0;
    u_xlat5.x = _Time.z * 5.0 + u_xlat5.x;
    u_xlat5.x = sin(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _DistortAmount;
    u_xlat2.x = u_xlat5.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat5.xy);
    u_xlat16_5 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5 = u_xlat16_5 * 0.75;
    u_xlat5.x = u_xlat16_5 * _ReflPower;
    u_xlat9 = vs_TEXCOORD3.y + -0.875;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat9 = u_xlat9 * 10.0;
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat5.x = u_xlat9 * (-u_xlat5.x) + u_xlat5.x;
    u_xlat5.x = u_xlat10_1.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _GlobalReflectionsEnabled;
    u_xlat5.x = u_xlat5.x * 0.75;
    u_xlat5.x = min(u_xlat5.x, 0.400000006);
    u_xlat0.xyz = u_xlat10_2.xyz * u_xlat5.xxx + u_xlat10_0.xyz;
    u_xlat5.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat5.x + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 180
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                                             %174 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                 Output f32* %175 = OpAccessChain %92 %28 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFNegate %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                                      OpStore %178 %177 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 407
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %32 %204 %395 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 RelaxedPrecision 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 RelaxedPrecision 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 RelaxedPrecision 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %246 SpecId 246 
                                                      OpDecorate %338 DescriptorSet 338 
                                                      OpDecorate %338 Binding 338 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %362 DescriptorSet 362 
                                                      OpDecorate %362 Binding 362 
                                                      OpDecorate %371 DescriptorSet 371 
                                                      OpDecorate %371 Binding 371 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %395 Location 395 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %15 
                               Private f32_2* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %7 
                                 Input f32_4* %32 = OpVariable Input 
                                          u32 %33 = OpConstant 1 
                                              %34 = OpTypePointer Input %6 
                                          f32 %37 = OpConstant 3.674022E-40 
                                          u32 %40 = OpConstant 4 
                                              %41 = OpTypeArray %7 %40 
                                              %42 = OpTypeVector %6 3 
                                              %43 = OpTypeArray %7 %40 
                                              %44 = OpTypeStruct %7 %7 %7 %41 %42 %42 %7 %43 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 9 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                                              %83 = OpTypePointer Private %42 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %90 = OpVariable Private 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                        f32_3 %96 = OpConstantComposite %93 %94 %95 
                                         f32 %101 = OpConstant 3.674022E-40 
                                         i32 %106 = OpConstant 10 
                                Private f32* %111 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %140 = OpConstant 8 
                                         f32 %151 = OpConstant 3.674022E-40 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %162 = OpConstant 11 
                                         f32 %165 = OpConstant 3.674022E-40 
                              Private f32_3* %168 = OpVariable Private 
                                         u32 %179 = OpConstant 3 
                                         i32 %182 = OpConstant 12 
                                             %188 = OpTypeBool 
                                             %189 = OpTypePointer Private %188 
                               Private bool* %190 = OpVariable Private 
                                         i32 %195 = OpConstant 1 
                                         i32 %197 = OpConstant -1 
                                             %203 = OpTypePointer Input %42 
                                Input f32_3* %204 = OpVariable Input 
                                         i32 %207 = OpConstant 7 
                                             %208 = OpTypePointer Uniform %7 
                                         i32 %221 = OpConstant 2 
                                         i32 %231 = OpConstant 3 
                               Private bool* %236 = OpVariable Private 
                                        bool %240 = OpConstantFalse 
                                        bool %246 = OpSpecConstantFalse 
                                             %290 = OpTypePointer Function %42 
                                         i32 %304 = OpConstant 5 
                                             %305 = OpTypePointer Uniform %42 
                                         i32 %314 = OpConstant 4 
                                Private f32* %320 = OpVariable Private 
                                         f32 %323 = OpConstant 3.674022E-40 
                                         f32 %328 = OpConstant 3.674022E-40 
                                             %335 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %336 = OpTypeSampledImage %335 
                                             %337 = OpTypePointer UniformConstant %336 
 UniformConstant read_only Texture3DSampled* %338 = OpVariable UniformConstant 
                              Private f32_4* %343 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %362 = OpVariable UniformConstant 
                                             %368 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %369 = OpTypeSampledImage %368 
                                             %370 = OpTypePointer UniformConstant %369 
UniformConstant read_only TextureCubeSampled* %371 = OpVariable UniformConstant 
                                         i32 %389 = OpConstant 6 
                                             %394 = OpTypePointer Output %7 
                               Output f32_4* %395 = OpVariable Output 
                                             %404 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %35 = OpAccessChain %32 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %30 %27 
                                                      OpStore %39 %38 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %30 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %30 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %30 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %30 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %30 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %30 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %30 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %33 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %32 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                                      OpStore %30 %82 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_2 %87 = OpLoad %30 
                                        f32_4 %88 = OpImageSampleImplicitLod %86 %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                                      OpStore %84 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                          f32 %97 = OpDot %92 %96 
                                 Private f32* %98 = OpAccessChain %90 %27 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %90 %27 
                                         f32 %100 = OpLoad %99 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %90 %27 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %90 %27 
                                         f32 %105 = OpLoad %104 
                                Uniform f32* %107 = OpAccessChain %46 %106 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %105 %108 
                                Private f32* %110 = OpAccessChain %70 %27 
                                                      OpStore %110 %109 
                                  Input f32* %112 = OpAccessChain %32 %33 
                                         f32 %113 = OpLoad %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %111 %115 
                                         f32 %116 = OpLoad %111 
                                         f32 %118 = OpExtInst %1 43 %116 %76 %117 
                                                      OpStore %111 %118 
                                         f32 %119 = OpLoad %111 
                                         f32 %121 = OpFMul %119 %120 
                                                      OpStore %111 %121 
                                         f32 %122 = OpLoad %111 
                                         f32 %123 = OpExtInst %1 37 %122 %117 
                                                      OpStore %111 %123 
                                         f32 %124 = OpLoad %111 
                                Private f32* %125 = OpAccessChain %70 %27 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFMul %124 %127 
                                Private f32* %129 = OpAccessChain %70 %27 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %70 %27 
                                                      OpStore %132 %131 
                                         f32 %133 = OpLoad %21 
                                Private f32* %134 = OpAccessChain %70 %27 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFMul %133 %135 
                                Private f32* %137 = OpAccessChain %70 %27 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                         f32 %139 = OpLoad %138 
                                Uniform f32* %141 = OpAccessChain %46 %140 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFMul %139 %142 
                                Private f32* %144 = OpAccessChain %70 %27 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %146 %101 
                                Private f32* %148 = OpAccessChain %70 %27 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %70 %27 
                                         f32 %150 = OpLoad %149 
                                         f32 %152 = OpExtInst %1 37 %150 %151 
                                Private f32* %153 = OpAccessChain %70 %27 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_4 %156 = OpLoad %70 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                                      OpStore %154 %161 
                                Uniform f32* %163 = OpAccessChain %46 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %166 = OpFAdd %164 %165 
                                Private f32* %167 = OpAccessChain %30 %27 
                                                      OpStore %167 %166 
                                         f32 %169 = OpLoad %21 
                                Private f32* %170 = OpAccessChain %30 %27 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                         f32 %173 = OpFAdd %172 %117 
                                Private f32* %174 = OpAccessChain %168 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %154 
                                       f32_3 %176 = OpLoad %168 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %154 %178 
                                Private f32* %180 = OpAccessChain %9 %179 
                                         f32 %181 = OpLoad %180 
                                Uniform f32* %183 = OpAccessChain %46 %182 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFNegate %184 
                                         f32 %186 = OpFAdd %181 %185 
                                Private f32* %187 = OpAccessChain %90 %27 
                                                      OpStore %187 %186 
                                Private f32* %191 = OpAccessChain %90 %27 
                                         f32 %192 = OpLoad %191 
                                        bool %193 = OpFOrdLessThan %192 %76 
                                                      OpStore %190 %193 
                                        bool %194 = OpLoad %190 
                                         i32 %196 = OpSelect %194 %195 %48 
                                         i32 %198 = OpIMul %196 %197 
                                        bool %199 = OpINotEqual %198 %48 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %201 
                                             %200 = OpLabel 
                                                      OpKill
                                             %201 = OpLabel 
                                       f32_3 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                              Uniform f32_4* %209 = OpAccessChain %46 %207 %195 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %206 %211 
                                                      OpStore %168 %212 
                              Uniform f32_4* %213 = OpAccessChain %46 %207 %48 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpLoad %204 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_3 %219 = OpLoad %168 
                                       f32_3 %220 = OpFAdd %218 %219 
                                                      OpStore %168 %220 
                              Uniform f32_4* %222 = OpAccessChain %46 %207 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpLoad %204 
                                       f32_3 %226 = OpVectorShuffle %225 %225 2 2 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_3 %228 = OpLoad %168 
                                       f32_3 %229 = OpFAdd %227 %228 
                                                      OpStore %168 %229 
                                       f32_3 %230 = OpLoad %168 
                              Uniform f32_4* %232 = OpAccessChain %46 %207 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFAdd %230 %234 
                                                      OpStore %168 %235 
                                Uniform f32* %237 = OpAccessChain %46 %221 %27 
                                         f32 %238 = OpLoad %237 
                                        bool %239 = OpFOrdEqual %238 %117 
                                                      OpStore %236 %239 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %242 
                                             %241 = OpLabel 
                                        bool %243 = OpLoad %236 
                                                      OpSelectionMerge %245 None 
                                                      OpBranchConditional %243 %244 %245 
                                             %244 = OpLabel 
                                                      OpBranch %245 
                                             %245 = OpLabel 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %246 %247 %345 
                                             %247 = OpLabel 
                                Uniform f32* %249 = OpAccessChain %46 %221 %33 
                                         f32 %250 = OpLoad %249 
                                        bool %251 = OpFOrdEqual %250 %117 
                                                      OpStore %236 %251 
                                       f32_3 %252 = OpLoad %204 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %254 = OpAccessChain %46 %231 %195 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %253 %256 
                                       f32_4 %258 = OpLoad %70 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %70 %259 
                              Uniform f32_4* %260 = OpAccessChain %46 %231 %48 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpLoad %204 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 0 0 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %70 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %70 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %70 %270 
                              Uniform f32_4* %271 = OpAccessChain %46 %231 %221 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %204 
                                       f32_3 %275 = OpVectorShuffle %274 %274 2 2 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %70 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %70 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %70 %281 
                                       f32_4 %282 = OpLoad %70 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %284 = OpAccessChain %46 %231 %231 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %283 %286 
                                       f32_4 %288 = OpLoad %70 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %70 %289 
                                        bool %292 = OpLoad %236 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                       f32_4 %295 = OpLoad %70 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                       f32_3 %298 = OpLoad %204 
                                                      OpStore %291 %298 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                       f32_3 %299 = OpLoad %291 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                                       f32_4 %302 = OpLoad %70 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_3* %306 = OpAccessChain %46 %304 
                                       f32_3 %307 = OpLoad %306 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpFAdd %303 %308 
                                       f32_4 %310 = OpLoad %70 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %70 %311 
                                       f32_4 %312 = OpLoad %70 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                              Uniform f32_3* %315 = OpAccessChain %46 %314 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %313 %316 
                                       f32_4 %318 = OpLoad %70 
                                       f32_4 %319 = OpVectorShuffle %318 %317 0 4 5 6 
                                                      OpStore %70 %319 
                                Private f32* %321 = OpAccessChain %70 %33 
                                         f32 %322 = OpLoad %321 
                                         f32 %324 = OpFMul %322 %323 
                                         f32 %325 = OpFAdd %324 %101 
                                                      OpStore %320 %325 
                                Uniform f32* %326 = OpAccessChain %46 %221 %49 
                                         f32 %327 = OpLoad %326 
                                         f32 %329 = OpFMul %327 %328 
                                         f32 %330 = OpFAdd %329 %101 
                                                      OpStore %111 %330 
                                         f32 %331 = OpLoad %320 
                                         f32 %332 = OpLoad %111 
                                         f32 %333 = OpExtInst %1 40 %331 %332 
                                Private f32* %334 = OpAccessChain %70 %27 
                                                      OpStore %334 %333 
                  read_only Texture3DSampled %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %70 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 2 3 
                                       f32_4 %342 = OpImageSampleImplicitLod %339 %341 
                                                      OpStore %70 %342 
                                       f32_4 %344 = OpLoad %70 
                                                      OpStore %343 %344 
                                                      OpBranch %248 
                                             %345 = OpLabel 
                                Private f32* %346 = OpAccessChain %343 %27 
                                                      OpStore %346 %117 
                                Private f32* %347 = OpAccessChain %343 %33 
                                                      OpStore %347 %117 
                                Private f32* %348 = OpAccessChain %343 %49 
                                                      OpStore %348 %117 
                                Private f32* %349 = OpAccessChain %343 %179 
                                                      OpStore %349 %117 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                       f32_4 %350 = OpLoad %343 
                              Uniform f32_4* %351 = OpAccessChain %46 %195 
                                       f32_4 %352 = OpLoad %351 
                                         f32 %353 = OpDot %350 %352 
                                Private f32* %354 = OpAccessChain %90 %27 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %90 %27 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 43 %356 %76 %117 
                                Private f32* %358 = OpAccessChain %90 %27 
                                                      OpStore %358 %357 
                                       f32_3 %359 = OpLoad %168 
                                       f32_3 %360 = OpLoad %168 
                                         f32 %361 = OpDot %359 %360 
                                                      OpStore %320 %361 
                  read_only Texture2DSampled %363 = OpLoad %362 
                                         f32 %364 = OpLoad %320 
                                       f32_2 %365 = OpCompositeConstruct %364 %364 
                                       f32_4 %366 = OpImageSampleImplicitLod %363 %365 
                                         f32 %367 = OpCompositeExtract %366 3 
                                                      OpStore %320 %367 
                read_only TextureCubeSampled %372 = OpLoad %371 
                                       f32_3 %373 = OpLoad %168 
                                       f32_4 %374 = OpImageSampleImplicitLod %372 %373 
                                         f32 %375 = OpCompositeExtract %374 3 
                                Private f32* %376 = OpAccessChain %168 %27 
                                                      OpStore %376 %375 
                                Private f32* %377 = OpAccessChain %168 %27 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpLoad %320 
                                         f32 %380 = OpFMul %378 %379 
                                Private f32* %381 = OpAccessChain %168 %27 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %90 %27 
                                         f32 %383 = OpLoad %382 
                                Private f32* %384 = OpAccessChain %168 %27 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                Private f32* %387 = OpAccessChain %168 %27 
                                                      OpStore %387 %386 
                                       f32_3 %388 = OpLoad %154 
                              Uniform f32_4* %390 = OpAccessChain %46 %389 
                                       f32_4 %391 = OpLoad %390 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFMul %388 %392 
                                                      OpStore %90 %393 
                                       f32_3 %396 = OpLoad %168 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 0 0 
                                       f32_3 %398 = OpLoad %90 
                                       f32_3 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %395 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %395 %401 
                                Private f32* %402 = OpAccessChain %9 %179 
                                         f32 %403 = OpLoad %402 
                                 Output f32* %405 = OpAccessChain %395 %179 
                                                      OpStore %405 %403 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec2 u_xlat4;
float u_xlat16_4;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat4.x = vs_TEXCOORD3.y * 500.0;
    u_xlat4.x = _Time.z * 5.0 + u_xlat4.x;
    u_xlat4.x = sin(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _DistortAmount;
    u_xlat2.x = u_xlat4.x * 0.00100000005;
    u_xlat2.y = 0.0;
    u_xlat4.xy = u_xlat2.xy + vs_TEXCOORD3.xy;
    u_xlat10_2 = texture(_ReflMapFromPixelator, u_xlat4.xy);
    u_xlat16_4 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4 = u_xlat16_4 * 0.75;
    u_xlat4.x = u_xlat16_4 * _ReflPower;
    u_xlat7 = vs_TEXCOORD3.y + -0.875;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat7 = u_xlat7 * 10.0;
    u_xlat7 = min(u_xlat7, 1.0);
    u_xlat4.x = u_xlat7 * (-u_xlat4.x) + u_xlat4.x;
    u_xlat4.x = u_xlat10_1.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _GlobalReflectionsEnabled;
    u_xlat4.x = u_xlat4.x * 0.75;
    u_xlat4.x = min(u_xlat4.x, 0.400000006);
    u_xlat0.xyz = u_xlat10_2.xyz * u_xlat4.xxx + u_xlat10_0.xyz;
    u_xlat4.x = _BoostPower + -1.0;
    u_xlat1.x = u_xlat10_1.x * u_xlat4.x + 1.0;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 180
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                                             %174 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                 Output f32* %175 = OpAccessChain %92 %28 %88 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFNegate %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                                      OpStore %178 %177 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %32 %204 %379 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 RelaxedPrecision 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 RelaxedPrecision 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpMemberDecorate %44 12 RelaxedPrecision 
                                                      OpMemberDecorate %44 12 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %246 SpecId 246 
                                                      OpDecorate %339 DescriptorSet 339 
                                                      OpDecorate %339 Binding 339 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 DescriptorSet 360 
                                                      OpDecorate %360 Binding 360 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %379 Location 379 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %22 = OpVariable UniformConstant 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %15 
                               Private f32_2* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %7 
                                 Input f32_4* %32 = OpVariable Input 
                                          u32 %33 = OpConstant 1 
                                              %34 = OpTypePointer Input %6 
                                          f32 %37 = OpConstant 3.674022E-40 
                                          u32 %40 = OpConstant 4 
                                              %41 = OpTypeArray %7 %40 
                                              %42 = OpTypeVector %6 3 
                                              %43 = OpTypeArray %7 %40 
                                              %44 = OpTypeStruct %7 %7 %7 %41 %42 %42 %7 %43 %6 %6 %6 %6 %6 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32; f32; f32; f32; f32;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 0 
                                          u32 %49 = OpConstant 2 
                                              %50 = OpTypePointer Uniform %6 
                                          f32 %53 = OpConstant 3.674022E-40 
                                          i32 %65 = OpConstant 9 
                               Private f32_4* %70 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                          f32 %76 = OpConstant 3.674022E-40 
                                              %83 = OpTypePointer Private %42 
                               Private f32_3* %84 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %85 = OpVariable UniformConstant 
                               Private f32_3* %90 = OpVariable Private 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                        f32_3 %96 = OpConstantComposite %93 %94 %95 
                                         f32 %101 = OpConstant 3.674022E-40 
                                         i32 %106 = OpConstant 10 
                                Private f32* %111 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %140 = OpConstant 8 
                                         f32 %151 = OpConstant 3.674022E-40 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %162 = OpConstant 11 
                                         f32 %165 = OpConstant 3.674022E-40 
                              Private f32_2* %168 = OpVariable Private 
                                         u32 %179 = OpConstant 3 
                                         i32 %182 = OpConstant 12 
                                             %188 = OpTypeBool 
                                             %189 = OpTypePointer Private %188 
                               Private bool* %190 = OpVariable Private 
                                         i32 %195 = OpConstant 1 
                                         i32 %197 = OpConstant -1 
                                             %203 = OpTypePointer Input %42 
                                Input f32_3* %204 = OpVariable Input 
                                         i32 %207 = OpConstant 7 
                                             %208 = OpTypePointer Uniform %7 
                                         i32 %221 = OpConstant 2 
                                         i32 %231 = OpConstant 3 
                               Private bool* %236 = OpVariable Private 
                                        bool %240 = OpConstantFalse 
                                        bool %246 = OpSpecConstantFalse 
                                             %290 = OpTypePointer Function %42 
                                         i32 %304 = OpConstant 5 
                                             %305 = OpTypePointer Uniform %42 
                                         i32 %314 = OpConstant 4 
                                Private f32* %320 = OpVariable Private 
                                         f32 %323 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %329 = OpConstant 3.674022E-40 
                                             %336 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %337 = OpTypeSampledImage %336 
                                             %338 = OpTypePointer UniformConstant %337 
 UniformConstant read_only Texture3DSampled* %339 = OpVariable UniformConstant 
                              Private f32_4* %344 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %360 = OpVariable UniformConstant 
                                         i32 %373 = OpConstant 6 
                                             %378 = OpTypePointer Output %7 
                               Output f32_4* %379 = OpVariable Output 
                                             %388 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %23 = OpLoad %22 
                                        f32_2 %24 = OpLoad %17 
                                        f32_4 %25 = OpImageSampleImplicitLod %23 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                                      OpStore %21 %28 
                                   Input f32* %35 = OpAccessChain %32 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %30 %27 
                                                      OpStore %39 %38 
                                 Uniform f32* %51 = OpAccessChain %46 %48 %49 
                                          f32 %52 = OpLoad %51 
                                          f32 %54 = OpFMul %52 %53 
                                 Private f32* %55 = OpAccessChain %30 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFAdd %54 %56 
                                 Private f32* %58 = OpAccessChain %30 %27 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %30 %27 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpExtInst %1 13 %60 
                                 Private f32* %62 = OpAccessChain %30 %27 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %30 %27 
                                          f32 %64 = OpLoad %63 
                                 Uniform f32* %66 = OpAccessChain %46 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFMul %64 %67 
                                 Private f32* %69 = OpAccessChain %30 %27 
                                                      OpStore %69 %68 
                                 Private f32* %71 = OpAccessChain %30 %27 
                                          f32 %72 = OpLoad %71 
                                          f32 %74 = OpFMul %72 %73 
                                 Private f32* %75 = OpAccessChain %70 %27 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %70 %33 
                                                      OpStore %77 %76 
                                        f32_4 %78 = OpLoad %70 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                        f32_4 %80 = OpLoad %32 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpFAdd %79 %81 
                                                      OpStore %30 %82 
                   read_only Texture2DSampled %86 = OpLoad %85 
                                        f32_2 %87 = OpLoad %30 
                                        f32_4 %88 = OpImageSampleImplicitLod %86 %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                                      OpStore %84 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                          f32 %97 = OpDot %92 %96 
                                 Private f32* %98 = OpAccessChain %90 %27 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %90 %27 
                                         f32 %100 = OpLoad %99 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %90 %27 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %90 %27 
                                         f32 %105 = OpLoad %104 
                                Uniform f32* %107 = OpAccessChain %46 %106 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %105 %108 
                                Private f32* %110 = OpAccessChain %70 %27 
                                                      OpStore %110 %109 
                                  Input f32* %112 = OpAccessChain %32 %33 
                                         f32 %113 = OpLoad %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %111 %115 
                                         f32 %116 = OpLoad %111 
                                         f32 %118 = OpExtInst %1 43 %116 %76 %117 
                                                      OpStore %111 %118 
                                         f32 %119 = OpLoad %111 
                                         f32 %121 = OpFMul %119 %120 
                                                      OpStore %111 %121 
                                         f32 %122 = OpLoad %111 
                                         f32 %123 = OpExtInst %1 37 %122 %117 
                                                      OpStore %111 %123 
                                         f32 %124 = OpLoad %111 
                                Private f32* %125 = OpAccessChain %70 %27 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFMul %124 %127 
                                Private f32* %129 = OpAccessChain %70 %27 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %70 %27 
                                                      OpStore %132 %131 
                                         f32 %133 = OpLoad %21 
                                Private f32* %134 = OpAccessChain %70 %27 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFMul %133 %135 
                                Private f32* %137 = OpAccessChain %70 %27 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %70 %27 
                                         f32 %139 = OpLoad %138 
                                Uniform f32* %141 = OpAccessChain %46 %140 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFMul %139 %142 
                                Private f32* %144 = OpAccessChain %70 %27 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %70 %27 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFMul %146 %101 
                                Private f32* %148 = OpAccessChain %70 %27 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %70 %27 
                                         f32 %150 = OpLoad %149 
                                         f32 %152 = OpExtInst %1 37 %150 %151 
                                Private f32* %153 = OpAccessChain %70 %27 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_4 %156 = OpLoad %70 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                                      OpStore %154 %161 
                                Uniform f32* %163 = OpAccessChain %46 %162 
                                         f32 %164 = OpLoad %163 
                                         f32 %166 = OpFAdd %164 %165 
                                Private f32* %167 = OpAccessChain %30 %27 
                                                      OpStore %167 %166 
                                         f32 %169 = OpLoad %21 
                                Private f32* %170 = OpAccessChain %30 %27 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                         f32 %173 = OpFAdd %172 %117 
                                Private f32* %174 = OpAccessChain %168 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %154 
                                       f32_2 %176 = OpLoad %168 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %154 %178 
                                Private f32* %180 = OpAccessChain %9 %179 
                                         f32 %181 = OpLoad %180 
                                Uniform f32* %183 = OpAccessChain %46 %182 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFNegate %184 
                                         f32 %186 = OpFAdd %181 %185 
                                Private f32* %187 = OpAccessChain %90 %27 
                                                      OpStore %187 %186 
                                Private f32* %191 = OpAccessChain %90 %27 
                                         f32 %192 = OpLoad %191 
                                        bool %193 = OpFOrdLessThan %192 %76 
                                                      OpStore %190 %193 
                                        bool %194 = OpLoad %190 
                                         i32 %196 = OpSelect %194 %195 %48 
                                         i32 %198 = OpIMul %196 %197 
                                        bool %199 = OpINotEqual %198 %48 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %201 
                                             %200 = OpLabel 
                                                      OpKill
                                             %201 = OpLabel 
                                       f32_3 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 1 1 
                              Uniform f32_4* %209 = OpAccessChain %46 %207 %195 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %206 %211 
                                                      OpStore %168 %212 
                              Uniform f32_4* %213 = OpAccessChain %46 %207 %48 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_3 %216 = OpLoad %204 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_2 %219 = OpLoad %168 
                                       f32_2 %220 = OpFAdd %218 %219 
                                                      OpStore %168 %220 
                              Uniform f32_4* %222 = OpAccessChain %46 %207 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
                                       f32_3 %225 = OpLoad %204 
                                       f32_2 %226 = OpVectorShuffle %225 %225 2 2 
                                       f32_2 %227 = OpFMul %224 %226 
                                       f32_2 %228 = OpLoad %168 
                                       f32_2 %229 = OpFAdd %227 %228 
                                                      OpStore %168 %229 
                                       f32_2 %230 = OpLoad %168 
                              Uniform f32_4* %232 = OpAccessChain %46 %207 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_2 %235 = OpFAdd %230 %234 
                                                      OpStore %168 %235 
                                Uniform f32* %237 = OpAccessChain %46 %221 %27 
                                         f32 %238 = OpLoad %237 
                                        bool %239 = OpFOrdEqual %238 %117 
                                                      OpStore %236 %239 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %242 
                                             %241 = OpLabel 
                                        bool %243 = OpLoad %236 
                                                      OpSelectionMerge %245 None 
                                                      OpBranchConditional %243 %244 %245 
                                             %244 = OpLabel 
                                                      OpBranch %245 
                                             %245 = OpLabel 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %246 %247 %346 
                                             %247 = OpLabel 
                                Uniform f32* %249 = OpAccessChain %46 %221 %33 
                                         f32 %250 = OpLoad %249 
                                        bool %251 = OpFOrdEqual %250 %117 
                                                      OpStore %236 %251 
                                       f32_3 %252 = OpLoad %204 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %254 = OpAccessChain %46 %231 %195 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %253 %256 
                                       f32_4 %258 = OpLoad %70 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %70 %259 
                              Uniform f32_4* %260 = OpAccessChain %46 %231 %48 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpLoad %204 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 0 0 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %70 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %70 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %70 %270 
                              Uniform f32_4* %271 = OpAccessChain %46 %231 %221 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %204 
                                       f32_3 %275 = OpVectorShuffle %274 %274 2 2 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %70 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %70 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %70 %281 
                                       f32_4 %282 = OpLoad %70 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %284 = OpAccessChain %46 %231 %231 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %283 %286 
                                       f32_4 %288 = OpLoad %70 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %70 %289 
                                        bool %292 = OpLoad %236 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                       f32_4 %295 = OpLoad %70 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                       f32_3 %298 = OpLoad %204 
                                                      OpStore %291 %298 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                       f32_3 %299 = OpLoad %291 
                                       f32_4 %300 = OpLoad %70 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %70 %301 
                                       f32_4 %302 = OpLoad %70 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_3* %306 = OpAccessChain %46 %304 
                                       f32_3 %307 = OpLoad %306 
                                       f32_3 %308 = OpFNegate %307 
                                       f32_3 %309 = OpFAdd %303 %308 
                                       f32_4 %310 = OpLoad %70 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %70 %311 
                                       f32_4 %312 = OpLoad %70 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                              Uniform f32_3* %315 = OpAccessChain %46 %314 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %313 %316 
                                       f32_4 %318 = OpLoad %70 
                                       f32_4 %319 = OpVectorShuffle %318 %317 0 4 5 6 
                                                      OpStore %70 %319 
                                Private f32* %321 = OpAccessChain %70 %33 
                                         f32 %322 = OpLoad %321 
                                         f32 %324 = OpFMul %322 %323 
                                         f32 %325 = OpFAdd %324 %101 
                                                      OpStore %320 %325 
                                Uniform f32* %327 = OpAccessChain %46 %221 %49 
                                         f32 %328 = OpLoad %327 
                                         f32 %330 = OpFMul %328 %329 
                                         f32 %331 = OpFAdd %330 %101 
                                                      OpStore %326 %331 
                                         f32 %332 = OpLoad %326 
                                         f32 %333 = OpLoad %320 
                                         f32 %334 = OpExtInst %1 40 %332 %333 
                                Private f32* %335 = OpAccessChain %70 %27 
                                                      OpStore %335 %334 
                  read_only Texture3DSampled %340 = OpLoad %339 
                                       f32_4 %341 = OpLoad %70 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 2 3 
                                       f32_4 %343 = OpImageSampleImplicitLod %340 %342 
                                                      OpStore %70 %343 
                                       f32_4 %345 = OpLoad %70 
                                                      OpStore %344 %345 
                                                      OpBranch %248 
                                             %346 = OpLabel 
                                Private f32* %347 = OpAccessChain %344 %27 
                                                      OpStore %347 %117 
                                Private f32* %348 = OpAccessChain %344 %33 
                                                      OpStore %348 %117 
                                Private f32* %349 = OpAccessChain %344 %49 
                                                      OpStore %349 %117 
                                Private f32* %350 = OpAccessChain %344 %179 
                                                      OpStore %350 %117 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                       f32_4 %351 = OpLoad %344 
                              Uniform f32_4* %352 = OpAccessChain %46 %195 
                                       f32_4 %353 = OpLoad %352 
                                         f32 %354 = OpDot %351 %353 
                                Private f32* %355 = OpAccessChain %90 %27 
                                                      OpStore %355 %354 
                                Private f32* %356 = OpAccessChain %90 %27 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpExtInst %1 43 %357 %76 %117 
                                Private f32* %359 = OpAccessChain %90 %27 
                                                      OpStore %359 %358 
                  read_only Texture2DSampled %361 = OpLoad %360 
                                       f32_2 %362 = OpLoad %168 
                                       f32_4 %363 = OpImageSampleImplicitLod %361 %362 
                                         f32 %364 = OpCompositeExtract %363 3 
                                Private f32* %365 = OpAccessChain %168 %27 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %90 %27 
                                         f32 %367 = OpLoad %366 
                                Private f32* %368 = OpAccessChain %168 %27 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %367 %369 
                                Private f32* %371 = OpAccessChain %168 %27 
                                                      OpStore %371 %370 
                                       f32_3 %372 = OpLoad %154 
                              Uniform f32_4* %374 = OpAccessChain %46 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %372 %376 
                                                      OpStore %90 %377 
                                       f32_2 %380 = OpLoad %168 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                                       f32_3 %382 = OpLoad %90 
                                       f32_3 %383 = OpFMul %381 %382 
                                       f32_4 %384 = OpLoad %379 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %379 %385 
                                Private f32* %386 = OpAccessChain %9 %179 
                                         f32 %387 = OpLoad %386 
                                 Output f32* %389 = OpAccessChain %379 %179 
                                                      OpStore %389 %387 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 195745
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	float _GlobalReflectionsEnabled;
uniform 	float _DistortAmount;
uniform 	float _ReflPower;
uniform 	float _BoostPower;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _MaskTex;
uniform  sampler2D _ReflMapFromPixelator;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat10_2;
float u_xlat9;
float u_xlat16_9;
bool u_xlatb9;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat9 = u_xlat10_0.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = vs_TEXCOORD1.y * 500.0;
    u_xlat9 = _Time.z * 5.0 + u_xlat9;
    u_xlat9 = sin(u_xlat9);
    u_xlat9 = u_xlat9 * _DistortAmount;
    u_xlat1.x = u_xlat9 * 0.00100000005;
    u_xlat1.y = 0.0;
    u_xlat1.xy = u_xlat1.xy + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_ReflMapFromPixelator, u_xlat1.xy);
    u_xlat16_9 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_9 = u_xlat16_9 * 0.75;
    u_xlat9 = u_xlat16_9 * _ReflPower;
    u_xlat10 = vs_TEXCOORD1.y + -0.875;
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat9 = u_xlat10 * (-u_xlat9) + u_xlat9;
    u_xlat10_2 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat9 = u_xlat9 * u_xlat10_2.x;
    u_xlat9 = u_xlat9 * _GlobalReflectionsEnabled;
    u_xlat9 = u_xlat9 * 0.75;
    u_xlat9 = min(u_xlat9, 0.400000006);
    u_xlat0.xyz = u_xlat10_1.xyz * vec3(u_xlat9) + u_xlat10_0.xyz;
    u_xlat9 = _BoostPower + -1.0;
    u_xlat9 = u_xlat10_2.x * u_xlat9 + 1.0;
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %174 %179 %180 %206 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %172 0 BuiltIn 172 
                                                      OpMemberDecorate %172 1 BuiltIn 172 
                                                      OpMemberDecorate %172 2 BuiltIn 172 
                                                      OpDecorate %172 Block 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %206 Location 206 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %11 %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 3 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 5 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 4 
                                         i32 %120 = OpConstant 1 
                                         i32 %124 = OpConstant 0 
                                         i32 %132 = OpConstant 2 
                                         u32 %170 = OpConstant 1 
                                             %171 = OpTypeArray %9 %170 
                                             %172 = OpTypeStruct %11 %9 %171 
                                             %173 = OpTypePointer Output %172 
        Output struct {f32_4; f32; f32[1];}* %174 = OpVariable Output 
                                             %176 = OpTypePointer Output %11 
                                             %178 = OpTypePointer Output %33 
                               Output f32_2* %179 = OpVariable Output 
                                Input f32_4* %180 = OpVariable Input 
                                         i32 %183 = OpConstant 6 
                                             %194 = OpTypePointer Uniform %9 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_3 %202 = OpConstantComposite %201 %201 %201 
                               Output f32_4* %206 = OpVariable Output 
                                             %218 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %121 = OpAccessChain %42 %120 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFMul %119 %122 
                                                      OpStore %81 %123 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %133 = OpAccessChain %42 %120 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpLoad %21 
                                       f32_4 %136 = OpVectorShuffle %135 %135 2 2 2 2 
                                       f32_4 %137 = OpFMul %134 %136 
                                       f32_4 %138 = OpLoad %81 
                                       f32_4 %139 = OpFAdd %137 %138 
                                                      OpStore %21 %139 
                                       f32_4 %140 = OpLoad %21 
                              Uniform f32_4* %141 = OpAccessChain %42 %120 %44 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpFAdd %140 %142 
                                                      OpStore %21 %143 
                                       f32_4 %144 = OpLoad %21 
                                       f32_4 %145 = OpVectorShuffle %144 %144 1 1 1 1 
                              Uniform f32_4* %146 = OpAccessChain %42 %132 %120 
                                       f32_4 %147 = OpLoad %146 
                                       f32_4 %148 = OpFMul %145 %147 
                                                      OpStore %81 %148 
                              Uniform f32_4* %149 = OpAccessChain %42 %132 %124 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %21 
                                       f32_4 %152 = OpVectorShuffle %151 %151 0 0 0 0 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %81 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %81 %155 
                              Uniform f32_4* %156 = OpAccessChain %42 %132 %132 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %21 
                                       f32_4 %159 = OpVectorShuffle %158 %158 2 2 2 2 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %81 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %81 %162 
                              Uniform f32_4* %163 = OpAccessChain %42 %132 %44 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %21 
                                       f32_4 %166 = OpVectorShuffle %165 %165 3 3 3 3 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %81 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %21 %169 
                                       f32_4 %175 = OpLoad %21 
                               Output f32_4* %177 = OpAccessChain %174 %124 
                                                      OpStore %177 %175 
                                       f32_4 %181 = OpLoad %180 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                              Uniform f32_4* %184 = OpAccessChain %42 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                       f32_2 %187 = OpFMul %182 %186 
                              Uniform f32_4* %188 = OpAccessChain %42 %183 
                                       f32_4 %189 = OpLoad %188 
                                       f32_2 %190 = OpVectorShuffle %189 %189 2 3 
                                       f32_2 %191 = OpFAdd %187 %190 
                                                      OpStore %179 %191 
                                Private f32* %192 = OpAccessChain %21 %170 
                                         f32 %193 = OpLoad %192 
                                Uniform f32* %195 = OpAccessChain %42 %124 %65 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %193 %196 
                                Private f32* %198 = OpAccessChain %21 %170 
                                                      OpStore %198 %197 
                                       f32_4 %199 = OpLoad %21 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 3 1 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %81 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 1 5 6 
                                                      OpStore %81 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_4 %209 = OpLoad %206 
                                       f32_4 %210 = OpVectorShuffle %209 %208 0 1 4 5 
                                                      OpStore %206 %210 
                                       f32_4 %211 = OpLoad %81 
                                       f32_2 %212 = OpVectorShuffle %211 %211 2 2 
                                       f32_4 %213 = OpLoad %81 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 3 
                                       f32_2 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad %206 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore %206 %217 
                                 Output f32* %219 = OpAccessChain %174 %124 %170 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %174 %124 %170 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 240
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %55 %226 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 RelaxedPrecision 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %55 Location 55 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 DescriptorSet 131 
                                                      OpDecorate %131 Binding 131 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %153 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                              %26 = OpTypeVector %22 4 
                                              %27 = OpTypeStruct %7 %6 %6 %6 %6 %26 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32; f32; f32; f32; u32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %6 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          f32 %41 = OpConstant 3.674022E-40 
                                          i32 %44 = OpConstant 0 
                                          i32 %45 = OpConstant 1 
                                          i32 %47 = OpConstant -1 
                                 Private f32* %53 = OpVariable Private 
                                              %54 = OpTypePointer Input %7 
                                 Input f32_4* %55 = OpVariable Input 
                                          u32 %56 = OpConstant 1 
                                              %57 = OpTypePointer Input %6 
                                          f32 %60 = OpConstant 3.674022E-40 
                                          u32 %62 = OpConstant 2 
                                          f32 %65 = OpConstant 3.674022E-40 
                                          i32 %72 = OpConstant 2 
                                              %76 = OpTypePointer Private %15 
                               Private f32_2* %77 = OpVariable Private 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          u32 %81 = OpConstant 0 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Private %88 
                               Private f32_3* %90 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %91 = OpVariable UniformConstant 
                                          f32 %98 = OpConstant 3.674022E-40 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %98 %99 %100 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         i32 %107 = OpConstant 3 
                                Private f32* %111 = OpVariable Private 
                                         f32 %114 = OpConstant 3.674022E-40 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                Private f32* %130 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %131 = OpVariable UniformConstant 
                                         f32 %146 = OpConstant 3.674022E-40 
                              Private f32_3* %148 = OpVariable Private 
                                         i32 %156 = OpConstant 4 
                                         f32 %159 = OpConstant 3.674022E-40 
                                         i32 %171 = OpConstant 6 
                                         i32 %183 = OpConstant 7 
                              Private f32_4* %196 = OpVariable Private 
                                             %197 = OpTypePointer Function %88 
                                         i32 %199 = OpConstant 5 
                                             %200 = OpTypeVector %37 4 
                                             %201 = OpTypePointer Uniform %26 
                                       f32_3 %210 = OpConstantComposite %41 %41 %41 
                                             %214 = OpTypePointer Function %6 
                                             %225 = OpTypePointer Output %7 
                               Output f32_4* %226 = OpVariable Output 
                                             %227 = OpTypePointer Function %7 
                                       f32_4 %235 = OpConstantComposite %41 %41 %41 %117 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %198 = OpVariable Function 
                               Function f32* %215 = OpVariable Function 
                             Function f32_4* %228 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %33 = OpAccessChain %29 %31 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %36 = OpFAdd %25 %35 
                                                      OpStore %21 %36 
                                          f32 %40 = OpLoad %21 
                                         bool %42 = OpFOrdLessThan %40 %41 
                                                      OpStore %39 %42 
                                         bool %43 = OpLoad %39 
                                          i32 %46 = OpSelect %43 %45 %44 
                                          i32 %48 = OpIMul %46 %47 
                                         bool %49 = OpINotEqual %48 %44 
                                                      OpSelectionMerge %51 None 
                                                      OpBranchConditional %49 %50 %51 
                                              %50 = OpLabel 
                                                      OpKill
                                              %51 = OpLabel 
                                   Input f32* %58 = OpAccessChain %55 %56 
                                          f32 %59 = OpLoad %58 
                                          f32 %61 = OpFMul %59 %60 
                                                      OpStore %53 %61 
                                 Uniform f32* %63 = OpAccessChain %29 %44 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %53 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %53 %68 
                                          f32 %69 = OpLoad %53 
                                          f32 %70 = OpExtInst %1 13 %69 
                                                      OpStore %53 %70 
                                          f32 %71 = OpLoad %53 
                                 Uniform f32* %73 = OpAccessChain %29 %72 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFMul %71 %74 
                                                      OpStore %53 %75 
                                          f32 %78 = OpLoad %53 
                                          f32 %80 = OpFMul %78 %79 
                                 Private f32* %82 = OpAccessChain %77 %81 
                                                      OpStore %82 %80 
                                 Private f32* %83 = OpAccessChain %77 %56 
                                                      OpStore %83 %41 
                                        f32_2 %84 = OpLoad %77 
                                        f32_4 %85 = OpLoad %55 
                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
                                        f32_2 %87 = OpFAdd %84 %86 
                                                      OpStore %77 %87 
                   read_only Texture2DSampled %92 = OpLoad %91 
                                        f32_2 %93 = OpLoad %77 
                                        f32_4 %94 = OpImageSampleImplicitLod %92 %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                                      OpStore %90 %95 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                         f32 %102 = OpDot %97 %101 
                                                      OpStore %21 %102 
                                         f32 %103 = OpLoad %21 
                                         f32 %105 = OpFMul %103 %104 
                                                      OpStore %21 %105 
                                         f32 %106 = OpLoad %21 
                                Uniform f32* %108 = OpAccessChain %29 %107 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %106 %109 
                                                      OpStore %53 %110 
                                  Input f32* %112 = OpAccessChain %55 %56 
                                         f32 %113 = OpLoad %112 
                                         f32 %115 = OpFAdd %113 %114 
                                                      OpStore %111 %115 
                                         f32 %116 = OpLoad %111 
                                         f32 %118 = OpExtInst %1 43 %116 %41 %117 
                                                      OpStore %111 %118 
                                         f32 %119 = OpLoad %111 
                                         f32 %121 = OpFMul %119 %120 
                                                      OpStore %111 %121 
                                         f32 %122 = OpLoad %111 
                                         f32 %123 = OpExtInst %1 37 %122 %117 
                                                      OpStore %111 %123 
                                         f32 %124 = OpLoad %111 
                                         f32 %125 = OpLoad %53 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFMul %124 %126 
                                         f32 %128 = OpLoad %53 
                                         f32 %129 = OpFAdd %127 %128 
                                                      OpStore %53 %129 
                  read_only Texture2DSampled %132 = OpLoad %131 
                                       f32_2 %133 = OpLoad %17 
                                       f32_4 %134 = OpImageSampleImplicitLod %132 %133 
                                         f32 %135 = OpCompositeExtract %134 0 
                                                      OpStore %130 %135 
                                         f32 %136 = OpLoad %53 
                                         f32 %137 = OpLoad %130 
                                         f32 %138 = OpFMul %136 %137 
                                                      OpStore %53 %138 
                                         f32 %139 = OpLoad %53 
                                Uniform f32* %140 = OpAccessChain %29 %45 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFMul %139 %141 
                                                      OpStore %53 %142 
                                         f32 %143 = OpLoad %53 
                                         f32 %144 = OpFMul %143 %104 
                                                      OpStore %53 %144 
                                         f32 %145 = OpLoad %53 
                                         f32 %147 = OpExtInst %1 37 %145 %146 
                                                      OpStore %53 %147 
                                       f32_3 %149 = OpLoad %90 
                                         f32 %150 = OpLoad %53 
                                       f32_3 %151 = OpCompositeConstruct %150 %150 %150 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFAdd %152 %154 
                                                      OpStore %148 %155 
                                Uniform f32* %157 = OpAccessChain %29 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFAdd %158 %159 
                                                      OpStore %53 %160 
                                         f32 %161 = OpLoad %130 
                                         f32 %162 = OpLoad %53 
                                         f32 %163 = OpFMul %161 %162 
                                         f32 %164 = OpFAdd %163 %117 
                                                      OpStore %53 %164 
                                         f32 %165 = OpLoad %53 
                                       f32_3 %166 = OpCompositeConstruct %165 %165 %165 
                                       f32_3 %167 = OpLoad %148 
                                       f32_3 %168 = OpFMul %166 %167 
                                                      OpStore %148 %168 
                                       f32_3 %169 = OpLoad %148 
                                       f32_3 %170 = OpExtInst %1 30 %169 
                                                      OpStore %148 %170 
                                Uniform f32* %172 = OpAccessChain %29 %171 
                                         f32 %173 = OpLoad %172 
                                                      OpStore %53 %173 
                                         f32 %174 = OpLoad %53 
                                         f32 %175 = OpExtInst %1 43 %174 %41 %117 
                                                      OpStore %53 %175 
                                       f32_3 %176 = OpLoad %148 
                                         f32 %177 = OpLoad %53 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %148 %179 
                                       f32_3 %180 = OpLoad %148 
                                       f32_3 %181 = OpExtInst %1 29 %180 
                                                      OpStore %148 %181 
                                       f32_3 %182 = OpLoad %148 
                                Uniform f32* %184 = OpAccessChain %29 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %29 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %29 %183 
                                         f32 %189 = OpLoad %188 
                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                         f32 %192 = OpCompositeExtract %190 1 
                                         f32 %193 = OpCompositeExtract %190 2 
                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
                                       f32_3 %195 = OpExtInst %1 37 %182 %194 
                                                      OpStore %148 %195 
                              Uniform u32_4* %202 = OpAccessChain %29 %199 
                                       u32_4 %203 = OpLoad %202 
                                         u32 %204 = OpCompositeExtract %203 0 
                                        bool %205 = OpINotEqual %204 %81 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                       f32_3 %208 = OpLoad %148 
                                                      OpStore %198 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                                      OpStore %198 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_3 %211 = OpLoad %198 
                                       f32_4 %212 = OpLoad %196 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %196 %213 
                              Uniform u32_4* %216 = OpAccessChain %29 %199 
                                       u32_4 %217 = OpLoad %216 
                                         u32 %218 = OpCompositeExtract %217 0 
                                        bool %219 = OpINotEqual %218 %81 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %222 
                                             %220 = OpLabel 
                                                      OpStore %215 %117 
                                                      OpBranch %221 
                                             %222 = OpLabel 
                                                      OpStore %215 %41 
                                                      OpBranch %221 
                                             %221 = OpLabel 
                                         f32 %223 = OpLoad %215 
                                Private f32* %224 = OpAccessChain %196 %23 
                                                      OpStore %224 %223 
                              Uniform u32_4* %229 = OpAccessChain %29 %199 
                                       u32_4 %230 = OpLoad %229 
                                         u32 %231 = OpCompositeExtract %230 1 
                                        bool %232 = OpINotEqual %231 %81 
                                                      OpSelectionMerge %234 None 
                                                      OpBranchConditional %232 %233 %236 
                                             %233 = OpLabel 
                                                      OpStore %228 %235 
                                                      OpBranch %234 
                                             %236 = OpLabel 
                                       f32_4 %237 = OpLoad %196 
                                                      OpStore %228 %237 
                                                      OpBranch %234 
                                             %234 = OpLabel 
                                       f32_4 %238 = OpLoad %228 
                                                      OpStore %226 %238 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "Transparent/Cutout/Diffuse"
}