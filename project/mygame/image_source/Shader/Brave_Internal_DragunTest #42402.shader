//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/Internal/DragunTest" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_CracksTex ("Cracks", 2D) = "black" { }
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_CrackBaseColor ("Crack Base Color", Color) = (1,0.1,0,1)
_CharAmount ("Char Amount", Range(0, 1)) = 0
_CrackAmount ("Crack Amount", Float) = 0
_CrackShadow ("Crack Shadow", Float) = 10
_RectangleAmount ("Rectangle", Range(0, 1)) = 0
_CircleAmount ("Circle", Range(0, 1)) = 0
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Stencil {
   Comp Always
   Pass Replace
   Fail Keep
   ZFail Keep
  }
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 52431
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat1.w + -0.100000001;
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = u_xlat1.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 208
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 %197 %200 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %200 Location 200 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                               Output f32_3* %197 = OpVariable Output 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                               Output f32_4* %200 = OpVariable Output 
                                       f32_4 %201 = OpConstantComposite %198 %198 %198 %198 
                                             %202 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                                      OpStore %197 %199 
                                                      OpStore %200 %201 
                                 Output f32* %203 = OpAccessChain %120 %60 %48 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                 Output f32* %206 = OpAccessChain %120 %60 %48 
                                                      OpStore %206 %205 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 395
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %273 %382 %384 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %81 ArrayStride 81 
                                                      OpMemberDecorate %82 0 RelaxedPrecision 
                                                      OpMemberDecorate %82 0 Offset 82 
                                                      OpMemberDecorate %82 1 Offset 82 
                                                      OpMemberDecorate %82 2 Offset 82 
                                                      OpMemberDecorate %82 3 Offset 82 
                                                      OpMemberDecorate %82 4 Offset 82 
                                                      OpMemberDecorate %82 5 RelaxedPrecision 
                                                      OpMemberDecorate %82 5 Offset 82 
                                                      OpMemberDecorate %82 6 Offset 82 
                                                      OpMemberDecorate %82 7 Offset 82 
                                                      OpMemberDecorate %82 8 Offset 82 
                                                      OpMemberDecorate %82 9 Offset 82 
                                                      OpMemberDecorate %82 10 Offset 82 
                                                      OpMemberDecorate %82 11 Offset 82 
                                                      OpMemberDecorate %82 12 RelaxedPrecision 
                                                      OpMemberDecorate %82 12 Offset 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %266 SpecId 266 
                                                      OpDecorate %273 Location 273 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %382 Location 382 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_3* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                               Private f32_3* %47 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                               Private f32_3* %79 = OpVariable Private 
                                          u32 %80 = OpConstant 4 
                                              %81 = OpTypeArray %7 %80 
                                              %82 = OpTypeStruct %7 %7 %81 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %83 = OpTypePointer Uniform %82 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %84 = OpVariable Uniform 
                                              %85 = OpTypeInt 32 1 
                                          i32 %86 = OpConstant 7 
                                              %87 = OpTypePointer Uniform %6 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_3* %116 = OpVariable Private 
                                         i32 %119 = OpConstant 8 
                              Private f32_4* %124 = OpVariable Private 
                                         i32 %125 = OpConstant 6 
                                             %126 = OpTypePointer Uniform %7 
                                Private f32* %151 = OpVariable Private 
                                         u32 %152 = OpConstant 3 
                                         i32 %155 = OpConstant 9 
                                         i32 %162 = OpConstant 11 
                                         u32 %169 = OpConstant 1 
                                         u32 %175 = OpConstant 2 
                                         f32 %189 = OpConstant 3.674022E-40 
                                             %192 = OpTypeBool 
                                             %193 = OpTypePointer Private %192 
                               Private bool* %194 = OpVariable Private 
                                             %200 = OpTypePointer Function %6 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %215 = OpConstant 10 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         i32 %231 = OpConstant 0 
                                         i32 %232 = OpConstant 1 
                                         i32 %234 = OpConstant -1 
                                         i32 %241 = OpConstant 12 
                                        bool %260 = OpConstantFalse 
                                        bool %266 = OpSpecConstantFalse 
                                             %272 = OpTypePointer Input %21 
                                Input f32_3* %273 = OpVariable Input 
                                         i32 %276 = OpConstant 2 
                                         i32 %298 = OpConstant 3 
                                             %303 = OpTypePointer Function %21 
                                         i32 %316 = OpConstant 4 
                                             %317 = OpTypePointer Uniform %21 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                Private f32* %338 = OpVariable Private 
                                             %348 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %349 = OpTypeSampledImage %348 
                                             %350 = OpTypePointer UniformConstant %349 
 UniformConstant read_only Texture3DSampled* %351 = OpVariable UniformConstant 
                                         i32 %372 = OpConstant 5 
                                             %381 = OpTypePointer Output %7 
                               Output f32_4* %382 = OpVariable Output 
                                Input f32_3* %384 = OpVariable Input 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %201 = OpVariable Function 
                             Function f32_3* %304 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                 Private f32* %51 = OpAccessChain %47 %38 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %38 
                                          f32 %53 = OpLoad %52 
                                          f32 %55 = OpFAdd %53 %54 
                                 Private f32* %56 = OpAccessChain %47 %38 
                                                      OpStore %56 %55 
                                 Private f32* %57 = OpAccessChain %47 %38 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpExtInst %1 30 %58 
                                 Private f32* %60 = OpAccessChain %47 %38 
                                                      OpStore %60 %59 
                                 Private f32* %61 = OpAccessChain %47 %38 
                                          f32 %62 = OpLoad %61 
                                          f32 %64 = OpFMul %62 %63 
                                 Private f32* %65 = OpAccessChain %47 %38 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %47 %38 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 29 %67 
                                 Private f32* %69 = OpAccessChain %47 %38 
                                                      OpStore %69 %68 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %74 = OpLoad %47 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %70 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %70 %78 
                                 Uniform f32* %88 = OpAccessChain %84 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %84 %86 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %84 %86 
                                          f32 %93 = OpLoad %92 
                                        f32_3 %94 = OpCompositeConstruct %89 %91 %93 
                                          f32 %95 = OpCompositeExtract %94 0 
                                          f32 %96 = OpCompositeExtract %94 1 
                                          f32 %97 = OpCompositeExtract %94 2 
                                        f32_3 %98 = OpCompositeConstruct %95 %96 %97 
                                        f32_4 %99 = OpLoad %70 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %101 %103 
                                                      OpStore %79 %104 
                                Private f32* %105 = OpAccessChain %30 %38 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFMul %106 %107 
                                Private f32* %109 = OpAccessChain %70 %38 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %70 %38 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %70 %38 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                Private f32* %115 = OpAccessChain %70 %38 
                                                      OpStore %115 %114 
                                Private f32* %117 = OpAccessChain %30 %38 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %84 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %116 %38 
                                                      OpStore %123 %122 
                              Uniform f32_4* %127 = OpAccessChain %84 %125 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %70 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 0 0 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %79 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %124 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 1 5 6 
                                                      OpStore %124 %137 
                                       f32_3 %138 = OpLoad %116 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 0 0 
                                       f32_4 %140 = OpLoad %124 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_3 %143 = OpLoad %79 
                                       f32_3 %144 = OpFAdd %142 %143 
                                       f32_4 %145 = OpLoad %124 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %124 %146 
                                       f32_3 %147 = OpLoad %79 
                                       f32_4 %148 = OpLoad %124 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpExtInst %1 40 %147 %149 
                                                      OpStore %79 %150 
                                Private f32* %153 = OpAccessChain %9 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %84 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 40 %154 %157 
                                                      OpStore %151 %158 
                                       f32_4 %159 = OpLoad %16 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFNegate %160 
                              Uniform f32_4* %163 = OpAccessChain %84 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %161 %165 
                                       f32_4 %167 = OpLoad %124 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %124 %168 
                                Private f32* %170 = OpAccessChain %124 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %84 %162 %152 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFDiv %171 %173 
                                Private f32* %176 = OpAccessChain %124 %175 
                                                      OpStore %176 %174 
                                       f32_4 %177 = OpLoad %124 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 2 
                                       f32_4 %179 = OpLoad %124 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 2 
                                         f32 %181 = OpDot %178 %180 
                                Private f32* %182 = OpAccessChain %124 %38 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %124 %38 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 31 %184 
                                Private f32* %186 = OpAccessChain %124 %38 
                                                      OpStore %186 %185 
                                Uniform f32* %187 = OpAccessChain %84 %162 %175 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpFMul %188 %189 
                                Private f32* %191 = OpAccessChain %116 %38 
                                                      OpStore %191 %190 
                                Private f32* %195 = OpAccessChain %116 %38 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %124 %38 
                                         f32 %198 = OpLoad %197 
                                        bool %199 = OpFOrdGreaterThanEqual %196 %198 
                                                      OpStore %194 %199 
                                        bool %202 = OpLoad %194 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %205 
                                             %203 = OpLabel 
                                                      OpStore %201 %44 
                                                      OpBranch %204 
                                             %205 = OpLabel 
                                                      OpStore %201 %206 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %207 = OpLoad %201 
                                Private f32* %208 = OpAccessChain %124 %38 
                                                      OpStore %208 %207 
                                         f32 %209 = OpLoad %151 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %124 %38 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %124 %38 
                                                      OpStore %214 %213 
                                Uniform f32* %216 = OpAccessChain %84 %215 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %124 %38 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %151 
                                         f32 %222 = OpFAdd %220 %221 
                                                      OpStore %151 %222 
                                         f32 %223 = OpLoad %151 
                                         f32 %225 = OpFAdd %223 %224 
                                Private f32* %226 = OpAccessChain %30 %38 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %30 %38 
                                         f32 %228 = OpLoad %227 
                                        bool %229 = OpFOrdLessThan %228 %206 
                                                      OpStore %194 %229 
                                        bool %230 = OpLoad %194 
                                         i32 %233 = OpSelect %230 %232 %231 
                                         i32 %235 = OpIMul %233 %234 
                                        bool %236 = OpINotEqual %235 %231 
                                                      OpSelectionMerge %238 None 
                                                      OpBranchConditional %236 %237 %238 
                                             %237 = OpLabel 
                                                      OpKill
                                             %238 = OpLabel 
                                         f32 %240 = OpLoad %151 
                                Uniform f32* %242 = OpAccessChain %84 %241 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %240 %244 
                                Private f32* %246 = OpAccessChain %30 %38 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %30 %38 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %206 
                                                      OpStore %194 %249 
                                        bool %250 = OpLoad %194 
                                         i32 %251 = OpSelect %250 %232 %231 
                                         i32 %252 = OpIMul %251 %234 
                                        bool %253 = OpINotEqual %252 %231 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %255 
                                             %254 = OpLabel 
                                                      OpKill
                                             %255 = OpLabel 
                                Uniform f32* %257 = OpAccessChain %84 %232 %38 
                                         f32 %258 = OpLoad %257 
                                        bool %259 = OpFOrdEqual %258 %44 
                                                      OpStore %194 %259 
                                                      OpSelectionMerge %262 None 
                                                      OpBranchConditional %260 %261 %262 
                                             %261 = OpLabel 
                                        bool %263 = OpLoad %194 
                                                      OpSelectionMerge %265 None 
                                                      OpBranchConditional %263 %264 %265 
                                             %264 = OpLabel 
                                                      OpBranch %265 
                                             %265 = OpLabel 
                                                      OpBranch %262 
                                             %262 = OpLabel 
                                                      OpSelectionMerge %268 None 
                                                      OpBranchConditional %266 %267 %357 
                                             %267 = OpLabel 
                                Uniform f32* %269 = OpAccessChain %84 %232 %169 
                                         f32 %270 = OpLoad %269 
                                        bool %271 = OpFOrdEqual %270 %44 
                                                      OpStore %194 %271 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %84 %276 %232 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                                      OpStore %116 %280 
                              Uniform f32_4* %281 = OpAccessChain %84 %276 %231 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpLoad %273 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %116 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %116 %288 
                              Uniform f32_4* %289 = OpAccessChain %84 %276 %276 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpLoad %273 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %116 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %116 %296 
                                       f32_3 %297 = OpLoad %116 
                              Uniform f32_4* %299 = OpAccessChain %84 %276 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %297 %301 
                                                      OpStore %116 %302 
                                        bool %305 = OpLoad %194 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %309 
                                             %306 = OpLabel 
                                       f32_3 %308 = OpLoad %116 
                                                      OpStore %304 %308 
                                                      OpBranch %307 
                                             %309 = OpLabel 
                                       f32_3 %310 = OpLoad %273 
                                                      OpStore %304 %310 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_3 %311 = OpLoad %304 
                                       f32_4 %312 = OpLoad %124 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %124 %313 
                                       f32_4 %314 = OpLoad %124 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                              Uniform f32_3* %318 = OpAccessChain %84 %316 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpFNegate %319 
                                       f32_3 %321 = OpFAdd %315 %320 
                                       f32_4 %322 = OpLoad %124 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %124 %323 
                                       f32_4 %324 = OpLoad %124 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %326 = OpAccessChain %84 %298 
                                       f32_3 %327 = OpLoad %326 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %124 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 4 5 6 
                                                      OpStore %124 %330 
                                Private f32* %331 = OpAccessChain %124 %169 
                                         f32 %332 = OpLoad %331 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                Private f32* %337 = OpAccessChain %116 %38 
                                                      OpStore %337 %336 
                                Uniform f32* %339 = OpAccessChain %84 %232 %175 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %340 %189 
                                         f32 %342 = OpFAdd %341 %335 
                                                      OpStore %338 %342 
                                Private f32* %343 = OpAccessChain %116 %38 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpLoad %338 
                                         f32 %346 = OpExtInst %1 40 %344 %345 
                                Private f32* %347 = OpAccessChain %124 %38 
                                                      OpStore %347 %346 
                  read_only Texture3DSampled %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %124 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 2 3 
                                       f32_4 %355 = OpImageSampleImplicitLod %352 %354 
                                                      OpStore %124 %355 
                                       f32_4 %356 = OpLoad %124 
                                                      OpStore %70 %356 
                                                      OpBranch %268 
                                             %357 = OpLabel 
                                Private f32* %358 = OpAccessChain %70 %38 
                                                      OpStore %358 %44 
                                Private f32* %359 = OpAccessChain %70 %169 
                                                      OpStore %359 %44 
                                Private f32* %360 = OpAccessChain %70 %175 
                                                      OpStore %360 %44 
                                Private f32* %361 = OpAccessChain %70 %152 
                                                      OpStore %361 %44 
                                                      OpBranch %268 
                                             %268 = OpLabel 
                                       f32_4 %362 = OpLoad %70 
                              Uniform f32_4* %363 = OpAccessChain %84 %231 
                                       f32_4 %364 = OpLoad %363 
                                         f32 %365 = OpDot %362 %364 
                                Private f32* %366 = OpAccessChain %30 %38 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %30 %38 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 43 %368 %206 %44 
                                Private f32* %370 = OpAccessChain %30 %38 
                                                      OpStore %370 %369 
                                       f32_3 %371 = OpLoad %79 
                              Uniform f32_4* %373 = OpAccessChain %84 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFMul %371 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %30 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpLoad %47 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %30 %380 
                                       f32_3 %383 = OpLoad %79 
                                       f32_3 %385 = OpLoad %384 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_3 %387 = OpLoad %30 
                                       f32_3 %388 = OpFAdd %386 %387 
                                       f32_4 %389 = OpLoad %382 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %382 %390 
                                         f32 %391 = OpLoad %151 
                                 Output f32* %393 = OpAccessChain %382 %152 
                                                      OpStore %393 %391 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat4 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat4 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat1.w + -0.100000001;
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = u_xlat1.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 322
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %90 %123 %133 %134 %149 %164 %200 %203 %311 %314 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 RelaxedPrecision 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %90 Location 90 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %200 Location 200 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %311 Location 311 
                                                      OpDecorate %314 Location 314 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 11 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 10 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 7 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Output %88 
                                Output f32_3* %90 = OpVariable Output 
                                         i32 %102 = OpConstant 9 
                                             %120 = OpTypeArray %6 %48 
                                             %121 = OpTypeStruct %7 %6 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %131 = OpTypePointer Output %7 
                               Output f32_4* %133 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %135 = OpTypeVector %6 2 
                                         i32 %138 = OpConstant 12 
                                Input f32_4* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 13 
                                             %163 = OpTypePointer Input %88 
                                Input f32_3* %164 = OpVariable Input 
                                         i32 %166 = OpConstant 8 
                                         u32 %183 = OpConstant 2 
                                Private f32* %185 = OpVariable Private 
                               Output f32_3* %200 = OpVariable Output 
                               Output f32_4* %203 = OpVariable Output 
                                             %205 = OpTypePointer Private %88 
                              Private f32_3* %206 = OpVariable Private 
                              Private f32_4* %223 = OpVariable Private 
                              Private f32_3* %229 = OpVariable Private 
                                         i32 %235 = OpConstant 4 
                                         i32 %241 = OpConstant 5 
                                         i32 %247 = OpConstant 6 
                                         u32 %256 = OpConstant 3 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %286 = OpConstant 3.674022E-40 
                                       f32_3 %287 = OpConstantComposite %286 %286 %286 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_3 %299 = OpConstantComposite %298 %298 %298 
                                         f32 %301 = OpConstant 3.674022E-40 
                                       f32_3 %302 = OpConstantComposite %301 %301 %301 
                               Output f32_3* %311 = OpVariable Output 
                               Output f32_4* %314 = OpVariable Output 
                                       f32_4 %315 = OpConstantComposite %277 %277 %277 %277 
                                             %316 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %91 = OpAccessChain %17 %60 %84 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %47 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                                      OpStore %90 %99 
                                       f32_4 %100 = OpLoad %82 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %17 %102 %61 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %102 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %82 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %17 %102 %74 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %82 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %9 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                              Uniform f32_4* %124 = OpAccessChain %17 %102 %84 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                               Output f32_4* %132 = OpAccessChain %123 %66 
                                                      OpStore %132 %130 
                                       f32_4 %136 = OpLoad %134 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %17 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %17 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                       f32_4 %147 = OpLoad %133 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                                      OpStore %133 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                              Uniform f32_4* %153 = OpAccessChain %17 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                       f32_2 %156 = OpFMul %151 %155 
                              Uniform f32_4* %157 = OpAccessChain %17 %152 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 2 3 
                                       f32_2 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %133 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 1 4 5 
                                                      OpStore %133 %162 
                                       f32_3 %165 = OpLoad %164 
                              Uniform f32_4* %167 = OpAccessChain %17 %166 %66 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %165 %169 
                                Private f32* %171 = OpAccessChain %9 %25 
                                                      OpStore %171 %170 
                                       f32_3 %172 = OpLoad %164 
                              Uniform f32_4* %173 = OpAccessChain %17 %166 %61 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %172 %175 
                                Private f32* %177 = OpAccessChain %9 %48 
                                                      OpStore %177 %176 
                                       f32_3 %178 = OpLoad %164 
                              Uniform f32_4* %179 = OpAccessChain %17 %166 %74 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                         f32 %182 = OpDot %178 %181 
                                Private f32* %184 = OpAccessChain %9 %183 
                                                      OpStore %184 %182 
                                       f32_4 %186 = OpLoad %9 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %185 %190 
                                         f32 %191 = OpLoad %185 
                                         f32 %192 = OpExtInst %1 32 %191 
                                                      OpStore %185 %192 
                                         f32 %193 = OpLoad %185 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %9 %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                                      OpStore %200 %202 
                                       f32_4 %204 = OpLoad %47 
                                                      OpStore %203 %204 
                                Private f32* %207 = OpAccessChain %9 %48 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %9 %48 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %206 %25 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %9 %25 
                                         f32 %214 = OpLoad %213 
                                Private f32* %215 = OpAccessChain %9 %25 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %214 %216 
                                Private f32* %218 = OpAccessChain %206 %25 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %217 %220 
                                Private f32* %222 = OpAccessChain %206 %25 
                                                      OpStore %222 %221 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpVectorShuffle %224 %224 1 2 2 0 
                                       f32_4 %226 = OpLoad %9 
                                       f32_4 %227 = OpVectorShuffle %226 %226 0 1 2 2 
                                       f32_4 %228 = OpFMul %225 %227 
                                                      OpStore %223 %228 
                              Uniform f32_4* %230 = OpAccessChain %17 %84 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %223 
                                         f32 %233 = OpDot %231 %232 
                                Private f32* %234 = OpAccessChain %229 %25 
                                                      OpStore %234 %233 
                              Uniform f32_4* %236 = OpAccessChain %17 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %223 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %229 %48 
                                                      OpStore %240 %239 
                              Uniform f32_4* %242 = OpAccessChain %17 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %223 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %229 %183 
                                                      OpStore %246 %245 
                              Uniform f32_4* %248 = OpAccessChain %17 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpLoad %206 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %229 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %206 %255 
                                Private f32* %257 = OpAccessChain %9 %256 
                                                      OpStore %257 %44 
                              Uniform f32_4* %258 = OpAccessChain %17 %66 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %9 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %229 %25 
                                                      OpStore %262 %261 
                              Uniform f32_4* %263 = OpAccessChain %17 %61 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpLoad %9 
                                         f32 %266 = OpDot %264 %265 
                                Private f32* %267 = OpAccessChain %229 %48 
                                                      OpStore %267 %266 
                              Uniform f32_4* %268 = OpAccessChain %17 %74 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpLoad %9 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %229 %183 
                                                      OpStore %272 %271 
                                       f32_3 %273 = OpLoad %206 
                                       f32_3 %274 = OpLoad %229 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %206 %275 
                                       f32_3 %276 = OpLoad %206 
                                       f32_3 %279 = OpExtInst %1 40 %276 %278 
                                                      OpStore %206 %279 
                                       f32_3 %280 = OpLoad %206 
                                       f32_3 %281 = OpExtInst %1 30 %280 
                                       f32_4 %282 = OpLoad %9 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %9 %283 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %9 %290 
                                       f32_4 %291 = OpLoad %9 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpExtInst %1 29 %292 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %9 %295 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %300 = OpFMul %297 %299 
                                       f32_3 %303 = OpFAdd %300 %302 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %9 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpExtInst %1 40 %307 %278 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                                      OpStore %9 %310 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                                      OpStore %311 %313 
                                                      OpStore %314 %315 
                                 Output f32* %317 = OpAccessChain %123 %66 %48 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFNegate %318 
                                 Output f32* %320 = OpAccessChain %123 %66 %48 
                                                      OpStore %320 %319 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 395
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %273 %382 %384 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %81 ArrayStride 81 
                                                      OpMemberDecorate %82 0 RelaxedPrecision 
                                                      OpMemberDecorate %82 0 Offset 82 
                                                      OpMemberDecorate %82 1 Offset 82 
                                                      OpMemberDecorate %82 2 Offset 82 
                                                      OpMemberDecorate %82 3 Offset 82 
                                                      OpMemberDecorate %82 4 Offset 82 
                                                      OpMemberDecorate %82 5 RelaxedPrecision 
                                                      OpMemberDecorate %82 5 Offset 82 
                                                      OpMemberDecorate %82 6 Offset 82 
                                                      OpMemberDecorate %82 7 Offset 82 
                                                      OpMemberDecorate %82 8 Offset 82 
                                                      OpMemberDecorate %82 9 Offset 82 
                                                      OpMemberDecorate %82 10 Offset 82 
                                                      OpMemberDecorate %82 11 Offset 82 
                                                      OpMemberDecorate %82 12 RelaxedPrecision 
                                                      OpMemberDecorate %82 12 Offset 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %266 SpecId 266 
                                                      OpDecorate %273 Location 273 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %382 Location 382 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_3* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                               Private f32_3* %47 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                               Private f32_3* %79 = OpVariable Private 
                                          u32 %80 = OpConstant 4 
                                              %81 = OpTypeArray %7 %80 
                                              %82 = OpTypeStruct %7 %7 %81 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %83 = OpTypePointer Uniform %82 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %84 = OpVariable Uniform 
                                              %85 = OpTypeInt 32 1 
                                          i32 %86 = OpConstant 7 
                                              %87 = OpTypePointer Uniform %6 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_3* %116 = OpVariable Private 
                                         i32 %119 = OpConstant 8 
                              Private f32_4* %124 = OpVariable Private 
                                         i32 %125 = OpConstant 6 
                                             %126 = OpTypePointer Uniform %7 
                                Private f32* %151 = OpVariable Private 
                                         u32 %152 = OpConstant 3 
                                         i32 %155 = OpConstant 9 
                                         i32 %162 = OpConstant 11 
                                         u32 %169 = OpConstant 1 
                                         u32 %175 = OpConstant 2 
                                         f32 %189 = OpConstant 3.674022E-40 
                                             %192 = OpTypeBool 
                                             %193 = OpTypePointer Private %192 
                               Private bool* %194 = OpVariable Private 
                                             %200 = OpTypePointer Function %6 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %215 = OpConstant 10 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         i32 %231 = OpConstant 0 
                                         i32 %232 = OpConstant 1 
                                         i32 %234 = OpConstant -1 
                                         i32 %241 = OpConstant 12 
                                        bool %260 = OpConstantFalse 
                                        bool %266 = OpSpecConstantFalse 
                                             %272 = OpTypePointer Input %21 
                                Input f32_3* %273 = OpVariable Input 
                                         i32 %276 = OpConstant 2 
                                         i32 %298 = OpConstant 3 
                                             %303 = OpTypePointer Function %21 
                                         i32 %316 = OpConstant 4 
                                             %317 = OpTypePointer Uniform %21 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                Private f32* %338 = OpVariable Private 
                                             %348 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %349 = OpTypeSampledImage %348 
                                             %350 = OpTypePointer UniformConstant %349 
 UniformConstant read_only Texture3DSampled* %351 = OpVariable UniformConstant 
                                         i32 %372 = OpConstant 5 
                                             %381 = OpTypePointer Output %7 
                               Output f32_4* %382 = OpVariable Output 
                                Input f32_3* %384 = OpVariable Input 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %201 = OpVariable Function 
                             Function f32_3* %304 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                 Private f32* %51 = OpAccessChain %47 %38 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %38 
                                          f32 %53 = OpLoad %52 
                                          f32 %55 = OpFAdd %53 %54 
                                 Private f32* %56 = OpAccessChain %47 %38 
                                                      OpStore %56 %55 
                                 Private f32* %57 = OpAccessChain %47 %38 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpExtInst %1 30 %58 
                                 Private f32* %60 = OpAccessChain %47 %38 
                                                      OpStore %60 %59 
                                 Private f32* %61 = OpAccessChain %47 %38 
                                          f32 %62 = OpLoad %61 
                                          f32 %64 = OpFMul %62 %63 
                                 Private f32* %65 = OpAccessChain %47 %38 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %47 %38 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 29 %67 
                                 Private f32* %69 = OpAccessChain %47 %38 
                                                      OpStore %69 %68 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %74 = OpLoad %47 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %70 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %70 %78 
                                 Uniform f32* %88 = OpAccessChain %84 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %84 %86 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %84 %86 
                                          f32 %93 = OpLoad %92 
                                        f32_3 %94 = OpCompositeConstruct %89 %91 %93 
                                          f32 %95 = OpCompositeExtract %94 0 
                                          f32 %96 = OpCompositeExtract %94 1 
                                          f32 %97 = OpCompositeExtract %94 2 
                                        f32_3 %98 = OpCompositeConstruct %95 %96 %97 
                                        f32_4 %99 = OpLoad %70 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %101 %103 
                                                      OpStore %79 %104 
                                Private f32* %105 = OpAccessChain %30 %38 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFMul %106 %107 
                                Private f32* %109 = OpAccessChain %70 %38 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %70 %38 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %70 %38 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                Private f32* %115 = OpAccessChain %70 %38 
                                                      OpStore %115 %114 
                                Private f32* %117 = OpAccessChain %30 %38 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %84 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %116 %38 
                                                      OpStore %123 %122 
                              Uniform f32_4* %127 = OpAccessChain %84 %125 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %70 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 0 0 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %79 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %124 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 1 5 6 
                                                      OpStore %124 %137 
                                       f32_3 %138 = OpLoad %116 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 0 0 
                                       f32_4 %140 = OpLoad %124 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_3 %143 = OpLoad %79 
                                       f32_3 %144 = OpFAdd %142 %143 
                                       f32_4 %145 = OpLoad %124 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %124 %146 
                                       f32_3 %147 = OpLoad %79 
                                       f32_4 %148 = OpLoad %124 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpExtInst %1 40 %147 %149 
                                                      OpStore %79 %150 
                                Private f32* %153 = OpAccessChain %9 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %84 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 40 %154 %157 
                                                      OpStore %151 %158 
                                       f32_4 %159 = OpLoad %16 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFNegate %160 
                              Uniform f32_4* %163 = OpAccessChain %84 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %161 %165 
                                       f32_4 %167 = OpLoad %124 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %124 %168 
                                Private f32* %170 = OpAccessChain %124 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %84 %162 %152 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFDiv %171 %173 
                                Private f32* %176 = OpAccessChain %124 %175 
                                                      OpStore %176 %174 
                                       f32_4 %177 = OpLoad %124 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 2 
                                       f32_4 %179 = OpLoad %124 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 2 
                                         f32 %181 = OpDot %178 %180 
                                Private f32* %182 = OpAccessChain %124 %38 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %124 %38 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 31 %184 
                                Private f32* %186 = OpAccessChain %124 %38 
                                                      OpStore %186 %185 
                                Uniform f32* %187 = OpAccessChain %84 %162 %175 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpFMul %188 %189 
                                Private f32* %191 = OpAccessChain %116 %38 
                                                      OpStore %191 %190 
                                Private f32* %195 = OpAccessChain %116 %38 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %124 %38 
                                         f32 %198 = OpLoad %197 
                                        bool %199 = OpFOrdGreaterThanEqual %196 %198 
                                                      OpStore %194 %199 
                                        bool %202 = OpLoad %194 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %205 
                                             %203 = OpLabel 
                                                      OpStore %201 %44 
                                                      OpBranch %204 
                                             %205 = OpLabel 
                                                      OpStore %201 %206 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %207 = OpLoad %201 
                                Private f32* %208 = OpAccessChain %124 %38 
                                                      OpStore %208 %207 
                                         f32 %209 = OpLoad %151 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %124 %38 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %124 %38 
                                                      OpStore %214 %213 
                                Uniform f32* %216 = OpAccessChain %84 %215 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %124 %38 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %151 
                                         f32 %222 = OpFAdd %220 %221 
                                                      OpStore %151 %222 
                                         f32 %223 = OpLoad %151 
                                         f32 %225 = OpFAdd %223 %224 
                                Private f32* %226 = OpAccessChain %30 %38 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %30 %38 
                                         f32 %228 = OpLoad %227 
                                        bool %229 = OpFOrdLessThan %228 %206 
                                                      OpStore %194 %229 
                                        bool %230 = OpLoad %194 
                                         i32 %233 = OpSelect %230 %232 %231 
                                         i32 %235 = OpIMul %233 %234 
                                        bool %236 = OpINotEqual %235 %231 
                                                      OpSelectionMerge %238 None 
                                                      OpBranchConditional %236 %237 %238 
                                             %237 = OpLabel 
                                                      OpKill
                                             %238 = OpLabel 
                                         f32 %240 = OpLoad %151 
                                Uniform f32* %242 = OpAccessChain %84 %241 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %240 %244 
                                Private f32* %246 = OpAccessChain %30 %38 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %30 %38 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %206 
                                                      OpStore %194 %249 
                                        bool %250 = OpLoad %194 
                                         i32 %251 = OpSelect %250 %232 %231 
                                         i32 %252 = OpIMul %251 %234 
                                        bool %253 = OpINotEqual %252 %231 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %255 
                                             %254 = OpLabel 
                                                      OpKill
                                             %255 = OpLabel 
                                Uniform f32* %257 = OpAccessChain %84 %232 %38 
                                         f32 %258 = OpLoad %257 
                                        bool %259 = OpFOrdEqual %258 %44 
                                                      OpStore %194 %259 
                                                      OpSelectionMerge %262 None 
                                                      OpBranchConditional %260 %261 %262 
                                             %261 = OpLabel 
                                        bool %263 = OpLoad %194 
                                                      OpSelectionMerge %265 None 
                                                      OpBranchConditional %263 %264 %265 
                                             %264 = OpLabel 
                                                      OpBranch %265 
                                             %265 = OpLabel 
                                                      OpBranch %262 
                                             %262 = OpLabel 
                                                      OpSelectionMerge %268 None 
                                                      OpBranchConditional %266 %267 %357 
                                             %267 = OpLabel 
                                Uniform f32* %269 = OpAccessChain %84 %232 %169 
                                         f32 %270 = OpLoad %269 
                                        bool %271 = OpFOrdEqual %270 %44 
                                                      OpStore %194 %271 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %84 %276 %232 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                                      OpStore %116 %280 
                              Uniform f32_4* %281 = OpAccessChain %84 %276 %231 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpLoad %273 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %116 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %116 %288 
                              Uniform f32_4* %289 = OpAccessChain %84 %276 %276 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpLoad %273 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %116 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %116 %296 
                                       f32_3 %297 = OpLoad %116 
                              Uniform f32_4* %299 = OpAccessChain %84 %276 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %297 %301 
                                                      OpStore %116 %302 
                                        bool %305 = OpLoad %194 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %309 
                                             %306 = OpLabel 
                                       f32_3 %308 = OpLoad %116 
                                                      OpStore %304 %308 
                                                      OpBranch %307 
                                             %309 = OpLabel 
                                       f32_3 %310 = OpLoad %273 
                                                      OpStore %304 %310 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_3 %311 = OpLoad %304 
                                       f32_4 %312 = OpLoad %124 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %124 %313 
                                       f32_4 %314 = OpLoad %124 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                              Uniform f32_3* %318 = OpAccessChain %84 %316 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpFNegate %319 
                                       f32_3 %321 = OpFAdd %315 %320 
                                       f32_4 %322 = OpLoad %124 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %124 %323 
                                       f32_4 %324 = OpLoad %124 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %326 = OpAccessChain %84 %298 
                                       f32_3 %327 = OpLoad %326 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %124 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 4 5 6 
                                                      OpStore %124 %330 
                                Private f32* %331 = OpAccessChain %124 %169 
                                         f32 %332 = OpLoad %331 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                Private f32* %337 = OpAccessChain %116 %38 
                                                      OpStore %337 %336 
                                Uniform f32* %339 = OpAccessChain %84 %232 %175 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %340 %189 
                                         f32 %342 = OpFAdd %341 %335 
                                                      OpStore %338 %342 
                                Private f32* %343 = OpAccessChain %116 %38 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpLoad %338 
                                         f32 %346 = OpExtInst %1 40 %344 %345 
                                Private f32* %347 = OpAccessChain %124 %38 
                                                      OpStore %347 %346 
                  read_only Texture3DSampled %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %124 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 2 3 
                                       f32_4 %355 = OpImageSampleImplicitLod %352 %354 
                                                      OpStore %124 %355 
                                       f32_4 %356 = OpLoad %124 
                                                      OpStore %70 %356 
                                                      OpBranch %268 
                                             %357 = OpLabel 
                                Private f32* %358 = OpAccessChain %70 %38 
                                                      OpStore %358 %44 
                                Private f32* %359 = OpAccessChain %70 %169 
                                                      OpStore %359 %44 
                                Private f32* %360 = OpAccessChain %70 %175 
                                                      OpStore %360 %44 
                                Private f32* %361 = OpAccessChain %70 %152 
                                                      OpStore %361 %44 
                                                      OpBranch %268 
                                             %268 = OpLabel 
                                       f32_4 %362 = OpLoad %70 
                              Uniform f32_4* %363 = OpAccessChain %84 %231 
                                       f32_4 %364 = OpLoad %363 
                                         f32 %365 = OpDot %362 %364 
                                Private f32* %366 = OpAccessChain %30 %38 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %30 %38 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 43 %368 %206 %44 
                                Private f32* %370 = OpAccessChain %30 %38 
                                                      OpStore %370 %369 
                                       f32_3 %371 = OpLoad %79 
                              Uniform f32_4* %373 = OpAccessChain %84 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFMul %371 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %30 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpLoad %47 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %30 %380 
                                       f32_3 %383 = OpLoad %79 
                                       f32_3 %385 = OpLoad %384 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_3 %387 = OpLoad %30 
                                       f32_3 %388 = OpFAdd %386 %387 
                                       f32_4 %389 = OpLoad %382 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %382 %390 
                                         f32 %391 = OpLoad %151 
                                 Output f32* %393 = OpAccessChain %382 %152 
                                                      OpStore %393 %391 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat7;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat1.w + -0.100000001;
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = u_xlat1.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat12) + u_xlat2.x;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat12;
    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat12 = u_xlat12 + u_xlat10_3.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12, u_xlat6.x);
    u_xlat12 = (u_xlatb2) ? u_xlat6.x : u_xlat12;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 234
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %89 %128 %132 %133 %148 %163 %191 %197 %199 %214 %226 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %126 0 BuiltIn 126 
                                                      OpMemberDecorate %126 1 BuiltIn 126 
                                                      OpMemberDecorate %126 2 BuiltIn 126 
                                                      OpDecorate %126 Block 
                                                      OpDecorate %132 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %163 Location 163 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %226 Location 226 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 5 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 1 
                                              %61 = OpTypePointer Uniform %7 
                                          i32 %65 = OpConstant 0 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %87 = OpTypeVector %6 3 
                                              %88 = OpTypePointer Output %87 
                                Output f32_3* %89 = OpVariable Output 
                                             %125 = OpTypeArray %6 %48 
                                             %126 = OpTypeStruct %7 %6 %125 
                                             %127 = OpTypePointer Output %126 
        Output struct {f32_4; f32; f32[1];}* %128 = OpVariable Output 
                                             %130 = OpTypePointer Output %7 
                               Output f32_4* %132 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %134 = OpTypeVector %6 2 
                                         i32 %137 = OpConstant 6 
                                Input f32_4* %148 = OpVariable Input 
                                         i32 %151 = OpConstant 7 
                                             %162 = OpTypePointer Input %87 
                                Input f32_3* %163 = OpVariable Input 
                                         u32 %181 = OpConstant 2 
                                Private f32* %183 = OpVariable Private 
                               Output f32_3* %191 = OpVariable Output 
                               Output f32_4* %197 = OpVariable Output 
                               Output f32_3* %199 = OpVariable Output 
                                         f32 %200 = OpConstant 3.674022E-40 
                                       f32_3 %201 = OpConstantComposite %200 %200 %200 
                                       f32_3 %210 = OpConstantComposite %37 %37 %37 
                               Output f32_4* %214 = OpVariable Output 
                               Output f32_4* %226 = OpVariable Output 
                                       f32_4 %227 = OpConstantComposite %200 %200 %200 %200 
                                             %228 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %62 = OpAccessChain %17 %60 %60 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %59 %63 
                                                      OpStore %9 %64 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %84 = OpAccessChain %17 %60 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpFAdd %82 %85 
                                                      OpStore %81 %86 
                               Uniform f32_4* %90 = OpAccessChain %17 %60 %83 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %47 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %95 %97 
                                                      OpStore %89 %98 
                                        f32_4 %99 = OpLoad %81 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %17 %83 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %9 %103 
                              Uniform f32_4* %104 = OpAccessChain %17 %83 %65 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %81 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %9 %110 
                              Uniform f32_4* %111 = OpAccessChain %17 %83 %73 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %81 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %9 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                              Uniform f32_4* %118 = OpAccessChain %17 %83 %83 
                                       f32_4 %119 = OpLoad %118 
                                       f32_4 %120 = OpLoad %81 
                                       f32_4 %121 = OpVectorShuffle %120 %120 3 3 3 3 
                                       f32_4 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpFAdd %122 %123 
                                                      OpStore %9 %124 
                                       f32_4 %129 = OpLoad %9 
                               Output f32_4* %131 = OpAccessChain %128 %65 
                                                      OpStore %131 %129 
                                       f32_4 %135 = OpLoad %133 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %138 = OpAccessChain %17 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFMul %136 %140 
                              Uniform f32_4* %142 = OpAccessChain %17 %137 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_2 %145 = OpFAdd %141 %144 
                                       f32_4 %146 = OpLoad %132 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 2 3 
                                                      OpStore %132 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              Uniform f32_4* %152 = OpAccessChain %17 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %150 %154 
                              Uniform f32_4* %156 = OpAccessChain %17 %151 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                       f32_4 %160 = OpLoad %132 
                                       f32_4 %161 = OpVectorShuffle %160 %159 0 1 4 5 
                                                      OpStore %132 %161 
                                       f32_3 %164 = OpLoad %163 
                              Uniform f32_4* %165 = OpAccessChain %17 %73 %65 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %81 %25 
                                                      OpStore %169 %168 
                                       f32_3 %170 = OpLoad %163 
                              Uniform f32_4* %171 = OpAccessChain %17 %73 %60 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %170 %173 
                                Private f32* %175 = OpAccessChain %81 %48 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %163 
                              Uniform f32_4* %177 = OpAccessChain %17 %73 %73 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %182 = OpAccessChain %81 %181 
                                                      OpStore %182 %180 
                                       f32_4 %184 = OpLoad %81 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_4 %186 = OpLoad %81 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %185 %187 
                                                      OpStore %183 %188 
                                         f32 %189 = OpLoad %183 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %183 %190 
                                         f32 %192 = OpLoad %183 
                                       f32_3 %193 = OpCompositeConstruct %192 %192 %192 
                                       f32_4 %194 = OpLoad %81 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                                      OpStore %191 %196 
                                       f32_4 %198 = OpLoad %47 
                                                      OpStore %197 %198 
                                                      OpStore %199 %201 
                                Private f32* %202 = OpAccessChain %9 %48 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %204 = OpAccessChain %17 %65 %25 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                Private f32* %207 = OpAccessChain %9 %48 
                                                      OpStore %207 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 3 1 
                                       f32_3 %211 = OpFMul %209 %210 
                                       f32_4 %212 = OpLoad %81 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 1 5 6 
                                                      OpStore %81 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_4 %217 = OpLoad %214 
                                       f32_4 %218 = OpVectorShuffle %217 %216 0 1 4 5 
                                                      OpStore %214 %218 
                                       f32_4 %219 = OpLoad %81 
                                       f32_2 %220 = OpVectorShuffle %219 %219 2 2 
                                       f32_4 %221 = OpLoad %81 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 3 
                                       f32_2 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad %214 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %214 %225 
                                                      OpStore %226 %227 
                                 Output f32* %229 = OpAccessChain %128 %65 %48 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                 Output f32* %232 = OpAccessChain %128 %65 %48 
                                                      OpStore %232 %231 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 492
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %247 %429 %479 %481 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 RelaxedPrecision 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 RelaxedPrecision 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 RelaxedPrecision 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpMemberDecorate %72 14 Offset 72 
                                                      OpMemberDecorate %72 15 Offset 72 
                                                      OpMemberDecorate %72 16 RelaxedPrecision 
                                                      OpMemberDecorate %72 16 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %328 SpecId 328 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 Location 429 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %479 Location 479 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %481 Location 481 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %21 %7 %7 %7 %70 %7 %71 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 11 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 12 
                              Private f32_4* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 10 
                                             %115 = OpTypePointer Uniform %7 
                                Private f32* %140 = OpVariable Private 
                                         u32 %141 = OpConstant 3 
                                         i32 %144 = OpConstant 13 
                                         i32 %151 = OpConstant 15 
                                         u32 %158 = OpConstant 1 
                                         u32 %164 = OpConstant 2 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %181 = OpTypeBool 
                                             %182 = OpTypePointer Private %181 
                               Private bool* %183 = OpVariable Private 
                                             %189 = OpTypePointer Function %6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         i32 %204 = OpConstant 14 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         i32 %220 = OpConstant 0 
                                         i32 %221 = OpConstant 1 
                                         i32 %223 = OpConstant -1 
                                         i32 %230 = OpConstant 16 
                                             %246 = OpTypePointer Input %21 
                                Input f32_3* %247 = OpVariable Input 
                                             %250 = OpTypePointer Uniform %21 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %257 = OpConstant 4 
                                         i32 %264 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                               Private bool* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 5 
                                        bool %322 = OpConstantFalse 
                                        bool %328 = OpSpecConstantFalse 
                               Private bool* %331 = OpVariable Private 
                                         i32 %337 = OpConstant 6 
                                             %363 = OpTypePointer Function %21 
                                         i32 %373 = OpConstant 8 
                              Private f32_4* %378 = OpVariable Private 
                                         i32 %380 = OpConstant 7 
                                             %386 = OpTypePointer Private %17 
                              Private f32_2* %387 = OpVariable Private 
                                         f32 %390 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                Private f32* %395 = OpVariable Private 
                                             %405 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
 UniformConstant read_only Texture3DSampled* %408 = OpVariable UniformConstant 
                              Private f32_3* %419 = OpVariable Private 
                                Input f32_4* %429 = OpVariable Input 
                                Private f32* %435 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %436 = OpVariable UniformConstant 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 9 
                                             %478 = OpTypePointer Output %7 
                               Output f32_4* %479 = OpVariable Output 
                                Input f32_3* %481 = OpVariable Input 
                                             %489 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %190 = OpVariable Function 
                             Function f32_3* %364 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %105 %38 
                                                      OpStore %112 %111 
                              Uniform f32_4* %116 = OpAccessChain %74 %114 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %61 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %68 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %121 %123 
                                       f32_4 %125 = OpLoad %113 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 1 5 6 
                                                      OpStore %113 %126 
                                       f32_3 %127 = OpLoad %105 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_4 %129 = OpLoad %113 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 2 3 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_3 %132 = OpLoad %68 
                                       f32_3 %133 = OpFAdd %131 %132 
                                       f32_4 %134 = OpLoad %113 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %68 
                                       f32_4 %137 = OpLoad %113 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                                      OpStore %68 %139 
                                Private f32* %142 = OpAccessChain %9 %141 
                                         f32 %143 = OpLoad %142 
                                Uniform f32* %145 = OpAccessChain %74 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 40 %143 %146 
                                                      OpStore %140 %147 
                                       f32_4 %148 = OpLoad %16 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFNegate %149 
                              Uniform f32_4* %152 = OpAccessChain %74 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %150 %154 
                                       f32_4 %156 = OpLoad %113 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %113 %157 
                                Private f32* %159 = OpAccessChain %113 %158 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %161 = OpAccessChain %74 %151 %141 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFDiv %160 %162 
                                Private f32* %165 = OpAccessChain %113 %164 
                                                      OpStore %165 %163 
                                       f32_4 %166 = OpLoad %113 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 2 
                                       f32_4 %168 = OpLoad %113 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 2 
                                         f32 %170 = OpDot %167 %169 
                                Private f32* %171 = OpAccessChain %113 %38 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %113 %38 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpExtInst %1 31 %173 
                                Private f32* %175 = OpAccessChain %113 %38 
                                                      OpStore %175 %174 
                                Uniform f32* %176 = OpAccessChain %74 %151 %164 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %105 %38 
                                                      OpStore %180 %179 
                                Private f32* %184 = OpAccessChain %105 %38 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %113 %38 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %44 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %195 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %196 = OpLoad %190 
                                Private f32* %197 = OpAccessChain %113 %38 
                                                      OpStore %197 %196 
                                         f32 %198 = OpLoad %140 
                                         f32 %199 = OpFNegate %198 
                                Private f32* %200 = OpAccessChain %113 %38 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %199 %201 
                                Private f32* %203 = OpAccessChain %113 %38 
                                                      OpStore %203 %202 
                                Uniform f32* %205 = OpAccessChain %74 %204 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %113 %38 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %140 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %140 %211 
                                         f32 %212 = OpLoad %140 
                                         f32 %214 = OpFAdd %212 %213 
                                Private f32* %215 = OpAccessChain %30 %38 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %30 %38 
                                         f32 %217 = OpLoad %216 
                                        bool %218 = OpFOrdLessThan %217 %195 
                                                      OpStore %183 %218 
                                        bool %219 = OpLoad %183 
                                         i32 %222 = OpSelect %219 %221 %220 
                                         i32 %224 = OpIMul %222 %223 
                                        bool %225 = OpINotEqual %224 %220 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %140 
                                Uniform f32* %231 = OpAccessChain %74 %230 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %229 %233 
                                Private f32* %235 = OpAccessChain %30 %38 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %38 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %237 %195 
                                                      OpStore %183 %238 
                                        bool %239 = OpLoad %183 
                                         i32 %240 = OpSelect %239 %221 %220 
                                         i32 %241 = OpIMul %240 %223 
                                        bool %242 = OpINotEqual %241 %220 
                                                      OpSelectionMerge %244 None 
                                                      OpBranchConditional %242 %243 %244 
                                             %243 = OpLabel 
                                                      OpKill
                                             %244 = OpLabel 
                                       f32_3 %248 = OpLoad %247 
                                       f32_3 %249 = OpFNegate %248 
                              Uniform f32_3* %251 = OpAccessChain %74 %220 
                                       f32_3 %252 = OpLoad %251 
                                       f32_3 %253 = OpFAdd %249 %252 
                                       f32_4 %254 = OpLoad %113 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %113 %255 
                                Uniform f32* %258 = OpAccessChain %74 %257 %220 %164 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %256 %38 
                                                      OpStore %260 %259 
                                Uniform f32* %261 = OpAccessChain %74 %257 %221 %164 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %256 %158 
                                                      OpStore %263 %262 
                                Uniform f32* %265 = OpAccessChain %74 %257 %264 %164 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %256 %164 
                                                      OpStore %267 %266 
                                       f32_4 %268 = OpLoad %113 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpLoad %256 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %113 %38 
                                                      OpStore %272 %271 
                                       f32_3 %273 = OpLoad %247 
                              Uniform f32_4* %275 = OpAccessChain %74 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFNegate %277 
                                       f32_3 %279 = OpFAdd %273 %278 
                                                      OpStore %105 %279 
                                       f32_3 %280 = OpLoad %105 
                                       f32_3 %281 = OpLoad %105 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %105 %38 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %105 %38 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpExtInst %1 31 %285 
                                Private f32* %287 = OpAccessChain %105 %38 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %113 %38 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %105 %38 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFAdd %290 %292 
                                Private f32* %294 = OpAccessChain %105 %38 
                                                      OpStore %294 %293 
                                Uniform f32* %295 = OpAccessChain %74 %274 %141 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %105 %38 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %113 %38 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %113 %38 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %113 %38 
                                         f32 %305 = OpLoad %304 
                                Uniform f32* %306 = OpAccessChain %74 %264 %164 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Uniform f32* %309 = OpAccessChain %74 %264 %141 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %113 %38 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %113 %38 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %195 %44 
                                Private f32* %316 = OpAccessChain %113 %38 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %74 %318 %38 
                                         f32 %320 = OpLoad %319 
                                        bool %321 = OpFOrdEqual %320 %44 
                                                      OpStore %317 %321 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %322 %323 %324 
                                             %323 = OpLabel 
                                        bool %325 = OpLoad %317 
                                                      OpSelectionMerge %327 None 
                                                      OpBranchConditional %325 %326 %327 
                                             %326 = OpLabel 
                                                      OpBranch %327 
                                             %327 = OpLabel 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %328 %329 %414 
                                             %329 = OpLabel 
                                Uniform f32* %332 = OpAccessChain %74 %318 %158 
                                         f32 %333 = OpLoad %332 
                                        bool %334 = OpFOrdEqual %333 %44 
                                                      OpStore %331 %334 
                                       f32_3 %335 = OpLoad %247 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %338 = OpAccessChain %74 %337 %221 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                                      OpStore %256 %341 
                              Uniform f32_4* %342 = OpAccessChain %74 %337 %220 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpLoad %247 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_3 %348 = OpLoad %256 
                                       f32_3 %349 = OpFAdd %347 %348 
                                                      OpStore %256 %349 
                              Uniform f32_4* %350 = OpAccessChain %74 %337 %264 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %247 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %356 = OpLoad %256 
                                       f32_3 %357 = OpFAdd %355 %356 
                                                      OpStore %256 %357 
                                       f32_3 %358 = OpLoad %256 
                              Uniform f32_4* %359 = OpAccessChain %74 %337 %274 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %358 %361 
                                                      OpStore %256 %362 
                                        bool %365 = OpLoad %331 
                                                      OpSelectionMerge %367 None 
                                                      OpBranchConditional %365 %366 %369 
                                             %366 = OpLabel 
                                       f32_3 %368 = OpLoad %256 
                                                      OpStore %364 %368 
                                                      OpBranch %367 
                                             %369 = OpLabel 
                                       f32_3 %370 = OpLoad %247 
                                                      OpStore %364 %370 
                                                      OpBranch %367 
                                             %367 = OpLabel 
                                       f32_3 %371 = OpLoad %364 
                                                      OpStore %256 %371 
                                       f32_3 %372 = OpLoad %256 
                              Uniform f32_3* %374 = OpAccessChain %74 %373 
                                       f32_3 %375 = OpLoad %374 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %377 = OpFAdd %372 %376 
                                                      OpStore %256 %377 
                                       f32_3 %379 = OpLoad %256 
                              Uniform f32_3* %381 = OpAccessChain %74 %380 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %379 %382 
                                       f32_4 %384 = OpLoad %378 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %378 %385 
                                Private f32* %388 = OpAccessChain %378 %158 
                                         f32 %389 = OpLoad %388 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %393 = OpFAdd %391 %392 
                                Private f32* %394 = OpAccessChain %387 %38 
                                                      OpStore %394 %393 
                                Uniform f32* %396 = OpAccessChain %74 %318 %164 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %397 %178 
                                         f32 %399 = OpFAdd %398 %392 
                                                      OpStore %395 %399 
                                         f32 %400 = OpLoad %395 
                                Private f32* %401 = OpAccessChain %387 %38 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 40 %400 %402 
                                Private f32* %404 = OpAccessChain %378 %38 
                                                      OpStore %404 %403 
                  read_only Texture3DSampled %409 = OpLoad %408 
                                       f32_4 %410 = OpLoad %378 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 2 3 
                                       f32_4 %412 = OpImageSampleImplicitLod %409 %411 
                                                      OpStore %378 %412 
                                       f32_4 %413 = OpLoad %378 
                                                      OpStore %30 %413 
                                                      OpBranch %330 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %30 %38 
                                                      OpStore %415 %44 
                                Private f32* %416 = OpAccessChain %30 %158 
                                                      OpStore %416 %44 
                                Private f32* %417 = OpAccessChain %30 %164 
                                                      OpStore %417 %44 
                                Private f32* %418 = OpAccessChain %30 %141 
                                                      OpStore %418 %44 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_4 %420 = OpLoad %30 
                              Uniform f32_4* %421 = OpAccessChain %74 %221 
                                       f32_4 %422 = OpLoad %421 
                                         f32 %423 = OpDot %420 %422 
                                Private f32* %424 = OpAccessChain %419 %38 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %419 %38 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpExtInst %1 43 %426 %195 %44 
                                Private f32* %428 = OpAccessChain %419 %38 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_4 %432 = OpLoad %429 
                                       f32_2 %433 = OpVectorShuffle %432 %432 3 3 
                                       f32_2 %434 = OpFDiv %431 %433 
                                                      OpStore %387 %434 
                  read_only Texture2DSampled %437 = OpLoad %436 
                                       f32_2 %438 = OpLoad %387 
                                       f32_4 %439 = OpImageSampleImplicitLod %437 %438 
                                         f32 %440 = OpCompositeExtract %439 0 
                                                      OpStore %435 %440 
                                Private f32* %442 = OpAccessChain %113 %38 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpLoad %435 
                                         f32 %445 = OpFAdd %443 %444 
                                Private f32* %446 = OpAccessChain %441 %38 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %441 %38 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 43 %448 %195 %44 
                                Private f32* %450 = OpAccessChain %441 %38 
                                                      OpStore %450 %449 
                                Private f32* %451 = OpAccessChain %441 %38 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %419 %38 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                Private f32* %456 = OpAccessChain %419 %38 
                                                      OpStore %456 %455 
                                        bool %458 = OpLoad %317 
                                                      OpSelectionMerge %460 None 
                                                      OpBranchConditional %458 %459 %463 
                                             %459 = OpLabel 
                                Private f32* %461 = OpAccessChain %419 %38 
                                         f32 %462 = OpLoad %461 
                                                      OpStore %457 %462 
                                                      OpBranch %460 
                                             %463 = OpLabel 
                                Private f32* %464 = OpAccessChain %441 %38 
                                         f32 %465 = OpLoad %464 
                                                      OpStore %457 %465 
                                                      OpBranch %460 
                                             %460 = OpLabel 
                                         f32 %466 = OpLoad %457 
                                Private f32* %467 = OpAccessChain %419 %38 
                                                      OpStore %467 %466 
                                       f32_3 %468 = OpLoad %68 
                              Uniform f32_4* %470 = OpAccessChain %74 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %468 %472 
                                                      OpStore %441 %473 
                                       f32_3 %474 = OpLoad %419 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_3 %476 = OpLoad %441 
                                       f32_3 %477 = OpFMul %475 %476 
                                                      OpStore %419 %477 
                                       f32_3 %480 = OpLoad %68 
                                       f32_3 %482 = OpLoad %481 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %419 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %479 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %479 %487 
                                         f32 %488 = OpLoad %140 
                                 Output f32* %490 = OpAccessChain %479 %141 
                                                      OpStore %490 %488 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
float u_xlat16;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat1.w + -0.100000001;
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = u_xlat1.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat12) + u_xlat2.x;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat12;
    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat12 = u_xlat12 + u_xlat10_3.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12, u_xlat6.x);
    u_xlat12 = (u_xlatb2) ? u_xlat6.x : u_xlat12;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 349
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %90 %130 %134 %135 %150 %165 %201 %204 %314 %329 %341 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 RelaxedPrecision 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %90 Location 90 
                                                      OpMemberDecorate %128 0 BuiltIn 128 
                                                      OpMemberDecorate %128 1 BuiltIn 128 
                                                      OpMemberDecorate %128 2 BuiltIn 128 
                                                      OpDecorate %128 Block 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %341 Location 341 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 12 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 11 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 8 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %66 = OpConstant 0 
                                          i32 %74 = OpConstant 2 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %88 = OpTypeVector %6 3 
                                              %89 = OpTypePointer Output %88 
                                Output f32_3* %90 = OpVariable Output 
                                         i32 %102 = OpConstant 10 
                                             %127 = OpTypeArray %6 %48 
                                             %128 = OpTypeStruct %7 %6 %127 
                                             %129 = OpTypePointer Output %128 
        Output struct {f32_4; f32; f32[1];}* %130 = OpVariable Output 
                                             %132 = OpTypePointer Output %7 
                               Output f32_4* %134 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                             %136 = OpTypeVector %6 2 
                                         i32 %139 = OpConstant 13 
                                Input f32_4* %150 = OpVariable Input 
                                         i32 %153 = OpConstant 14 
                                             %164 = OpTypePointer Input %88 
                                Input f32_3* %165 = OpVariable Input 
                                         i32 %167 = OpConstant 9 
                                         u32 %184 = OpConstant 2 
                                Private f32* %186 = OpVariable Private 
                               Output f32_3* %201 = OpVariable Output 
                               Output f32_4* %204 = OpVariable Output 
                                             %206 = OpTypePointer Private %88 
                              Private f32_3* %207 = OpVariable Private 
                              Private f32_4* %224 = OpVariable Private 
                              Private f32_3* %230 = OpVariable Private 
                                         i32 %231 = OpConstant 4 
                                         i32 %237 = OpConstant 5 
                                         i32 %243 = OpConstant 6 
                                         i32 %249 = OpConstant 7 
                                         u32 %258 = OpConstant 3 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_3 %290 = OpConstantComposite %289 %289 %289 
                                         f32 %301 = OpConstant 3.674022E-40 
                                       f32_3 %302 = OpConstantComposite %301 %301 %301 
                                         f32 %304 = OpConstant 3.674022E-40 
                                       f32_3 %305 = OpConstantComposite %304 %304 %304 
                               Output f32_3* %314 = OpVariable Output 
                                       f32_3 %325 = OpConstantComposite %37 %37 %37 
                               Output f32_4* %329 = OpVariable Output 
                               Output f32_4* %341 = OpVariable Output 
                                       f32_4 %342 = OpConstantComposite %280 %280 %280 %280 
                                             %343 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %67 = OpAccessChain %17 %60 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %75 = OpAccessChain %17 %60 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpLoad %47 
                                        f32_4 %78 = OpVectorShuffle %77 %77 2 2 2 2 
                                        f32_4 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpFAdd %79 %80 
                                                      OpStore %9 %81 
                                        f32_4 %83 = OpLoad %9 
                               Uniform f32_4* %85 = OpAccessChain %17 %60 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %82 %87 
                               Uniform f32_4* %91 = OpAccessChain %17 %60 %84 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %47 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                                      OpStore %90 %99 
                                       f32_4 %100 = OpLoad %82 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %17 %102 %61 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %102 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %82 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %17 %102 %74 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %82 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %9 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                              Uniform f32_4* %120 = OpAccessChain %17 %102 %84 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %9 %126 
                                       f32_4 %131 = OpLoad %9 
                               Output f32_4* %133 = OpAccessChain %130 %66 
                                                      OpStore %133 %131 
                                       f32_4 %137 = OpLoad %135 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %140 = OpAccessChain %17 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_2 %143 = OpFMul %138 %142 
                              Uniform f32_4* %144 = OpAccessChain %17 %139 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %134 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 3 
                                                      OpStore %134 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                              Uniform f32_4* %154 = OpAccessChain %17 %153 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_2 %157 = OpFMul %152 %156 
                              Uniform f32_4* %158 = OpAccessChain %17 %153 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 2 3 
                                       f32_2 %161 = OpFAdd %157 %160 
                                       f32_4 %162 = OpLoad %134 
                                       f32_4 %163 = OpVectorShuffle %162 %161 0 1 4 5 
                                                      OpStore %134 %163 
                                       f32_3 %166 = OpLoad %165 
                              Uniform f32_4* %168 = OpAccessChain %17 %167 %66 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %166 %170 
                                Private f32* %172 = OpAccessChain %82 %25 
                                                      OpStore %172 %171 
                                       f32_3 %173 = OpLoad %165 
                              Uniform f32_4* %174 = OpAccessChain %17 %167 %61 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %173 %176 
                                Private f32* %178 = OpAccessChain %82 %48 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %165 
                              Uniform f32_4* %180 = OpAccessChain %17 %167 %74 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %179 %182 
                                Private f32* %185 = OpAccessChain %82 %184 
                                                      OpStore %185 %183 
                                       f32_4 %187 = OpLoad %82 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %82 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %188 %190 
                                                      OpStore %186 %191 
                                         f32 %192 = OpLoad %186 
                                         f32 %193 = OpExtInst %1 32 %192 
                                                      OpStore %186 %193 
                                         f32 %194 = OpLoad %186 
                                       f32_3 %195 = OpCompositeConstruct %194 %194 %194 
                                       f32_4 %196 = OpLoad %82 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %82 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %82 %200 
                                       f32_4 %202 = OpLoad %82 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                                      OpStore %201 %203 
                                       f32_4 %205 = OpLoad %47 
                                                      OpStore %204 %205 
                                Private f32* %208 = OpAccessChain %82 %48 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %82 %48 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                Private f32* %213 = OpAccessChain %207 %25 
                                                      OpStore %213 %212 
                                Private f32* %214 = OpAccessChain %82 %25 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %82 %25 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %215 %217 
                                Private f32* %219 = OpAccessChain %207 %25 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                         f32 %222 = OpFAdd %218 %221 
                                Private f32* %223 = OpAccessChain %207 %25 
                                                      OpStore %223 %222 
                                       f32_4 %225 = OpLoad %82 
                                       f32_4 %226 = OpVectorShuffle %225 %225 1 2 2 0 
                                       f32_4 %227 = OpLoad %82 
                                       f32_4 %228 = OpVectorShuffle %227 %227 0 1 2 2 
                                       f32_4 %229 = OpFMul %226 %228 
                                                      OpStore %224 %229 
                              Uniform f32_4* %232 = OpAccessChain %17 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %224 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %230 %25 
                                                      OpStore %236 %235 
                              Uniform f32_4* %238 = OpAccessChain %17 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %224 
                                         f32 %241 = OpDot %239 %240 
                                Private f32* %242 = OpAccessChain %230 %48 
                                                      OpStore %242 %241 
                              Uniform f32_4* %244 = OpAccessChain %17 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_4 %246 = OpLoad %224 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %230 %184 
                                                      OpStore %248 %247 
                              Uniform f32_4* %250 = OpAccessChain %17 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpLoad %207 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %256 = OpLoad %230 
                                       f32_3 %257 = OpFAdd %255 %256 
                                                      OpStore %207 %257 
                                Private f32* %259 = OpAccessChain %82 %258 
                                                      OpStore %259 %44 
                              Uniform f32_4* %260 = OpAccessChain %17 %61 
                                       f32_4 %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %82 
                                         f32 %263 = OpDot %261 %262 
                                Private f32* %264 = OpAccessChain %224 %25 
                                                      OpStore %264 %263 
                              Uniform f32_4* %265 = OpAccessChain %17 %74 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpLoad %82 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %224 %48 
                                                      OpStore %269 %268 
                              Uniform f32_4* %270 = OpAccessChain %17 %84 
                                       f32_4 %271 = OpLoad %270 
                                       f32_4 %272 = OpLoad %82 
                                         f32 %273 = OpDot %271 %272 
                                Private f32* %274 = OpAccessChain %224 %184 
                                                      OpStore %274 %273 
                                       f32_3 %275 = OpLoad %207 
                                       f32_4 %276 = OpLoad %224 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                                      OpStore %207 %278 
                                       f32_3 %279 = OpLoad %207 
                                       f32_3 %282 = OpExtInst %1 40 %279 %281 
                                                      OpStore %207 %282 
                                       f32_3 %283 = OpLoad %207 
                                       f32_3 %284 = OpExtInst %1 30 %283 
                                       f32_4 %285 = OpLoad %82 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %82 %286 
                                       f32_4 %287 = OpLoad %82 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %82 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %82 %293 
                                       f32_4 %294 = OpLoad %82 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpExtInst %1 29 %295 
                                       f32_4 %297 = OpLoad %82 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
                                                      OpStore %82 %298 
                                       f32_4 %299 = OpLoad %82 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_3 %306 = OpFAdd %303 %305 
                                       f32_4 %307 = OpLoad %82 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %82 %308 
                                       f32_4 %309 = OpLoad %82 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpExtInst %1 40 %310 %281 
                                       f32_4 %312 = OpLoad %82 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %82 %313 
                                       f32_4 %315 = OpLoad %82 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                                      OpStore %314 %316 
                                Private f32* %317 = OpAccessChain %9 %48 
                                         f32 %318 = OpLoad %317 
                                Uniform f32* %319 = OpAccessChain %17 %66 %25 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %9 %48 
                                                      OpStore %322 %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 3 1 
                                       f32_3 %326 = OpFMul %324 %325 
                                       f32_4 %327 = OpLoad %82 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 1 5 6 
                                                      OpStore %82 %328 
                                       f32_4 %330 = OpLoad %9 
                                       f32_2 %331 = OpVectorShuffle %330 %330 2 3 
                                       f32_4 %332 = OpLoad %329 
                                       f32_4 %333 = OpVectorShuffle %332 %331 0 1 4 5 
                                                      OpStore %329 %333 
                                       f32_4 %334 = OpLoad %82 
                                       f32_2 %335 = OpVectorShuffle %334 %334 2 2 
                                       f32_4 %336 = OpLoad %82 
                                       f32_2 %337 = OpVectorShuffle %336 %336 0 3 
                                       f32_2 %338 = OpFAdd %335 %337 
                                       f32_4 %339 = OpLoad %329 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 2 3 
                                                      OpStore %329 %340 
                                                      OpStore %341 %342 
                                 Output f32* %344 = OpAccessChain %130 %66 %48 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFNegate %345 
                                 Output f32* %347 = OpAccessChain %130 %66 %48 
                                                      OpStore %347 %346 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 492
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %247 %429 %479 %481 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 RelaxedPrecision 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 RelaxedPrecision 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 RelaxedPrecision 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpMemberDecorate %72 14 Offset 72 
                                                      OpMemberDecorate %72 15 Offset 72 
                                                      OpMemberDecorate %72 16 RelaxedPrecision 
                                                      OpMemberDecorate %72 16 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %328 SpecId 328 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 Location 429 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %479 Location 479 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %481 Location 481 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %21 %7 %7 %7 %70 %7 %71 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 11 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 12 
                              Private f32_4* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 10 
                                             %115 = OpTypePointer Uniform %7 
                                Private f32* %140 = OpVariable Private 
                                         u32 %141 = OpConstant 3 
                                         i32 %144 = OpConstant 13 
                                         i32 %151 = OpConstant 15 
                                         u32 %158 = OpConstant 1 
                                         u32 %164 = OpConstant 2 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %181 = OpTypeBool 
                                             %182 = OpTypePointer Private %181 
                               Private bool* %183 = OpVariable Private 
                                             %189 = OpTypePointer Function %6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         i32 %204 = OpConstant 14 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         i32 %220 = OpConstant 0 
                                         i32 %221 = OpConstant 1 
                                         i32 %223 = OpConstant -1 
                                         i32 %230 = OpConstant 16 
                                             %246 = OpTypePointer Input %21 
                                Input f32_3* %247 = OpVariable Input 
                                             %250 = OpTypePointer Uniform %21 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %257 = OpConstant 4 
                                         i32 %264 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                               Private bool* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 5 
                                        bool %322 = OpConstantFalse 
                                        bool %328 = OpSpecConstantFalse 
                               Private bool* %331 = OpVariable Private 
                                         i32 %337 = OpConstant 6 
                                             %363 = OpTypePointer Function %21 
                                         i32 %373 = OpConstant 8 
                              Private f32_4* %378 = OpVariable Private 
                                         i32 %380 = OpConstant 7 
                                             %386 = OpTypePointer Private %17 
                              Private f32_2* %387 = OpVariable Private 
                                         f32 %390 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                Private f32* %395 = OpVariable Private 
                                             %405 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
 UniformConstant read_only Texture3DSampled* %408 = OpVariable UniformConstant 
                              Private f32_3* %419 = OpVariable Private 
                                Input f32_4* %429 = OpVariable Input 
                                Private f32* %435 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %436 = OpVariable UniformConstant 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 9 
                                             %478 = OpTypePointer Output %7 
                               Output f32_4* %479 = OpVariable Output 
                                Input f32_3* %481 = OpVariable Input 
                                             %489 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %190 = OpVariable Function 
                             Function f32_3* %364 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %105 %38 
                                                      OpStore %112 %111 
                              Uniform f32_4* %116 = OpAccessChain %74 %114 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %61 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %68 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %121 %123 
                                       f32_4 %125 = OpLoad %113 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 1 5 6 
                                                      OpStore %113 %126 
                                       f32_3 %127 = OpLoad %105 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_4 %129 = OpLoad %113 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 2 3 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_3 %132 = OpLoad %68 
                                       f32_3 %133 = OpFAdd %131 %132 
                                       f32_4 %134 = OpLoad %113 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %68 
                                       f32_4 %137 = OpLoad %113 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                                      OpStore %68 %139 
                                Private f32* %142 = OpAccessChain %9 %141 
                                         f32 %143 = OpLoad %142 
                                Uniform f32* %145 = OpAccessChain %74 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 40 %143 %146 
                                                      OpStore %140 %147 
                                       f32_4 %148 = OpLoad %16 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFNegate %149 
                              Uniform f32_4* %152 = OpAccessChain %74 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %150 %154 
                                       f32_4 %156 = OpLoad %113 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %113 %157 
                                Private f32* %159 = OpAccessChain %113 %158 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %161 = OpAccessChain %74 %151 %141 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFDiv %160 %162 
                                Private f32* %165 = OpAccessChain %113 %164 
                                                      OpStore %165 %163 
                                       f32_4 %166 = OpLoad %113 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 2 
                                       f32_4 %168 = OpLoad %113 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 2 
                                         f32 %170 = OpDot %167 %169 
                                Private f32* %171 = OpAccessChain %113 %38 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %113 %38 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpExtInst %1 31 %173 
                                Private f32* %175 = OpAccessChain %113 %38 
                                                      OpStore %175 %174 
                                Uniform f32* %176 = OpAccessChain %74 %151 %164 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %105 %38 
                                                      OpStore %180 %179 
                                Private f32* %184 = OpAccessChain %105 %38 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %113 %38 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %44 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %195 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %196 = OpLoad %190 
                                Private f32* %197 = OpAccessChain %113 %38 
                                                      OpStore %197 %196 
                                         f32 %198 = OpLoad %140 
                                         f32 %199 = OpFNegate %198 
                                Private f32* %200 = OpAccessChain %113 %38 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %199 %201 
                                Private f32* %203 = OpAccessChain %113 %38 
                                                      OpStore %203 %202 
                                Uniform f32* %205 = OpAccessChain %74 %204 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %113 %38 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %140 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %140 %211 
                                         f32 %212 = OpLoad %140 
                                         f32 %214 = OpFAdd %212 %213 
                                Private f32* %215 = OpAccessChain %30 %38 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %30 %38 
                                         f32 %217 = OpLoad %216 
                                        bool %218 = OpFOrdLessThan %217 %195 
                                                      OpStore %183 %218 
                                        bool %219 = OpLoad %183 
                                         i32 %222 = OpSelect %219 %221 %220 
                                         i32 %224 = OpIMul %222 %223 
                                        bool %225 = OpINotEqual %224 %220 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %140 
                                Uniform f32* %231 = OpAccessChain %74 %230 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %229 %233 
                                Private f32* %235 = OpAccessChain %30 %38 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %38 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %237 %195 
                                                      OpStore %183 %238 
                                        bool %239 = OpLoad %183 
                                         i32 %240 = OpSelect %239 %221 %220 
                                         i32 %241 = OpIMul %240 %223 
                                        bool %242 = OpINotEqual %241 %220 
                                                      OpSelectionMerge %244 None 
                                                      OpBranchConditional %242 %243 %244 
                                             %243 = OpLabel 
                                                      OpKill
                                             %244 = OpLabel 
                                       f32_3 %248 = OpLoad %247 
                                       f32_3 %249 = OpFNegate %248 
                              Uniform f32_3* %251 = OpAccessChain %74 %220 
                                       f32_3 %252 = OpLoad %251 
                                       f32_3 %253 = OpFAdd %249 %252 
                                       f32_4 %254 = OpLoad %113 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %113 %255 
                                Uniform f32* %258 = OpAccessChain %74 %257 %220 %164 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %256 %38 
                                                      OpStore %260 %259 
                                Uniform f32* %261 = OpAccessChain %74 %257 %221 %164 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %256 %158 
                                                      OpStore %263 %262 
                                Uniform f32* %265 = OpAccessChain %74 %257 %264 %164 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %256 %164 
                                                      OpStore %267 %266 
                                       f32_4 %268 = OpLoad %113 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpLoad %256 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %113 %38 
                                                      OpStore %272 %271 
                                       f32_3 %273 = OpLoad %247 
                              Uniform f32_4* %275 = OpAccessChain %74 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFNegate %277 
                                       f32_3 %279 = OpFAdd %273 %278 
                                                      OpStore %105 %279 
                                       f32_3 %280 = OpLoad %105 
                                       f32_3 %281 = OpLoad %105 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %105 %38 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %105 %38 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpExtInst %1 31 %285 
                                Private f32* %287 = OpAccessChain %105 %38 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %113 %38 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %105 %38 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFAdd %290 %292 
                                Private f32* %294 = OpAccessChain %105 %38 
                                                      OpStore %294 %293 
                                Uniform f32* %295 = OpAccessChain %74 %274 %141 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %105 %38 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %113 %38 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %113 %38 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %113 %38 
                                         f32 %305 = OpLoad %304 
                                Uniform f32* %306 = OpAccessChain %74 %264 %164 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Uniform f32* %309 = OpAccessChain %74 %264 %141 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %113 %38 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %113 %38 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %195 %44 
                                Private f32* %316 = OpAccessChain %113 %38 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %74 %318 %38 
                                         f32 %320 = OpLoad %319 
                                        bool %321 = OpFOrdEqual %320 %44 
                                                      OpStore %317 %321 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %322 %323 %324 
                                             %323 = OpLabel 
                                        bool %325 = OpLoad %317 
                                                      OpSelectionMerge %327 None 
                                                      OpBranchConditional %325 %326 %327 
                                             %326 = OpLabel 
                                                      OpBranch %327 
                                             %327 = OpLabel 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %328 %329 %414 
                                             %329 = OpLabel 
                                Uniform f32* %332 = OpAccessChain %74 %318 %158 
                                         f32 %333 = OpLoad %332 
                                        bool %334 = OpFOrdEqual %333 %44 
                                                      OpStore %331 %334 
                                       f32_3 %335 = OpLoad %247 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %338 = OpAccessChain %74 %337 %221 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                                      OpStore %256 %341 
                              Uniform f32_4* %342 = OpAccessChain %74 %337 %220 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpLoad %247 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_3 %348 = OpLoad %256 
                                       f32_3 %349 = OpFAdd %347 %348 
                                                      OpStore %256 %349 
                              Uniform f32_4* %350 = OpAccessChain %74 %337 %264 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %247 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %356 = OpLoad %256 
                                       f32_3 %357 = OpFAdd %355 %356 
                                                      OpStore %256 %357 
                                       f32_3 %358 = OpLoad %256 
                              Uniform f32_4* %359 = OpAccessChain %74 %337 %274 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %358 %361 
                                                      OpStore %256 %362 
                                        bool %365 = OpLoad %331 
                                                      OpSelectionMerge %367 None 
                                                      OpBranchConditional %365 %366 %369 
                                             %366 = OpLabel 
                                       f32_3 %368 = OpLoad %256 
                                                      OpStore %364 %368 
                                                      OpBranch %367 
                                             %369 = OpLabel 
                                       f32_3 %370 = OpLoad %247 
                                                      OpStore %364 %370 
                                                      OpBranch %367 
                                             %367 = OpLabel 
                                       f32_3 %371 = OpLoad %364 
                                                      OpStore %256 %371 
                                       f32_3 %372 = OpLoad %256 
                              Uniform f32_3* %374 = OpAccessChain %74 %373 
                                       f32_3 %375 = OpLoad %374 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %377 = OpFAdd %372 %376 
                                                      OpStore %256 %377 
                                       f32_3 %379 = OpLoad %256 
                              Uniform f32_3* %381 = OpAccessChain %74 %380 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %379 %382 
                                       f32_4 %384 = OpLoad %378 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %378 %385 
                                Private f32* %388 = OpAccessChain %378 %158 
                                         f32 %389 = OpLoad %388 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %393 = OpFAdd %391 %392 
                                Private f32* %394 = OpAccessChain %387 %38 
                                                      OpStore %394 %393 
                                Uniform f32* %396 = OpAccessChain %74 %318 %164 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %397 %178 
                                         f32 %399 = OpFAdd %398 %392 
                                                      OpStore %395 %399 
                                         f32 %400 = OpLoad %395 
                                Private f32* %401 = OpAccessChain %387 %38 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 40 %400 %402 
                                Private f32* %404 = OpAccessChain %378 %38 
                                                      OpStore %404 %403 
                  read_only Texture3DSampled %409 = OpLoad %408 
                                       f32_4 %410 = OpLoad %378 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 2 3 
                                       f32_4 %412 = OpImageSampleImplicitLod %409 %411 
                                                      OpStore %378 %412 
                                       f32_4 %413 = OpLoad %378 
                                                      OpStore %30 %413 
                                                      OpBranch %330 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %30 %38 
                                                      OpStore %415 %44 
                                Private f32* %416 = OpAccessChain %30 %158 
                                                      OpStore %416 %44 
                                Private f32* %417 = OpAccessChain %30 %164 
                                                      OpStore %417 %44 
                                Private f32* %418 = OpAccessChain %30 %141 
                                                      OpStore %418 %44 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_4 %420 = OpLoad %30 
                              Uniform f32_4* %421 = OpAccessChain %74 %221 
                                       f32_4 %422 = OpLoad %421 
                                         f32 %423 = OpDot %420 %422 
                                Private f32* %424 = OpAccessChain %419 %38 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %419 %38 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpExtInst %1 43 %426 %195 %44 
                                Private f32* %428 = OpAccessChain %419 %38 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_4 %432 = OpLoad %429 
                                       f32_2 %433 = OpVectorShuffle %432 %432 3 3 
                                       f32_2 %434 = OpFDiv %431 %433 
                                                      OpStore %387 %434 
                  read_only Texture2DSampled %437 = OpLoad %436 
                                       f32_2 %438 = OpLoad %387 
                                       f32_4 %439 = OpImageSampleImplicitLod %437 %438 
                                         f32 %440 = OpCompositeExtract %439 0 
                                                      OpStore %435 %440 
                                Private f32* %442 = OpAccessChain %113 %38 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpLoad %435 
                                         f32 %445 = OpFAdd %443 %444 
                                Private f32* %446 = OpAccessChain %441 %38 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %441 %38 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 43 %448 %195 %44 
                                Private f32* %450 = OpAccessChain %441 %38 
                                                      OpStore %450 %449 
                                Private f32* %451 = OpAccessChain %441 %38 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %419 %38 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                Private f32* %456 = OpAccessChain %419 %38 
                                                      OpStore %456 %455 
                                        bool %458 = OpLoad %317 
                                                      OpSelectionMerge %460 None 
                                                      OpBranchConditional %458 %459 %463 
                                             %459 = OpLabel 
                                Private f32* %461 = OpAccessChain %419 %38 
                                         f32 %462 = OpLoad %461 
                                                      OpStore %457 %462 
                                                      OpBranch %460 
                                             %463 = OpLabel 
                                Private f32* %464 = OpAccessChain %441 %38 
                                         f32 %465 = OpLoad %464 
                                                      OpStore %457 %465 
                                                      OpBranch %460 
                                             %460 = OpLabel 
                                         f32 %466 = OpLoad %457 
                                Private f32* %467 = OpAccessChain %419 %38 
                                                      OpStore %467 %466 
                                       f32_3 %468 = OpLoad %68 
                              Uniform f32_4* %470 = OpAccessChain %74 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %468 %472 
                                                      OpStore %441 %473 
                                       f32_3 %474 = OpLoad %419 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_3 %476 = OpLoad %441 
                                       f32_3 %477 = OpFMul %475 %476 
                                                      OpStore %419 %477 
                                       f32_3 %480 = OpLoad %68 
                                       f32_3 %482 = OpLoad %481 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %419 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %479 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %479 %487 
                                         f32 %488 = OpLoad %140 
                                 Output f32* %490 = OpAccessChain %479 %141 
                                                      OpStore %490 %488 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
float u_xlat15;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat5 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat5 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = max(u_xlat2, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat1.w + -0.100000001;
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = u_xlat1.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %126 %136 %137 %152 %167 %204 %207 %210 %327 %330 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %124 0 BuiltIn 124 
                                                      OpMemberDecorate %124 1 BuiltIn 124 
                                                      OpMemberDecorate %124 2 BuiltIn 124 
                                                      OpDecorate %124 Block 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %327 Location 327 
                                                      OpDecorate %330 Location 330 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 9 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 8 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 5 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 7 
                                             %123 = OpTypeArray %6 %50 
                                             %124 = OpTypeStruct %7 %6 %123 
                                             %125 = OpTypePointer Output %124 
        Output struct {f32_4; f32; f32[1];}* %126 = OpVariable Output 
                                             %134 = OpTypePointer Output %7 
                               Output f32_4* %136 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                             %138 = OpTypeVector %6 2 
                                         i32 %141 = OpConstant 10 
                                Input f32_4* %152 = OpVariable Input 
                                         i32 %155 = OpConstant 11 
                                             %166 = OpTypePointer Input %90 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 6 
                                         u32 %186 = OpConstant 2 
                                Private f32* %188 = OpVariable Private 
                                             %203 = OpTypePointer Output %90 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                              Private f32_4* %218 = OpVariable Private 
                              Private f32_4* %226 = OpVariable Private 
                                         f32 %262 = OpConstant 3.674022E-40 
                                       f32_4 %263 = OpConstantComposite %262 %262 %262 %262 
                                       f32_4 %271 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_4 %280 = OpConstantComposite %279 %279 %279 %279 
                                         i32 %287 = OpConstant 4 
                               Output f32_3* %327 = OpVariable Output 
                               Output f32_4* %330 = OpVariable Output 
                                             %331 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %127 = OpAccessChain %19 %105 %86 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %84 
                                       f32_4 %130 = OpVectorShuffle %129 %129 3 3 3 3 
                                       f32_4 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %102 
                                       f32_4 %133 = OpFAdd %131 %132 
                               Output f32_4* %135 = OpAccessChain %126 %68 
                                                      OpStore %135 %133 
                                       f32_4 %139 = OpLoad %137 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %19 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %19 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                       f32_4 %150 = OpLoad %136 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %136 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %19 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %136 
                                       f32_4 %165 = OpVectorShuffle %164 %163 0 1 4 5 
                                                      OpStore %136 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %19 %169 %68 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %174 = OpAccessChain %84 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %167 
                              Uniform f32_4* %176 = OpAccessChain %19 %169 %63 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %180 = OpAccessChain %84 %50 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %167 
                              Uniform f32_4* %182 = OpAccessChain %19 %169 %76 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %84 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %84 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %84 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                         f32 %196 = OpLoad %188 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_4 %198 = OpLoad %84 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %84 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %84 %202 
                                       f32_4 %205 = OpLoad %84 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                                      OpStore %204 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %207 %209 
                                       f32_4 %211 = OpLoad %49 
                                                      OpStore %210 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpVectorShuffle %212 %212 1 1 1 1 
                                       f32_4 %214 = OpFNegate %213 
                              Uniform f32_4* %215 = OpAccessChain %19 %63 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFAdd %214 %216 
                                                      OpStore %102 %217 
                                       f32_4 %219 = OpLoad %84 
                                       f32_4 %220 = OpVectorShuffle %219 %219 1 1 1 1 
                                       f32_4 %221 = OpLoad %102 
                                       f32_4 %222 = OpFMul %220 %221 
                                                      OpStore %218 %222 
                                       f32_4 %223 = OpLoad %102 
                                       f32_4 %224 = OpLoad %102 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %102 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpVectorShuffle %227 %227 0 0 0 0 
                                       f32_4 %229 = OpFNegate %228 
                              Uniform f32_4* %230 = OpAccessChain %19 %68 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpFAdd %229 %231 
                                                      OpStore %226 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 2 2 2 2 
                                       f32_4 %235 = OpFNegate %234 
                              Uniform f32_4* %236 = OpAccessChain %19 %76 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpFAdd %235 %237 
                                                      OpStore %9 %238 
                                       f32_4 %239 = OpLoad %226 
                                       f32_4 %240 = OpLoad %84 
                                       f32_4 %241 = OpVectorShuffle %240 %240 0 0 0 0 
                                       f32_4 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %218 
                                       f32_4 %244 = OpFAdd %242 %243 
                                                      OpStore %218 %244 
                                       f32_4 %245 = OpLoad %226 
                                       f32_4 %246 = OpLoad %226 
                                       f32_4 %247 = OpFMul %245 %246 
                                       f32_4 %248 = OpLoad %102 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %102 %249 
                                       f32_4 %250 = OpLoad %9 
                                       f32_4 %251 = OpLoad %9 
                                       f32_4 %252 = OpFMul %250 %251 
                                       f32_4 %253 = OpLoad %102 
                                       f32_4 %254 = OpFAdd %252 %253 
                                                      OpStore %102 %254 
                                       f32_4 %255 = OpLoad %9 
                                       f32_4 %256 = OpLoad %84 
                                       f32_4 %257 = OpVectorShuffle %256 %256 2 2 2 2 
                                       f32_4 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %218 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %102 
                                       f32_4 %264 = OpExtInst %1 40 %261 %263 
                                                      OpStore %84 %264 
                                       f32_4 %265 = OpLoad %84 
                                       f32_4 %266 = OpExtInst %1 32 %265 
                                                      OpStore %102 %266 
                                       f32_4 %267 = OpLoad %84 
                              Uniform f32_4* %268 = OpAccessChain %19 %86 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpFMul %267 %269 
                                       f32_4 %272 = OpFAdd %270 %271 
                                                      OpStore %84 %272 
                                       f32_4 %273 = OpLoad %84 
                                       f32_4 %274 = OpFDiv %271 %273 
                                                      OpStore %84 %274 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpLoad %102 
                                       f32_4 %277 = OpFMul %275 %276 
                                                      OpStore %9 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %281 = OpExtInst %1 40 %278 %280 
                                                      OpStore %9 %281 
                                       f32_4 %282 = OpLoad %84 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpFMul %282 %283 
                                                      OpStore %9 %284 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 1 1 1 
                              Uniform f32_4* %288 = OpAccessChain %19 %287 %63 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFMul %286 %290 
                                       f32_4 %292 = OpLoad %84 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %84 %293 
                              Uniform f32_4* %294 = OpAccessChain %19 %287 %68 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 0 0 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %84 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %84 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %84 %304 
                              Uniform f32_4* %305 = OpAccessChain %19 %287 %76 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 2 2 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %84 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %9 %315 
                              Uniform f32_4* %316 = OpAccessChain %19 %287 %86 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_4 %319 = OpLoad %9 
                                       f32_3 %320 = OpVectorShuffle %319 %319 3 3 3 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %9 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                                      OpStore %327 %329 
                                                      OpStore %330 %280 
                                 Output f32* %332 = OpAccessChain %126 %68 %50 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFNegate %333 
                                 Output f32* %335 = OpAccessChain %126 %68 %50 
                                                      OpStore %335 %334 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 395
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %273 %382 %384 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %81 ArrayStride 81 
                                                      OpMemberDecorate %82 0 RelaxedPrecision 
                                                      OpMemberDecorate %82 0 Offset 82 
                                                      OpMemberDecorate %82 1 Offset 82 
                                                      OpMemberDecorate %82 2 Offset 82 
                                                      OpMemberDecorate %82 3 Offset 82 
                                                      OpMemberDecorate %82 4 Offset 82 
                                                      OpMemberDecorate %82 5 RelaxedPrecision 
                                                      OpMemberDecorate %82 5 Offset 82 
                                                      OpMemberDecorate %82 6 Offset 82 
                                                      OpMemberDecorate %82 7 Offset 82 
                                                      OpMemberDecorate %82 8 Offset 82 
                                                      OpMemberDecorate %82 9 Offset 82 
                                                      OpMemberDecorate %82 10 Offset 82 
                                                      OpMemberDecorate %82 11 Offset 82 
                                                      OpMemberDecorate %82 12 RelaxedPrecision 
                                                      OpMemberDecorate %82 12 Offset 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %266 SpecId 266 
                                                      OpDecorate %273 Location 273 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %382 Location 382 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_3* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                               Private f32_3* %47 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                               Private f32_3* %79 = OpVariable Private 
                                          u32 %80 = OpConstant 4 
                                              %81 = OpTypeArray %7 %80 
                                              %82 = OpTypeStruct %7 %7 %81 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %83 = OpTypePointer Uniform %82 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %84 = OpVariable Uniform 
                                              %85 = OpTypeInt 32 1 
                                          i32 %86 = OpConstant 7 
                                              %87 = OpTypePointer Uniform %6 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_3* %116 = OpVariable Private 
                                         i32 %119 = OpConstant 8 
                              Private f32_4* %124 = OpVariable Private 
                                         i32 %125 = OpConstant 6 
                                             %126 = OpTypePointer Uniform %7 
                                Private f32* %151 = OpVariable Private 
                                         u32 %152 = OpConstant 3 
                                         i32 %155 = OpConstant 9 
                                         i32 %162 = OpConstant 11 
                                         u32 %169 = OpConstant 1 
                                         u32 %175 = OpConstant 2 
                                         f32 %189 = OpConstant 3.674022E-40 
                                             %192 = OpTypeBool 
                                             %193 = OpTypePointer Private %192 
                               Private bool* %194 = OpVariable Private 
                                             %200 = OpTypePointer Function %6 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %215 = OpConstant 10 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         i32 %231 = OpConstant 0 
                                         i32 %232 = OpConstant 1 
                                         i32 %234 = OpConstant -1 
                                         i32 %241 = OpConstant 12 
                                        bool %260 = OpConstantFalse 
                                        bool %266 = OpSpecConstantFalse 
                                             %272 = OpTypePointer Input %21 
                                Input f32_3* %273 = OpVariable Input 
                                         i32 %276 = OpConstant 2 
                                         i32 %298 = OpConstant 3 
                                             %303 = OpTypePointer Function %21 
                                         i32 %316 = OpConstant 4 
                                             %317 = OpTypePointer Uniform %21 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                Private f32* %338 = OpVariable Private 
                                             %348 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %349 = OpTypeSampledImage %348 
                                             %350 = OpTypePointer UniformConstant %349 
 UniformConstant read_only Texture3DSampled* %351 = OpVariable UniformConstant 
                                         i32 %372 = OpConstant 5 
                                             %381 = OpTypePointer Output %7 
                               Output f32_4* %382 = OpVariable Output 
                                Input f32_3* %384 = OpVariable Input 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %201 = OpVariable Function 
                             Function f32_3* %304 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                 Private f32* %51 = OpAccessChain %47 %38 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %38 
                                          f32 %53 = OpLoad %52 
                                          f32 %55 = OpFAdd %53 %54 
                                 Private f32* %56 = OpAccessChain %47 %38 
                                                      OpStore %56 %55 
                                 Private f32* %57 = OpAccessChain %47 %38 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpExtInst %1 30 %58 
                                 Private f32* %60 = OpAccessChain %47 %38 
                                                      OpStore %60 %59 
                                 Private f32* %61 = OpAccessChain %47 %38 
                                          f32 %62 = OpLoad %61 
                                          f32 %64 = OpFMul %62 %63 
                                 Private f32* %65 = OpAccessChain %47 %38 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %47 %38 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 29 %67 
                                 Private f32* %69 = OpAccessChain %47 %38 
                                                      OpStore %69 %68 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %74 = OpLoad %47 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %70 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %70 %78 
                                 Uniform f32* %88 = OpAccessChain %84 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %84 %86 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %84 %86 
                                          f32 %93 = OpLoad %92 
                                        f32_3 %94 = OpCompositeConstruct %89 %91 %93 
                                          f32 %95 = OpCompositeExtract %94 0 
                                          f32 %96 = OpCompositeExtract %94 1 
                                          f32 %97 = OpCompositeExtract %94 2 
                                        f32_3 %98 = OpCompositeConstruct %95 %96 %97 
                                        f32_4 %99 = OpLoad %70 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %101 %103 
                                                      OpStore %79 %104 
                                Private f32* %105 = OpAccessChain %30 %38 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFMul %106 %107 
                                Private f32* %109 = OpAccessChain %70 %38 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %70 %38 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %70 %38 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                Private f32* %115 = OpAccessChain %70 %38 
                                                      OpStore %115 %114 
                                Private f32* %117 = OpAccessChain %30 %38 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %84 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %116 %38 
                                                      OpStore %123 %122 
                              Uniform f32_4* %127 = OpAccessChain %84 %125 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %70 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 0 0 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %79 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %124 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 1 5 6 
                                                      OpStore %124 %137 
                                       f32_3 %138 = OpLoad %116 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 0 0 
                                       f32_4 %140 = OpLoad %124 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_3 %143 = OpLoad %79 
                                       f32_3 %144 = OpFAdd %142 %143 
                                       f32_4 %145 = OpLoad %124 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %124 %146 
                                       f32_3 %147 = OpLoad %79 
                                       f32_4 %148 = OpLoad %124 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpExtInst %1 40 %147 %149 
                                                      OpStore %79 %150 
                                Private f32* %153 = OpAccessChain %9 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %84 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 40 %154 %157 
                                                      OpStore %151 %158 
                                       f32_4 %159 = OpLoad %16 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFNegate %160 
                              Uniform f32_4* %163 = OpAccessChain %84 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %161 %165 
                                       f32_4 %167 = OpLoad %124 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %124 %168 
                                Private f32* %170 = OpAccessChain %124 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %84 %162 %152 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFDiv %171 %173 
                                Private f32* %176 = OpAccessChain %124 %175 
                                                      OpStore %176 %174 
                                       f32_4 %177 = OpLoad %124 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 2 
                                       f32_4 %179 = OpLoad %124 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 2 
                                         f32 %181 = OpDot %178 %180 
                                Private f32* %182 = OpAccessChain %124 %38 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %124 %38 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 31 %184 
                                Private f32* %186 = OpAccessChain %124 %38 
                                                      OpStore %186 %185 
                                Uniform f32* %187 = OpAccessChain %84 %162 %175 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpFMul %188 %189 
                                Private f32* %191 = OpAccessChain %116 %38 
                                                      OpStore %191 %190 
                                Private f32* %195 = OpAccessChain %116 %38 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %124 %38 
                                         f32 %198 = OpLoad %197 
                                        bool %199 = OpFOrdGreaterThanEqual %196 %198 
                                                      OpStore %194 %199 
                                        bool %202 = OpLoad %194 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %205 
                                             %203 = OpLabel 
                                                      OpStore %201 %44 
                                                      OpBranch %204 
                                             %205 = OpLabel 
                                                      OpStore %201 %206 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %207 = OpLoad %201 
                                Private f32* %208 = OpAccessChain %124 %38 
                                                      OpStore %208 %207 
                                         f32 %209 = OpLoad %151 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %124 %38 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %124 %38 
                                                      OpStore %214 %213 
                                Uniform f32* %216 = OpAccessChain %84 %215 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %124 %38 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %151 
                                         f32 %222 = OpFAdd %220 %221 
                                                      OpStore %151 %222 
                                         f32 %223 = OpLoad %151 
                                         f32 %225 = OpFAdd %223 %224 
                                Private f32* %226 = OpAccessChain %30 %38 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %30 %38 
                                         f32 %228 = OpLoad %227 
                                        bool %229 = OpFOrdLessThan %228 %206 
                                                      OpStore %194 %229 
                                        bool %230 = OpLoad %194 
                                         i32 %233 = OpSelect %230 %232 %231 
                                         i32 %235 = OpIMul %233 %234 
                                        bool %236 = OpINotEqual %235 %231 
                                                      OpSelectionMerge %238 None 
                                                      OpBranchConditional %236 %237 %238 
                                             %237 = OpLabel 
                                                      OpKill
                                             %238 = OpLabel 
                                         f32 %240 = OpLoad %151 
                                Uniform f32* %242 = OpAccessChain %84 %241 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %240 %244 
                                Private f32* %246 = OpAccessChain %30 %38 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %30 %38 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %206 
                                                      OpStore %194 %249 
                                        bool %250 = OpLoad %194 
                                         i32 %251 = OpSelect %250 %232 %231 
                                         i32 %252 = OpIMul %251 %234 
                                        bool %253 = OpINotEqual %252 %231 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %255 
                                             %254 = OpLabel 
                                                      OpKill
                                             %255 = OpLabel 
                                Uniform f32* %257 = OpAccessChain %84 %232 %38 
                                         f32 %258 = OpLoad %257 
                                        bool %259 = OpFOrdEqual %258 %44 
                                                      OpStore %194 %259 
                                                      OpSelectionMerge %262 None 
                                                      OpBranchConditional %260 %261 %262 
                                             %261 = OpLabel 
                                        bool %263 = OpLoad %194 
                                                      OpSelectionMerge %265 None 
                                                      OpBranchConditional %263 %264 %265 
                                             %264 = OpLabel 
                                                      OpBranch %265 
                                             %265 = OpLabel 
                                                      OpBranch %262 
                                             %262 = OpLabel 
                                                      OpSelectionMerge %268 None 
                                                      OpBranchConditional %266 %267 %357 
                                             %267 = OpLabel 
                                Uniform f32* %269 = OpAccessChain %84 %232 %169 
                                         f32 %270 = OpLoad %269 
                                        bool %271 = OpFOrdEqual %270 %44 
                                                      OpStore %194 %271 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %84 %276 %232 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                                      OpStore %116 %280 
                              Uniform f32_4* %281 = OpAccessChain %84 %276 %231 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpLoad %273 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %116 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %116 %288 
                              Uniform f32_4* %289 = OpAccessChain %84 %276 %276 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpLoad %273 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %116 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %116 %296 
                                       f32_3 %297 = OpLoad %116 
                              Uniform f32_4* %299 = OpAccessChain %84 %276 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %297 %301 
                                                      OpStore %116 %302 
                                        bool %305 = OpLoad %194 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %309 
                                             %306 = OpLabel 
                                       f32_3 %308 = OpLoad %116 
                                                      OpStore %304 %308 
                                                      OpBranch %307 
                                             %309 = OpLabel 
                                       f32_3 %310 = OpLoad %273 
                                                      OpStore %304 %310 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_3 %311 = OpLoad %304 
                                       f32_4 %312 = OpLoad %124 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %124 %313 
                                       f32_4 %314 = OpLoad %124 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                              Uniform f32_3* %318 = OpAccessChain %84 %316 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpFNegate %319 
                                       f32_3 %321 = OpFAdd %315 %320 
                                       f32_4 %322 = OpLoad %124 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %124 %323 
                                       f32_4 %324 = OpLoad %124 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %326 = OpAccessChain %84 %298 
                                       f32_3 %327 = OpLoad %326 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %124 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 4 5 6 
                                                      OpStore %124 %330 
                                Private f32* %331 = OpAccessChain %124 %169 
                                         f32 %332 = OpLoad %331 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                Private f32* %337 = OpAccessChain %116 %38 
                                                      OpStore %337 %336 
                                Uniform f32* %339 = OpAccessChain %84 %232 %175 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %340 %189 
                                         f32 %342 = OpFAdd %341 %335 
                                                      OpStore %338 %342 
                                Private f32* %343 = OpAccessChain %116 %38 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpLoad %338 
                                         f32 %346 = OpExtInst %1 40 %344 %345 
                                Private f32* %347 = OpAccessChain %124 %38 
                                                      OpStore %347 %346 
                  read_only Texture3DSampled %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %124 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 2 3 
                                       f32_4 %355 = OpImageSampleImplicitLod %352 %354 
                                                      OpStore %124 %355 
                                       f32_4 %356 = OpLoad %124 
                                                      OpStore %70 %356 
                                                      OpBranch %268 
                                             %357 = OpLabel 
                                Private f32* %358 = OpAccessChain %70 %38 
                                                      OpStore %358 %44 
                                Private f32* %359 = OpAccessChain %70 %169 
                                                      OpStore %359 %44 
                                Private f32* %360 = OpAccessChain %70 %175 
                                                      OpStore %360 %44 
                                Private f32* %361 = OpAccessChain %70 %152 
                                                      OpStore %361 %44 
                                                      OpBranch %268 
                                             %268 = OpLabel 
                                       f32_4 %362 = OpLoad %70 
                              Uniform f32_4* %363 = OpAccessChain %84 %231 
                                       f32_4 %364 = OpLoad %363 
                                         f32 %365 = OpDot %362 %364 
                                Private f32* %366 = OpAccessChain %30 %38 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %30 %38 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 43 %368 %206 %44 
                                Private f32* %370 = OpAccessChain %30 %38 
                                                      OpStore %370 %369 
                                       f32_3 %371 = OpLoad %79 
                              Uniform f32_4* %373 = OpAccessChain %84 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFMul %371 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %30 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpLoad %47 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %30 %380 
                                       f32_3 %383 = OpLoad %79 
                                       f32_3 %385 = OpLoad %384 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_3 %387 = OpLoad %30 
                                       f32_3 %388 = OpFAdd %386 %387 
                                       f32_4 %389 = OpLoad %382 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %382 %390 
                                         f32 %391 = OpLoad %151 
                                 Output f32* %393 = OpAccessChain %382 %152 
                                                      OpStore %393 %391 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat18;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat1 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat1.w + -0.100000001;
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = u_xlat1.w + (-_Cutoff);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 439
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %126 %136 %137 %152 %167 %204 %207 %210 %429 %432 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %124 0 BuiltIn 124 
                                                      OpMemberDecorate %124 1 BuiltIn 124 
                                                      OpMemberDecorate %124 2 BuiltIn 124 
                                                      OpDecorate %124 Block 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %204 Location 204 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %429 Location 429 
                                                      OpDecorate %432 Location 432 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 16 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 15 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 12 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 14 
                                             %123 = OpTypeArray %6 %50 
                                             %124 = OpTypeStruct %7 %6 %123 
                                             %125 = OpTypePointer Output %124 
        Output struct {f32_4; f32; f32[1];}* %126 = OpVariable Output 
                                             %134 = OpTypePointer Output %7 
                               Output f32_4* %136 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                             %138 = OpTypeVector %6 2 
                                         i32 %141 = OpConstant 17 
                                Input f32_4* %152 = OpVariable Input 
                                         i32 %155 = OpConstant 18 
                                             %166 = OpTypePointer Input %90 
                                Input f32_3* %167 = OpVariable Input 
                                         i32 %169 = OpConstant 13 
                                         u32 %186 = OpConstant 2 
                                Private f32* %188 = OpVariable Private 
                                             %203 = OpTypePointer Output %90 
                               Output f32_3* %204 = OpVariable Output 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                             %212 = OpTypePointer Private %90 
                              Private f32_3* %213 = OpVariable Private 
                              Private f32_4* %230 = OpVariable Private 
                              Private f32_3* %236 = OpVariable Private 
                                         i32 %237 = OpConstant 8 
                                         i32 %243 = OpConstant 9 
                                         i32 %249 = OpConstant 10 
                                         i32 %255 = OpConstant 11 
                                         u32 %264 = OpConstant 3 
                                         i32 %266 = OpConstant 5 
                                         i32 %272 = OpConstant 6 
                                         i32 %278 = OpConstant 7 
                                         f32 %288 = OpConstant 3.674022E-40 
                                       f32_3 %289 = OpConstantComposite %288 %288 %288 
                              Private f32_3* %291 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_3 %296 = OpConstantComposite %295 %295 %295 
                                         f32 %301 = OpConstant 3.674022E-40 
                                       f32_3 %302 = OpConstantComposite %301 %301 %301 
                                         f32 %304 = OpConstant 3.674022E-40 
                                       f32_3 %305 = OpConstantComposite %304 %304 %304 
                              Private f32_4* %315 = OpVariable Private 
                              Private f32_4* %323 = OpVariable Private 
                                         f32 %359 = OpConstant 3.674022E-40 
                                       f32_4 %360 = OpConstantComposite %359 %359 %359 %359 
                                       f32_4 %368 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %376 = OpConstantComposite %288 %288 %288 %288 
                                         i32 %383 = OpConstant 4 
                               Output f32_3* %429 = OpVariable Output 
                               Output f32_4* %432 = OpVariable Output 
                                             %433 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %127 = OpAccessChain %19 %105 %86 
                                       f32_4 %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %84 
                                       f32_4 %130 = OpVectorShuffle %129 %129 3 3 3 3 
                                       f32_4 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %102 
                                       f32_4 %133 = OpFAdd %131 %132 
                               Output f32_4* %135 = OpAccessChain %126 %68 
                                                      OpStore %135 %133 
                                       f32_4 %139 = OpLoad %137 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %19 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %19 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                       f32_4 %150 = OpLoad %136 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 3 
                                                      OpStore %136 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %19 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %136 
                                       f32_4 %165 = OpVectorShuffle %164 %163 0 1 4 5 
                                                      OpStore %136 %165 
                                       f32_3 %168 = OpLoad %167 
                              Uniform f32_4* %170 = OpAccessChain %19 %169 %68 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %168 %172 
                                Private f32* %174 = OpAccessChain %84 %27 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %167 
                              Uniform f32_4* %176 = OpAccessChain %19 %169 %63 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %180 = OpAccessChain %84 %50 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %167 
                              Uniform f32_4* %182 = OpAccessChain %19 %169 %76 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %187 = OpAccessChain %84 %186 
                                                      OpStore %187 %185 
                                       f32_4 %189 = OpLoad %84 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %84 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %188 %193 
                                         f32 %194 = OpLoad %188 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %188 %195 
                                         f32 %196 = OpLoad %188 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_4 %198 = OpLoad %84 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %84 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %84 %202 
                                       f32_4 %205 = OpLoad %84 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                                      OpStore %204 %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %207 %209 
                                       f32_4 %211 = OpLoad %49 
                                                      OpStore %210 %211 
                                Private f32* %214 = OpAccessChain %84 %50 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %84 %50 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %215 %217 
                                Private f32* %219 = OpAccessChain %213 %27 
                                                      OpStore %219 %218 
                                Private f32* %220 = OpAccessChain %84 %27 
                                         f32 %221 = OpLoad %220 
                                Private f32* %222 = OpAccessChain %84 %27 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFMul %221 %223 
                                Private f32* %225 = OpAccessChain %213 %27 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %224 %227 
                                Private f32* %229 = OpAccessChain %213 %27 
                                                      OpStore %229 %228 
                                       f32_4 %231 = OpLoad %84 
                                       f32_4 %232 = OpVectorShuffle %231 %231 1 2 2 0 
                                       f32_4 %233 = OpLoad %84 
                                       f32_4 %234 = OpVectorShuffle %233 %233 0 1 2 2 
                                       f32_4 %235 = OpFMul %232 %234 
                                                      OpStore %230 %235 
                              Uniform f32_4* %238 = OpAccessChain %19 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %230 
                                         f32 %241 = OpDot %239 %240 
                                Private f32* %242 = OpAccessChain %236 %27 
                                                      OpStore %242 %241 
                              Uniform f32_4* %244 = OpAccessChain %19 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_4 %246 = OpLoad %230 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %236 %50 
                                                      OpStore %248 %247 
                              Uniform f32_4* %250 = OpAccessChain %19 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %230 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %236 %186 
                                                      OpStore %254 %253 
                              Uniform f32_4* %256 = OpAccessChain %19 %255 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %213 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %236 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %213 %263 
                                Private f32* %265 = OpAccessChain %84 %264 
                                                      OpStore %265 %46 
                              Uniform f32_4* %267 = OpAccessChain %19 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %84 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %236 %27 
                                                      OpStore %271 %270 
                              Uniform f32_4* %273 = OpAccessChain %19 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_4 %275 = OpLoad %84 
                                         f32 %276 = OpDot %274 %275 
                                Private f32* %277 = OpAccessChain %236 %50 
                                                      OpStore %277 %276 
                              Uniform f32_4* %279 = OpAccessChain %19 %278 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %84 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %236 %186 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %213 
                                       f32_3 %285 = OpLoad %236 
                                       f32_3 %286 = OpFAdd %284 %285 
                                                      OpStore %213 %286 
                                       f32_3 %287 = OpLoad %213 
                                       f32_3 %290 = OpExtInst %1 40 %287 %289 
                                                      OpStore %213 %290 
                                       f32_3 %292 = OpLoad %213 
                                       f32_3 %293 = OpExtInst %1 30 %292 
                                                      OpStore %291 %293 
                                       f32_3 %294 = OpLoad %291 
                                       f32_3 %297 = OpFMul %294 %296 
                                                      OpStore %291 %297 
                                       f32_3 %298 = OpLoad %291 
                                       f32_3 %299 = OpExtInst %1 29 %298 
                                                      OpStore %291 %299 
                                       f32_3 %300 = OpLoad %291 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_3 %306 = OpFAdd %303 %305 
                                                      OpStore %291 %306 
                                       f32_3 %307 = OpLoad %291 
                                       f32_3 %308 = OpExtInst %1 40 %307 %289 
                                                      OpStore %291 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpVectorShuffle %309 %309 1 1 1 1 
                                       f32_4 %311 = OpFNegate %310 
                              Uniform f32_4* %312 = OpAccessChain %19 %63 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpFAdd %311 %313 
                                                      OpStore %102 %314 
                                       f32_4 %316 = OpLoad %84 
                                       f32_4 %317 = OpVectorShuffle %316 %316 1 1 1 1 
                                       f32_4 %318 = OpLoad %102 
                                       f32_4 %319 = OpFMul %317 %318 
                                                      OpStore %315 %319 
                                       f32_4 %320 = OpLoad %102 
                                       f32_4 %321 = OpLoad %102 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %102 %322 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %324 0 0 0 0 
                                       f32_4 %326 = OpFNegate %325 
                              Uniform f32_4* %327 = OpAccessChain %19 %68 
                                       f32_4 %328 = OpLoad %327 
                                       f32_4 %329 = OpFAdd %326 %328 
                                                      OpStore %323 %329 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpVectorShuffle %330 %330 2 2 2 2 
                                       f32_4 %332 = OpFNegate %331 
                              Uniform f32_4* %333 = OpAccessChain %19 %76 
                                       f32_4 %334 = OpLoad %333 
                                       f32_4 %335 = OpFAdd %332 %334 
                                                      OpStore %9 %335 
                                       f32_4 %336 = OpLoad %323 
                                       f32_4 %337 = OpLoad %84 
                                       f32_4 %338 = OpVectorShuffle %337 %337 0 0 0 0 
                                       f32_4 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %315 
                                       f32_4 %341 = OpFAdd %339 %340 
                                                      OpStore %315 %341 
                                       f32_4 %342 = OpLoad %323 
                                       f32_4 %343 = OpLoad %323 
                                       f32_4 %344 = OpFMul %342 %343 
                                       f32_4 %345 = OpLoad %102 
                                       f32_4 %346 = OpFAdd %344 %345 
                                                      OpStore %102 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpFMul %347 %348 
                                       f32_4 %350 = OpLoad %102 
                                       f32_4 %351 = OpFAdd %349 %350 
                                                      OpStore %102 %351 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpLoad %84 
                                       f32_4 %354 = OpVectorShuffle %353 %353 2 2 2 2 
                                       f32_4 %355 = OpFMul %352 %354 
                                       f32_4 %356 = OpLoad %315 
                                       f32_4 %357 = OpFAdd %355 %356 
                                                      OpStore %9 %357 
                                       f32_4 %358 = OpLoad %102 
                                       f32_4 %361 = OpExtInst %1 40 %358 %360 
                                                      OpStore %84 %361 
                                       f32_4 %362 = OpLoad %84 
                                       f32_4 %363 = OpExtInst %1 32 %362 
                                                      OpStore %102 %363 
                                       f32_4 %364 = OpLoad %84 
                              Uniform f32_4* %365 = OpAccessChain %19 %86 
                                       f32_4 %366 = OpLoad %365 
                                       f32_4 %367 = OpFMul %364 %366 
                                       f32_4 %369 = OpFAdd %367 %368 
                                                      OpStore %84 %369 
                                       f32_4 %370 = OpLoad %84 
                                       f32_4 %371 = OpFDiv %368 %370 
                                                      OpStore %84 %371 
                                       f32_4 %372 = OpLoad %9 
                                       f32_4 %373 = OpLoad %102 
                                       f32_4 %374 = OpFMul %372 %373 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %377 = OpExtInst %1 40 %375 %376 
                                                      OpStore %9 %377 
                                       f32_4 %378 = OpLoad %84 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpFMul %378 %379 
                                                      OpStore %9 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 1 1 1 
                              Uniform f32_4* %384 = OpAccessChain %19 %383 %63 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFMul %382 %386 
                                       f32_4 %388 = OpLoad %84 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %84 %389 
                              Uniform f32_4* %390 = OpAccessChain %19 %383 %68 
                                       f32_4 %391 = OpLoad %390 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_4 %393 = OpLoad %9 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 0 0 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %84 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %84 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %84 %400 
                              Uniform f32_4* %401 = OpAccessChain %19 %383 %76 
                                       f32_4 %402 = OpLoad %401 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_4 %404 = OpLoad %9 
                                       f32_3 %405 = OpVectorShuffle %404 %404 2 2 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %84 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFAdd %406 %408 
                                       f32_4 %410 = OpLoad %9 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %9 %411 
                              Uniform f32_4* %412 = OpAccessChain %19 %383 %86 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %9 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %9 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %9 %422 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpLoad %291 
                                       f32_3 %426 = OpFAdd %424 %425 
                                       f32_4 %427 = OpLoad %9 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                                      OpStore %9 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                                      OpStore %429 %431 
                                                      OpStore %432 %376 
                                 Output f32* %434 = OpAccessChain %126 %68 %50 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFNegate %435 
                                 Output f32* %437 = OpAccessChain %126 %68 %50 
                                                      OpStore %437 %436 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 395
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %273 %382 %384 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %81 ArrayStride 81 
                                                      OpMemberDecorate %82 0 RelaxedPrecision 
                                                      OpMemberDecorate %82 0 Offset 82 
                                                      OpMemberDecorate %82 1 Offset 82 
                                                      OpMemberDecorate %82 2 Offset 82 
                                                      OpMemberDecorate %82 3 Offset 82 
                                                      OpMemberDecorate %82 4 Offset 82 
                                                      OpMemberDecorate %82 5 RelaxedPrecision 
                                                      OpMemberDecorate %82 5 Offset 82 
                                                      OpMemberDecorate %82 6 Offset 82 
                                                      OpMemberDecorate %82 7 Offset 82 
                                                      OpMemberDecorate %82 8 Offset 82 
                                                      OpMemberDecorate %82 9 Offset 82 
                                                      OpMemberDecorate %82 10 Offset 82 
                                                      OpMemberDecorate %82 11 Offset 82 
                                                      OpMemberDecorate %82 12 RelaxedPrecision 
                                                      OpMemberDecorate %82 12 Offset 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate %84 DescriptorSet 84 
                                                      OpDecorate %84 Binding 84 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %266 SpecId 266 
                                                      OpDecorate %273 Location 273 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %382 Location 382 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_3* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                               Private f32_3* %47 = OpVariable Private 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                               Private f32_4* %70 = OpVariable Private 
                               Private f32_3* %79 = OpVariable Private 
                                          u32 %80 = OpConstant 4 
                                              %81 = OpTypeArray %7 %80 
                                              %82 = OpTypeStruct %7 %7 %81 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %83 = OpTypePointer Uniform %82 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %84 = OpVariable Uniform 
                                              %85 = OpTypeInt 32 1 
                                          i32 %86 = OpConstant 7 
                                              %87 = OpTypePointer Uniform %6 
                                         f32 %107 = OpConstant 3.674022E-40 
                              Private f32_3* %116 = OpVariable Private 
                                         i32 %119 = OpConstant 8 
                              Private f32_4* %124 = OpVariable Private 
                                         i32 %125 = OpConstant 6 
                                             %126 = OpTypePointer Uniform %7 
                                Private f32* %151 = OpVariable Private 
                                         u32 %152 = OpConstant 3 
                                         i32 %155 = OpConstant 9 
                                         i32 %162 = OpConstant 11 
                                         u32 %169 = OpConstant 1 
                                         u32 %175 = OpConstant 2 
                                         f32 %189 = OpConstant 3.674022E-40 
                                             %192 = OpTypeBool 
                                             %193 = OpTypePointer Private %192 
                               Private bool* %194 = OpVariable Private 
                                             %200 = OpTypePointer Function %6 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %215 = OpConstant 10 
                                         f32 %224 = OpConstant 3.674022E-40 
                                         i32 %231 = OpConstant 0 
                                         i32 %232 = OpConstant 1 
                                         i32 %234 = OpConstant -1 
                                         i32 %241 = OpConstant 12 
                                        bool %260 = OpConstantFalse 
                                        bool %266 = OpSpecConstantFalse 
                                             %272 = OpTypePointer Input %21 
                                Input f32_3* %273 = OpVariable Input 
                                         i32 %276 = OpConstant 2 
                                         i32 %298 = OpConstant 3 
                                             %303 = OpTypePointer Function %21 
                                         i32 %316 = OpConstant 4 
                                             %317 = OpTypePointer Uniform %21 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                Private f32* %338 = OpVariable Private 
                                             %348 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %349 = OpTypeSampledImage %348 
                                             %350 = OpTypePointer UniformConstant %349 
 UniformConstant read_only Texture3DSampled* %351 = OpVariable UniformConstant 
                                         i32 %372 = OpConstant 5 
                                             %381 = OpTypePointer Output %7 
                               Output f32_4* %382 = OpVariable Output 
                                Input f32_3* %384 = OpVariable Input 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %201 = OpVariable Function 
                             Function f32_3* %304 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                 Private f32* %51 = OpAccessChain %47 %38 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %38 
                                          f32 %53 = OpLoad %52 
                                          f32 %55 = OpFAdd %53 %54 
                                 Private f32* %56 = OpAccessChain %47 %38 
                                                      OpStore %56 %55 
                                 Private f32* %57 = OpAccessChain %47 %38 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpExtInst %1 30 %58 
                                 Private f32* %60 = OpAccessChain %47 %38 
                                                      OpStore %60 %59 
                                 Private f32* %61 = OpAccessChain %47 %38 
                                          f32 %62 = OpLoad %61 
                                          f32 %64 = OpFMul %62 %63 
                                 Private f32* %65 = OpAccessChain %47 %38 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %47 %38 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpExtInst %1 29 %67 
                                 Private f32* %69 = OpAccessChain %47 %38 
                                                      OpStore %69 %68 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFNegate %72 
                                        f32_3 %74 = OpLoad %47 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFAdd %73 %75 
                                        f32_4 %77 = OpLoad %70 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %70 %78 
                                 Uniform f32* %88 = OpAccessChain %84 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %84 %86 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %84 %86 
                                          f32 %93 = OpLoad %92 
                                        f32_3 %94 = OpCompositeConstruct %89 %91 %93 
                                          f32 %95 = OpCompositeExtract %94 0 
                                          f32 %96 = OpCompositeExtract %94 1 
                                          f32 %97 = OpCompositeExtract %94 2 
                                        f32_3 %98 = OpCompositeConstruct %95 %96 %97 
                                        f32_4 %99 = OpLoad %70 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %101 %103 
                                                      OpStore %79 %104 
                                Private f32* %105 = OpAccessChain %30 %38 
                                         f32 %106 = OpLoad %105 
                                         f32 %108 = OpFMul %106 %107 
                                Private f32* %109 = OpAccessChain %70 %38 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %70 %38 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %70 %38 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                Private f32* %115 = OpAccessChain %70 %38 
                                                      OpStore %115 %114 
                                Private f32* %117 = OpAccessChain %30 %38 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %84 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %116 %38 
                                                      OpStore %123 %122 
                              Uniform f32_4* %127 = OpAccessChain %84 %125 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %70 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 0 0 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %79 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %124 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 1 5 6 
                                                      OpStore %124 %137 
                                       f32_3 %138 = OpLoad %116 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 0 0 
                                       f32_4 %140 = OpLoad %124 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_3 %143 = OpLoad %79 
                                       f32_3 %144 = OpFAdd %142 %143 
                                       f32_4 %145 = OpLoad %124 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %124 %146 
                                       f32_3 %147 = OpLoad %79 
                                       f32_4 %148 = OpLoad %124 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpExtInst %1 40 %147 %149 
                                                      OpStore %79 %150 
                                Private f32* %153 = OpAccessChain %9 %152 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %156 = OpAccessChain %84 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 40 %154 %157 
                                                      OpStore %151 %158 
                                       f32_4 %159 = OpLoad %16 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFNegate %160 
                              Uniform f32_4* %163 = OpAccessChain %84 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFAdd %161 %165 
                                       f32_4 %167 = OpLoad %124 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 2 3 
                                                      OpStore %124 %168 
                                Private f32* %170 = OpAccessChain %124 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %84 %162 %152 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFDiv %171 %173 
                                Private f32* %176 = OpAccessChain %124 %175 
                                                      OpStore %176 %174 
                                       f32_4 %177 = OpLoad %124 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 2 
                                       f32_4 %179 = OpLoad %124 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 2 
                                         f32 %181 = OpDot %178 %180 
                                Private f32* %182 = OpAccessChain %124 %38 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %124 %38 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 31 %184 
                                Private f32* %186 = OpAccessChain %124 %38 
                                                      OpStore %186 %185 
                                Uniform f32* %187 = OpAccessChain %84 %162 %175 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpFMul %188 %189 
                                Private f32* %191 = OpAccessChain %116 %38 
                                                      OpStore %191 %190 
                                Private f32* %195 = OpAccessChain %116 %38 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %124 %38 
                                         f32 %198 = OpLoad %197 
                                        bool %199 = OpFOrdGreaterThanEqual %196 %198 
                                                      OpStore %194 %199 
                                        bool %202 = OpLoad %194 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %205 
                                             %203 = OpLabel 
                                                      OpStore %201 %44 
                                                      OpBranch %204 
                                             %205 = OpLabel 
                                                      OpStore %201 %206 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %207 = OpLoad %201 
                                Private f32* %208 = OpAccessChain %124 %38 
                                                      OpStore %208 %207 
                                         f32 %209 = OpLoad %151 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %124 %38 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFAdd %210 %212 
                                Private f32* %214 = OpAccessChain %124 %38 
                                                      OpStore %214 %213 
                                Uniform f32* %216 = OpAccessChain %84 %215 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %124 %38 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %151 
                                         f32 %222 = OpFAdd %220 %221 
                                                      OpStore %151 %222 
                                         f32 %223 = OpLoad %151 
                                         f32 %225 = OpFAdd %223 %224 
                                Private f32* %226 = OpAccessChain %30 %38 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %30 %38 
                                         f32 %228 = OpLoad %227 
                                        bool %229 = OpFOrdLessThan %228 %206 
                                                      OpStore %194 %229 
                                        bool %230 = OpLoad %194 
                                         i32 %233 = OpSelect %230 %232 %231 
                                         i32 %235 = OpIMul %233 %234 
                                        bool %236 = OpINotEqual %235 %231 
                                                      OpSelectionMerge %238 None 
                                                      OpBranchConditional %236 %237 %238 
                                             %237 = OpLabel 
                                                      OpKill
                                             %238 = OpLabel 
                                         f32 %240 = OpLoad %151 
                                Uniform f32* %242 = OpAccessChain %84 %241 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %240 %244 
                                Private f32* %246 = OpAccessChain %30 %38 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %30 %38 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %248 %206 
                                                      OpStore %194 %249 
                                        bool %250 = OpLoad %194 
                                         i32 %251 = OpSelect %250 %232 %231 
                                         i32 %252 = OpIMul %251 %234 
                                        bool %253 = OpINotEqual %252 %231 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %255 
                                             %254 = OpLabel 
                                                      OpKill
                                             %255 = OpLabel 
                                Uniform f32* %257 = OpAccessChain %84 %232 %38 
                                         f32 %258 = OpLoad %257 
                                        bool %259 = OpFOrdEqual %258 %44 
                                                      OpStore %194 %259 
                                                      OpSelectionMerge %262 None 
                                                      OpBranchConditional %260 %261 %262 
                                             %261 = OpLabel 
                                        bool %263 = OpLoad %194 
                                                      OpSelectionMerge %265 None 
                                                      OpBranchConditional %263 %264 %265 
                                             %264 = OpLabel 
                                                      OpBranch %265 
                                             %265 = OpLabel 
                                                      OpBranch %262 
                                             %262 = OpLabel 
                                                      OpSelectionMerge %268 None 
                                                      OpBranchConditional %266 %267 %357 
                                             %267 = OpLabel 
                                Uniform f32* %269 = OpAccessChain %84 %232 %169 
                                         f32 %270 = OpLoad %269 
                                        bool %271 = OpFOrdEqual %270 %44 
                                                      OpStore %194 %271 
                                       f32_3 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %84 %276 %232 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                                      OpStore %116 %280 
                              Uniform f32_4* %281 = OpAccessChain %84 %276 %231 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpLoad %273 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_3 %287 = OpLoad %116 
                                       f32_3 %288 = OpFAdd %286 %287 
                                                      OpStore %116 %288 
                              Uniform f32_4* %289 = OpAccessChain %84 %276 %276 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpLoad %273 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %116 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %116 %296 
                                       f32_3 %297 = OpLoad %116 
                              Uniform f32_4* %299 = OpAccessChain %84 %276 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %297 %301 
                                                      OpStore %116 %302 
                                        bool %305 = OpLoad %194 
                                                      OpSelectionMerge %307 None 
                                                      OpBranchConditional %305 %306 %309 
                                             %306 = OpLabel 
                                       f32_3 %308 = OpLoad %116 
                                                      OpStore %304 %308 
                                                      OpBranch %307 
                                             %309 = OpLabel 
                                       f32_3 %310 = OpLoad %273 
                                                      OpStore %304 %310 
                                                      OpBranch %307 
                                             %307 = OpLabel 
                                       f32_3 %311 = OpLoad %304 
                                       f32_4 %312 = OpLoad %124 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                      OpStore %124 %313 
                                       f32_4 %314 = OpLoad %124 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                              Uniform f32_3* %318 = OpAccessChain %84 %316 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpFNegate %319 
                                       f32_3 %321 = OpFAdd %315 %320 
                                       f32_4 %322 = OpLoad %124 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %124 %323 
                                       f32_4 %324 = OpLoad %124 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %326 = OpAccessChain %84 %298 
                                       f32_3 %327 = OpLoad %326 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %124 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 4 5 6 
                                                      OpStore %124 %330 
                                Private f32* %331 = OpAccessChain %124 %169 
                                         f32 %332 = OpLoad %331 
                                         f32 %334 = OpFMul %332 %333 
                                         f32 %336 = OpFAdd %334 %335 
                                Private f32* %337 = OpAccessChain %116 %38 
                                                      OpStore %337 %336 
                                Uniform f32* %339 = OpAccessChain %84 %232 %175 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %340 %189 
                                         f32 %342 = OpFAdd %341 %335 
                                                      OpStore %338 %342 
                                Private f32* %343 = OpAccessChain %116 %38 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpLoad %338 
                                         f32 %346 = OpExtInst %1 40 %344 %345 
                                Private f32* %347 = OpAccessChain %124 %38 
                                                      OpStore %347 %346 
                  read_only Texture3DSampled %352 = OpLoad %351 
                                       f32_4 %353 = OpLoad %124 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 2 3 
                                       f32_4 %355 = OpImageSampleImplicitLod %352 %354 
                                                      OpStore %124 %355 
                                       f32_4 %356 = OpLoad %124 
                                                      OpStore %70 %356 
                                                      OpBranch %268 
                                             %357 = OpLabel 
                                Private f32* %358 = OpAccessChain %70 %38 
                                                      OpStore %358 %44 
                                Private f32* %359 = OpAccessChain %70 %169 
                                                      OpStore %359 %44 
                                Private f32* %360 = OpAccessChain %70 %175 
                                                      OpStore %360 %44 
                                Private f32* %361 = OpAccessChain %70 %152 
                                                      OpStore %361 %44 
                                                      OpBranch %268 
                                             %268 = OpLabel 
                                       f32_4 %362 = OpLoad %70 
                              Uniform f32_4* %363 = OpAccessChain %84 %231 
                                       f32_4 %364 = OpLoad %363 
                                         f32 %365 = OpDot %362 %364 
                                Private f32* %366 = OpAccessChain %30 %38 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %30 %38 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 43 %368 %206 %44 
                                Private f32* %370 = OpAccessChain %30 %38 
                                                      OpStore %370 %369 
                                       f32_3 %371 = OpLoad %79 
                              Uniform f32_4* %373 = OpAccessChain %84 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFMul %371 %375 
                                                      OpStore %47 %376 
                                       f32_3 %377 = OpLoad %30 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpLoad %47 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %30 %380 
                                       f32_3 %383 = OpLoad %79 
                                       f32_3 %385 = OpLoad %384 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_3 %387 = OpLoad %30 
                                       f32_3 %388 = OpFAdd %386 %387 
                                       f32_4 %389 = OpLoad %382 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %382 %390 
                                         f32 %391 = OpLoad %151 
                                 Output f32* %393 = OpAccessChain %382 %152 
                                                      OpStore %393 %391 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat18;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat6 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat6 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat1.w + -0.100000001;
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = u_xlat1.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat12) + u_xlat2.x;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat12;
    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat12 = u_xlat12 + u_xlat10_3.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12, u_xlat6.x);
    u_xlat12 = (u_xlatb2) ? u_xlat6.x : u_xlat12;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 369
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %133 %137 %138 %153 %168 %205 %208 %211 %330 %350 %362 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %131 0 BuiltIn 131 
                                                      OpMemberDecorate %131 1 BuiltIn 131 
                                                      OpMemberDecorate %131 2 BuiltIn 131 
                                                      OpDecorate %131 Block 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %330 Location 330 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %362 Location 362 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 10 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 9 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 6 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 8 
                                             %130 = OpTypeArray %6 %50 
                                             %131 = OpTypeStruct %7 %6 %130 
                                             %132 = OpTypePointer Output %131 
        Output struct {f32_4; f32; f32[1];}* %133 = OpVariable Output 
                                             %135 = OpTypePointer Output %7 
                               Output f32_4* %137 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %139 = OpTypeVector %6 2 
                                         i32 %142 = OpConstant 11 
                                Input f32_4* %153 = OpVariable Input 
                                         i32 %156 = OpConstant 12 
                                             %167 = OpTypePointer Input %90 
                                Input f32_3* %168 = OpVariable Input 
                                         i32 %170 = OpConstant 7 
                                         u32 %187 = OpConstant 2 
                                Private f32* %189 = OpVariable Private 
                                             %204 = OpTypePointer Output %90 
                               Output f32_3* %205 = OpVariable Output 
                               Output f32_3* %208 = OpVariable Output 
                               Output f32_4* %211 = OpVariable Output 
                              Private f32_4* %213 = OpVariable Private 
                              Private f32_4* %220 = OpVariable Private 
                              Private f32_4* %228 = OpVariable Private 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_4 %265 = OpConstantComposite %264 %264 %264 %264 
                                         i32 %270 = OpConstant 4 
                                       f32_4 %274 = OpConstantComposite %46 %46 %46 %46 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_4 %283 = OpConstantComposite %282 %282 %282 %282 
                                         i32 %290 = OpConstant 5 
                               Output f32_3* %330 = OpVariable Output 
                                         u32 %342 = OpConstant 3 
                                       f32_2 %346 = OpConstantComposite %39 %39 
                               Output f32_4* %350 = OpVariable Output 
                               Output f32_4* %362 = OpVariable Output 
                                             %363 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %123 = OpAccessChain %19 %105 %86 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %84 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %102 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %84 %129 
                                       f32_4 %134 = OpLoad %84 
                               Output f32_4* %136 = OpAccessChain %133 %68 
                                                      OpStore %136 %134 
                                       f32_4 %140 = OpLoad %138 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                              Uniform f32_4* %143 = OpAccessChain %19 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %141 %145 
                              Uniform f32_4* %147 = OpAccessChain %19 %142 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %137 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %137 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              Uniform f32_4* %157 = OpAccessChain %19 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %19 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                       f32_4 %165 = OpLoad %137 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %137 %166 
                                       f32_3 %169 = OpLoad %168 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 %68 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %169 %173 
                                Private f32* %175 = OpAccessChain %102 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %168 
                              Uniform f32_4* %177 = OpAccessChain %19 %170 %63 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %181 = OpAccessChain %102 %50 
                                                      OpStore %181 %180 
                                       f32_3 %182 = OpLoad %168 
                              Uniform f32_4* %183 = OpAccessChain %19 %170 %76 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %102 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %102 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %102 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                         f32 %197 = OpLoad %189 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_4 %199 = OpLoad %102 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %102 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %102 %203 
                                       f32_4 %206 = OpLoad %102 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                                      OpStore %208 %210 
                                       f32_4 %212 = OpLoad %49 
                                                      OpStore %211 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpVectorShuffle %214 %214 1 1 1 1 
                                       f32_4 %216 = OpFNegate %215 
                              Uniform f32_4* %217 = OpAccessChain %19 %76 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFAdd %216 %218 
                                                      OpStore %213 %219 
                                       f32_4 %221 = OpLoad %102 
                                       f32_4 %222 = OpVectorShuffle %221 %221 1 1 1 1 
                                       f32_4 %223 = OpLoad %213 
                                       f32_4 %224 = OpFMul %222 %223 
                                                      OpStore %220 %224 
                                       f32_4 %225 = OpLoad %213 
                                       f32_4 %226 = OpLoad %213 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %213 %227 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpVectorShuffle %229 %229 0 0 0 0 
                                       f32_4 %231 = OpFNegate %230 
                              Uniform f32_4* %232 = OpAccessChain %19 %63 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpFAdd %231 %233 
                                                      OpStore %228 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 2 2 2 2 
                                       f32_4 %237 = OpFNegate %236 
                              Uniform f32_4* %238 = OpAccessChain %19 %86 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpFAdd %237 %239 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %228 
                                       f32_4 %242 = OpLoad %102 
                                       f32_4 %243 = OpVectorShuffle %242 %242 0 0 0 0 
                                       f32_4 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %220 
                                       f32_4 %246 = OpFAdd %244 %245 
                                                      OpStore %220 %246 
                                       f32_4 %247 = OpLoad %228 
                                       f32_4 %248 = OpLoad %228 
                                       f32_4 %249 = OpFMul %247 %248 
                                       f32_4 %250 = OpLoad %213 
                                       f32_4 %251 = OpFAdd %249 %250 
                                                      OpStore %213 %251 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpFMul %252 %253 
                                       f32_4 %255 = OpLoad %213 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %213 %256 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpLoad %102 
                                       f32_4 %259 = OpVectorShuffle %258 %258 2 2 2 2 
                                       f32_4 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %220 
                                       f32_4 %262 = OpFAdd %260 %261 
                                                      OpStore %9 %262 
                                       f32_4 %263 = OpLoad %213 
                                       f32_4 %266 = OpExtInst %1 40 %263 %265 
                                                      OpStore %102 %266 
                                       f32_4 %267 = OpLoad %102 
                                       f32_4 %268 = OpExtInst %1 32 %267 
                                                      OpStore %213 %268 
                                       f32_4 %269 = OpLoad %102 
                              Uniform f32_4* %271 = OpAccessChain %19 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpFMul %269 %272 
                                       f32_4 %275 = OpFAdd %273 %274 
                                                      OpStore %102 %275 
                                       f32_4 %276 = OpLoad %102 
                                       f32_4 %277 = OpFDiv %274 %276 
                                                      OpStore %102 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpLoad %213 
                                       f32_4 %280 = OpFMul %278 %279 
                                                      OpStore %9 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %284 = OpExtInst %1 40 %281 %283 
                                                      OpStore %9 %284 
                                       f32_4 %285 = OpLoad %102 
                                       f32_4 %286 = OpLoad %9 
                                       f32_4 %287 = OpFMul %285 %286 
                                                      OpStore %9 %287 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %291 = OpAccessChain %19 %290 %63 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFMul %289 %293 
                                       f32_4 %295 = OpLoad %102 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %102 %296 
                              Uniform f32_4* %297 = OpAccessChain %19 %290 %68 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %9 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 0 0 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %102 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpFAdd %302 %304 
                                       f32_4 %306 = OpLoad %102 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                                      OpStore %102 %307 
                              Uniform f32_4* %308 = OpAccessChain %19 %290 %76 
                                       f32_4 %309 = OpLoad %308 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_4 %311 = OpLoad %9 
                                       f32_3 %312 = OpVectorShuffle %311 %311 2 2 2 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_4 %314 = OpLoad %102 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFAdd %313 %315 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %9 %318 
                              Uniform f32_4* %319 = OpAccessChain %19 %290 %86 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 3 3 3 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %9 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFAdd %324 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %9 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                                      OpStore %330 %332 
                                Private f32* %333 = OpAccessChain %84 %50 
                                         f32 %334 = OpLoad %333 
                                Uniform f32* %335 = OpAccessChain %19 %68 %27 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %334 %336 
                                Private f32* %338 = OpAccessChain %9 %27 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %9 %27 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %340 %39 
                                Private f32* %343 = OpAccessChain %9 %342 
                                                      OpStore %343 %341 
                                       f32_4 %344 = OpLoad %84 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 3 
                                       f32_2 %347 = OpFMul %345 %346 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpVectorShuffle %348 %347 4 1 5 3 
                                                      OpStore %9 %349 
                                       f32_4 %351 = OpLoad %84 
                                       f32_2 %352 = OpVectorShuffle %351 %351 2 3 
                                       f32_4 %353 = OpLoad %350 
                                       f32_4 %354 = OpVectorShuffle %353 %352 0 1 4 5 
                                                      OpStore %350 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_2 %356 = OpVectorShuffle %355 %355 2 2 
                                       f32_4 %357 = OpLoad %9 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 3 
                                       f32_2 %359 = OpFAdd %356 %358 
                                       f32_4 %360 = OpLoad %350 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 2 3 
                                                      OpStore %350 %361 
                                                      OpStore %362 %283 
                                 Output f32* %364 = OpAccessChain %133 %68 %50 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFNegate %365 
                                 Output f32* %367 = OpAccessChain %133 %68 %50 
                                                      OpStore %367 %366 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 492
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %247 %429 %479 %481 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 RelaxedPrecision 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 RelaxedPrecision 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 RelaxedPrecision 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpMemberDecorate %72 14 Offset 72 
                                                      OpMemberDecorate %72 15 Offset 72 
                                                      OpMemberDecorate %72 16 RelaxedPrecision 
                                                      OpMemberDecorate %72 16 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %328 SpecId 328 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 Location 429 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %479 Location 479 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %481 Location 481 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %21 %7 %7 %7 %70 %7 %71 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 11 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 12 
                              Private f32_4* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 10 
                                             %115 = OpTypePointer Uniform %7 
                                Private f32* %140 = OpVariable Private 
                                         u32 %141 = OpConstant 3 
                                         i32 %144 = OpConstant 13 
                                         i32 %151 = OpConstant 15 
                                         u32 %158 = OpConstant 1 
                                         u32 %164 = OpConstant 2 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %181 = OpTypeBool 
                                             %182 = OpTypePointer Private %181 
                               Private bool* %183 = OpVariable Private 
                                             %189 = OpTypePointer Function %6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         i32 %204 = OpConstant 14 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         i32 %220 = OpConstant 0 
                                         i32 %221 = OpConstant 1 
                                         i32 %223 = OpConstant -1 
                                         i32 %230 = OpConstant 16 
                                             %246 = OpTypePointer Input %21 
                                Input f32_3* %247 = OpVariable Input 
                                             %250 = OpTypePointer Uniform %21 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %257 = OpConstant 4 
                                         i32 %264 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                               Private bool* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 5 
                                        bool %322 = OpConstantFalse 
                                        bool %328 = OpSpecConstantFalse 
                               Private bool* %331 = OpVariable Private 
                                         i32 %337 = OpConstant 6 
                                             %363 = OpTypePointer Function %21 
                                         i32 %373 = OpConstant 8 
                              Private f32_4* %378 = OpVariable Private 
                                         i32 %380 = OpConstant 7 
                                             %386 = OpTypePointer Private %17 
                              Private f32_2* %387 = OpVariable Private 
                                         f32 %390 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                Private f32* %395 = OpVariable Private 
                                             %405 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
 UniformConstant read_only Texture3DSampled* %408 = OpVariable UniformConstant 
                              Private f32_3* %419 = OpVariable Private 
                                Input f32_4* %429 = OpVariable Input 
                                Private f32* %435 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %436 = OpVariable UniformConstant 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 9 
                                             %478 = OpTypePointer Output %7 
                               Output f32_4* %479 = OpVariable Output 
                                Input f32_3* %481 = OpVariable Input 
                                             %489 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %190 = OpVariable Function 
                             Function f32_3* %364 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %105 %38 
                                                      OpStore %112 %111 
                              Uniform f32_4* %116 = OpAccessChain %74 %114 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %61 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %68 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %121 %123 
                                       f32_4 %125 = OpLoad %113 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 1 5 6 
                                                      OpStore %113 %126 
                                       f32_3 %127 = OpLoad %105 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_4 %129 = OpLoad %113 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 2 3 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_3 %132 = OpLoad %68 
                                       f32_3 %133 = OpFAdd %131 %132 
                                       f32_4 %134 = OpLoad %113 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %68 
                                       f32_4 %137 = OpLoad %113 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                                      OpStore %68 %139 
                                Private f32* %142 = OpAccessChain %9 %141 
                                         f32 %143 = OpLoad %142 
                                Uniform f32* %145 = OpAccessChain %74 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 40 %143 %146 
                                                      OpStore %140 %147 
                                       f32_4 %148 = OpLoad %16 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFNegate %149 
                              Uniform f32_4* %152 = OpAccessChain %74 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %150 %154 
                                       f32_4 %156 = OpLoad %113 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %113 %157 
                                Private f32* %159 = OpAccessChain %113 %158 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %161 = OpAccessChain %74 %151 %141 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFDiv %160 %162 
                                Private f32* %165 = OpAccessChain %113 %164 
                                                      OpStore %165 %163 
                                       f32_4 %166 = OpLoad %113 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 2 
                                       f32_4 %168 = OpLoad %113 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 2 
                                         f32 %170 = OpDot %167 %169 
                                Private f32* %171 = OpAccessChain %113 %38 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %113 %38 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpExtInst %1 31 %173 
                                Private f32* %175 = OpAccessChain %113 %38 
                                                      OpStore %175 %174 
                                Uniform f32* %176 = OpAccessChain %74 %151 %164 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %105 %38 
                                                      OpStore %180 %179 
                                Private f32* %184 = OpAccessChain %105 %38 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %113 %38 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %44 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %195 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %196 = OpLoad %190 
                                Private f32* %197 = OpAccessChain %113 %38 
                                                      OpStore %197 %196 
                                         f32 %198 = OpLoad %140 
                                         f32 %199 = OpFNegate %198 
                                Private f32* %200 = OpAccessChain %113 %38 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %199 %201 
                                Private f32* %203 = OpAccessChain %113 %38 
                                                      OpStore %203 %202 
                                Uniform f32* %205 = OpAccessChain %74 %204 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %113 %38 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %140 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %140 %211 
                                         f32 %212 = OpLoad %140 
                                         f32 %214 = OpFAdd %212 %213 
                                Private f32* %215 = OpAccessChain %30 %38 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %30 %38 
                                         f32 %217 = OpLoad %216 
                                        bool %218 = OpFOrdLessThan %217 %195 
                                                      OpStore %183 %218 
                                        bool %219 = OpLoad %183 
                                         i32 %222 = OpSelect %219 %221 %220 
                                         i32 %224 = OpIMul %222 %223 
                                        bool %225 = OpINotEqual %224 %220 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %140 
                                Uniform f32* %231 = OpAccessChain %74 %230 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %229 %233 
                                Private f32* %235 = OpAccessChain %30 %38 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %38 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %237 %195 
                                                      OpStore %183 %238 
                                        bool %239 = OpLoad %183 
                                         i32 %240 = OpSelect %239 %221 %220 
                                         i32 %241 = OpIMul %240 %223 
                                        bool %242 = OpINotEqual %241 %220 
                                                      OpSelectionMerge %244 None 
                                                      OpBranchConditional %242 %243 %244 
                                             %243 = OpLabel 
                                                      OpKill
                                             %244 = OpLabel 
                                       f32_3 %248 = OpLoad %247 
                                       f32_3 %249 = OpFNegate %248 
                              Uniform f32_3* %251 = OpAccessChain %74 %220 
                                       f32_3 %252 = OpLoad %251 
                                       f32_3 %253 = OpFAdd %249 %252 
                                       f32_4 %254 = OpLoad %113 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %113 %255 
                                Uniform f32* %258 = OpAccessChain %74 %257 %220 %164 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %256 %38 
                                                      OpStore %260 %259 
                                Uniform f32* %261 = OpAccessChain %74 %257 %221 %164 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %256 %158 
                                                      OpStore %263 %262 
                                Uniform f32* %265 = OpAccessChain %74 %257 %264 %164 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %256 %164 
                                                      OpStore %267 %266 
                                       f32_4 %268 = OpLoad %113 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpLoad %256 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %113 %38 
                                                      OpStore %272 %271 
                                       f32_3 %273 = OpLoad %247 
                              Uniform f32_4* %275 = OpAccessChain %74 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFNegate %277 
                                       f32_3 %279 = OpFAdd %273 %278 
                                                      OpStore %105 %279 
                                       f32_3 %280 = OpLoad %105 
                                       f32_3 %281 = OpLoad %105 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %105 %38 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %105 %38 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpExtInst %1 31 %285 
                                Private f32* %287 = OpAccessChain %105 %38 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %113 %38 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %105 %38 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFAdd %290 %292 
                                Private f32* %294 = OpAccessChain %105 %38 
                                                      OpStore %294 %293 
                                Uniform f32* %295 = OpAccessChain %74 %274 %141 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %105 %38 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %113 %38 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %113 %38 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %113 %38 
                                         f32 %305 = OpLoad %304 
                                Uniform f32* %306 = OpAccessChain %74 %264 %164 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Uniform f32* %309 = OpAccessChain %74 %264 %141 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %113 %38 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %113 %38 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %195 %44 
                                Private f32* %316 = OpAccessChain %113 %38 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %74 %318 %38 
                                         f32 %320 = OpLoad %319 
                                        bool %321 = OpFOrdEqual %320 %44 
                                                      OpStore %317 %321 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %322 %323 %324 
                                             %323 = OpLabel 
                                        bool %325 = OpLoad %317 
                                                      OpSelectionMerge %327 None 
                                                      OpBranchConditional %325 %326 %327 
                                             %326 = OpLabel 
                                                      OpBranch %327 
                                             %327 = OpLabel 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %328 %329 %414 
                                             %329 = OpLabel 
                                Uniform f32* %332 = OpAccessChain %74 %318 %158 
                                         f32 %333 = OpLoad %332 
                                        bool %334 = OpFOrdEqual %333 %44 
                                                      OpStore %331 %334 
                                       f32_3 %335 = OpLoad %247 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %338 = OpAccessChain %74 %337 %221 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                                      OpStore %256 %341 
                              Uniform f32_4* %342 = OpAccessChain %74 %337 %220 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpLoad %247 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_3 %348 = OpLoad %256 
                                       f32_3 %349 = OpFAdd %347 %348 
                                                      OpStore %256 %349 
                              Uniform f32_4* %350 = OpAccessChain %74 %337 %264 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %247 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %356 = OpLoad %256 
                                       f32_3 %357 = OpFAdd %355 %356 
                                                      OpStore %256 %357 
                                       f32_3 %358 = OpLoad %256 
                              Uniform f32_4* %359 = OpAccessChain %74 %337 %274 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %358 %361 
                                                      OpStore %256 %362 
                                        bool %365 = OpLoad %331 
                                                      OpSelectionMerge %367 None 
                                                      OpBranchConditional %365 %366 %369 
                                             %366 = OpLabel 
                                       f32_3 %368 = OpLoad %256 
                                                      OpStore %364 %368 
                                                      OpBranch %367 
                                             %369 = OpLabel 
                                       f32_3 %370 = OpLoad %247 
                                                      OpStore %364 %370 
                                                      OpBranch %367 
                                             %367 = OpLabel 
                                       f32_3 %371 = OpLoad %364 
                                                      OpStore %256 %371 
                                       f32_3 %372 = OpLoad %256 
                              Uniform f32_3* %374 = OpAccessChain %74 %373 
                                       f32_3 %375 = OpLoad %374 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %377 = OpFAdd %372 %376 
                                                      OpStore %256 %377 
                                       f32_3 %379 = OpLoad %256 
                              Uniform f32_3* %381 = OpAccessChain %74 %380 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %379 %382 
                                       f32_4 %384 = OpLoad %378 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %378 %385 
                                Private f32* %388 = OpAccessChain %378 %158 
                                         f32 %389 = OpLoad %388 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %393 = OpFAdd %391 %392 
                                Private f32* %394 = OpAccessChain %387 %38 
                                                      OpStore %394 %393 
                                Uniform f32* %396 = OpAccessChain %74 %318 %164 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %397 %178 
                                         f32 %399 = OpFAdd %398 %392 
                                                      OpStore %395 %399 
                                         f32 %400 = OpLoad %395 
                                Private f32* %401 = OpAccessChain %387 %38 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 40 %400 %402 
                                Private f32* %404 = OpAccessChain %378 %38 
                                                      OpStore %404 %403 
                  read_only Texture3DSampled %409 = OpLoad %408 
                                       f32_4 %410 = OpLoad %378 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 2 3 
                                       f32_4 %412 = OpImageSampleImplicitLod %409 %411 
                                                      OpStore %378 %412 
                                       f32_4 %413 = OpLoad %378 
                                                      OpStore %30 %413 
                                                      OpBranch %330 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %30 %38 
                                                      OpStore %415 %44 
                                Private f32* %416 = OpAccessChain %30 %158 
                                                      OpStore %416 %44 
                                Private f32* %417 = OpAccessChain %30 %164 
                                                      OpStore %417 %44 
                                Private f32* %418 = OpAccessChain %30 %141 
                                                      OpStore %418 %44 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_4 %420 = OpLoad %30 
                              Uniform f32_4* %421 = OpAccessChain %74 %221 
                                       f32_4 %422 = OpLoad %421 
                                         f32 %423 = OpDot %420 %422 
                                Private f32* %424 = OpAccessChain %419 %38 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %419 %38 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpExtInst %1 43 %426 %195 %44 
                                Private f32* %428 = OpAccessChain %419 %38 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_4 %432 = OpLoad %429 
                                       f32_2 %433 = OpVectorShuffle %432 %432 3 3 
                                       f32_2 %434 = OpFDiv %431 %433 
                                                      OpStore %387 %434 
                  read_only Texture2DSampled %437 = OpLoad %436 
                                       f32_2 %438 = OpLoad %387 
                                       f32_4 %439 = OpImageSampleImplicitLod %437 %438 
                                         f32 %440 = OpCompositeExtract %439 0 
                                                      OpStore %435 %440 
                                Private f32* %442 = OpAccessChain %113 %38 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpLoad %435 
                                         f32 %445 = OpFAdd %443 %444 
                                Private f32* %446 = OpAccessChain %441 %38 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %441 %38 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 43 %448 %195 %44 
                                Private f32* %450 = OpAccessChain %441 %38 
                                                      OpStore %450 %449 
                                Private f32* %451 = OpAccessChain %441 %38 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %419 %38 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                Private f32* %456 = OpAccessChain %419 %38 
                                                      OpStore %456 %455 
                                        bool %458 = OpLoad %317 
                                                      OpSelectionMerge %460 None 
                                                      OpBranchConditional %458 %459 %463 
                                             %459 = OpLabel 
                                Private f32* %461 = OpAccessChain %419 %38 
                                         f32 %462 = OpLoad %461 
                                                      OpStore %457 %462 
                                                      OpBranch %460 
                                             %463 = OpLabel 
                                Private f32* %464 = OpAccessChain %441 %38 
                                         f32 %465 = OpLoad %464 
                                                      OpStore %457 %465 
                                                      OpBranch %460 
                                             %460 = OpLabel 
                                         f32 %466 = OpLoad %457 
                                Private f32* %467 = OpAccessChain %419 %38 
                                                      OpStore %467 %466 
                                       f32_3 %468 = OpLoad %68 
                              Uniform f32_4* %470 = OpAccessChain %74 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %468 %472 
                                                      OpStore %441 %473 
                                       f32_3 %474 = OpLoad %419 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_3 %476 = OpLoad %441 
                                       f32_3 %477 = OpFMul %475 %476 
                                                      OpStore %419 %477 
                                       f32_3 %480 = OpLoad %68 
                                       f32_3 %482 = OpLoad %481 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %419 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %479 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %479 %487 
                                         f32 %488 = OpLoad %140 
                                 Output f32* %490 = OpAccessChain %479 %141 
                                                      OpStore %490 %488 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
float u_xlat21;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat7 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat7 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat2 = max(u_xlat4, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat1.w = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat1.w + -0.100000001;
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = u_xlat1.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat12) + u_xlat2.x;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat12;
    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat12 = u_xlat12 + u_xlat10_3.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12, u_xlat6.x);
    u_xlat12 = (u_xlatb2) ? u_xlat6.x : u_xlat12;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat1 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 471
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %49 %133 %137 %138 %153 %168 %205 %208 %211 %433 %452 %464 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 RelaxedPrecision 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpMemberDecorate %17 19 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %131 0 BuiltIn 131 
                                                      OpMemberDecorate %131 1 BuiltIn 131 
                                                      OpMemberDecorate %131 2 BuiltIn 131 
                                                      OpDecorate %131 Block 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %208 Location 208 
                                                      OpDecorate %211 Location 211 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate %452 Location 452 
                                                      OpDecorate %464 Location 464 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 17 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %25 = OpConstant 3.674022E-40 
                                          u32 %27 = OpConstant 0 
                                              %28 = OpTypePointer Private %6 
                                          i32 %32 = OpConstant 16 
                                          f32 %39 = OpConstant 3.674022E-40 
                                 Private f32* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                              %48 = OpTypePointer Input %7 
                                 Input f32_4* %49 = OpVariable Input 
                                          u32 %50 = OpConstant 1 
                                              %51 = OpTypePointer Input %6 
                                          i32 %62 = OpConstant 13 
                                          i32 %63 = OpConstant 1 
                                              %64 = OpTypePointer Uniform %7 
                                          i32 %68 = OpConstant 0 
                                          i32 %76 = OpConstant 2 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %90 = OpTypeVector %6 3 
                              Private f32_4* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 15 
                                             %130 = OpTypeArray %6 %50 
                                             %131 = OpTypeStruct %7 %6 %130 
                                             %132 = OpTypePointer Output %131 
        Output struct {f32_4; f32; f32[1];}* %133 = OpVariable Output 
                                             %135 = OpTypePointer Output %7 
                               Output f32_4* %137 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %139 = OpTypeVector %6 2 
                                         i32 %142 = OpConstant 18 
                                Input f32_4* %153 = OpVariable Input 
                                         i32 %156 = OpConstant 19 
                                             %167 = OpTypePointer Input %90 
                                Input f32_3* %168 = OpVariable Input 
                                         i32 %170 = OpConstant 14 
                                         u32 %187 = OpConstant 2 
                                Private f32* %189 = OpVariable Private 
                                             %204 = OpTypePointer Output %90 
                               Output f32_3* %205 = OpVariable Output 
                               Output f32_3* %208 = OpVariable Output 
                               Output f32_4* %211 = OpVariable Output 
                                             %213 = OpTypePointer Private %90 
                              Private f32_3* %214 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                              Private f32_3* %237 = OpVariable Private 
                                         i32 %238 = OpConstant 9 
                                         i32 %244 = OpConstant 10 
                                         i32 %250 = OpConstant 11 
                                         i32 %256 = OpConstant 12 
                                         u32 %265 = OpConstant 3 
                                         i32 %267 = OpConstant 6 
                                         i32 %273 = OpConstant 7 
                                         i32 %279 = OpConstant 8 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                              Private f32_3* %293 = OpVariable Private 
                                         f32 %297 = OpConstant 3.674022E-40 
                                       f32_3 %298 = OpConstantComposite %297 %297 %297 
                                         f32 %303 = OpConstant 3.674022E-40 
                                       f32_3 %304 = OpConstantComposite %303 %303 %303 
                                         f32 %306 = OpConstant 3.674022E-40 
                                       f32_3 %307 = OpConstantComposite %306 %306 %306 
                              Private f32_4* %311 = OpVariable Private 
                              Private f32_4* %318 = OpVariable Private 
                              Private f32_4* %326 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                       f32_4 %363 = OpConstantComposite %362 %362 %362 %362 
                                         i32 %368 = OpConstant 4 
                                       f32_4 %372 = OpConstantComposite %46 %46 %46 %46 
                                       f32_4 %380 = OpConstantComposite %290 %290 %290 %290 
                                         i32 %387 = OpConstant 5 
                               Output f32_3* %433 = OpVariable Output 
                                       f32_2 %448 = OpConstantComposite %39 %39 
                               Output f32_4* %452 = OpVariable Output 
                               Output f32_4* %464 = OpVariable Output 
                                             %465 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %26 = OpFAdd %24 %25 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                                      OpStore %29 %26 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                          f32 %31 = OpLoad %30 
                                 Uniform f32* %33 = OpAccessChain %19 %32 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %31 %34 
                                 Private f32* %36 = OpAccessChain %9 %27 
                                                      OpStore %36 %35 
                                 Private f32* %37 = OpAccessChain %9 %27 
                                          f32 %38 = OpLoad %37 
                                          f32 %40 = OpFMul %38 %39 
                                 Private f32* %41 = OpAccessChain %9 %27 
                                                      OpStore %41 %40 
                                 Uniform f32* %43 = OpAccessChain %19 %32 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                                      OpStore %42 %47 
                                   Input f32* %52 = OpAccessChain %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpLoad %42 
                                          f32 %55 = OpFMul %53 %54 
                                 Private f32* %56 = OpAccessChain %9 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFAdd %55 %57 
                                 Private f32* %59 = OpAccessChain %9 %27 
                                                      OpStore %59 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                               Uniform f32_4* %65 = OpAccessChain %19 %62 %63 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %61 %66 
                                                      OpStore %9 %67 
                               Uniform f32_4* %69 = OpAccessChain %19 %62 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %19 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %9 %83 
                                        f32_4 %85 = OpLoad %9 
                               Uniform f32_4* %87 = OpAccessChain %19 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_4 %89 = OpFAdd %85 %88 
                                                      OpStore %84 %89 
                               Uniform f32_4* %91 = OpAccessChain %19 %62 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %49 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %9 %101 
                                       f32_4 %103 = OpLoad %84 
                                       f32_4 %104 = OpVectorShuffle %103 %103 1 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %19 %105 %63 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %19 %105 %68 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %84 
                                       f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %102 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %102 %115 
                              Uniform f32_4* %116 = OpAccessChain %19 %105 %76 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %84 
                                       f32_4 %119 = OpVectorShuffle %118 %118 2 2 2 2 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %102 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %102 %122 
                              Uniform f32_4* %123 = OpAccessChain %19 %105 %86 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %84 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %102 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %84 %129 
                                       f32_4 %134 = OpLoad %84 
                               Output f32_4* %136 = OpAccessChain %133 %68 
                                                      OpStore %136 %134 
                                       f32_4 %140 = OpLoad %138 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                              Uniform f32_4* %143 = OpAccessChain %19 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %141 %145 
                              Uniform f32_4* %147 = OpAccessChain %19 %142 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %137 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 2 3 
                                                      OpStore %137 %152 
                                       f32_4 %154 = OpLoad %153 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              Uniform f32_4* %157 = OpAccessChain %19 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %19 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                       f32_4 %165 = OpLoad %137 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %137 %166 
                                       f32_3 %169 = OpLoad %168 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 %68 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %169 %173 
                                Private f32* %175 = OpAccessChain %102 %27 
                                                      OpStore %175 %174 
                                       f32_3 %176 = OpLoad %168 
                              Uniform f32_4* %177 = OpAccessChain %19 %170 %63 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %176 %179 
                                Private f32* %181 = OpAccessChain %102 %50 
                                                      OpStore %181 %180 
                                       f32_3 %182 = OpLoad %168 
                              Uniform f32_4* %183 = OpAccessChain %19 %170 %76 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %188 = OpAccessChain %102 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %102 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %102 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                         f32 %197 = OpLoad %189 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_4 %199 = OpLoad %102 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %102 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %102 %203 
                                       f32_4 %206 = OpLoad %102 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                                      OpStore %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                                      OpStore %208 %210 
                                       f32_4 %212 = OpLoad %49 
                                                      OpStore %211 %212 
                                Private f32* %215 = OpAccessChain %102 %50 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %102 %50 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %214 %27 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %102 %27 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %102 %27 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %214 %27 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %214 %27 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %102 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %102 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %239 = OpAccessChain %19 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %231 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %237 %27 
                                                      OpStore %243 %242 
                              Uniform f32_4* %245 = OpAccessChain %19 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %231 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %237 %50 
                                                      OpStore %249 %248 
                              Uniform f32_4* %251 = OpAccessChain %19 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpLoad %231 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %237 %187 
                                                      OpStore %255 %254 
                              Uniform f32_4* %257 = OpAccessChain %19 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpLoad %214 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 0 0 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_3 %263 = OpLoad %237 
                                       f32_3 %264 = OpFAdd %262 %263 
                                                      OpStore %214 %264 
                                Private f32* %266 = OpAccessChain %102 %265 
                                                      OpStore %266 %46 
                              Uniform f32_4* %268 = OpAccessChain %19 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpLoad %102 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %231 %27 
                                                      OpStore %272 %271 
                              Uniform f32_4* %274 = OpAccessChain %19 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %102 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %231 %50 
                                                      OpStore %278 %277 
                              Uniform f32_4* %280 = OpAccessChain %19 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpLoad %102 
                                         f32 %283 = OpDot %281 %282 
                                Private f32* %284 = OpAccessChain %231 %187 
                                                      OpStore %284 %283 
                                       f32_3 %285 = OpLoad %214 
                                       f32_4 %286 = OpLoad %231 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFAdd %285 %287 
                                                      OpStore %214 %288 
                                       f32_3 %289 = OpLoad %214 
                                       f32_3 %292 = OpExtInst %1 40 %289 %291 
                                                      OpStore %214 %292 
                                       f32_3 %294 = OpLoad %214 
                                       f32_3 %295 = OpExtInst %1 30 %294 
                                                      OpStore %293 %295 
                                       f32_3 %296 = OpLoad %293 
                                       f32_3 %299 = OpFMul %296 %298 
                                                      OpStore %293 %299 
                                       f32_3 %300 = OpLoad %293 
                                       f32_3 %301 = OpExtInst %1 29 %300 
                                                      OpStore %293 %301 
                                       f32_3 %302 = OpLoad %293 
                                       f32_3 %305 = OpFMul %302 %304 
                                       f32_3 %308 = OpFAdd %305 %307 
                                                      OpStore %293 %308 
                                       f32_3 %309 = OpLoad %293 
                                       f32_3 %310 = OpExtInst %1 40 %309 %291 
                                                      OpStore %293 %310 
                                       f32_4 %312 = OpLoad %9 
                                       f32_4 %313 = OpVectorShuffle %312 %312 1 1 1 1 
                                       f32_4 %314 = OpFNegate %313 
                              Uniform f32_4* %315 = OpAccessChain %19 %76 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpFAdd %314 %316 
                                                      OpStore %311 %317 
                                       f32_4 %319 = OpLoad %102 
                                       f32_4 %320 = OpVectorShuffle %319 %319 1 1 1 1 
                                       f32_4 %321 = OpLoad %311 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %318 %322 
                                       f32_4 %323 = OpLoad %311 
                                       f32_4 %324 = OpLoad %311 
                                       f32_4 %325 = OpFMul %323 %324 
                                                      OpStore %311 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_4 %328 = OpVectorShuffle %327 %327 0 0 0 0 
                                       f32_4 %329 = OpFNegate %328 
                              Uniform f32_4* %330 = OpAccessChain %19 %63 
                                       f32_4 %331 = OpLoad %330 
                                       f32_4 %332 = OpFAdd %329 %331 
                                                      OpStore %326 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_4 %334 = OpVectorShuffle %333 %333 2 2 2 2 
                                       f32_4 %335 = OpFNegate %334 
                              Uniform f32_4* %336 = OpAccessChain %19 %86 
                                       f32_4 %337 = OpLoad %336 
                                       f32_4 %338 = OpFAdd %335 %337 
                                                      OpStore %9 %338 
                                       f32_4 %339 = OpLoad %326 
                                       f32_4 %340 = OpLoad %102 
                                       f32_4 %341 = OpVectorShuffle %340 %340 0 0 0 0 
                                       f32_4 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %318 
                                       f32_4 %344 = OpFAdd %342 %343 
                                                      OpStore %318 %344 
                                       f32_4 %345 = OpLoad %326 
                                       f32_4 %346 = OpLoad %326 
                                       f32_4 %347 = OpFMul %345 %346 
                                       f32_4 %348 = OpLoad %311 
                                       f32_4 %349 = OpFAdd %347 %348 
                                                      OpStore %311 %349 
                                       f32_4 %350 = OpLoad %9 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpFMul %350 %351 
                                       f32_4 %353 = OpLoad %311 
                                       f32_4 %354 = OpFAdd %352 %353 
                                                      OpStore %311 %354 
                                       f32_4 %355 = OpLoad %9 
                                       f32_4 %356 = OpLoad %102 
                                       f32_4 %357 = OpVectorShuffle %356 %356 2 2 2 2 
                                       f32_4 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %318 
                                       f32_4 %360 = OpFAdd %358 %359 
                                                      OpStore %9 %360 
                                       f32_4 %361 = OpLoad %311 
                                       f32_4 %364 = OpExtInst %1 40 %361 %363 
                                                      OpStore %102 %364 
                                       f32_4 %365 = OpLoad %102 
                                       f32_4 %366 = OpExtInst %1 32 %365 
                                                      OpStore %311 %366 
                                       f32_4 %367 = OpLoad %102 
                              Uniform f32_4* %369 = OpAccessChain %19 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_4 %371 = OpFMul %367 %370 
                                       f32_4 %373 = OpFAdd %371 %372 
                                                      OpStore %102 %373 
                                       f32_4 %374 = OpLoad %102 
                                       f32_4 %375 = OpFDiv %372 %374 
                                                      OpStore %102 %375 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %377 = OpLoad %311 
                                       f32_4 %378 = OpFMul %376 %377 
                                                      OpStore %9 %378 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %381 = OpExtInst %1 40 %379 %380 
                                                      OpStore %9 %381 
                                       f32_4 %382 = OpLoad %102 
                                       f32_4 %383 = OpLoad %9 
                                       f32_4 %384 = OpFMul %382 %383 
                                                      OpStore %9 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 1 1 1 
                              Uniform f32_4* %388 = OpAccessChain %19 %387 %63 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFMul %386 %390 
                                       f32_4 %392 = OpLoad %102 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %102 %393 
                              Uniform f32_4* %394 = OpAccessChain %19 %387 %68 
                                       f32_4 %395 = OpLoad %394 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_4 %397 = OpLoad %9 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 0 0 
                                       f32_3 %399 = OpFMul %396 %398 
                                       f32_4 %400 = OpLoad %102 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                                       f32_3 %402 = OpFAdd %399 %401 
                                       f32_4 %403 = OpLoad %102 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %102 %404 
                              Uniform f32_4* %405 = OpAccessChain %19 %387 %76 
                                       f32_4 %406 = OpLoad %405 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 2 2 2 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %102 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                              Uniform f32_4* %416 = OpAccessChain %19 %387 %86 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 3 3 3 
                                       f32_3 %421 = OpFMul %418 %420 
                                       f32_4 %422 = OpLoad %9 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFAdd %421 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_3 %429 = OpLoad %293 
                                       f32_3 %430 = OpFAdd %428 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %9 %432 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                                      OpStore %433 %435 
                                Private f32* %436 = OpAccessChain %84 %50 
                                         f32 %437 = OpLoad %436 
                                Uniform f32* %438 = OpAccessChain %19 %68 %27 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %9 %27 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFMul %443 %39 
                                Private f32* %445 = OpAccessChain %9 %265 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %84 
                                       f32_2 %447 = OpVectorShuffle %446 %446 0 3 
                                       f32_2 %449 = OpFMul %447 %448 
                                       f32_4 %450 = OpLoad %9 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 1 5 3 
                                                      OpStore %9 %451 
                                       f32_4 %453 = OpLoad %84 
                                       f32_2 %454 = OpVectorShuffle %453 %453 2 3 
                                       f32_4 %455 = OpLoad %452 
                                       f32_4 %456 = OpVectorShuffle %455 %454 0 1 4 5 
                                                      OpStore %452 %456 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 2 2 
                                       f32_4 %459 = OpLoad %9 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 3 
                                       f32_2 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %452 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 2 3 
                                                      OpStore %452 %463 
                                                      OpStore %464 %380 
                                 Output f32* %466 = OpAccessChain %133 %68 %50 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                 Output f32* %469 = OpAccessChain %133 %68 %50 
                                                      OpStore %469 %468 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 492
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %247 %429 %479 %481 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 RelaxedPrecision 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 RelaxedPrecision 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 RelaxedPrecision 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpMemberDecorate %72 14 Offset 72 
                                                      OpMemberDecorate %72 15 Offset 72 
                                                      OpMemberDecorate %72 16 RelaxedPrecision 
                                                      OpMemberDecorate %72 16 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %328 SpecId 328 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 Location 429 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %436 DescriptorSet 436 
                                                      OpDecorate %436 Binding 436 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %479 Location 479 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %481 Location 481 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %21 %7 %7 %7 %70 %7 %71 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 11 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 12 
                              Private f32_4* %113 = OpVariable Private 
                                         i32 %114 = OpConstant 10 
                                             %115 = OpTypePointer Uniform %7 
                                Private f32* %140 = OpVariable Private 
                                         u32 %141 = OpConstant 3 
                                         i32 %144 = OpConstant 13 
                                         i32 %151 = OpConstant 15 
                                         u32 %158 = OpConstant 1 
                                         u32 %164 = OpConstant 2 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %181 = OpTypeBool 
                                             %182 = OpTypePointer Private %181 
                               Private bool* %183 = OpVariable Private 
                                             %189 = OpTypePointer Function %6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         i32 %204 = OpConstant 14 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         i32 %220 = OpConstant 0 
                                         i32 %221 = OpConstant 1 
                                         i32 %223 = OpConstant -1 
                                         i32 %230 = OpConstant 16 
                                             %246 = OpTypePointer Input %21 
                                Input f32_3* %247 = OpVariable Input 
                                             %250 = OpTypePointer Uniform %21 
                              Private f32_3* %256 = OpVariable Private 
                                         i32 %257 = OpConstant 4 
                                         i32 %264 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                               Private bool* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 5 
                                        bool %322 = OpConstantFalse 
                                        bool %328 = OpSpecConstantFalse 
                               Private bool* %331 = OpVariable Private 
                                         i32 %337 = OpConstant 6 
                                             %363 = OpTypePointer Function %21 
                                         i32 %373 = OpConstant 8 
                              Private f32_4* %378 = OpVariable Private 
                                         i32 %380 = OpConstant 7 
                                             %386 = OpTypePointer Private %17 
                              Private f32_2* %387 = OpVariable Private 
                                         f32 %390 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                Private f32* %395 = OpVariable Private 
                                             %405 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
 UniformConstant read_only Texture3DSampled* %408 = OpVariable UniformConstant 
                              Private f32_3* %419 = OpVariable Private 
                                Input f32_4* %429 = OpVariable Input 
                                Private f32* %435 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %436 = OpVariable UniformConstant 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 9 
                                             %478 = OpTypePointer Output %7 
                               Output f32_4* %479 = OpVariable Output 
                                Input f32_3* %481 = OpVariable Input 
                                             %489 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %190 = OpVariable Function 
                             Function f32_3* %364 = OpVariable Function 
                               Function f32* %457 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                Private f32* %112 = OpAccessChain %105 %38 
                                                      OpStore %112 %111 
                              Uniform f32_4* %116 = OpAccessChain %74 %114 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %61 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %68 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %121 %123 
                                       f32_4 %125 = OpLoad %113 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 1 5 6 
                                                      OpStore %113 %126 
                                       f32_3 %127 = OpLoad %105 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_4 %129 = OpLoad %113 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 2 3 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_3 %132 = OpLoad %68 
                                       f32_3 %133 = OpFAdd %131 %132 
                                       f32_4 %134 = OpLoad %113 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %68 
                                       f32_4 %137 = OpLoad %113 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpExtInst %1 40 %136 %138 
                                                      OpStore %68 %139 
                                Private f32* %142 = OpAccessChain %9 %141 
                                         f32 %143 = OpLoad %142 
                                Uniform f32* %145 = OpAccessChain %74 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 40 %143 %146 
                                                      OpStore %140 %147 
                                       f32_4 %148 = OpLoad %16 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                                       f32_2 %150 = OpFNegate %149 
                              Uniform f32_4* %152 = OpAccessChain %74 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFAdd %150 %154 
                                       f32_4 %156 = OpLoad %113 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 2 3 
                                                      OpStore %113 %157 
                                Private f32* %159 = OpAccessChain %113 %158 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %161 = OpAccessChain %74 %151 %141 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFDiv %160 %162 
                                Private f32* %165 = OpAccessChain %113 %164 
                                                      OpStore %165 %163 
                                       f32_4 %166 = OpLoad %113 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 2 
                                       f32_4 %168 = OpLoad %113 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 2 
                                         f32 %170 = OpDot %167 %169 
                                Private f32* %171 = OpAccessChain %113 %38 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %113 %38 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpExtInst %1 31 %173 
                                Private f32* %175 = OpAccessChain %113 %38 
                                                      OpStore %175 %174 
                                Uniform f32* %176 = OpAccessChain %74 %151 %164 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                Private f32* %180 = OpAccessChain %105 %38 
                                                      OpStore %180 %179 
                                Private f32* %184 = OpAccessChain %105 %38 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %113 %38 
                                         f32 %187 = OpLoad %186 
                                        bool %188 = OpFOrdGreaterThanEqual %185 %187 
                                                      OpStore %183 %188 
                                        bool %191 = OpLoad %183 
                                                      OpSelectionMerge %193 None 
                                                      OpBranchConditional %191 %192 %194 
                                             %192 = OpLabel 
                                                      OpStore %190 %44 
                                                      OpBranch %193 
                                             %194 = OpLabel 
                                                      OpStore %190 %195 
                                                      OpBranch %193 
                                             %193 = OpLabel 
                                         f32 %196 = OpLoad %190 
                                Private f32* %197 = OpAccessChain %113 %38 
                                                      OpStore %197 %196 
                                         f32 %198 = OpLoad %140 
                                         f32 %199 = OpFNegate %198 
                                Private f32* %200 = OpAccessChain %113 %38 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %199 %201 
                                Private f32* %203 = OpAccessChain %113 %38 
                                                      OpStore %203 %202 
                                Uniform f32* %205 = OpAccessChain %74 %204 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %113 %38 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                         f32 %210 = OpLoad %140 
                                         f32 %211 = OpFAdd %209 %210 
                                                      OpStore %140 %211 
                                         f32 %212 = OpLoad %140 
                                         f32 %214 = OpFAdd %212 %213 
                                Private f32* %215 = OpAccessChain %30 %38 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %30 %38 
                                         f32 %217 = OpLoad %216 
                                        bool %218 = OpFOrdLessThan %217 %195 
                                                      OpStore %183 %218 
                                        bool %219 = OpLoad %183 
                                         i32 %222 = OpSelect %219 %221 %220 
                                         i32 %224 = OpIMul %222 %223 
                                        bool %225 = OpINotEqual %224 %220 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %140 
                                Uniform f32* %231 = OpAccessChain %74 %230 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %229 %233 
                                Private f32* %235 = OpAccessChain %30 %38 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %38 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdLessThan %237 %195 
                                                      OpStore %183 %238 
                                        bool %239 = OpLoad %183 
                                         i32 %240 = OpSelect %239 %221 %220 
                                         i32 %241 = OpIMul %240 %223 
                                        bool %242 = OpINotEqual %241 %220 
                                                      OpSelectionMerge %244 None 
                                                      OpBranchConditional %242 %243 %244 
                                             %243 = OpLabel 
                                                      OpKill
                                             %244 = OpLabel 
                                       f32_3 %248 = OpLoad %247 
                                       f32_3 %249 = OpFNegate %248 
                              Uniform f32_3* %251 = OpAccessChain %74 %220 
                                       f32_3 %252 = OpLoad %251 
                                       f32_3 %253 = OpFAdd %249 %252 
                                       f32_4 %254 = OpLoad %113 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %113 %255 
                                Uniform f32* %258 = OpAccessChain %74 %257 %220 %164 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %256 %38 
                                                      OpStore %260 %259 
                                Uniform f32* %261 = OpAccessChain %74 %257 %221 %164 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %256 %158 
                                                      OpStore %263 %262 
                                Uniform f32* %265 = OpAccessChain %74 %257 %264 %164 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %256 %164 
                                                      OpStore %267 %266 
                                       f32_4 %268 = OpLoad %113 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpLoad %256 
                                         f32 %271 = OpDot %269 %270 
                                Private f32* %272 = OpAccessChain %113 %38 
                                                      OpStore %272 %271 
                                       f32_3 %273 = OpLoad %247 
                              Uniform f32_4* %275 = OpAccessChain %74 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFNegate %277 
                                       f32_3 %279 = OpFAdd %273 %278 
                                                      OpStore %105 %279 
                                       f32_3 %280 = OpLoad %105 
                                       f32_3 %281 = OpLoad %105 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %105 %38 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %105 %38 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpExtInst %1 31 %285 
                                Private f32* %287 = OpAccessChain %105 %38 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %113 %38 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                Private f32* %291 = OpAccessChain %105 %38 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFAdd %290 %292 
                                Private f32* %294 = OpAccessChain %105 %38 
                                                      OpStore %294 %293 
                                Uniform f32* %295 = OpAccessChain %74 %274 %141 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %105 %38 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %113 %38 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %113 %38 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %113 %38 
                                         f32 %305 = OpLoad %304 
                                Uniform f32* %306 = OpAccessChain %74 %264 %164 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Uniform f32* %309 = OpAccessChain %74 %264 %141 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %113 %38 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %113 %38 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %195 %44 
                                Private f32* %316 = OpAccessChain %113 %38 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %74 %318 %38 
                                         f32 %320 = OpLoad %319 
                                        bool %321 = OpFOrdEqual %320 %44 
                                                      OpStore %317 %321 
                                                      OpSelectionMerge %324 None 
                                                      OpBranchConditional %322 %323 %324 
                                             %323 = OpLabel 
                                        bool %325 = OpLoad %317 
                                                      OpSelectionMerge %327 None 
                                                      OpBranchConditional %325 %326 %327 
                                             %326 = OpLabel 
                                                      OpBranch %327 
                                             %327 = OpLabel 
                                                      OpBranch %324 
                                             %324 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %328 %329 %414 
                                             %329 = OpLabel 
                                Uniform f32* %332 = OpAccessChain %74 %318 %158 
                                         f32 %333 = OpLoad %332 
                                        bool %334 = OpFOrdEqual %333 %44 
                                                      OpStore %331 %334 
                                       f32_3 %335 = OpLoad %247 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %338 = OpAccessChain %74 %337 %221 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                                      OpStore %256 %341 
                              Uniform f32_4* %342 = OpAccessChain %74 %337 %220 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpLoad %247 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_3 %348 = OpLoad %256 
                                       f32_3 %349 = OpFAdd %347 %348 
                                                      OpStore %256 %349 
                              Uniform f32_4* %350 = OpAccessChain %74 %337 %264 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %247 
                                       f32_3 %354 = OpVectorShuffle %353 %353 2 2 2 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %356 = OpLoad %256 
                                       f32_3 %357 = OpFAdd %355 %356 
                                                      OpStore %256 %357 
                                       f32_3 %358 = OpLoad %256 
                              Uniform f32_4* %359 = OpAccessChain %74 %337 %274 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %358 %361 
                                                      OpStore %256 %362 
                                        bool %365 = OpLoad %331 
                                                      OpSelectionMerge %367 None 
                                                      OpBranchConditional %365 %366 %369 
                                             %366 = OpLabel 
                                       f32_3 %368 = OpLoad %256 
                                                      OpStore %364 %368 
                                                      OpBranch %367 
                                             %369 = OpLabel 
                                       f32_3 %370 = OpLoad %247 
                                                      OpStore %364 %370 
                                                      OpBranch %367 
                                             %367 = OpLabel 
                                       f32_3 %371 = OpLoad %364 
                                                      OpStore %256 %371 
                                       f32_3 %372 = OpLoad %256 
                              Uniform f32_3* %374 = OpAccessChain %74 %373 
                                       f32_3 %375 = OpLoad %374 
                                       f32_3 %376 = OpFNegate %375 
                                       f32_3 %377 = OpFAdd %372 %376 
                                                      OpStore %256 %377 
                                       f32_3 %379 = OpLoad %256 
                              Uniform f32_3* %381 = OpAccessChain %74 %380 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %379 %382 
                                       f32_4 %384 = OpLoad %378 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %378 %385 
                                Private f32* %388 = OpAccessChain %378 %158 
                                         f32 %389 = OpLoad %388 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %393 = OpFAdd %391 %392 
                                Private f32* %394 = OpAccessChain %387 %38 
                                                      OpStore %394 %393 
                                Uniform f32* %396 = OpAccessChain %74 %318 %164 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %397 %178 
                                         f32 %399 = OpFAdd %398 %392 
                                                      OpStore %395 %399 
                                         f32 %400 = OpLoad %395 
                                Private f32* %401 = OpAccessChain %387 %38 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 40 %400 %402 
                                Private f32* %404 = OpAccessChain %378 %38 
                                                      OpStore %404 %403 
                  read_only Texture3DSampled %409 = OpLoad %408 
                                       f32_4 %410 = OpLoad %378 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 2 3 
                                       f32_4 %412 = OpImageSampleImplicitLod %409 %411 
                                                      OpStore %378 %412 
                                       f32_4 %413 = OpLoad %378 
                                                      OpStore %30 %413 
                                                      OpBranch %330 
                                             %414 = OpLabel 
                                Private f32* %415 = OpAccessChain %30 %38 
                                                      OpStore %415 %44 
                                Private f32* %416 = OpAccessChain %30 %158 
                                                      OpStore %416 %44 
                                Private f32* %417 = OpAccessChain %30 %164 
                                                      OpStore %417 %44 
                                Private f32* %418 = OpAccessChain %30 %141 
                                                      OpStore %418 %44 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_4 %420 = OpLoad %30 
                              Uniform f32_4* %421 = OpAccessChain %74 %221 
                                       f32_4 %422 = OpLoad %421 
                                         f32 %423 = OpDot %420 %422 
                                Private f32* %424 = OpAccessChain %419 %38 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %419 %38 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpExtInst %1 43 %426 %195 %44 
                                Private f32* %428 = OpAccessChain %419 %38 
                                                      OpStore %428 %427 
                                       f32_4 %430 = OpLoad %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 1 
                                       f32_4 %432 = OpLoad %429 
                                       f32_2 %433 = OpVectorShuffle %432 %432 3 3 
                                       f32_2 %434 = OpFDiv %431 %433 
                                                      OpStore %387 %434 
                  read_only Texture2DSampled %437 = OpLoad %436 
                                       f32_2 %438 = OpLoad %387 
                                       f32_4 %439 = OpImageSampleImplicitLod %437 %438 
                                         f32 %440 = OpCompositeExtract %439 0 
                                                      OpStore %435 %440 
                                Private f32* %442 = OpAccessChain %113 %38 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpLoad %435 
                                         f32 %445 = OpFAdd %443 %444 
                                Private f32* %446 = OpAccessChain %441 %38 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %441 %38 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 43 %448 %195 %44 
                                Private f32* %450 = OpAccessChain %441 %38 
                                                      OpStore %450 %449 
                                Private f32* %451 = OpAccessChain %441 %38 
                                         f32 %452 = OpLoad %451 
                                Private f32* %453 = OpAccessChain %419 %38 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 37 %452 %454 
                                Private f32* %456 = OpAccessChain %419 %38 
                                                      OpStore %456 %455 
                                        bool %458 = OpLoad %317 
                                                      OpSelectionMerge %460 None 
                                                      OpBranchConditional %458 %459 %463 
                                             %459 = OpLabel 
                                Private f32* %461 = OpAccessChain %419 %38 
                                         f32 %462 = OpLoad %461 
                                                      OpStore %457 %462 
                                                      OpBranch %460 
                                             %463 = OpLabel 
                                Private f32* %464 = OpAccessChain %441 %38 
                                         f32 %465 = OpLoad %464 
                                                      OpStore %457 %465 
                                                      OpBranch %460 
                                             %460 = OpLabel 
                                         f32 %466 = OpLoad %457 
                                Private f32* %467 = OpAccessChain %419 %38 
                                                      OpStore %467 %466 
                                       f32_3 %468 = OpLoad %68 
                              Uniform f32_4* %470 = OpAccessChain %74 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFMul %468 %472 
                                                      OpStore %441 %473 
                                       f32_3 %474 = OpLoad %419 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_3 %476 = OpLoad %441 
                                       f32_3 %477 = OpFMul %475 %476 
                                                      OpStore %419 %477 
                                       f32_3 %480 = OpLoad %68 
                                       f32_3 %482 = OpLoad %481 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_3 %484 = OpLoad %419 
                                       f32_3 %485 = OpFAdd %483 %484 
                                       f32_4 %486 = OpLoad %479 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %479 %487 
                                         f32 %488 = OpLoad %140 
                                 Output f32* %490 = OpAccessChain %479 %141 
                                                      OpStore %490 %488 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Stencil {
   Comp Always
   Pass Replace
   Fail Keep
   ZFail Keep
  }
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 88515
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat5;
float u_xlat9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat9 = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat1.x = u_xlat9 + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat9 + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                 Output f32* %198 = OpAccessChain %120 %60 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %120 %60 %48 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 431
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %244 %420 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 RelaxedPrecision 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 RelaxedPrecision 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 RelaxedPrecision 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %296 SpecId 296 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %400 DescriptorSet 400 
                                                      OpDecorate %400 Binding 400 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 Location 420 
                                                      OpDecorate %423 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %7 %7 %70 %21 %21 %7 %71 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 8 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                                Private f32* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 9 
                              Private f32_4* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 7 
                                             %114 = OpTypePointer Uniform %7 
                                Private f32* %139 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 10 
                                         i32 %150 = OpConstant 12 
                                         u32 %157 = OpConstant 1 
                                         u32 %163 = OpConstant 2 
                                         f32 %177 = OpConstant 3.674022E-40 
                                             %179 = OpTypeBool 
                                             %180 = OpTypePointer Private %179 
                               Private bool* %181 = OpVariable Private 
                                             %186 = OpTypePointer Function %6 
                                         f32 %192 = OpConstant 3.674022E-40 
                                         i32 %201 = OpConstant 11 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %217 = OpConstant 0 
                                         i32 %218 = OpConstant 1 
                                         i32 %220 = OpConstant -1 
                                         i32 %227 = OpConstant 13 
                                             %243 = OpTypePointer Input %21 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %247 = OpConstant 6 
                                         i32 %265 = OpConstant 2 
                                         i32 %279 = OpConstant 3 
                               Private bool* %286 = OpVariable Private 
                                        bool %290 = OpConstantFalse 
                                        bool %296 = OpSpecConstantFalse 
                              Private f32_3* %302 = OpVariable Private 
                                             %330 = OpTypePointer Function %21 
                                         i32 %340 = OpConstant 4 
                                             %341 = OpTypePointer Uniform %21 
                              Private f32_4* %346 = OpVariable Private 
                                Private f32* %353 = OpVariable Private 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                             %370 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %371 = OpTypeSampledImage %370 
                                             %372 = OpTypePointer UniformConstant %371 
 UniformConstant read_only Texture3DSampled* %373 = OpVariable UniformConstant 
                              Private f32_3* %384 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %400 = OpVariable UniformConstant 
                                         i32 %414 = OpConstant 5 
                                             %419 = OpTypePointer Output %7 
                               Output f32_4* %420 = OpVariable Output 
                                             %428 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %187 = OpVariable Function 
                             Function f32_3* %331 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %115 = OpAccessChain %74 %113 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad %61 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 0 0 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %68 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %112 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 1 5 6 
                                                      OpStore %112 %125 
                                         f32 %126 = OpLoad %105 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %112 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 2 3 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_3 %131 = OpLoad %68 
                                       f32_3 %132 = OpFAdd %130 %131 
                                       f32_4 %133 = OpLoad %112 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %68 
                                       f32_4 %136 = OpLoad %112 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpExtInst %1 40 %135 %137 
                                                      OpStore %68 %138 
                                Private f32* %141 = OpAccessChain %9 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %74 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 40 %142 %145 
                                                      OpStore %139 %146 
                                       f32_4 %147 = OpLoad %16 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFNegate %148 
                              Uniform f32_4* %151 = OpAccessChain %74 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %112 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 3 
                                                      OpStore %112 %156 
                                Private f32* %158 = OpAccessChain %112 %157 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %74 %150 %140 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFDiv %159 %161 
                                Private f32* %164 = OpAccessChain %112 %163 
                                                      OpStore %164 %162 
                                       f32_4 %165 = OpLoad %112 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 2 
                                       f32_4 %167 = OpLoad %112 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 2 
                                         f32 %169 = OpDot %166 %168 
                                Private f32* %170 = OpAccessChain %112 %38 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %112 %38 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 31 %172 
                                Private f32* %174 = OpAccessChain %112 %38 
                                                      OpStore %174 %173 
                                Uniform f32* %175 = OpAccessChain %74 %150 %163 
                                         f32 %176 = OpLoad %175 
                                         f32 %178 = OpFMul %176 %177 
                                                      OpStore %105 %178 
                                         f32 %182 = OpLoad %105 
                                Private f32* %183 = OpAccessChain %112 %38 
                                         f32 %184 = OpLoad %183 
                                        bool %185 = OpFOrdGreaterThanEqual %182 %184 
                                                      OpStore %181 %185 
                                        bool %188 = OpLoad %181 
                                                      OpSelectionMerge %190 None 
                                                      OpBranchConditional %188 %189 %191 
                                             %189 = OpLabel 
                                                      OpStore %187 %44 
                                                      OpBranch %190 
                                             %191 = OpLabel 
                                                      OpStore %187 %192 
                                                      OpBranch %190 
                                             %190 = OpLabel 
                                         f32 %193 = OpLoad %187 
                                Private f32* %194 = OpAccessChain %112 %38 
                                                      OpStore %194 %193 
                                         f32 %195 = OpLoad %139 
                                         f32 %196 = OpFNegate %195 
                                Private f32* %197 = OpAccessChain %112 %38 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %112 %38 
                                                      OpStore %200 %199 
                                Uniform f32* %202 = OpAccessChain %74 %201 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %112 %38 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                         f32 %207 = OpLoad %139 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %139 %208 
                                         f32 %209 = OpLoad %139 
                                         f32 %211 = OpFAdd %209 %210 
                                Private f32* %212 = OpAccessChain %30 %38 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %30 %38 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %192 
                                                      OpStore %181 %215 
                                        bool %216 = OpLoad %181 
                                         i32 %219 = OpSelect %216 %218 %217 
                                         i32 %221 = OpIMul %219 %220 
                                        bool %222 = OpINotEqual %221 %217 
                                                      OpSelectionMerge %224 None 
                                                      OpBranchConditional %222 %223 %224 
                                             %223 = OpLabel 
                                                      OpKill
                                             %224 = OpLabel 
                                         f32 %226 = OpLoad %139 
                                Uniform f32* %228 = OpAccessChain %74 %227 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %226 %230 
                                Private f32* %232 = OpAccessChain %30 %38 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %30 %38 
                                         f32 %234 = OpLoad %233 
                                        bool %235 = OpFOrdLessThan %234 %192 
                                                      OpStore %181 %235 
                                        bool %236 = OpLoad %181 
                                         i32 %237 = OpSelect %236 %218 %217 
                                         i32 %238 = OpIMul %237 %220 
                                        bool %239 = OpINotEqual %238 %217 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %241 
                                             %240 = OpLabel 
                                                      OpKill
                                             %241 = OpLabel 
                                       f32_3 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 1 1 1 
                              Uniform f32_4* %248 = OpAccessChain %74 %247 %218 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %246 %250 
                                       f32_4 %252 = OpLoad %112 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %112 %253 
                              Uniform f32_4* %254 = OpAccessChain %74 %247 %217 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %244 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %112 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %112 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %112 %264 
                              Uniform f32_4* %266 = OpAccessChain %74 %247 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpLoad %244 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %112 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %112 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %112 %276 
                                       f32_4 %277 = OpLoad %112 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                              Uniform f32_4* %280 = OpAccessChain %74 %247 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFAdd %278 %282 
                                       f32_4 %284 = OpLoad %112 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %112 %285 
                                Uniform f32* %287 = OpAccessChain %74 %218 %38 
                                         f32 %288 = OpLoad %287 
                                        bool %289 = OpFOrdEqual %288 %44 
                                                      OpStore %286 %289 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                        bool %293 = OpLoad %286 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %379 
                                             %297 = OpLabel 
                                Uniform f32* %299 = OpAccessChain %74 %218 %157 
                                         f32 %300 = OpLoad %299 
                                        bool %301 = OpFOrdEqual %300 %44 
                                                      OpStore %286 %301 
                                       f32_3 %303 = OpLoad %244 
                                       f32_3 %304 = OpVectorShuffle %303 %303 1 1 1 
                              Uniform f32_4* %305 = OpAccessChain %74 %265 %218 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %304 %307 
                                                      OpStore %302 %308 
                              Uniform f32_4* %309 = OpAccessChain %74 %265 %217 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %244 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %302 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %302 %316 
                              Uniform f32_4* %317 = OpAccessChain %74 %265 %265 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpLoad %244 
                                       f32_3 %321 = OpVectorShuffle %320 %320 2 2 2 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_3 %323 = OpLoad %302 
                                       f32_3 %324 = OpFAdd %322 %323 
                                                      OpStore %302 %324 
                                       f32_3 %325 = OpLoad %302 
                              Uniform f32_4* %326 = OpAccessChain %74 %265 %279 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                                      OpStore %302 %329 
                                        bool %332 = OpLoad %286 
                                                      OpSelectionMerge %334 None 
                                                      OpBranchConditional %332 %333 %336 
                                             %333 = OpLabel 
                                       f32_3 %335 = OpLoad %302 
                                                      OpStore %331 %335 
                                                      OpBranch %334 
                                             %336 = OpLabel 
                                       f32_3 %337 = OpLoad %244 
                                                      OpStore %331 %337 
                                                      OpBranch %334 
                                             %334 = OpLabel 
                                       f32_3 %338 = OpLoad %331 
                                                      OpStore %302 %338 
                                       f32_3 %339 = OpLoad %302 
                              Uniform f32_3* %342 = OpAccessChain %74 %340 
                                       f32_3 %343 = OpLoad %342 
                                       f32_3 %344 = OpFNegate %343 
                                       f32_3 %345 = OpFAdd %339 %344 
                                                      OpStore %302 %345 
                                       f32_3 %347 = OpLoad %302 
                              Uniform f32_3* %348 = OpAccessChain %74 %279 
                                       f32_3 %349 = OpLoad %348 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %346 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 5 6 
                                                      OpStore %346 %352 
                                Private f32* %354 = OpAccessChain %346 %157 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                                      OpStore %353 %359 
                                Uniform f32* %360 = OpAccessChain %74 %218 %163 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %361 %177 
                                         f32 %363 = OpFAdd %362 %358 
                                Private f32* %364 = OpAccessChain %302 %38 
                                                      OpStore %364 %363 
                                         f32 %365 = OpLoad %353 
                                Private f32* %366 = OpAccessChain %302 %38 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 40 %365 %367 
                                Private f32* %369 = OpAccessChain %346 %38 
                                                      OpStore %369 %368 
                  read_only Texture3DSampled %374 = OpLoad %373 
                                       f32_4 %375 = OpLoad %346 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 2 3 
                                       f32_4 %377 = OpImageSampleImplicitLod %374 %376 
                                                      OpStore %346 %377 
                                       f32_4 %378 = OpLoad %346 
                                                      OpStore %30 %378 
                                                      OpBranch %298 
                                             %379 = OpLabel 
                                Private f32* %380 = OpAccessChain %30 %38 
                                                      OpStore %380 %44 
                                Private f32* %381 = OpAccessChain %30 %157 
                                                      OpStore %381 %44 
                                Private f32* %382 = OpAccessChain %30 %163 
                                                      OpStore %382 %44 
                                Private f32* %383 = OpAccessChain %30 %140 
                                                      OpStore %383 %44 
                                                      OpBranch %298 
                                             %298 = OpLabel 
                                       f32_4 %385 = OpLoad %30 
                              Uniform f32_4* %386 = OpAccessChain %74 %217 
                                       f32_4 %387 = OpLoad %386 
                                         f32 %388 = OpDot %385 %387 
                                Private f32* %389 = OpAccessChain %384 %38 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %384 %38 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpExtInst %1 43 %391 %192 %44 
                                Private f32* %393 = OpAccessChain %384 %38 
                                                      OpStore %393 %392 
                                       f32_4 %394 = OpLoad %112 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_4 %396 = OpLoad %112 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                         f32 %398 = OpDot %395 %397 
                                Private f32* %399 = OpAccessChain %112 %38 
                                                      OpStore %399 %398 
                  read_only Texture2DSampled %401 = OpLoad %400 
                                       f32_4 %402 = OpLoad %112 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 0 
                                       f32_4 %404 = OpImageSampleImplicitLod %401 %403 
                                         f32 %405 = OpCompositeExtract %404 3 
                                Private f32* %406 = OpAccessChain %112 %38 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %384 %38 
                                         f32 %408 = OpLoad %407 
                                Private f32* %409 = OpAccessChain %112 %38 
                                         f32 %410 = OpLoad %409 
                                         f32 %411 = OpFMul %408 %410 
                                Private f32* %412 = OpAccessChain %112 %38 
                                                      OpStore %412 %411 
                                       f32_3 %413 = OpLoad %68 
                              Uniform f32_4* %415 = OpAccessChain %74 %414 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_3 %418 = OpFMul %413 %417 
                                                      OpStore %384 %418 
                                       f32_4 %421 = OpLoad %112 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 0 0 
                                       f32_3 %423 = OpLoad %384 
                                       f32_3 %424 = OpFMul %422 %423 
                                       f32_4 %425 = OpLoad %420 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %420 %426 
                                         f32 %427 = OpLoad %139 
                                 Output f32* %429 = OpAccessChain %420 %140 
                                                      OpStore %429 %427 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat9 = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat1.x = u_xlat9 + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat9 + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                 Output f32* %198 = OpAccessChain %120 %60 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %120 %60 %48 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 377
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %264 %366 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 ArrayStride 78 
                                                      OpMemberDecorate %79 0 RelaxedPrecision 
                                                      OpMemberDecorate %79 0 Offset 79 
                                                      OpMemberDecorate %79 1 Offset 79 
                                                      OpMemberDecorate %79 2 Offset 79 
                                                      OpMemberDecorate %79 3 Offset 79 
                                                      OpMemberDecorate %79 4 Offset 79 
                                                      OpMemberDecorate %79 5 RelaxedPrecision 
                                                      OpMemberDecorate %79 5 Offset 79 
                                                      OpMemberDecorate %79 6 Offset 79 
                                                      OpMemberDecorate %79 7 Offset 79 
                                                      OpMemberDecorate %79 8 Offset 79 
                                                      OpMemberDecorate %79 9 Offset 79 
                                                      OpMemberDecorate %79 10 Offset 79 
                                                      OpMemberDecorate %79 11 Offset 79 
                                                      OpMemberDecorate %79 12 RelaxedPrecision 
                                                      OpMemberDecorate %79 12 Offset 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %257 SpecId 257 
                                                      OpDecorate %264 Location 264 
                                                      OpDecorate %342 DescriptorSet 342 
                                                      OpDecorate %342 Binding 342 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %366 Location 366 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                        f32_3 %36 = OpConstantComposite %33 %34 %35 
                                          f32 %40 = OpConstant 3.674022E-40 
                               Private f32_3* %42 = OpVariable Private 
                                              %46 = OpTypeInt 32 0 
                                          u32 %47 = OpConstant 0 
                                          f32 %51 = OpConstant 3.674022E-40 
                                          f32 %60 = OpConstant 3.674022E-40 
                               Private f32_4* %67 = OpVariable Private 
                               Private f32_3* %76 = OpVariable Private 
                                          u32 %77 = OpConstant 4 
                                              %78 = OpTypeArray %7 %77 
                                              %79 = OpTypeStruct %7 %7 %78 %21 %21 %7 %7 %6 %6 %6 %6 %7 %6 
                                              %80 = OpTypePointer Uniform %79 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32; f32; f32; f32; f32_4; f32;}* %81 = OpVariable Uniform 
                                              %82 = OpTypeInt 32 1 
                                          i32 %83 = OpConstant 7 
                                              %84 = OpTypePointer Uniform %6 
                                         f32 %103 = OpConstant 3.674022E-40 
                              Private f32_3* %112 = OpVariable Private 
                                         i32 %114 = OpConstant 8 
                              Private f32_4* %119 = OpVariable Private 
                                         i32 %120 = OpConstant 6 
                                             %121 = OpTypePointer Uniform %7 
                                Private f32* %146 = OpVariable Private 
                                         u32 %147 = OpConstant 3 
                                         i32 %150 = OpConstant 9 
                                         i32 %157 = OpConstant 11 
                                         u32 %164 = OpConstant 1 
                                         u32 %170 = OpConstant 2 
                                         f32 %184 = OpConstant 3.674022E-40 
                                             %187 = OpTypeBool 
                                             %188 = OpTypePointer Private %187 
                               Private bool* %189 = OpVariable Private 
                                             %195 = OpTypePointer Function %6 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         i32 %210 = OpConstant 10 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         i32 %224 = OpConstant 0 
                                         i32 %225 = OpConstant 1 
                                         i32 %227 = OpConstant -1 
                                         i32 %234 = OpConstant 12 
                                        bool %251 = OpConstantFalse 
                                        bool %257 = OpSpecConstantFalse 
                                             %263 = OpTypePointer Input %21 
                                Input f32_3* %264 = OpVariable Input 
                                         i32 %267 = OpConstant 2 
                                         i32 %289 = OpConstant 3 
                                             %294 = OpTypePointer Function %21 
                                         i32 %307 = OpConstant 4 
                                             %308 = OpTypePointer Uniform %21 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                Private f32* %329 = OpVariable Private 
                                             %339 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %340 = OpTypeSampledImage %339 
                                             %341 = OpTypePointer UniformConstant %340 
 UniformConstant read_only Texture3DSampled* %342 = OpVariable UniformConstant 
                                         i32 %360 = OpConstant 5 
                                             %365 = OpTypePointer Output %7 
                               Output f32_4* %366 = OpVariable Output 
                                             %374 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %196 = OpVariable Function 
                             Function f32_3* %295 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %32 = OpLoad %23 
                                          f32 %37 = OpDot %32 %36 
                                                      OpStore %31 %37 
                                          f32 %38 = OpLoad %31 
                                          f32 %39 = OpFNegate %38 
                                          f32 %41 = OpFAdd %39 %40 
                                                      OpStore %31 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                          f32 %45 = OpDot %44 %36 
                                 Private f32* %48 = OpAccessChain %42 %47 
                                                      OpStore %48 %45 
                                 Private f32* %49 = OpAccessChain %42 %47 
                                          f32 %50 = OpLoad %49 
                                          f32 %52 = OpFAdd %50 %51 
                                 Private f32* %53 = OpAccessChain %42 %47 
                                                      OpStore %53 %52 
                                 Private f32* %54 = OpAccessChain %42 %47 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpExtInst %1 30 %55 
                                 Private f32* %57 = OpAccessChain %42 %47 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %42 %47 
                                          f32 %59 = OpLoad %58 
                                          f32 %61 = OpFMul %59 %60 
                                 Private f32* %62 = OpAccessChain %42 %47 
                                                      OpStore %62 %61 
                                 Private f32* %63 = OpAccessChain %42 %47 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpExtInst %1 29 %64 
                                 Private f32* %66 = OpAccessChain %42 %47 
                                                      OpStore %66 %65 
                                        f32_4 %68 = OpLoad %9 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32_3 %70 = OpFNegate %69 
                                        f32_3 %71 = OpLoad %42 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 0 0 
                                        f32_3 %73 = OpFAdd %70 %72 
                                        f32_4 %74 = OpLoad %67 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %67 %75 
                                 Uniform f32* %85 = OpAccessChain %81 %83 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %87 = OpAccessChain %81 %83 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %89 = OpAccessChain %81 %83 
                                          f32 %90 = OpLoad %89 
                                        f32_3 %91 = OpCompositeConstruct %86 %88 %90 
                                          f32 %92 = OpCompositeExtract %91 0 
                                          f32 %93 = OpCompositeExtract %91 1 
                                          f32 %94 = OpCompositeExtract %91 2 
                                        f32_3 %95 = OpCompositeConstruct %92 %93 %94 
                                        f32_4 %96 = OpLoad %67 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFAdd %98 %100 
                                                      OpStore %76 %101 
                                         f32 %102 = OpLoad %31 
                                         f32 %104 = OpFMul %102 %103 
                                Private f32* %105 = OpAccessChain %67 %47 
                                                      OpStore %105 %104 
                                Private f32* %106 = OpAccessChain %67 %47 
                                         f32 %107 = OpLoad %106 
                                Private f32* %108 = OpAccessChain %67 %47 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFMul %107 %109 
                                Private f32* %111 = OpAccessChain %67 %47 
                                                      OpStore %111 %110 
                                         f32 %113 = OpLoad %31 
                                Uniform f32* %115 = OpAccessChain %81 %114 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFMul %113 %116 
                                Private f32* %118 = OpAccessChain %112 %47 
                                                      OpStore %118 %117 
                              Uniform f32_4* %122 = OpAccessChain %81 %120 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %67 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_3 %128 = OpLoad %76 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %119 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 5 6 
                                                      OpStore %119 %132 
                                       f32_3 %133 = OpLoad %112 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_4 %135 = OpLoad %119 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 2 3 
                                       f32_3 %137 = OpFMul %134 %136 
                                       f32_3 %138 = OpLoad %76 
                                       f32_3 %139 = OpFAdd %137 %138 
                                       f32_4 %140 = OpLoad %119 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %119 %141 
                                       f32_3 %142 = OpLoad %76 
                                       f32_4 %143 = OpLoad %119 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpExtInst %1 40 %142 %144 
                                                      OpStore %76 %145 
                                Private f32* %148 = OpAccessChain %9 %147 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %81 %150 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpExtInst %1 40 %149 %152 
                                                      OpStore %146 %153 
                                       f32_4 %154 = OpLoad %16 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                       f32_2 %156 = OpFNegate %155 
                              Uniform f32_4* %158 = OpAccessChain %81 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %119 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 2 3 
                                                      OpStore %119 %163 
                                Private f32* %165 = OpAccessChain %119 %164 
                                         f32 %166 = OpLoad %165 
                                Uniform f32* %167 = OpAccessChain %81 %157 %147 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFDiv %166 %168 
                                Private f32* %171 = OpAccessChain %119 %170 
                                                      OpStore %171 %169 
                                       f32_4 %172 = OpLoad %119 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 2 
                                       f32_4 %174 = OpLoad %119 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 2 
                                         f32 %176 = OpDot %173 %175 
                                Private f32* %177 = OpAccessChain %119 %47 
                                                      OpStore %177 %176 
                                Private f32* %178 = OpAccessChain %119 %47 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpExtInst %1 31 %179 
                                Private f32* %181 = OpAccessChain %119 %47 
                                                      OpStore %181 %180 
                                Uniform f32* %182 = OpAccessChain %81 %157 %170 
                                         f32 %183 = OpLoad %182 
                                         f32 %185 = OpFMul %183 %184 
                                Private f32* %186 = OpAccessChain %112 %47 
                                                      OpStore %186 %185 
                                Private f32* %190 = OpAccessChain %112 %47 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %119 %47 
                                         f32 %193 = OpLoad %192 
                                        bool %194 = OpFOrdGreaterThanEqual %191 %193 
                                                      OpStore %189 %194 
                                        bool %197 = OpLoad %189 
                                                      OpSelectionMerge %199 None 
                                                      OpBranchConditional %197 %198 %200 
                                             %198 = OpLabel 
                                                      OpStore %196 %40 
                                                      OpBranch %199 
                                             %200 = OpLabel 
                                                      OpStore %196 %201 
                                                      OpBranch %199 
                                             %199 = OpLabel 
                                         f32 %202 = OpLoad %196 
                                Private f32* %203 = OpAccessChain %119 %47 
                                                      OpStore %203 %202 
                                         f32 %204 = OpLoad %146 
                                         f32 %205 = OpFNegate %204 
                                Private f32* %206 = OpAccessChain %119 %47 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                Private f32* %209 = OpAccessChain %119 %47 
                                                      OpStore %209 %208 
                                Uniform f32* %211 = OpAccessChain %81 %210 
                                         f32 %212 = OpLoad %211 
                                Private f32* %213 = OpAccessChain %119 %47 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                         f32 %216 = OpLoad %146 
                                         f32 %217 = OpFAdd %215 %216 
                                                      OpStore %146 %217 
                                         f32 %218 = OpLoad %146 
                                         f32 %220 = OpFAdd %218 %219 
                                                      OpStore %31 %220 
                                         f32 %221 = OpLoad %31 
                                        bool %222 = OpFOrdLessThan %221 %201 
                                                      OpStore %189 %222 
                                        bool %223 = OpLoad %189 
                                         i32 %226 = OpSelect %223 %225 %224 
                                         i32 %228 = OpIMul %226 %227 
                                        bool %229 = OpINotEqual %228 %224 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %231 
                                             %230 = OpLabel 
                                                      OpKill
                                             %231 = OpLabel 
                                         f32 %233 = OpLoad %146 
                                Uniform f32* %235 = OpAccessChain %81 %234 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFNegate %236 
                                         f32 %238 = OpFAdd %233 %237 
                                                      OpStore %31 %238 
                                         f32 %239 = OpLoad %31 
                                        bool %240 = OpFOrdLessThan %239 %201 
                                                      OpStore %189 %240 
                                        bool %241 = OpLoad %189 
                                         i32 %242 = OpSelect %241 %225 %224 
                                         i32 %243 = OpIMul %242 %227 
                                        bool %244 = OpINotEqual %243 %224 
                                                      OpSelectionMerge %246 None 
                                                      OpBranchConditional %244 %245 %246 
                                             %245 = OpLabel 
                                                      OpKill
                                             %246 = OpLabel 
                                Uniform f32* %248 = OpAccessChain %81 %225 %47 
                                         f32 %249 = OpLoad %248 
                                        bool %250 = OpFOrdEqual %249 %40 
                                                      OpStore %189 %250 
                                                      OpSelectionMerge %253 None 
                                                      OpBranchConditional %251 %252 %253 
                                             %252 = OpLabel 
                                        bool %254 = OpLoad %189 
                                                      OpSelectionMerge %256 None 
                                                      OpBranchConditional %254 %255 %256 
                                             %255 = OpLabel 
                                                      OpBranch %256 
                                             %256 = OpLabel 
                                                      OpBranch %253 
                                             %253 = OpLabel 
                                                      OpSelectionMerge %259 None 
                                                      OpBranchConditional %257 %258 %348 
                                             %258 = OpLabel 
                                Uniform f32* %260 = OpAccessChain %81 %225 %164 
                                         f32 %261 = OpLoad %260 
                                        bool %262 = OpFOrdEqual %261 %40 
                                                      OpStore %189 %262 
                                       f32_3 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 1 1 1 
                              Uniform f32_4* %268 = OpAccessChain %81 %267 %225 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFMul %266 %270 
                                                      OpStore %112 %271 
                              Uniform f32_4* %272 = OpAccessChain %81 %267 %224 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpLoad %264 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %112 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %112 %279 
                              Uniform f32_4* %280 = OpAccessChain %81 %267 %267 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpLoad %264 
                                       f32_3 %284 = OpVectorShuffle %283 %283 2 2 2 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_3 %286 = OpLoad %112 
                                       f32_3 %287 = OpFAdd %285 %286 
                                                      OpStore %112 %287 
                                       f32_3 %288 = OpLoad %112 
                              Uniform f32_4* %290 = OpAccessChain %81 %267 %289 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFAdd %288 %292 
                                                      OpStore %112 %293 
                                        bool %296 = OpLoad %189 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %300 
                                             %297 = OpLabel 
                                       f32_3 %299 = OpLoad %112 
                                                      OpStore %295 %299 
                                                      OpBranch %298 
                                             %300 = OpLabel 
                                       f32_3 %301 = OpLoad %264 
                                                      OpStore %295 %301 
                                                      OpBranch %298 
                                             %298 = OpLabel 
                                       f32_3 %302 = OpLoad %295 
                                       f32_4 %303 = OpLoad %119 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %119 %304 
                                       f32_4 %305 = OpLoad %119 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_3* %309 = OpAccessChain %81 %307 
                                       f32_3 %310 = OpLoad %309 
                                       f32_3 %311 = OpFNegate %310 
                                       f32_3 %312 = OpFAdd %306 %311 
                                       f32_4 %313 = OpLoad %119 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %119 %314 
                                       f32_4 %315 = OpLoad %119 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                              Uniform f32_3* %317 = OpAccessChain %81 %289 
                                       f32_3 %318 = OpLoad %317 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_4 %320 = OpLoad %119 
                                       f32_4 %321 = OpVectorShuffle %320 %319 0 4 5 6 
                                                      OpStore %119 %321 
                                Private f32* %322 = OpAccessChain %119 %164 
                                         f32 %323 = OpLoad %322 
                                         f32 %325 = OpFMul %323 %324 
                                         f32 %327 = OpFAdd %325 %326 
                                Private f32* %328 = OpAccessChain %112 %47 
                                                      OpStore %328 %327 
                                Uniform f32* %330 = OpAccessChain %81 %225 %170 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFMul %331 %184 
                                         f32 %333 = OpFAdd %332 %326 
                                                      OpStore %329 %333 
                                Private f32* %334 = OpAccessChain %112 %47 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpLoad %329 
                                         f32 %337 = OpExtInst %1 40 %335 %336 
                                Private f32* %338 = OpAccessChain %119 %47 
                                                      OpStore %338 %337 
                  read_only Texture3DSampled %343 = OpLoad %342 
                                       f32_4 %344 = OpLoad %119 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 2 3 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                                      OpStore %119 %346 
                                       f32_4 %347 = OpLoad %119 
                                                      OpStore %67 %347 
                                                      OpBranch %259 
                                             %348 = OpLabel 
                                Private f32* %349 = OpAccessChain %67 %47 
                                                      OpStore %349 %40 
                                Private f32* %350 = OpAccessChain %67 %164 
                                                      OpStore %350 %40 
                                Private f32* %351 = OpAccessChain %67 %170 
                                                      OpStore %351 %40 
                                Private f32* %352 = OpAccessChain %67 %147 
                                                      OpStore %352 %40 
                                                      OpBranch %259 
                                             %259 = OpLabel 
                                       f32_4 %353 = OpLoad %67 
                              Uniform f32_4* %354 = OpAccessChain %81 %224 
                                       f32_4 %355 = OpLoad %354 
                                         f32 %356 = OpDot %353 %355 
                                                      OpStore %31 %356 
                                         f32 %357 = OpLoad %31 
                                         f32 %358 = OpExtInst %1 43 %357 %201 %40 
                                                      OpStore %31 %358 
                                       f32_3 %359 = OpLoad %76 
                              Uniform f32_4* %361 = OpAccessChain %81 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFMul %359 %363 
                                                      OpStore %42 %364 
                                         f32 %367 = OpLoad %31 
                                       f32_3 %368 = OpCompositeConstruct %367 %367 %367 
                                       f32_3 %369 = OpLoad %42 
                                       f32_3 %370 = OpFMul %368 %369 
                                       f32_4 %371 = OpLoad %366 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %366 %372 
                                         f32 %373 = OpLoad %146 
                                 Output f32* %375 = OpAccessChain %366 %147 
                                                      OpStore %375 %373 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat12 = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat1.x = u_xlat12 + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat12 + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                 Output f32* %198 = OpAccessChain %120 %60 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %120 %60 %48 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 455
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %244 %444 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 RelaxedPrecision 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 RelaxedPrecision 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 RelaxedPrecision 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %281 SpecId 281 
                                                      OpDecorate %360 DescriptorSet 360 
                                                      OpDecorate %360 Binding 360 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %403 DescriptorSet 403 
                                                      OpDecorate %403 Binding 403 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %444 Location 444 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %7 %7 %70 %21 %21 %7 %71 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 8 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                                Private f32* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 9 
                              Private f32_4* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 7 
                                             %114 = OpTypePointer Uniform %7 
                                Private f32* %139 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 10 
                                         i32 %150 = OpConstant 12 
                                         u32 %157 = OpConstant 1 
                                         u32 %163 = OpConstant 2 
                                         f32 %177 = OpConstant 3.674022E-40 
                                             %179 = OpTypeBool 
                                             %180 = OpTypePointer Private %179 
                               Private bool* %181 = OpVariable Private 
                                             %186 = OpTypePointer Function %6 
                                         f32 %192 = OpConstant 3.674022E-40 
                                         i32 %201 = OpConstant 11 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %217 = OpConstant 0 
                                         i32 %218 = OpConstant 1 
                                         i32 %220 = OpConstant -1 
                                         i32 %227 = OpConstant 13 
                                             %243 = OpTypePointer Input %21 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %247 = OpConstant 6 
                                         i32 %258 = OpConstant 2 
                                         i32 %267 = OpConstant 3 
                               Private bool* %271 = OpVariable Private 
                                        bool %275 = OpConstantFalse 
                                        bool %281 = OpSpecConstantFalse 
                              Private f32_3* %287 = OpVariable Private 
                              Private f32_3* %315 = OpVariable Private 
                                             %316 = OpTypePointer Function %21 
                                         i32 %326 = OpConstant 4 
                                             %327 = OpTypePointer Uniform %21 
                              Private f32_4* %332 = OpVariable Private 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %343 = OpConstant 3.674022E-40 
                                             %357 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %358 = OpTypeSampledImage %357 
                                             %359 = OpTypePointer UniformConstant %358 
 UniformConstant read_only Texture3DSampled* %360 = OpVariable UniformConstant 
                                Private f32* %371 = OpVariable Private 
                              Private f32_3* %381 = OpVariable Private 
                                       f32_2 %398 = OpConstantComposite %177 %177 
                                Private f32* %402 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %403 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %420 = OpVariable UniformConstant 
                                         i32 %438 = OpConstant 5 
                                             %443 = OpTypePointer Output %7 
                               Output f32_4* %444 = OpVariable Output 
                                             %452 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %187 = OpVariable Function 
                             Function f32_3* %317 = OpVariable Function 
                               Function f32* %382 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %115 = OpAccessChain %74 %113 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad %61 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 0 0 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %68 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %112 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 1 5 6 
                                                      OpStore %112 %125 
                                         f32 %126 = OpLoad %105 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %112 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 2 3 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_3 %131 = OpLoad %68 
                                       f32_3 %132 = OpFAdd %130 %131 
                                       f32_4 %133 = OpLoad %112 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %68 
                                       f32_4 %136 = OpLoad %112 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpExtInst %1 40 %135 %137 
                                                      OpStore %68 %138 
                                Private f32* %141 = OpAccessChain %9 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %74 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 40 %142 %145 
                                                      OpStore %139 %146 
                                       f32_4 %147 = OpLoad %16 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFNegate %148 
                              Uniform f32_4* %151 = OpAccessChain %74 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %112 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 3 
                                                      OpStore %112 %156 
                                Private f32* %158 = OpAccessChain %112 %157 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %74 %150 %140 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFDiv %159 %161 
                                Private f32* %164 = OpAccessChain %112 %163 
                                                      OpStore %164 %162 
                                       f32_4 %165 = OpLoad %112 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 2 
                                       f32_4 %167 = OpLoad %112 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 2 
                                         f32 %169 = OpDot %166 %168 
                                Private f32* %170 = OpAccessChain %112 %38 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %112 %38 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 31 %172 
                                Private f32* %174 = OpAccessChain %112 %38 
                                                      OpStore %174 %173 
                                Uniform f32* %175 = OpAccessChain %74 %150 %163 
                                         f32 %176 = OpLoad %175 
                                         f32 %178 = OpFMul %176 %177 
                                                      OpStore %105 %178 
                                         f32 %182 = OpLoad %105 
                                Private f32* %183 = OpAccessChain %112 %38 
                                         f32 %184 = OpLoad %183 
                                        bool %185 = OpFOrdGreaterThanEqual %182 %184 
                                                      OpStore %181 %185 
                                        bool %188 = OpLoad %181 
                                                      OpSelectionMerge %190 None 
                                                      OpBranchConditional %188 %189 %191 
                                             %189 = OpLabel 
                                                      OpStore %187 %44 
                                                      OpBranch %190 
                                             %191 = OpLabel 
                                                      OpStore %187 %192 
                                                      OpBranch %190 
                                             %190 = OpLabel 
                                         f32 %193 = OpLoad %187 
                                Private f32* %194 = OpAccessChain %112 %38 
                                                      OpStore %194 %193 
                                         f32 %195 = OpLoad %139 
                                         f32 %196 = OpFNegate %195 
                                Private f32* %197 = OpAccessChain %112 %38 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %112 %38 
                                                      OpStore %200 %199 
                                Uniform f32* %202 = OpAccessChain %74 %201 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %112 %38 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                         f32 %207 = OpLoad %139 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %139 %208 
                                         f32 %209 = OpLoad %139 
                                         f32 %211 = OpFAdd %209 %210 
                                Private f32* %212 = OpAccessChain %30 %38 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %30 %38 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %192 
                                                      OpStore %181 %215 
                                        bool %216 = OpLoad %181 
                                         i32 %219 = OpSelect %216 %218 %217 
                                         i32 %221 = OpIMul %219 %220 
                                        bool %222 = OpINotEqual %221 %217 
                                                      OpSelectionMerge %224 None 
                                                      OpBranchConditional %222 %223 %224 
                                             %223 = OpLabel 
                                                      OpKill
                                             %224 = OpLabel 
                                         f32 %226 = OpLoad %139 
                                Uniform f32* %228 = OpAccessChain %74 %227 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %226 %230 
                                Private f32* %232 = OpAccessChain %30 %38 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %30 %38 
                                         f32 %234 = OpLoad %233 
                                        bool %235 = OpFOrdLessThan %234 %192 
                                                      OpStore %181 %235 
                                        bool %236 = OpLoad %181 
                                         i32 %237 = OpSelect %236 %218 %217 
                                         i32 %238 = OpIMul %237 %220 
                                        bool %239 = OpINotEqual %238 %217 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %241 
                                             %240 = OpLabel 
                                                      OpKill
                                             %241 = OpLabel 
                                       f32_3 %245 = OpLoad %244 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 1 1 1 
                              Uniform f32_4* %248 = OpAccessChain %74 %247 %218 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpFMul %246 %249 
                                                      OpStore %112 %250 
                              Uniform f32_4* %251 = OpAccessChain %74 %247 %217 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpLoad %244 
                                       f32_4 %254 = OpVectorShuffle %253 %253 0 0 0 0 
                                       f32_4 %255 = OpFMul %252 %254 
                                       f32_4 %256 = OpLoad %112 
                                       f32_4 %257 = OpFAdd %255 %256 
                                                      OpStore %112 %257 
                              Uniform f32_4* %259 = OpAccessChain %74 %247 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpLoad %244 
                                       f32_4 %262 = OpVectorShuffle %261 %261 2 2 2 2 
                                       f32_4 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %112 
                                       f32_4 %265 = OpFAdd %263 %264 
                                                      OpStore %112 %265 
                                       f32_4 %266 = OpLoad %112 
                              Uniform f32_4* %268 = OpAccessChain %74 %247 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpFAdd %266 %269 
                                                      OpStore %112 %270 
                                Uniform f32* %272 = OpAccessChain %74 %218 %38 
                                         f32 %273 = OpLoad %272 
                                        bool %274 = OpFOrdEqual %273 %44 
                                                      OpStore %271 %274 
                                                      OpSelectionMerge %277 None 
                                                      OpBranchConditional %275 %276 %277 
                                             %276 = OpLabel 
                                        bool %278 = OpLoad %271 
                                                      OpSelectionMerge %280 None 
                                                      OpBranchConditional %278 %279 %280 
                                             %279 = OpLabel 
                                                      OpBranch %280 
                                             %280 = OpLabel 
                                                      OpBranch %277 
                                             %277 = OpLabel 
                                                      OpSelectionMerge %283 None 
                                                      OpBranchConditional %281 %282 %366 
                                             %282 = OpLabel 
                                Uniform f32* %284 = OpAccessChain %74 %218 %157 
                                         f32 %285 = OpLoad %284 
                                        bool %286 = OpFOrdEqual %285 %44 
                                                      OpStore %271 %286 
                                       f32_3 %288 = OpLoad %244 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
                              Uniform f32_4* %290 = OpAccessChain %74 %258 %218 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFMul %289 %292 
                                                      OpStore %287 %293 
                              Uniform f32_4* %294 = OpAccessChain %74 %258 %217 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpLoad %244 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 0 0 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_3 %300 = OpLoad %287 
                                       f32_3 %301 = OpFAdd %299 %300 
                                                      OpStore %287 %301 
                              Uniform f32_4* %302 = OpAccessChain %74 %258 %258 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpLoad %244 
                                       f32_3 %306 = OpVectorShuffle %305 %305 2 2 2 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_3 %308 = OpLoad %287 
                                       f32_3 %309 = OpFAdd %307 %308 
                                                      OpStore %287 %309 
                                       f32_3 %310 = OpLoad %287 
                              Uniform f32_4* %311 = OpAccessChain %74 %258 %267 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %310 %313 
                                                      OpStore %287 %314 
                                        bool %318 = OpLoad %271 
                                                      OpSelectionMerge %320 None 
                                                      OpBranchConditional %318 %319 %322 
                                             %319 = OpLabel 
                                       f32_3 %321 = OpLoad %287 
                                                      OpStore %317 %321 
                                                      OpBranch %320 
                                             %322 = OpLabel 
                                       f32_3 %323 = OpLoad %244 
                                                      OpStore %317 %323 
                                                      OpBranch %320 
                                             %320 = OpLabel 
                                       f32_3 %324 = OpLoad %317 
                                                      OpStore %315 %324 
                                       f32_3 %325 = OpLoad %315 
                              Uniform f32_3* %328 = OpAccessChain %74 %326 
                                       f32_3 %329 = OpLoad %328 
                                       f32_3 %330 = OpFNegate %329 
                                       f32_3 %331 = OpFAdd %325 %330 
                                                      OpStore %315 %331 
                                       f32_3 %333 = OpLoad %315 
                              Uniform f32_3* %334 = OpAccessChain %74 %267 
                                       f32_3 %335 = OpLoad %334 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_4 %337 = OpLoad %332 
                                       f32_4 %338 = OpVectorShuffle %337 %336 0 4 5 6 
                                                      OpStore %332 %338 
                                Private f32* %339 = OpAccessChain %332 %157 
                                         f32 %340 = OpLoad %339 
                                         f32 %342 = OpFMul %340 %341 
                                         f32 %344 = OpFAdd %342 %343 
                                Private f32* %345 = OpAccessChain %315 %38 
                                                      OpStore %345 %344 
                                Uniform f32* %346 = OpAccessChain %74 %218 %163 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFMul %347 %177 
                                         f32 %349 = OpFAdd %348 %343 
                                Private f32* %350 = OpAccessChain %287 %38 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %287 %38 
                                         f32 %352 = OpLoad %351 
                                Private f32* %353 = OpAccessChain %315 %38 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 40 %352 %354 
                                Private f32* %356 = OpAccessChain %332 %38 
                                                      OpStore %356 %355 
                  read_only Texture3DSampled %361 = OpLoad %360 
                                       f32_4 %362 = OpLoad %332 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 2 3 
                                       f32_4 %364 = OpImageSampleImplicitLod %361 %363 
                                                      OpStore %332 %364 
                                       f32_4 %365 = OpLoad %332 
                                                      OpStore %30 %365 
                                                      OpBranch %283 
                                             %366 = OpLabel 
                                Private f32* %367 = OpAccessChain %30 %38 
                                                      OpStore %367 %44 
                                Private f32* %368 = OpAccessChain %30 %157 
                                                      OpStore %368 %44 
                                Private f32* %369 = OpAccessChain %30 %163 
                                                      OpStore %369 %44 
                                Private f32* %370 = OpAccessChain %30 %140 
                                                      OpStore %370 %44 
                                                      OpBranch %283 
                                             %283 = OpLabel 
                                       f32_4 %372 = OpLoad %30 
                              Uniform f32_4* %373 = OpAccessChain %74 %217 
                                       f32_4 %374 = OpLoad %373 
                                         f32 %375 = OpDot %372 %374 
                                                      OpStore %371 %375 
                                         f32 %376 = OpLoad %371 
                                         f32 %377 = OpExtInst %1 43 %376 %192 %44 
                                                      OpStore %371 %377 
                                Private f32* %378 = OpAccessChain %112 %163 
                                         f32 %379 = OpLoad %378 
                                        bool %380 = OpFOrdLessThan %192 %379 
                                                      OpStore %271 %380 
                                        bool %383 = OpLoad %271 
                                                      OpSelectionMerge %385 None 
                                                      OpBranchConditional %383 %384 %386 
                                             %384 = OpLabel 
                                                      OpStore %382 %44 
                                                      OpBranch %385 
                                             %386 = OpLabel 
                                                      OpStore %382 %192 
                                                      OpBranch %385 
                                             %385 = OpLabel 
                                         f32 %387 = OpLoad %382 
                                Private f32* %388 = OpAccessChain %381 %38 
                                                      OpStore %388 %387 
                                       f32_4 %389 = OpLoad %112 
                                       f32_2 %390 = OpVectorShuffle %389 %389 0 1 
                                       f32_4 %391 = OpLoad %112 
                                       f32_2 %392 = OpVectorShuffle %391 %391 3 3 
                                       f32_2 %393 = OpFDiv %390 %392 
                                       f32_3 %394 = OpLoad %315 
                                       f32_3 %395 = OpVectorShuffle %394 %393 3 4 2 
                                                      OpStore %315 %395 
                                       f32_3 %396 = OpLoad %315 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %399 = OpFAdd %397 %398 
                                       f32_3 %400 = OpLoad %315 
                                       f32_3 %401 = OpVectorShuffle %400 %399 3 4 2 
                                                      OpStore %315 %401 
                  read_only Texture2DSampled %404 = OpLoad %403 
                                       f32_3 %405 = OpLoad %315 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpImageSampleImplicitLod %404 %406 
                                         f32 %408 = OpCompositeExtract %407 3 
                                                      OpStore %402 %408 
                                         f32 %409 = OpLoad %402 
                                Private f32* %410 = OpAccessChain %381 %38 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %409 %411 
                                Private f32* %413 = OpAccessChain %381 %38 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %112 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %112 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                         f32 %418 = OpDot %415 %417 
                                Private f32* %419 = OpAccessChain %112 %38 
                                                      OpStore %419 %418 
                  read_only Texture2DSampled %421 = OpLoad %420 
                                       f32_4 %422 = OpLoad %112 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 0 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                         f32 %425 = OpCompositeExtract %424 3 
                                Private f32* %426 = OpAccessChain %112 %38 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %112 %38 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %381 %38 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFMul %428 %430 
                                Private f32* %432 = OpAccessChain %381 %38 
                                                      OpStore %432 %431 
                                         f32 %433 = OpLoad %371 
                                Private f32* %434 = OpAccessChain %381 %38 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpFMul %433 %435 
                                                      OpStore %371 %436 
                                       f32_3 %437 = OpLoad %68 
                              Uniform f32_4* %439 = OpAccessChain %74 %438 
                                       f32_4 %440 = OpLoad %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpFMul %437 %441 
                                                      OpStore %381 %442 
                                         f32 %445 = OpLoad %371 
                                       f32_3 %446 = OpCompositeConstruct %445 %445 %445 
                                       f32_3 %447 = OpLoad %381 
                                       f32_3 %448 = OpFMul %446 %447 
                                       f32_4 %449 = OpLoad %444 
                                       f32_4 %450 = OpVectorShuffle %449 %448 4 5 6 3 
                                                      OpStore %444 %450 
                                         f32 %451 = OpLoad %139 
                                 Output f32* %453 = OpAccessChain %444 %140 
                                                      OpStore %453 %451 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
vec3 u_xlat5;
vec3 u_xlat16_5;
float u_xlat6;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_5.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_5.x = u_xlat16_5.x + 0.349999994;
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * 3.5;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_5.xyz = (-u_xlat10_0.xyz) + u_xlat16_5.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_5.xyz + u_xlat10_0.xyz;
    u_xlat16_5.x = u_xlat16_1 * 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat5.xyz = _CrackBaseColor.xyz * u_xlat16_5.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat5.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat5.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat12) + u_xlat1.x;
    u_xlat12 = _CircleAmount * u_xlat1.x + u_xlat12;
    u_xlat1.x = u_xlat12 + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat12 + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                 Output f32* %198 = OpAccessChain %120 %60 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %120 %60 %48 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 444
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %244 %433 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 RelaxedPrecision 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 RelaxedPrecision 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 RelaxedPrecision 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %296 SpecId 296 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %399 DescriptorSet 399 
                                                      OpDecorate %399 Binding 399 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate %436 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %7 %7 %70 %21 %21 %7 %71 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 8 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                                Private f32* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 9 
                              Private f32_4* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 7 
                                             %114 = OpTypePointer Uniform %7 
                                Private f32* %139 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 10 
                                         i32 %150 = OpConstant 12 
                                         u32 %157 = OpConstant 1 
                                         u32 %163 = OpConstant 2 
                                         f32 %177 = OpConstant 3.674022E-40 
                                             %179 = OpTypeBool 
                                             %180 = OpTypePointer Private %179 
                               Private bool* %181 = OpVariable Private 
                                             %186 = OpTypePointer Function %6 
                                         f32 %192 = OpConstant 3.674022E-40 
                                         i32 %201 = OpConstant 11 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %217 = OpConstant 0 
                                         i32 %218 = OpConstant 1 
                                         i32 %220 = OpConstant -1 
                                         i32 %227 = OpConstant 13 
                                             %243 = OpTypePointer Input %21 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %247 = OpConstant 6 
                                         i32 %265 = OpConstant 2 
                                         i32 %279 = OpConstant 3 
                               Private bool* %286 = OpVariable Private 
                                        bool %290 = OpConstantFalse 
                                        bool %296 = OpSpecConstantFalse 
                              Private f32_3* %302 = OpVariable Private 
                                             %330 = OpTypePointer Function %21 
                                         i32 %340 = OpConstant 4 
                                             %341 = OpTypePointer Uniform %21 
                              Private f32_4* %346 = OpVariable Private 
                                Private f32* %353 = OpVariable Private 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                             %370 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %371 = OpTypeSampledImage %370 
                                             %372 = OpTypePointer UniformConstant %371 
 UniformConstant read_only Texture3DSampled* %373 = OpVariable UniformConstant 
                              Private f32_3* %384 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %399 = OpVariable UniformConstant 
                                             %405 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %406 = OpTypeSampledImage %405 
                                             %407 = OpTypePointer UniformConstant %406 
UniformConstant read_only TextureCubeSampled* %408 = OpVariable UniformConstant 
                                         i32 %427 = OpConstant 5 
                                             %432 = OpTypePointer Output %7 
                               Output f32_4* %433 = OpVariable Output 
                                             %441 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %187 = OpVariable Function 
                             Function f32_3* %331 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %115 = OpAccessChain %74 %113 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad %61 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 0 0 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %68 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %112 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 1 5 6 
                                                      OpStore %112 %125 
                                         f32 %126 = OpLoad %105 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %112 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 2 3 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_3 %131 = OpLoad %68 
                                       f32_3 %132 = OpFAdd %130 %131 
                                       f32_4 %133 = OpLoad %112 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %68 
                                       f32_4 %136 = OpLoad %112 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpExtInst %1 40 %135 %137 
                                                      OpStore %68 %138 
                                Private f32* %141 = OpAccessChain %9 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %74 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 40 %142 %145 
                                                      OpStore %139 %146 
                                       f32_4 %147 = OpLoad %16 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFNegate %148 
                              Uniform f32_4* %151 = OpAccessChain %74 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %112 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 3 
                                                      OpStore %112 %156 
                                Private f32* %158 = OpAccessChain %112 %157 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %74 %150 %140 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFDiv %159 %161 
                                Private f32* %164 = OpAccessChain %112 %163 
                                                      OpStore %164 %162 
                                       f32_4 %165 = OpLoad %112 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 2 
                                       f32_4 %167 = OpLoad %112 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 2 
                                         f32 %169 = OpDot %166 %168 
                                Private f32* %170 = OpAccessChain %112 %38 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %112 %38 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 31 %172 
                                Private f32* %174 = OpAccessChain %112 %38 
                                                      OpStore %174 %173 
                                Uniform f32* %175 = OpAccessChain %74 %150 %163 
                                         f32 %176 = OpLoad %175 
                                         f32 %178 = OpFMul %176 %177 
                                                      OpStore %105 %178 
                                         f32 %182 = OpLoad %105 
                                Private f32* %183 = OpAccessChain %112 %38 
                                         f32 %184 = OpLoad %183 
                                        bool %185 = OpFOrdGreaterThanEqual %182 %184 
                                                      OpStore %181 %185 
                                        bool %188 = OpLoad %181 
                                                      OpSelectionMerge %190 None 
                                                      OpBranchConditional %188 %189 %191 
                                             %189 = OpLabel 
                                                      OpStore %187 %44 
                                                      OpBranch %190 
                                             %191 = OpLabel 
                                                      OpStore %187 %192 
                                                      OpBranch %190 
                                             %190 = OpLabel 
                                         f32 %193 = OpLoad %187 
                                Private f32* %194 = OpAccessChain %112 %38 
                                                      OpStore %194 %193 
                                         f32 %195 = OpLoad %139 
                                         f32 %196 = OpFNegate %195 
                                Private f32* %197 = OpAccessChain %112 %38 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %112 %38 
                                                      OpStore %200 %199 
                                Uniform f32* %202 = OpAccessChain %74 %201 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %112 %38 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                         f32 %207 = OpLoad %139 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %139 %208 
                                         f32 %209 = OpLoad %139 
                                         f32 %211 = OpFAdd %209 %210 
                                Private f32* %212 = OpAccessChain %30 %38 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %30 %38 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %192 
                                                      OpStore %181 %215 
                                        bool %216 = OpLoad %181 
                                         i32 %219 = OpSelect %216 %218 %217 
                                         i32 %221 = OpIMul %219 %220 
                                        bool %222 = OpINotEqual %221 %217 
                                                      OpSelectionMerge %224 None 
                                                      OpBranchConditional %222 %223 %224 
                                             %223 = OpLabel 
                                                      OpKill
                                             %224 = OpLabel 
                                         f32 %226 = OpLoad %139 
                                Uniform f32* %228 = OpAccessChain %74 %227 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %226 %230 
                                Private f32* %232 = OpAccessChain %30 %38 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %30 %38 
                                         f32 %234 = OpLoad %233 
                                        bool %235 = OpFOrdLessThan %234 %192 
                                                      OpStore %181 %235 
                                        bool %236 = OpLoad %181 
                                         i32 %237 = OpSelect %236 %218 %217 
                                         i32 %238 = OpIMul %237 %220 
                                        bool %239 = OpINotEqual %238 %217 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %241 
                                             %240 = OpLabel 
                                                      OpKill
                                             %241 = OpLabel 
                                       f32_3 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 1 1 1 
                              Uniform f32_4* %248 = OpAccessChain %74 %247 %218 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFMul %246 %250 
                                       f32_4 %252 = OpLoad %112 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %112 %253 
                              Uniform f32_4* %254 = OpAccessChain %74 %247 %217 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpLoad %244 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %112 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %112 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %112 %264 
                              Uniform f32_4* %266 = OpAccessChain %74 %247 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpLoad %244 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %112 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %112 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %112 %276 
                                       f32_4 %277 = OpLoad %112 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                              Uniform f32_4* %280 = OpAccessChain %74 %247 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFAdd %278 %282 
                                       f32_4 %284 = OpLoad %112 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %112 %285 
                                Uniform f32* %287 = OpAccessChain %74 %218 %38 
                                         f32 %288 = OpLoad %287 
                                        bool %289 = OpFOrdEqual %288 %44 
                                                      OpStore %286 %289 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                        bool %293 = OpLoad %286 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %379 
                                             %297 = OpLabel 
                                Uniform f32* %299 = OpAccessChain %74 %218 %157 
                                         f32 %300 = OpLoad %299 
                                        bool %301 = OpFOrdEqual %300 %44 
                                                      OpStore %286 %301 
                                       f32_3 %303 = OpLoad %244 
                                       f32_3 %304 = OpVectorShuffle %303 %303 1 1 1 
                              Uniform f32_4* %305 = OpAccessChain %74 %265 %218 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %304 %307 
                                                      OpStore %302 %308 
                              Uniform f32_4* %309 = OpAccessChain %74 %265 %217 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %244 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %302 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %302 %316 
                              Uniform f32_4* %317 = OpAccessChain %74 %265 %265 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpLoad %244 
                                       f32_3 %321 = OpVectorShuffle %320 %320 2 2 2 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_3 %323 = OpLoad %302 
                                       f32_3 %324 = OpFAdd %322 %323 
                                                      OpStore %302 %324 
                                       f32_3 %325 = OpLoad %302 
                              Uniform f32_4* %326 = OpAccessChain %74 %265 %279 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                                      OpStore %302 %329 
                                        bool %332 = OpLoad %286 
                                                      OpSelectionMerge %334 None 
                                                      OpBranchConditional %332 %333 %336 
                                             %333 = OpLabel 
                                       f32_3 %335 = OpLoad %302 
                                                      OpStore %331 %335 
                                                      OpBranch %334 
                                             %336 = OpLabel 
                                       f32_3 %337 = OpLoad %244 
                                                      OpStore %331 %337 
                                                      OpBranch %334 
                                             %334 = OpLabel 
                                       f32_3 %338 = OpLoad %331 
                                                      OpStore %302 %338 
                                       f32_3 %339 = OpLoad %302 
                              Uniform f32_3* %342 = OpAccessChain %74 %340 
                                       f32_3 %343 = OpLoad %342 
                                       f32_3 %344 = OpFNegate %343 
                                       f32_3 %345 = OpFAdd %339 %344 
                                                      OpStore %302 %345 
                                       f32_3 %347 = OpLoad %302 
                              Uniform f32_3* %348 = OpAccessChain %74 %279 
                                       f32_3 %349 = OpLoad %348 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %346 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 5 6 
                                                      OpStore %346 %352 
                                Private f32* %354 = OpAccessChain %346 %157 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                                      OpStore %353 %359 
                                Uniform f32* %360 = OpAccessChain %74 %218 %163 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %361 %177 
                                         f32 %363 = OpFAdd %362 %358 
                                Private f32* %364 = OpAccessChain %302 %38 
                                                      OpStore %364 %363 
                                         f32 %365 = OpLoad %353 
                                Private f32* %366 = OpAccessChain %302 %38 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 40 %365 %367 
                                Private f32* %369 = OpAccessChain %346 %38 
                                                      OpStore %369 %368 
                  read_only Texture3DSampled %374 = OpLoad %373 
                                       f32_4 %375 = OpLoad %346 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 2 3 
                                       f32_4 %377 = OpImageSampleImplicitLod %374 %376 
                                                      OpStore %346 %377 
                                       f32_4 %378 = OpLoad %346 
                                                      OpStore %30 %378 
                                                      OpBranch %298 
                                             %379 = OpLabel 
                                Private f32* %380 = OpAccessChain %30 %38 
                                                      OpStore %380 %44 
                                Private f32* %381 = OpAccessChain %30 %157 
                                                      OpStore %381 %44 
                                Private f32* %382 = OpAccessChain %30 %163 
                                                      OpStore %382 %44 
                                Private f32* %383 = OpAccessChain %30 %140 
                                                      OpStore %383 %44 
                                                      OpBranch %298 
                                             %298 = OpLabel 
                                       f32_4 %385 = OpLoad %30 
                              Uniform f32_4* %386 = OpAccessChain %74 %217 
                                       f32_4 %387 = OpLoad %386 
                                         f32 %388 = OpDot %385 %387 
                                Private f32* %389 = OpAccessChain %384 %38 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %384 %38 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpExtInst %1 43 %391 %192 %44 
                                Private f32* %393 = OpAccessChain %384 %38 
                                                      OpStore %393 %392 
                                       f32_4 %394 = OpLoad %112 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_4 %396 = OpLoad %112 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                         f32 %398 = OpDot %395 %397 
                                                      OpStore %353 %398 
                  read_only Texture2DSampled %400 = OpLoad %399 
                                         f32 %401 = OpLoad %353 
                                       f32_2 %402 = OpCompositeConstruct %401 %401 
                                       f32_4 %403 = OpImageSampleImplicitLod %400 %402 
                                         f32 %404 = OpCompositeExtract %403 3 
                                                      OpStore %353 %404 
                read_only TextureCubeSampled %409 = OpLoad %408 
                                       f32_4 %410 = OpLoad %112 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_4 %412 = OpImageSampleImplicitLod %409 %411 
                                         f32 %413 = OpCompositeExtract %412 3 
                                Private f32* %414 = OpAccessChain %112 %38 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %112 %38 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpLoad %353 
                                         f32 %418 = OpFMul %416 %417 
                                Private f32* %419 = OpAccessChain %112 %38 
                                                      OpStore %419 %418 
                                Private f32* %420 = OpAccessChain %384 %38 
                                         f32 %421 = OpLoad %420 
                                Private f32* %422 = OpAccessChain %112 %38 
                                         f32 %423 = OpLoad %422 
                                         f32 %424 = OpFMul %421 %423 
                                Private f32* %425 = OpAccessChain %112 %38 
                                                      OpStore %425 %424 
                                       f32_3 %426 = OpLoad %68 
                              Uniform f32_4* %428 = OpAccessChain %74 %427 
                                       f32_4 %429 = OpLoad %428 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpFMul %426 %430 
                                                      OpStore %384 %431 
                                       f32_4 %434 = OpLoad %112 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 0 0 
                                       f32_3 %436 = OpLoad %384 
                                       f32_3 %437 = OpFMul %435 %436 
                                       f32_4 %438 = OpLoad %433 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %433 %439 
                                         f32 %440 = OpLoad %139 
                                 Output f32* %442 = OpAccessChain %433 %140 
                                                      OpStore %442 %440 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.x = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
vec3 u_xlat16_4;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_1 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_1 = (-u_xlat16_1) + 1.0;
    u_xlat16_4.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_4.x = u_xlat16_4.x + 0.349999994;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * 3.5;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_4.xyz + u_xlat10_0.xyz;
    u_xlat16_4.x = u_xlat16_1 * 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat1.x = u_xlat16_1 * _CrackAmount;
    u_xlat4.xyz = _CrackBaseColor.xyz * u_xlat16_4.xxx + (-u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat10_0.w, _RectangleAmount);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat1.z = u_xlat1.y / _CenterUV.w;
    u_xlat1.x = dot(u_xlat1.xz, u_xlat1.xz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat4.x = _CenterUV.z * 0.5;
    u_xlatb1 = u_xlat4.x>=u_xlat1.x;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat9 = _CircleAmount * u_xlat1.x + u_xlat9;
    u_xlat1.x = u_xlat9 + -0.100000001;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.x = u_xlat9 + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %88 %120 %130 %131 %146 %161 %189 %195 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %88 Location 88 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %195 Location 195 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 3 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                               Private f32_4* %81 = OpVariable Private 
                                              %86 = OpTypeVector %6 3 
                                              %87 = OpTypePointer Output %86 
                                Output f32_3* %88 = OpVariable Output 
                                             %117 = OpTypeArray %6 %48 
                                             %118 = OpTypeStruct %7 %6 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %7 
                               Output f32_4* %130 = OpVariable Output 
                                Input f32_4* %131 = OpVariable Input 
                                             %132 = OpTypeVector %6 2 
                                         i32 %135 = OpConstant 5 
                                Input f32_4* %146 = OpVariable Input 
                                         i32 %149 = OpConstant 6 
                                             %160 = OpTypePointer Input %86 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %179 = OpConstant 2 
                                Private f32* %181 = OpVariable Private 
                               Output f32_3* %189 = OpVariable Output 
                               Output f32_4* %195 = OpVariable Output 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %25 
                                                      OpStore %57 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %58 0 0 0 0 
                               Uniform f32_4* %63 = OpAccessChain %17 %60 %61 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %59 %64 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %17 %60 %60 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpLoad %47 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                               Uniform f32_4* %74 = OpAccessChain %17 %60 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                                        f32_4 %82 = OpLoad %9 
                               Uniform f32_4* %83 = OpAccessChain %17 %60 %30 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %82 %84 
                                                      OpStore %81 %85 
                               Uniform f32_4* %89 = OpAccessChain %17 %60 %30 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %47 
                                        f32_3 %93 = OpVectorShuffle %92 %92 3 3 3 
                                        f32_3 %94 = OpFMul %91 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                                      OpStore %88 %97 
                                        f32_4 %98 = OpLoad %81 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %17 %73 %61 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %73 %60 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %81 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %9 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %9 %109 
                              Uniform f32_4* %110 = OpAccessChain %17 %73 %73 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %81 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpFAdd %114 %115 
                                                      OpStore %9 %116 
                              Uniform f32_4* %121 = OpAccessChain %17 %73 %30 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %81 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %60 
                                                      OpStore %129 %127 
                                       f32_4 %133 = OpLoad %131 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                              Uniform f32_4* %136 = OpAccessChain %17 %135 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %134 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %135 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %130 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 3 
                                                      OpStore %130 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %17 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_4 %158 = OpLoad %130 
                                       f32_4 %159 = OpVectorShuffle %158 %157 0 1 4 5 
                                                      OpStore %130 %159 
                                       f32_3 %162 = OpLoad %161 
                              Uniform f32_4* %163 = OpAccessChain %17 %61 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %9 %25 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %161 
                              Uniform f32_4* %169 = OpAccessChain %17 %61 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %173 = OpAccessChain %9 %48 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %161 
                              Uniform f32_4* %175 = OpAccessChain %17 %61 %73 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %174 %177 
                                Private f32* %180 = OpAccessChain %9 %179 
                                                      OpStore %180 %178 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %183 %185 
                                                      OpStore %181 %186 
                                         f32 %187 = OpLoad %181 
                                         f32 %188 = OpExtInst %1 32 %187 
                                                      OpStore %181 %188 
                                         f32 %190 = OpLoad %181 
                                       f32_3 %191 = OpCompositeConstruct %190 %190 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %189 %194 
                                       f32_4 %196 = OpLoad %47 
                                                      OpStore %195 %196 
                                 Output f32* %198 = OpAccessChain %120 %60 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %120 %60 %48 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 424
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %244 %413 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %70 ArrayStride 70 
                                                      OpDecorate %71 ArrayStride 71 
                                                      OpMemberDecorate %72 0 RelaxedPrecision 
                                                      OpMemberDecorate %72 0 Offset 72 
                                                      OpMemberDecorate %72 1 Offset 72 
                                                      OpMemberDecorate %72 2 Offset 72 
                                                      OpMemberDecorate %72 3 Offset 72 
                                                      OpMemberDecorate %72 4 Offset 72 
                                                      OpMemberDecorate %72 5 RelaxedPrecision 
                                                      OpMemberDecorate %72 5 Offset 72 
                                                      OpMemberDecorate %72 6 Offset 72 
                                                      OpMemberDecorate %72 7 Offset 72 
                                                      OpMemberDecorate %72 8 Offset 72 
                                                      OpMemberDecorate %72 9 Offset 72 
                                                      OpMemberDecorate %72 10 Offset 72 
                                                      OpMemberDecorate %72 11 Offset 72 
                                                      OpMemberDecorate %72 12 Offset 72 
                                                      OpMemberDecorate %72 13 RelaxedPrecision 
                                                      OpMemberDecorate %72 13 Offset 72 
                                                      OpDecorate %72 Block 
                                                      OpDecorate %74 DescriptorSet 74 
                                                      OpDecorate %74 Binding 74 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %296 SpecId 296 
                                                      OpDecorate %372 DescriptorSet 372 
                                                      OpDecorate %372 Binding 372 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %393 DescriptorSet 393 
                                                      OpDecorate %393 Binding 393 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %413 Location 413 
                                                      OpDecorate %416 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeVector %6 3 
                                              %22 = OpTypePointer Private %21 
                               Private f32_3* %23 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %24 = OpVariable UniformConstant 
                               Private f32_4* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_3 %35 = OpConstantComposite %32 %33 %34 
                                              %37 = OpTypeInt 32 0 
                                          u32 %38 = OpConstant 0 
                                              %39 = OpTypePointer Private %6 
                                          f32 %44 = OpConstant 3.674022E-40 
                                 Private f32* %47 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %57 = OpConstant 3.674022E-40 
                               Private f32_3* %61 = OpVariable Private 
                               Private f32_3* %68 = OpVariable Private 
                                          u32 %69 = OpConstant 4 
                                              %70 = OpTypeArray %7 %69 
                                              %71 = OpTypeArray %7 %69 
                                              %72 = OpTypeStruct %7 %7 %70 %21 %21 %7 %71 %7 %6 %6 %6 %6 %7 %6 
                                              %73 = OpTypePointer Uniform %72 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4; f32;}* %74 = OpVariable Uniform 
                                              %75 = OpTypeInt 32 1 
                                          i32 %76 = OpConstant 8 
                                              %77 = OpTypePointer Uniform %6 
                                          f32 %96 = OpConstant 3.674022E-40 
                                Private f32* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 9 
                              Private f32_4* %112 = OpVariable Private 
                                         i32 %113 = OpConstant 7 
                                             %114 = OpTypePointer Uniform %7 
                                Private f32* %139 = OpVariable Private 
                                         u32 %140 = OpConstant 3 
                                         i32 %143 = OpConstant 10 
                                         i32 %150 = OpConstant 12 
                                         u32 %157 = OpConstant 1 
                                         u32 %163 = OpConstant 2 
                                         f32 %177 = OpConstant 3.674022E-40 
                                             %179 = OpTypeBool 
                                             %180 = OpTypePointer Private %179 
                               Private bool* %181 = OpVariable Private 
                                             %186 = OpTypePointer Function %6 
                                         f32 %192 = OpConstant 3.674022E-40 
                                         i32 %201 = OpConstant 11 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         i32 %217 = OpConstant 0 
                                         i32 %218 = OpConstant 1 
                                         i32 %220 = OpConstant -1 
                                         i32 %227 = OpConstant 13 
                                             %243 = OpTypePointer Input %21 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %247 = OpConstant 6 
                                         i32 %265 = OpConstant 2 
                                         i32 %279 = OpConstant 3 
                               Private bool* %286 = OpVariable Private 
                                        bool %290 = OpConstantFalse 
                                        bool %296 = OpSpecConstantFalse 
                              Private f32_3* %302 = OpVariable Private 
                                             %330 = OpTypePointer Function %21 
                                         i32 %340 = OpConstant 4 
                                             %341 = OpTypePointer Uniform %21 
                              Private f32_4* %346 = OpVariable Private 
                                Private f32* %353 = OpVariable Private 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                Private f32* %360 = OpVariable Private 
                                             %369 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %370 = OpTypeSampledImage %369 
                                             %371 = OpTypePointer UniformConstant %370 
 UniformConstant read_only Texture3DSampled* %372 = OpVariable UniformConstant 
                              Private f32_3* %383 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %393 = OpVariable UniformConstant 
                                         i32 %407 = OpConstant 5 
                                             %412 = OpTypePointer Output %7 
                               Output f32_4* %413 = OpVariable Output 
                                             %421 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %187 = OpVariable Function 
                             Function f32_3* %331 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                                      OpStore %9 %20 
                   read_only Texture2DSampled %25 = OpLoad %24 
                                        f32_4 %26 = OpLoad %16 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_4 %28 = OpImageSampleImplicitLod %25 %27 
                                        f32_3 %29 = OpVectorShuffle %28 %28 0 1 2 
                                                      OpStore %23 %29 
                                        f32_3 %31 = OpLoad %23 
                                          f32 %36 = OpDot %31 %35 
                                 Private f32* %40 = OpAccessChain %30 %38 
                                                      OpStore %40 %36 
                                 Private f32* %41 = OpAccessChain %30 %38 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                 Private f32* %46 = OpAccessChain %30 %38 
                                                      OpStore %46 %45 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                          f32 %50 = OpDot %49 %35 
                                                      OpStore %47 %50 
                                          f32 %51 = OpLoad %47 
                                          f32 %53 = OpFAdd %51 %52 
                                                      OpStore %47 %53 
                                          f32 %54 = OpLoad %47 
                                          f32 %55 = OpExtInst %1 30 %54 
                                                      OpStore %47 %55 
                                          f32 %56 = OpLoad %47 
                                          f32 %58 = OpFMul %56 %57 
                                                      OpStore %47 %58 
                                          f32 %59 = OpLoad %47 
                                          f32 %60 = OpExtInst %1 29 %59 
                                                      OpStore %47 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFNegate %63 
                                          f32 %65 = OpLoad %47 
                                        f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                        f32_3 %67 = OpFAdd %64 %66 
                                                      OpStore %61 %67 
                                 Uniform f32* %78 = OpAccessChain %74 %76 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %80 = OpAccessChain %74 %76 
                                          f32 %81 = OpLoad %80 
                                 Uniform f32* %82 = OpAccessChain %74 %76 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %79 %81 %83 
                                          f32 %85 = OpCompositeExtract %84 0 
                                          f32 %86 = OpCompositeExtract %84 1 
                                          f32 %87 = OpCompositeExtract %84 2 
                                        f32_3 %88 = OpCompositeConstruct %85 %86 %87 
                                        f32_3 %89 = OpLoad %61 
                                        f32_3 %90 = OpFMul %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %68 %93 
                                 Private f32* %94 = OpAccessChain %30 %38 
                                          f32 %95 = OpLoad %94 
                                          f32 %97 = OpFMul %95 %96 
                                 Private f32* %98 = OpAccessChain %61 %38 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %61 %38 
                                         f32 %100 = OpLoad %99 
                                Private f32* %101 = OpAccessChain %61 %38 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFMul %100 %102 
                                Private f32* %104 = OpAccessChain %61 %38 
                                                      OpStore %104 %103 
                                Private f32* %106 = OpAccessChain %30 %38 
                                         f32 %107 = OpLoad %106 
                                Uniform f32* %109 = OpAccessChain %74 %108 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %115 = OpAccessChain %74 %113 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpLoad %61 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 0 0 
                                       f32_3 %120 = OpFMul %117 %119 
                                       f32_3 %121 = OpLoad %68 
                                       f32_3 %122 = OpFNegate %121 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %112 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 1 5 6 
                                                      OpStore %112 %125 
                                         f32 %126 = OpLoad %105 
                                       f32_3 %127 = OpCompositeConstruct %126 %126 %126 
                                       f32_4 %128 = OpLoad %112 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 2 3 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_3 %131 = OpLoad %68 
                                       f32_3 %132 = OpFAdd %130 %131 
                                       f32_4 %133 = OpLoad %112 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %68 
                                       f32_4 %136 = OpLoad %112 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpExtInst %1 40 %135 %137 
                                                      OpStore %68 %138 
                                Private f32* %141 = OpAccessChain %9 %140 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %144 = OpAccessChain %74 %143 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 40 %142 %145 
                                                      OpStore %139 %146 
                                       f32_4 %147 = OpLoad %16 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFNegate %148 
                              Uniform f32_4* %151 = OpAccessChain %74 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %112 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 3 
                                                      OpStore %112 %156 
                                Private f32* %158 = OpAccessChain %112 %157 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %160 = OpAccessChain %74 %150 %140 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFDiv %159 %161 
                                Private f32* %164 = OpAccessChain %112 %163 
                                                      OpStore %164 %162 
                                       f32_4 %165 = OpLoad %112 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 2 
                                       f32_4 %167 = OpLoad %112 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 2 
                                         f32 %169 = OpDot %166 %168 
                                Private f32* %170 = OpAccessChain %112 %38 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %112 %38 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpExtInst %1 31 %172 
                                Private f32* %174 = OpAccessChain %112 %38 
                                                      OpStore %174 %173 
                                Uniform f32* %175 = OpAccessChain %74 %150 %163 
                                         f32 %176 = OpLoad %175 
                                         f32 %178 = OpFMul %176 %177 
                                                      OpStore %105 %178 
                                         f32 %182 = OpLoad %105 
                                Private f32* %183 = OpAccessChain %112 %38 
                                         f32 %184 = OpLoad %183 
                                        bool %185 = OpFOrdGreaterThanEqual %182 %184 
                                                      OpStore %181 %185 
                                        bool %188 = OpLoad %181 
                                                      OpSelectionMerge %190 None 
                                                      OpBranchConditional %188 %189 %191 
                                             %189 = OpLabel 
                                                      OpStore %187 %44 
                                                      OpBranch %190 
                                             %191 = OpLabel 
                                                      OpStore %187 %192 
                                                      OpBranch %190 
                                             %190 = OpLabel 
                                         f32 %193 = OpLoad %187 
                                Private f32* %194 = OpAccessChain %112 %38 
                                                      OpStore %194 %193 
                                         f32 %195 = OpLoad %139 
                                         f32 %196 = OpFNegate %195 
                                Private f32* %197 = OpAccessChain %112 %38 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %112 %38 
                                                      OpStore %200 %199 
                                Uniform f32* %202 = OpAccessChain %74 %201 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %112 %38 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                         f32 %207 = OpLoad %139 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %139 %208 
                                         f32 %209 = OpLoad %139 
                                         f32 %211 = OpFAdd %209 %210 
                                Private f32* %212 = OpAccessChain %30 %38 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %30 %38 
                                         f32 %214 = OpLoad %213 
                                        bool %215 = OpFOrdLessThan %214 %192 
                                                      OpStore %181 %215 
                                        bool %216 = OpLoad %181 
                                         i32 %219 = OpSelect %216 %218 %217 
                                         i32 %221 = OpIMul %219 %220 
                                        bool %222 = OpINotEqual %221 %217 
                                                      OpSelectionMerge %224 None 
                                                      OpBranchConditional %222 %223 %224 
                                             %223 = OpLabel 
                                                      OpKill
                                             %224 = OpLabel 
                                         f32 %226 = OpLoad %139 
                                Uniform f32* %228 = OpAccessChain %74 %227 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %226 %230 
                                Private f32* %232 = OpAccessChain %30 %38 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %30 %38 
                                         f32 %234 = OpLoad %233 
                                        bool %235 = OpFOrdLessThan %234 %192 
                                                      OpStore %181 %235 
                                        bool %236 = OpLoad %181 
                                         i32 %237 = OpSelect %236 %218 %217 
                                         i32 %238 = OpIMul %237 %220 
                                        bool %239 = OpINotEqual %238 %217 
                                                      OpSelectionMerge %241 None 
                                                      OpBranchConditional %239 %240 %241 
                                             %240 = OpLabel 
                                                      OpKill
                                             %241 = OpLabel 
                                       f32_3 %245 = OpLoad %244 
                                       f32_2 %246 = OpVectorShuffle %245 %245 1 1 
                              Uniform f32_4* %248 = OpAccessChain %74 %247 %218 
                                       f32_4 %249 = OpLoad %248 
                                       f32_2 %250 = OpVectorShuffle %249 %249 0 1 
                                       f32_2 %251 = OpFMul %246 %250 
                                       f32_4 %252 = OpLoad %112 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 2 3 
                                                      OpStore %112 %253 
                              Uniform f32_4* %254 = OpAccessChain %74 %247 %217 
                                       f32_4 %255 = OpLoad %254 
                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
                                       f32_3 %257 = OpLoad %244 
                                       f32_2 %258 = OpVectorShuffle %257 %257 0 0 
                                       f32_2 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %112 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_2 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %112 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %112 %264 
                              Uniform f32_4* %266 = OpAccessChain %74 %247 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_3 %269 = OpLoad %244 
                                       f32_2 %270 = OpVectorShuffle %269 %269 2 2 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %112 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %112 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %112 %276 
                                       f32_4 %277 = OpLoad %112 
                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                              Uniform f32_4* %280 = OpAccessChain %74 %247 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                       f32_2 %283 = OpFAdd %278 %282 
                                       f32_4 %284 = OpLoad %112 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 2 3 
                                                      OpStore %112 %285 
                                Uniform f32* %287 = OpAccessChain %74 %218 %38 
                                         f32 %288 = OpLoad %287 
                                        bool %289 = OpFOrdEqual %288 %44 
                                                      OpStore %286 %289 
                                                      OpSelectionMerge %292 None 
                                                      OpBranchConditional %290 %291 %292 
                                             %291 = OpLabel 
                                        bool %293 = OpLoad %286 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %295 
                                             %294 = OpLabel 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                                                      OpBranch %292 
                                             %292 = OpLabel 
                                                      OpSelectionMerge %298 None 
                                                      OpBranchConditional %296 %297 %378 
                                             %297 = OpLabel 
                                Uniform f32* %299 = OpAccessChain %74 %218 %157 
                                         f32 %300 = OpLoad %299 
                                        bool %301 = OpFOrdEqual %300 %44 
                                                      OpStore %286 %301 
                                       f32_3 %303 = OpLoad %244 
                                       f32_3 %304 = OpVectorShuffle %303 %303 1 1 1 
                              Uniform f32_4* %305 = OpAccessChain %74 %265 %218 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %304 %307 
                                                      OpStore %302 %308 
                              Uniform f32_4* %309 = OpAccessChain %74 %265 %217 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpLoad %244 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %302 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %302 %316 
                              Uniform f32_4* %317 = OpAccessChain %74 %265 %265 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpLoad %244 
                                       f32_3 %321 = OpVectorShuffle %320 %320 2 2 2 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_3 %323 = OpLoad %302 
                                       f32_3 %324 = OpFAdd %322 %323 
                                                      OpStore %302 %324 
                                       f32_3 %325 = OpLoad %302 
                              Uniform f32_4* %326 = OpAccessChain %74 %265 %279 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %325 %328 
                                                      OpStore %302 %329 
                                        bool %332 = OpLoad %286 
                                                      OpSelectionMerge %334 None 
                                                      OpBranchConditional %332 %333 %336 
                                             %333 = OpLabel 
                                       f32_3 %335 = OpLoad %302 
                                                      OpStore %331 %335 
                                                      OpBranch %334 
                                             %336 = OpLabel 
                                       f32_3 %337 = OpLoad %244 
                                                      OpStore %331 %337 
                                                      OpBranch %334 
                                             %334 = OpLabel 
                                       f32_3 %338 = OpLoad %331 
                                                      OpStore %302 %338 
                                       f32_3 %339 = OpLoad %302 
                              Uniform f32_3* %342 = OpAccessChain %74 %340 
                                       f32_3 %343 = OpLoad %342 
                                       f32_3 %344 = OpFNegate %343 
                                       f32_3 %345 = OpFAdd %339 %344 
                                                      OpStore %302 %345 
                                       f32_3 %347 = OpLoad %302 
                              Uniform f32_3* %348 = OpAccessChain %74 %279 
                                       f32_3 %349 = OpLoad %348 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %346 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 5 6 
                                                      OpStore %346 %352 
                                Private f32* %354 = OpAccessChain %346 %157 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                                      OpStore %353 %359 
                                Uniform f32* %361 = OpAccessChain %74 %218 %163 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %362 %177 
                                         f32 %364 = OpFAdd %363 %358 
                                                      OpStore %360 %364 
                                         f32 %365 = OpLoad %360 
                                         f32 %366 = OpLoad %353 
                                         f32 %367 = OpExtInst %1 40 %365 %366 
                                Private f32* %368 = OpAccessChain %346 %38 
                                                      OpStore %368 %367 
                  read_only Texture3DSampled %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %346 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 2 3 
                                       f32_4 %376 = OpImageSampleImplicitLod %373 %375 
                                                      OpStore %346 %376 
                                       f32_4 %377 = OpLoad %346 
                                                      OpStore %30 %377 
                                                      OpBranch %298 
                                             %378 = OpLabel 
                                Private f32* %379 = OpAccessChain %30 %38 
                                                      OpStore %379 %44 
                                Private f32* %380 = OpAccessChain %30 %157 
                                                      OpStore %380 %44 
                                Private f32* %381 = OpAccessChain %30 %163 
                                                      OpStore %381 %44 
                                Private f32* %382 = OpAccessChain %30 %140 
                                                      OpStore %382 %44 
                                                      OpBranch %298 
                                             %298 = OpLabel 
                                       f32_4 %384 = OpLoad %30 
                              Uniform f32_4* %385 = OpAccessChain %74 %217 
                                       f32_4 %386 = OpLoad %385 
                                         f32 %387 = OpDot %384 %386 
                                Private f32* %388 = OpAccessChain %383 %38 
                                                      OpStore %388 %387 
                                Private f32* %389 = OpAccessChain %383 %38 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpExtInst %1 43 %390 %192 %44 
                                Private f32* %392 = OpAccessChain %383 %38 
                                                      OpStore %392 %391 
                  read_only Texture2DSampled %394 = OpLoad %393 
                                       f32_4 %395 = OpLoad %112 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_4 %397 = OpImageSampleImplicitLod %394 %396 
                                         f32 %398 = OpCompositeExtract %397 3 
                                Private f32* %399 = OpAccessChain %112 %38 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %383 %38 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %112 %38 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %112 %38 
                                                      OpStore %405 %404 
                                       f32_3 %406 = OpLoad %68 
                              Uniform f32_4* %408 = OpAccessChain %74 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpFMul %406 %410 
                                                      OpStore %383 %411 
                                       f32_4 %414 = OpLoad %112 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpLoad %383 
                                       f32_3 %417 = OpFMul %415 %416 
                                       f32_4 %418 = OpLoad %413 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %413 %419 
                                         f32 %420 = OpLoad %139 
                                 Output f32* %422 = OpAccessChain %413 %140 
                                                      OpStore %422 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Stencil {
   Comp Always
   Pass Replace
   Fail Keep
   ZFail Keep
  }
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 185220
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _ReflectionYFactor;
uniform 	float _ReflectionYOffset;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _CracksTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
bool u_xlatb6;
void main()
{
    u_xlat0.x = _ReflectionYOffset + -0.0625;
    u_xlat0.x = u_xlat0.x * _ReflectionYFactor;
    u_xlat0.x = u_xlat0.x * 0.5;
    u_xlat2 = (-_ReflectionYFactor) + 1.0;
    u_xlat0.y = in_POSITION0.y * u_xlat2 + u_xlat0.x;
    u_xlatb6 = 0.0<in_POSITION0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xz = in_POSITION0.xz;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _CracksTex_ST.xy + _CracksTex_ST.zw;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _CrackBaseColor;
uniform 	float _CharAmount;
uniform 	float _CrackAmount;
uniform 	float _RectangleAmount;
uniform 	float _CircleAmount;
uniform 	vec4 _CenterUV;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _CracksTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
float u_xlat2;
float u_xlat6;
float u_xlat16_6;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + _CenterUV.xy;
    u_xlat0.z = u_xlat0.y / _CenterUV.w;
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2 = _CenterUV.z * 0.5;
    u_xlatb0 = u_xlat2>=u_xlat0.x;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = max(u_xlat10_1.w, _RectangleAmount);
    u_xlat0.x = (-u_xlat2) + u_xlat0.x;
    u_xlat0.x = _CircleAmount * u_xlat0.x + u_xlat2;
    u_xlat2 = u_xlat0.x + -0.100000001;
    u_xlat0.x = u_xlat0.x + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = u_xlat2<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_0.x = u_xlat16_0.x + 0.349999994;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * 3.5;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat16_0.xxx;
    u_xlat0.xyz = vec3(vec3(_CharAmount, _CharAmount, _CharAmount)) * u_xlat16_0.xyz + u_xlat10_1.xyz;
    u_xlat10_1 = texture(_CracksTex, vs_TEXCOORD0.zw);
    u_xlat16_6 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_1 = u_xlat16_6 * 3.0;
    u_xlat6 = u_xlat16_6 * _CrackAmount;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
    u_xlat1.xyz = _CrackBaseColor.xyz * vec3(u_xlat16_1) + (-u_xlat0.xyz);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 248
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %47 %76 %126 %202 %212 %213 %240 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %76 Location 76 
                                                      OpDecorate %126 Location 126 
                                                      OpMemberDecorate %200 0 BuiltIn 200 
                                                      OpMemberDecorate %200 1 BuiltIn 200 
                                                      OpMemberDecorate %200 2 BuiltIn 200 
                                                      OpDecorate %200 Block 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %240 Location 240 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeVector %10 4 
                                              %15 = OpTypeStruct %12 %13 %7 %7 %6 %6 %14 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; u32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 5 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %23 = OpConstant 3.674022E-40 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          i32 %30 = OpConstant 4 
                                          f32 %37 = OpConstant 3.674022E-40 
                                 Private f32* %40 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                              %46 = OpTypePointer Input %7 
                                 Input f32_4* %47 = OpVariable Input 
                                          u32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Input %6 
                                              %58 = OpTypeBool 
                                              %59 = OpTypePointer Private %58 
                                Private bool* %60 = OpVariable Private 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          u32 %62 = OpConstant 2 
                               Private f32_4* %66 = OpVariable Private 
                                              %67 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                 Input f32_4* %76 = OpVariable Input 
                                              %77 = OpTypeVector %6 2 
                                          i32 %80 = OpConstant 2 
                                              %81 = OpTypePointer Uniform %7 
                                              %96 = OpTypeVector %6 3 
                                              %97 = OpTypePointer Function %96 
                                          i32 %99 = OpConstant 6 
                                             %100 = OpTypeVector %58 4 
                                             %101 = OpTypePointer Uniform %14 
                                Input f32_4* %126 = OpVariable Input 
                                         i32 %129 = OpConstant 3 
                                         i32 %157 = OpConstant 0 
                                         i32 %158 = OpConstant 1 
                                             %199 = OpTypeArray %6 %48 
                                             %200 = OpTypeStruct %7 %6 %199 
                                             %201 = OpTypePointer Output %200 
        Output struct {f32_4; f32; f32[1];}* %202 = OpVariable Output 
                                             %210 = OpTypePointer Output %7 
                               Output f32_4* %212 = OpVariable Output 
                                Input f32_4* %213 = OpVariable Input 
                                         i32 %216 = OpConstant 7 
                                         i32 %229 = OpConstant 8 
                               Output f32_4* %240 = OpVariable Output 
                                             %242 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %68 = OpVariable Function 
                              Function f32_3* %98 = OpVariable Function 
                               Function f32* %119 = OpVariable Function 
                             Function f32_3* %140 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %24 = OpFAdd %22 %23 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %24 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %17 %30 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFMul %29 %32 
                                 Private f32* %34 = OpAccessChain %9 %25 
                                                      OpStore %34 %33 
                                 Private f32* %35 = OpAccessChain %9 %25 
                                          f32 %36 = OpLoad %35 
                                          f32 %38 = OpFMul %36 %37 
                                 Private f32* %39 = OpAccessChain %9 %25 
                                                      OpStore %39 %38 
                                 Uniform f32* %41 = OpAccessChain %17 %30 
                                          f32 %42 = OpLoad %41 
                                          f32 %43 = OpFNegate %42 
                                          f32 %45 = OpFAdd %43 %44 
                                                      OpStore %40 %45 
                                   Input f32* %50 = OpAccessChain %47 %48 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpLoad %40 
                                          f32 %53 = OpFMul %51 %52 
                                 Private f32* %54 = OpAccessChain %9 %25 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpFAdd %53 %55 
                                 Private f32* %57 = OpAccessChain %9 %48 
                                                      OpStore %57 %56 
                                   Input f32* %63 = OpAccessChain %47 %62 
                                          f32 %64 = OpLoad %63 
                                         bool %65 = OpFOrdLessThan %61 %64 
                                                      OpStore %60 %65 
                                         bool %69 = OpLoad %60 
                                                      OpSelectionMerge %71 None 
                                                      OpBranchConditional %69 %70 %73 
                                              %70 = OpLabel 
                                                      OpStore %68 %72 
                                                      OpBranch %71 
                                              %73 = OpLabel 
                                                      OpStore %68 %61 
                                                      OpBranch %71 
                                              %71 = OpLabel 
                                          f32 %74 = OpLoad %68 
                                 Private f32* %75 = OpAccessChain %66 %62 
                                                      OpStore %75 %74 
                                        f32_4 %78 = OpLoad %76 
                                        f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                               Uniform f32_4* %82 = OpAccessChain %17 %80 
                                        f32_4 %83 = OpLoad %82 
                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
                                        f32_2 %85 = OpFMul %79 %84 
                               Uniform f32_4* %86 = OpAccessChain %17 %80 
                                        f32_4 %87 = OpLoad %86 
                                        f32_2 %88 = OpVectorShuffle %87 %87 2 3 
                                        f32_2 %89 = OpFAdd %85 %88 
                                        f32_4 %90 = OpLoad %66 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 2 3 
                                                      OpStore %66 %91 
                                        f32_4 %92 = OpLoad %47 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 1 5 3 
                                                      OpStore %9 %95 
                              Uniform u32_4* %102 = OpAccessChain %17 %99 
                                       u32_4 %103 = OpLoad %102 
                                         u32 %104 = OpCompositeExtract %103 0 
                                        bool %105 = OpINotEqual %104 %25 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %110 
                                             %106 = OpLabel 
                                       f32_4 %108 = OpLoad %66 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                                      OpStore %98 %109 
                                                      OpBranch %107 
                                             %110 = OpLabel 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %98 %112 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_3 %113 = OpLoad %98 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                Private f32* %116 = OpAccessChain %9 %62 
                                         f32 %117 = OpLoad %116 
                                        bool %118 = OpFOrdLessThan %61 %117 
                                                      OpStore %60 %118 
                                        bool %120 = OpLoad %60 
                                                      OpSelectionMerge %122 None 
                                                      OpBranchConditional %120 %121 %123 
                                             %121 = OpLabel 
                                                      OpStore %119 %72 
                                                      OpBranch %122 
                                             %123 = OpLabel 
                                                      OpStore %119 %61 
                                                      OpBranch %122 
                                             %122 = OpLabel 
                                         f32 %124 = OpLoad %119 
                                Private f32* %125 = OpAccessChain %66 %62 
                                                      OpStore %125 %124 
                                       f32_4 %127 = OpLoad %126 
                                       f32_2 %128 = OpVectorShuffle %127 %127 0 1 
                              Uniform f32_4* %130 = OpAccessChain %17 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_2 %133 = OpFMul %128 %132 
                              Uniform f32_4* %134 = OpAccessChain %17 %129 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_2 %137 = OpFAdd %133 %136 
                                       f32_4 %138 = OpLoad %66 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 2 3 
                                                      OpStore %66 %139 
                              Uniform u32_4* %141 = OpAccessChain %17 %99 
                                       u32_4 %142 = OpLoad %141 
                                         u32 %143 = OpCompositeExtract %142 1 
                                        bool %144 = OpINotEqual %143 %25 
                                                      OpSelectionMerge %146 None 
                                                      OpBranchConditional %144 %145 %149 
                                             %145 = OpLabel 
                                       f32_4 %147 = OpLoad %66 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %140 %148 
                                                      OpBranch %146 
                                             %149 = OpLabel 
                                       f32_4 %150 = OpLoad %9 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                                      OpStore %140 %151 
                                                      OpBranch %146 
                                             %146 = OpLabel 
                                       f32_3 %152 = OpLoad %140 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %155 1 1 1 1 
                              Uniform f32_4* %159 = OpAccessChain %17 %157 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_4 %161 = OpFMul %156 %160 
                                                      OpStore %66 %161 
                              Uniform f32_4* %162 = OpAccessChain %17 %157 %157 
                                       f32_4 %163 = OpLoad %162 
                                       f32_4 %164 = OpLoad %9 
                                       f32_4 %165 = OpVectorShuffle %164 %164 0 0 0 0 
                                       f32_4 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %66 
                                       f32_4 %168 = OpFAdd %166 %167 
                                                      OpStore %66 %168 
                              Uniform f32_4* %169 = OpAccessChain %17 %157 %80 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 2 2 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %66 
                                       f32_4 %175 = OpFAdd %173 %174 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                              Uniform f32_4* %177 = OpAccessChain %17 %157 %129 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %180 1 1 1 1 
                              Uniform f32_4* %182 = OpAccessChain %17 %158 %158 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFMul %181 %183 
                                                      OpStore %66 %184 
                              Uniform f32_4* %185 = OpAccessChain %17 %158 %157 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %66 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %66 %191 
                              Uniform f32_4* %192 = OpAccessChain %17 %158 %80 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpVectorShuffle %194 %194 2 2 2 2 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %66 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %66 %198 
                              Uniform f32_4* %203 = OpAccessChain %17 %158 %129 
                                       f32_4 %204 = OpLoad %203 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpVectorShuffle %205 %205 3 3 3 3 
                                       f32_4 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %66 
                                       f32_4 %209 = OpFAdd %207 %208 
                               Output f32_4* %211 = OpAccessChain %202 %157 
                                                      OpStore %211 %209 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                              Uniform f32_4* %217 = OpAccessChain %17 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %220 = OpFMul %215 %219 
                              Uniform f32_4* %221 = OpAccessChain %17 %216 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 3 
                                       f32_2 %224 = OpFAdd %220 %223 
                                       f32_4 %225 = OpLoad %212 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 2 3 
                                                      OpStore %212 %226 
                                       f32_4 %227 = OpLoad %76 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                              Uniform f32_4* %230 = OpAccessChain %17 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                              Uniform f32_4* %234 = OpAccessChain %17 %229 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 2 3 
                                       f32_2 %237 = OpFAdd %233 %236 
                                       f32_4 %238 = OpLoad %212 
                                       f32_4 %239 = OpVectorShuffle %238 %237 0 1 4 5 
                                                      OpStore %212 %239 
                                       f32_4 %241 = OpLoad %47 
                                                      OpStore %240 %241 
                                 Output f32* %243 = OpAccessChain %202 %157 %48 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFNegate %244 
                                 Output f32* %246 = OpAccessChain %202 %157 %48 
                                                      OpStore %246 %245 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 300
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %286 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %80 DescriptorSet 80 
                                                      OpDecorate %80 Binding 80 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %152 RelaxedPrecision 
                                                      OpDecorate %154 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %286 Location 286 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %17 = OpTypeInt 32 0 
                                              %18 = OpTypeVector %17 4 
                                              %19 = OpTypeStruct %10 %6 %6 %6 %6 %10 %18 %6 %6 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32; f32; f32; f32; f32_4; u32_4; f32; f32; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                              %24 = OpTypePointer Uniform %10 
                                          u32 %31 = OpConstant 1 
                                              %32 = OpTypePointer Private %6 
                                          u32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 2 
                                          u32 %47 = OpConstant 0 
                                 Private f32* %53 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                              %58 = OpTypeBool 
                                              %59 = OpTypePointer Private %58 
                                Private bool* %60 = OpVariable Private 
                                              %65 = OpTypePointer Function %6 
                                          f32 %70 = OpConstant 3.674022E-40 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Private %10 
                               Private f32_4* %76 = OpVariable Private 
                                              %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %78 = OpTypeSampledImage %77 
                                              %79 = OpTypePointer UniformConstant %78 
  UniformConstant read_only Texture2DSampled* %80 = OpVariable UniformConstant 
                                          i32 %87 = OpConstant 3 
                                          i32 %97 = OpConstant 4 
                                Private f32* %106 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                Private f32* %111 = OpVariable Private 
                                         i32 %114 = OpConstant 9 
                                         i32 %122 = OpConstant 0 
                                         i32 %123 = OpConstant 1 
                                         i32 %125 = OpConstant -1 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         f32 %143 = OpConstant 3.674022E-40 
                                         f32 %144 = OpConstant 3.674022E-40 
                                       f32_3 %145 = OpConstantComposite %142 %143 %144 
                                         f32 %148 = OpConstant 3.674022E-40 
                                         f32 %153 = OpConstant 3.674022E-40 
                              Private f32_4* %157 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %183 = OpVariable UniformConstant 
                                Private f32* %197 = OpVariable Private 
                                         f32 %199 = OpConstant 3.674022E-40 
                              Private f32_3* %201 = OpVariable Private 
                                         i32 %203 = OpConstant 2 
                              Private f32_3* %211 = OpVariable Private 
                                Private f32* %232 = OpVariable Private 
                                         i32 %233 = OpConstant 7 
                                         i32 %245 = OpConstant 8 
                                             %258 = OpTypePointer Function %7 
                                         i32 %260 = OpConstant 6 
                                             %261 = OpTypeVector %58 4 
                                             %262 = OpTypePointer Uniform %18 
                                       f32_3 %271 = OpConstantComposite %72 %72 %72 
                                             %285 = OpTypePointer Output %10 
                               Output f32_4* %286 = OpVariable Output 
                                             %287 = OpTypePointer Function %10 
                                       f32_4 %295 = OpConstantComposite %72 %72 %72 %70 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                             Function f32_3* %259 = OpVariable Function 
                               Function f32* %275 = OpVariable Function 
                             Function f32_4* %288 = OpVariable Function 
                                        f32_4 %14 = OpLoad %12 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                        f32_2 %16 = OpFNegate %15 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 0 1 
                                        f32_2 %28 = OpFAdd %16 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                          f32 %34 = OpLoad %33 
                                 Uniform f32* %37 = OpAccessChain %21 %23 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFDiv %34 %38 
                                 Private f32* %41 = OpAccessChain %9 %40 
                                                      OpStore %41 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 2 
                                        f32_3 %44 = OpLoad %9 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 2 
                                          f32 %46 = OpDot %43 %45 
                                 Private f32* %48 = OpAccessChain %9 %47 
                                                      OpStore %48 %46 
                                 Private f32* %49 = OpAccessChain %9 %47 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpExtInst %1 31 %50 
                                 Private f32* %52 = OpAccessChain %9 %47 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %21 %23 %40 
                                          f32 %55 = OpLoad %54 
                                          f32 %57 = OpFMul %55 %56 
                                                      OpStore %53 %57 
                                          f32 %61 = OpLoad %53 
                                 Private f32* %62 = OpAccessChain %9 %47 
                                          f32 %63 = OpLoad %62 
                                         bool %64 = OpFOrdGreaterThanEqual %61 %63 
                                                      OpStore %60 %64 
                                         bool %67 = OpLoad %60 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                                      OpStore %66 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %66 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %66 
                                 Private f32* %74 = OpAccessChain %9 %47 
                                                      OpStore %74 %73 
                   read_only Texture2DSampled %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %12 
                                        f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                                        f32_4 %84 = OpImageSampleImplicitLod %81 %83 
                                                      OpStore %76 %84 
                                 Private f32* %85 = OpAccessChain %76 %35 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %88 = OpAccessChain %21 %87 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpExtInst %1 40 %86 %89 
                                                      OpStore %53 %90 
                                          f32 %91 = OpLoad %53 
                                          f32 %92 = OpFNegate %91 
                                 Private f32* %93 = OpAccessChain %9 %47 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %47 
                                                      OpStore %96 %95 
                                 Uniform f32* %98 = OpAccessChain %21 %97 
                                          f32 %99 = OpLoad %98 
                                Private f32* %100 = OpAccessChain %9 %47 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %99 %101 
                                         f32 %103 = OpLoad %53 
                                         f32 %104 = OpFAdd %102 %103 
                                Private f32* %105 = OpAccessChain %9 %47 
                                                      OpStore %105 %104 
                                Private f32* %107 = OpAccessChain %9 %47 
                                         f32 %108 = OpLoad %107 
                                         f32 %110 = OpFAdd %108 %109 
                                                      OpStore %106 %110 
                                Private f32* %112 = OpAccessChain %9 %47 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %115 = OpAccessChain %21 %114 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFNegate %116 
                                         f32 %118 = OpFAdd %113 %117 
                                                      OpStore %111 %118 
                                         f32 %119 = OpLoad %111 
                                        bool %120 = OpFOrdLessThan %119 %72 
                                                      OpStore %60 %120 
                                        bool %121 = OpLoad %60 
                                         i32 %124 = OpSelect %121 %123 %122 
                                         i32 %126 = OpIMul %124 %125 
                                        bool %127 = OpINotEqual %126 %122 
                                                      OpSelectionMerge %129 None 
                                                      OpBranchConditional %127 %128 %129 
                                             %128 = OpLabel 
                                                      OpKill
                                             %129 = OpLabel 
                                         f32 %131 = OpLoad %106 
                                        bool %132 = OpFOrdLessThan %131 %72 
                                                      OpStore %60 %132 
                                        bool %133 = OpLoad %60 
                                         i32 %134 = OpSelect %133 %123 %122 
                                         i32 %135 = OpIMul %134 %125 
                                        bool %136 = OpINotEqual %135 %122 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                                      OpKill
                                             %138 = OpLabel 
                                       f32_4 %140 = OpLoad %76 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %146 = OpDot %141 %145 
                                                      OpStore %106 %146 
                                         f32 %147 = OpLoad %106 
                                         f32 %149 = OpFAdd %147 %148 
                                                      OpStore %106 %149 
                                         f32 %150 = OpLoad %106 
                                         f32 %151 = OpExtInst %1 30 %150 
                                                      OpStore %106 %151 
                                         f32 %152 = OpLoad %106 
                                         f32 %154 = OpFMul %152 %153 
                                                      OpStore %106 %154 
                                         f32 %155 = OpLoad %106 
                                         f32 %156 = OpExtInst %1 29 %155 
                                                      OpStore %106 %156 
                                       f32_4 %158 = OpLoad %76 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                         f32 %161 = OpLoad %106 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %157 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %157 %165 
                                Uniform f32* %166 = OpAccessChain %21 %123 
                                         f32 %167 = OpLoad %166 
                                Uniform f32* %168 = OpAccessChain %21 %123 
                                         f32 %169 = OpLoad %168 
                                Uniform f32* %170 = OpAccessChain %21 %123 
                                         f32 %171 = OpLoad %170 
                                       f32_3 %172 = OpCompositeConstruct %167 %169 %171 
                                         f32 %173 = OpCompositeExtract %172 0 
                                         f32 %174 = OpCompositeExtract %172 1 
                                         f32 %175 = OpCompositeExtract %172 2 
                                       f32_3 %176 = OpCompositeConstruct %173 %174 %175 
                                       f32_4 %177 = OpLoad %157 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %76 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFAdd %179 %181 
                                                      OpStore %9 %182 
                  read_only Texture2DSampled %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %12 
                                       f32_2 %186 = OpVectorShuffle %185 %185 2 3 
                                       f32_4 %187 = OpImageSampleImplicitLod %184 %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_4 %189 = OpLoad %76 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 6 3 
                                                      OpStore %76 %190 
                                       f32_4 %191 = OpLoad %76 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %192 %145 
                                                      OpStore %106 %193 
                                         f32 %194 = OpLoad %106 
                                         f32 %195 = OpFNegate %194 
                                         f32 %196 = OpFAdd %195 %70 
                                                      OpStore %106 %196 
                                         f32 %198 = OpLoad %106 
                                         f32 %200 = OpFMul %198 %199 
                                                      OpStore %197 %200 
                                         f32 %202 = OpLoad %106 
                                Uniform f32* %204 = OpAccessChain %21 %203 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %202 %205 
                                Private f32* %207 = OpAccessChain %201 %47 
                                                      OpStore %207 %206 
                                         f32 %208 = OpLoad %197 
                                         f32 %209 = OpLoad %197 
                                         f32 %210 = OpFMul %208 %209 
                                                      OpStore %197 %210 
                              Uniform f32_4* %212 = OpAccessChain %21 %122 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpLoad %197 
                                       f32_3 %216 = OpCompositeConstruct %215 %215 %215 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_3 %218 = OpLoad %9 
                                       f32_3 %219 = OpFNegate %218 
                                       f32_3 %220 = OpFAdd %217 %219 
                                                      OpStore %211 %220 
                                       f32_3 %221 = OpLoad %201 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 0 0 
                                       f32_3 %223 = OpLoad %211 
                                       f32_3 %224 = OpFMul %222 %223 
                                       f32_3 %225 = OpLoad %9 
                                       f32_3 %226 = OpFAdd %224 %225 
                                                      OpStore %201 %226 
                                       f32_3 %227 = OpLoad %9 
                                       f32_3 %228 = OpLoad %201 
                                       f32_3 %229 = OpExtInst %1 40 %227 %228 
                                                      OpStore %9 %229 
                                       f32_3 %230 = OpLoad %9 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                                      OpStore %9 %231 
                                Uniform f32* %234 = OpAccessChain %21 %233 
                                         f32 %235 = OpLoad %234 
                                                      OpStore %232 %235 
                                         f32 %236 = OpLoad %232 
                                         f32 %237 = OpExtInst %1 43 %236 %72 %70 
                                                      OpStore %232 %237 
                                       f32_3 %238 = OpLoad %9 
                                         f32 %239 = OpLoad %232 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %9 %241 
                                       f32_3 %242 = OpLoad %9 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                                      OpStore %9 %243 
                                       f32_3 %244 = OpLoad %9 
                                Uniform f32* %246 = OpAccessChain %21 %245 
                                         f32 %247 = OpLoad %246 
                                Uniform f32* %248 = OpAccessChain %21 %245 
                                         f32 %249 = OpLoad %248 
                                Uniform f32* %250 = OpAccessChain %21 %245 
                                         f32 %251 = OpLoad %250 
                                       f32_3 %252 = OpCompositeConstruct %247 %249 %251 
                                         f32 %253 = OpCompositeExtract %252 0 
                                         f32 %254 = OpCompositeExtract %252 1 
                                         f32 %255 = OpCompositeExtract %252 2 
                                       f32_3 %256 = OpCompositeConstruct %253 %254 %255 
                                       f32_3 %257 = OpExtInst %1 37 %244 %256 
                                                      OpStore %9 %257 
                              Uniform u32_4* %263 = OpAccessChain %21 %260 
                                       u32_4 %264 = OpLoad %263 
                                         u32 %265 = OpCompositeExtract %264 0 
                                        bool %266 = OpINotEqual %265 %47 
                                                      OpSelectionMerge %268 None 
                                                      OpBranchConditional %266 %267 %270 
                                             %267 = OpLabel 
                                       f32_3 %269 = OpLoad %9 
                                                      OpStore %259 %269 
                                                      OpBranch %268 
                                             %270 = OpLabel 
                                                      OpStore %259 %271 
                                                      OpBranch %268 
                                             %268 = OpLabel 
                                       f32_3 %272 = OpLoad %259 
                                       f32_4 %273 = OpLoad %157 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %157 %274 
                              Uniform u32_4* %276 = OpAccessChain %21 %260 
                                       u32_4 %277 = OpLoad %276 
                                         u32 %278 = OpCompositeExtract %277 0 
                                        bool %279 = OpINotEqual %278 %47 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %282 
                                             %280 = OpLabel 
                                                      OpStore %275 %70 
                                                      OpBranch %281 
                                             %282 = OpLabel 
                                                      OpStore %275 %72 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                         f32 %283 = OpLoad %275 
                                Private f32* %284 = OpAccessChain %157 %35 
                                                      OpStore %284 %283 
                              Uniform u32_4* %289 = OpAccessChain %21 %260 
                                       u32_4 %290 = OpLoad %289 
                                         u32 %291 = OpCompositeExtract %290 1 
                                        bool %292 = OpINotEqual %291 %47 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %296 
                                             %293 = OpLabel 
                                                      OpStore %288 %295 
                                                      OpBranch %294 
                                             %296 = OpLabel 
                                       f32_4 %297 = OpLoad %157 
                                                      OpStore %288 %297 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                       f32_4 %298 = OpLoad %288 
                                                      OpStore %286 %298 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "tk2d/CutoutVertexColor"
}