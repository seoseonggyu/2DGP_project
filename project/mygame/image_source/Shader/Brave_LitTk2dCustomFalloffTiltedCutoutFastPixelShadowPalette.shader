//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/LitTk2dCustomFalloffTiltedCutoutFastPixelShadowPalette" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_PaletteTex ("Palette (RGB)", 2D) = "white" { }
_OverrideColor ("Tint Color", Color) = (1,1,1,0)
[Toggle] _Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  GpuProgramID 55313
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 %149 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                               Output f32_3* %149 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_3 %151 = OpConstantComposite %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                                      OpStore %149 %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %81 %23 %77 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 273
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %95 %96 %110 %149 %152 %155 %264 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %264 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 9 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                              %93 = OpTypeVector %6 2 
                                              %94 = OpTypePointer Output %93 
                                Output f32_2* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                          i32 %99 = OpConstant 10 
                                             %108 = OpTypeVector %6 3 
                                             %109 = OpTypePointer Input %108 
                                Input f32_3* %110 = OpVariable Input 
                                         i32 %112 = OpConstant 8 
                                         u32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Private %6 
                                         u32 %131 = OpConstant 2 
                                Private f32* %133 = OpVariable Private 
                                             %148 = OpTypePointer Output %108 
                               Output f32_3* %149 = OpVariable Output 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_4* %155 = OpVariable Output 
                                             %157 = OpTypePointer Private %108 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                               Output f32_3* %264 = OpVariable Output 
                                             %267 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %84 = OpAccessChain %21 %61 %47 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %45 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %58 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %29 
                                                      OpStore %92 %90 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %98 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %99 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                                      OpStore %95 %107 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 %29 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %111 %115 
                                Private f32* %119 = OpAccessChain %45 %117 
                                                      OpStore %119 %116 
                                       f32_3 %120 = OpLoad %110 
                              Uniform f32_4* %121 = OpAccessChain %21 %112 %24 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %120 %123 
                                Private f32* %125 = OpAccessChain %45 %79 
                                                      OpStore %125 %124 
                                       f32_3 %126 = OpLoad %110 
                              Uniform f32_4* %127 = OpAccessChain %21 %112 %37 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %132 = OpAccessChain %45 %131 
                                                      OpStore %132 %130 
                                       f32_4 %134 = OpLoad %45 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 32 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %45 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %45 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %45 %147 
                                       f32_4 %150 = OpLoad %45 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                                      OpStore %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                                      OpStore %155 %156 
                                Private f32* %159 = OpAccessChain %45 %79 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %45 %79 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %117 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %45 %117 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %45 %117 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %117 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %117 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %45 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %117 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %79 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %131 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %45 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %45 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %117 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %45 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %79 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %45 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %131 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %158 %232 
                                       f32_3 %233 = OpLoad %158 
                                       f32_3 %234 = OpExtInst %1 30 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                       f32_4 %237 = OpLoad %45 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                                       f32_4 %244 = OpLoad %45 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpExtInst %1 29 %245 
                                       f32_4 %247 = OpLoad %45 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %45 %248 
                                       f32_4 %249 = OpLoad %45 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %45 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %45 %258 
                                       f32_4 %259 = OpLoad %45 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpExtInst %1 40 %260 %231 
                                       f32_4 %262 = OpLoad %45 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %45 %263 
                                       f32_4 %265 = OpLoad %45 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                                      OpStore %264 %266 
                                 Output f32* %268 = OpAccessChain %83 %29 %79 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                 Output f32* %271 = OpAccessChain %83 %29 %79 
                                                      OpStore %271 %270 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %88 %94 %95 %109 %140 %146 %149 %151 %173 %185 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %86 0 BuiltIn 86 
                                                      OpMemberDecorate %86 1 BuiltIn 86 
                                                      OpMemberDecorate %86 2 BuiltIn 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %109 Location 109 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %185 Location 185 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %84 = OpConstant 1 
                                              %85 = OpTypeArray %6 %84 
                                              %86 = OpTypeStruct %7 %6 %85 
                                              %87 = OpTypePointer Output %86 
         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                              %92 = OpTypeVector %6 2 
                                              %93 = OpTypePointer Output %92 
                                Output f32_2* %94 = OpVariable Output 
                                 Input f32_4* %95 = OpVariable Input 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeVector %6 3 
                                             %108 = OpTypePointer Input %107 
                                Input f32_3* %109 = OpVariable Input 
                                         u32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Private %6 
                                         u32 %129 = OpConstant 2 
                                Private f32* %131 = OpVariable Private 
                                             %139 = OpTypePointer Output %107 
                               Output f32_3* %140 = OpVariable Output 
                               Output f32_3* %146 = OpVariable Output 
                               Output f32_4* %149 = OpVariable Output 
                               Output f32_3* %151 = OpVariable Output 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_3 %153 = OpConstantComposite %152 %152 %152 
                                             %156 = OpTypePointer Uniform %6 
                                         f32 %163 = OpConstant 3.674022E-40 
                                         u32 %165 = OpConstant 3 
                                       f32_2 %169 = OpConstantComposite %163 %163 
                               Output f32_4* %173 = OpVariable Output 
                               Output f32_4* %185 = OpVariable Output 
                                       f32_4 %186 = OpConstantComposite %152 %152 %152 %152 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %46 %23 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %46 %28 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %46 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %77 = OpAccessChain %21 %46 %46 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %44 
                                        f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %57 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %44 %83 
                                        f32_4 %89 = OpLoad %44 
                                Output f32_4* %91 = OpAccessChain %88 %28 
                                                      OpStore %91 %89 
                                        f32_4 %96 = OpLoad %95 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                               Uniform f32_4* %99 = OpAccessChain %21 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %21 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %94 %106 
                                       f32_3 %110 = OpLoad %109 
                              Uniform f32_4* %111 = OpAccessChain %21 %36 %28 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                         f32 %114 = OpDot %110 %113 
                                Private f32* %117 = OpAccessChain %57 %115 
                                                      OpStore %117 %114 
                                       f32_3 %118 = OpLoad %109 
                              Uniform f32_4* %119 = OpAccessChain %21 %36 %23 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %118 %121 
                                Private f32* %123 = OpAccessChain %57 %84 
                                                      OpStore %123 %122 
                                       f32_3 %124 = OpLoad %109 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %36 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %57 %129 
                                                      OpStore %130 %128 
                                       f32_4 %132 = OpLoad %57 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %57 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                                      OpStore %131 %136 
                                         f32 %137 = OpLoad %131 
                                         f32 %138 = OpExtInst %1 32 %137 
                                                      OpStore %131 %138 
                                         f32 %141 = OpLoad %131 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %57 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                                      OpStore %149 %150 
                                                      OpStore %151 %153 
                                Private f32* %154 = OpAccessChain %44 %84 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %157 = OpAccessChain %21 %28 %115 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %155 %158 
                                Private f32* %160 = OpAccessChain %9 %115 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %9 %115 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %166 = OpAccessChain %9 %165 
                                                      OpStore %166 %164 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %170 = OpFMul %168 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 1 5 3 
                                                      OpStore %9 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_4 %176 = OpLoad %173 
                                       f32_4 %177 = OpVectorShuffle %176 %175 0 1 4 5 
                                                      OpStore %173 %177 
                                       f32_4 %178 = OpLoad %9 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %173 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %173 %184 
                                                      OpStore %185 %186 
                                 Output f32* %188 = OpAccessChain %88 %28 %84 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %88 %28 %84 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 303
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %96 %97 %111 %150 %153 %156 %266 %283 %295 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %283 Location 283 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypeVector %6 2 
                                              %95 = OpTypePointer Output %94 
                                Output f32_2* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                         i32 %100 = OpConstant 11 
                                             %109 = OpTypeVector %6 3 
                                             %110 = OpTypePointer Input %109 
                                Input f32_3* %111 = OpVariable Input 
                                         i32 %113 = OpConstant 9 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                                             %149 = OpTypePointer Output %109 
                               Output f32_3* %150 = OpVariable Output 
                               Output f32_3* %153 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                             %158 = OpTypePointer Private %109 
                              Private f32_3* %159 = OpVariable Private 
                              Private f32_4* %176 = OpVariable Private 
                              Private f32_3* %182 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         i32 %189 = OpConstant 5 
                                         i32 %195 = OpConstant 6 
                                         i32 %201 = OpConstant 7 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         u32 %211 = OpConstant 3 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_3 %233 = OpConstantComposite %232 %232 %232 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_3 %242 = OpConstantComposite %241 %241 %241 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_3 %257 = OpConstantComposite %256 %256 %256 
                               Output f32_3* %266 = OpVariable Output 
                                             %271 = OpTypePointer Uniform %6 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_4* %283 = OpVariable Output 
                               Output f32_4* %295 = OpVariable Output 
                                       f32_4 %296 = OpConstantComposite %232 %232 %232 %232 
                                             %297 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %79 = OpAccessChain %21 %61 %47 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %45 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %58 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %45 %85 
                                        f32_4 %91 = OpLoad %45 
                                Output f32_4* %93 = OpAccessChain %90 %29 
                                                      OpStore %93 %91 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %99 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %100 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %96 %108 
                                       f32_3 %112 = OpLoad %111 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 %29 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %112 %116 
                                Private f32* %120 = OpAccessChain %58 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %111 
                              Uniform f32_4* %122 = OpAccessChain %21 %113 %24 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %58 %86 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %111 
                              Uniform f32_4* %128 = OpAccessChain %21 %113 %37 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %58 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %58 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %58 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %142 = OpLoad %134 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %58 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %58 %148 
                                       f32_4 %151 = OpLoad %58 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                                      OpStore %153 %155 
                                       f32_4 %157 = OpLoad %9 
                                                      OpStore %156 %157 
                                Private f32* %160 = OpAccessChain %58 %86 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %58 %86 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %159 %118 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %58 %118 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %58 %118 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %159 %118 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                         f32 %174 = OpFAdd %170 %173 
                                Private f32* %175 = OpAccessChain %159 %118 
                                                      OpStore %175 %174 
                                       f32_4 %177 = OpLoad %58 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %58 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %176 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %176 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %182 %118 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %176 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %182 %86 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %176 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %182 %132 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %21 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpLoad %159 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %182 
                                       f32_3 %209 = OpFAdd %207 %208 
                                                      OpStore %159 %209 
                                Private f32* %212 = OpAccessChain %58 %211 
                                                      OpStore %212 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %58 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %182 %118 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %58 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %182 %86 
                                                      OpStore %222 %221 
                              Uniform f32_4* %223 = OpAccessChain %21 %47 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %58 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %182 %132 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %159 
                                       f32_3 %229 = OpLoad %182 
                                       f32_3 %230 = OpFAdd %228 %229 
                                                      OpStore %159 %230 
                                       f32_3 %231 = OpLoad %159 
                                       f32_3 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %159 %234 
                                       f32_3 %235 = OpLoad %159 
                                       f32_3 %236 = OpExtInst %1 30 %235 
                                       f32_4 %237 = OpLoad %58 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %58 %238 
                                       f32_4 %239 = OpLoad %58 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %58 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %58 %245 
                                       f32_4 %246 = OpLoad %58 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpExtInst %1 29 %247 
                                       f32_4 %249 = OpLoad %58 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %58 %250 
                                       f32_4 %251 = OpLoad %58 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %258 = OpFAdd %255 %257 
                                       f32_4 %259 = OpLoad %58 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %58 %260 
                                       f32_4 %261 = OpLoad %58 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpExtInst %1 40 %262 %233 
                                       f32_4 %264 = OpLoad %58 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %58 %265 
                                       f32_4 %267 = OpLoad %58 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                                      OpStore %266 %268 
                                Private f32* %269 = OpAccessChain %45 %86 
                                         f32 %270 = OpLoad %269 
                                Uniform f32* %272 = OpAccessChain %21 %29 %118 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %45 %86 
                                                      OpStore %275 %274 
                                       f32_4 %276 = OpLoad %45 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 3 1 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %58 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 1 5 6 
                                                      OpStore %58 %282 
                                       f32_4 %284 = OpLoad %45 
                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
                                       f32_4 %286 = OpLoad %283 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %283 %287 
                                       f32_4 %288 = OpLoad %58 
                                       f32_2 %289 = OpVectorShuffle %288 %288 2 2 
                                       f32_4 %290 = OpLoad %58 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 3 
                                       f32_2 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %283 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %283 %294 
                                                      OpStore %295 %296 
                                 Output f32* %298 = OpAccessChain %90 %29 %86 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFNegate %299 
                                 Output f32* %301 = OpAccessChain %90 %29 %86 
                                                      OpStore %301 %300 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 284
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %275 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %275 Location 275 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 7 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 8 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                              Private f32_4* %165 = OpVariable Private 
                              Private f32_4* %173 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_4 %210 = OpConstantComposite %209 %209 %209 %209 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_4 %219 = OpConstantComposite %218 %218 %218 %218 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_4 %228 = OpConstantComposite %227 %227 %227 %227 
                                         i32 %235 = OpConstant 4 
                               Output f32_3* %275 = OpVariable Output 
                                             %278 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %159 1 1 1 1 
                                       f32_4 %161 = OpFNegate %160 
                              Uniform f32_4* %162 = OpAccessChain %23 %26 
                                       f32_4 %163 = OpLoad %162 
                                       f32_4 %164 = OpFAdd %161 %163 
                                                      OpStore %60 %164 
                                       f32_4 %166 = OpLoad %47 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                       f32_4 %170 = OpLoad %60 
                                       f32_4 %171 = OpLoad %60 
                                       f32_4 %172 = OpFMul %170 %171 
                                                      OpStore %60 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %31 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %173 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %180 2 2 2 2 
                                       f32_4 %182 = OpFNegate %181 
                              Uniform f32_4* %183 = OpAccessChain %23 %39 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpFAdd %182 %184 
                                                      OpStore %9 %185 
                                       f32_4 %186 = OpLoad %173 
                                       f32_4 %187 = OpLoad %47 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %165 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %165 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpLoad %47 
                                       f32_4 %194 = OpVectorShuffle %193 %193 2 2 2 2 
                                       f32_4 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %165 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %47 %197 
                                       f32_4 %198 = OpLoad %173 
                                       f32_4 %199 = OpLoad %173 
                                       f32_4 %200 = OpFMul %198 %199 
                                       f32_4 %201 = OpLoad %60 
                                       f32_4 %202 = OpFAdd %200 %201 
                                                      OpStore %60 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %60 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %211 = OpExtInst %1 40 %208 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 32 %212 
                                                      OpStore %60 %213 
                                       f32_4 %214 = OpLoad %9 
                              Uniform f32_4* %215 = OpAccessChain %23 %49 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %220 = OpFAdd %217 %219 
                                                      OpStore %9 %220 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpFDiv %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %47 
                                       f32_4 %224 = OpLoad %60 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %47 %225 
                                       f32_4 %226 = OpLoad %47 
                                       f32_4 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %47 %229 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpLoad %47 
                                       f32_4 %232 = OpFMul %230 %231 
                                                      OpStore %9 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %23 %235 %26 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %234 %238 
                                       f32_4 %240 = OpLoad %47 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %47 %241 
                              Uniform f32_4* %242 = OpAccessChain %23 %235 %31 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %9 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 0 0 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %47 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %247 %249 
                                       f32_4 %251 = OpLoad %47 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %47 %252 
                              Uniform f32_4* %253 = OpAccessChain %23 %235 %39 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 2 2 2 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %47 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFAdd %258 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %9 %263 
                              Uniform f32_4* %264 = OpAccessChain %23 %235 %49 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 3 3 3 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %9 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                                      OpStore %275 %277 
                                 Output f32* %279 = OpAccessChain %85 %31 %81 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                 Output f32* %282 = OpAccessChain %85 %31 %81 
                                                      OpStore %282 %281 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 386
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %377 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %377 Location 377 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 14 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 15 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 13 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                                             %159 = OpTypePointer Private %110 
                              Private f32_3* %160 = OpVariable Private 
                              Private f32_4* %177 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %184 = OpConstant 8 
                                         i32 %190 = OpConstant 9 
                                         i32 %196 = OpConstant 10 
                                         i32 %202 = OpConstant 11 
                                         f32 %211 = OpConstant 3.674022E-40 
                                         u32 %212 = OpConstant 3 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                              Private f32_3* %239 = OpVariable Private 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_3 %250 = OpConstantComposite %249 %249 %249 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_3 %253 = OpConstantComposite %252 %252 %252 
                              Private f32_4* %263 = OpVariable Private 
                              Private f32_4* %271 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_4 %308 = OpConstantComposite %307 %307 %307 %307 
                                       f32_4 %316 = OpConstantComposite %211 %211 %211 %211 
                                       f32_4 %324 = OpConstantComposite %236 %236 %236 %236 
                                         i32 %331 = OpConstant 4 
                               Output f32_3* %377 = OpVariable Output 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                Private f32* %161 = OpAccessChain %47 %81 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %47 %81 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                Private f32* %166 = OpAccessChain %160 %119 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %47 %119 
                                         f32 %168 = OpLoad %167 
                                Private f32* %169 = OpAccessChain %47 %119 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %168 %170 
                                Private f32* %172 = OpAccessChain %160 %119 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %171 %174 
                                Private f32* %176 = OpAccessChain %160 %119 
                                                      OpStore %176 %175 
                                       f32_4 %178 = OpLoad %47 
                                       f32_4 %179 = OpVectorShuffle %178 %178 1 2 2 0 
                                       f32_4 %180 = OpLoad %47 
                                       f32_4 %181 = OpVectorShuffle %180 %180 0 1 2 2 
                                       f32_4 %182 = OpFMul %179 %181 
                                                      OpStore %177 %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %177 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %183 %119 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %23 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %177 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %183 %81 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %23 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %177 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %183 %133 
                                                      OpStore %201 %200 
                              Uniform f32_4* %203 = OpAccessChain %23 %202 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpLoad %160 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 0 0 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %209 = OpLoad %183 
                                       f32_3 %210 = OpFAdd %208 %209 
                                                      OpStore %160 %210 
                                Private f32* %213 = OpAccessChain %47 %212 
                                                      OpStore %213 %211 
                              Uniform f32_4* %215 = OpAccessChain %23 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %47 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %183 %119 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %23 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %47 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %183 %81 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %23 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %47 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %183 %133 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %160 
                                       f32_3 %233 = OpLoad %183 
                                       f32_3 %234 = OpFAdd %232 %233 
                                                      OpStore %160 %234 
                                       f32_3 %235 = OpLoad %160 
                                       f32_3 %238 = OpExtInst %1 40 %235 %237 
                                                      OpStore %160 %238 
                                       f32_3 %240 = OpLoad %160 
                                       f32_3 %241 = OpExtInst %1 30 %240 
                                                      OpStore %239 %241 
                                       f32_3 %242 = OpLoad %239 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %239 %245 
                                       f32_3 %246 = OpLoad %239 
                                       f32_3 %247 = OpExtInst %1 29 %246 
                                                      OpStore %239 %247 
                                       f32_3 %248 = OpLoad %239 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %254 = OpFAdd %251 %253 
                                                      OpStore %239 %254 
                                       f32_3 %255 = OpLoad %239 
                                       f32_3 %256 = OpExtInst %1 40 %255 %237 
                                                      OpStore %239 %256 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 1 1 1 1 
                                       f32_4 %259 = OpFNegate %258 
                              Uniform f32_4* %260 = OpAccessChain %23 %26 
                                       f32_4 %261 = OpLoad %260 
                                       f32_4 %262 = OpFAdd %259 %261 
                                                      OpStore %60 %262 
                                       f32_4 %264 = OpLoad %47 
                                       f32_4 %265 = OpVectorShuffle %264 %264 1 1 1 1 
                                       f32_4 %266 = OpLoad %60 
                                       f32_4 %267 = OpFMul %265 %266 
                                                      OpStore %263 %267 
                                       f32_4 %268 = OpLoad %60 
                                       f32_4 %269 = OpLoad %60 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %60 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %272 0 0 0 0 
                                       f32_4 %274 = OpFNegate %273 
                              Uniform f32_4* %275 = OpAccessChain %23 %31 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFAdd %274 %276 
                                                      OpStore %271 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %278 2 2 2 2 
                                       f32_4 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %23 %39 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpFAdd %280 %282 
                                                      OpStore %9 %283 
                                       f32_4 %284 = OpLoad %271 
                                       f32_4 %285 = OpLoad %47 
                                       f32_4 %286 = OpVectorShuffle %285 %285 0 0 0 0 
                                       f32_4 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %263 
                                       f32_4 %289 = OpFAdd %287 %288 
                                                      OpStore %263 %289 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpLoad %47 
                                       f32_4 %292 = OpVectorShuffle %291 %291 2 2 2 2 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %263 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %47 %295 
                                       f32_4 %296 = OpLoad %271 
                                       f32_4 %297 = OpLoad %271 
                                       f32_4 %298 = OpFMul %296 %297 
                                       f32_4 %299 = OpLoad %60 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %60 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpLoad %9 
                                       f32_4 %303 = OpFMul %301 %302 
                                       f32_4 %304 = OpLoad %60 
                                       f32_4 %305 = OpFAdd %303 %304 
                                                      OpStore %9 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %309 = OpExtInst %1 40 %306 %308 
                                                      OpStore %9 %309 
                                       f32_4 %310 = OpLoad %9 
                                       f32_4 %311 = OpExtInst %1 32 %310 
                                                      OpStore %60 %311 
                                       f32_4 %312 = OpLoad %9 
                              Uniform f32_4* %313 = OpAccessChain %23 %49 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %9 %317 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpFDiv %316 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %47 
                                       f32_4 %321 = OpLoad %60 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %47 %322 
                                       f32_4 %323 = OpLoad %47 
                                       f32_4 %325 = OpExtInst %1 40 %323 %324 
                                                      OpStore %47 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpLoad %47 
                                       f32_4 %328 = OpFMul %326 %327 
                                                      OpStore %9 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 1 1 1 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 %26 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFMul %330 %334 
                                       f32_4 %336 = OpLoad %47 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %47 %337 
                              Uniform f32_4* %338 = OpAccessChain %23 %331 %31 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 0 0 
                                       f32_3 %343 = OpFMul %340 %342 
                                       f32_4 %344 = OpLoad %47 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %47 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %47 %348 
                              Uniform f32_4* %349 = OpAccessChain %23 %331 %39 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 2 2 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %47 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %9 %359 
                              Uniform f32_4* %360 = OpAccessChain %23 %331 %49 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 3 3 3 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %365 %367 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %9 %370 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpLoad %239 
                                       f32_3 %374 = OpFAdd %372 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                                      OpStore %377 %379 
                                 Output f32* %381 = OpAccessChain %85 %31 %81 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %85 %31 %81 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 319
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %278 %300 %312 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %278 Location 278 
                                                      OpDecorate %300 Location 300 
                                                      OpDecorate %312 Location 312 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 8 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 9 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 7 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         i32 %217 = OpConstant 4 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_4 %222 = OpConstantComposite %221 %221 %221 %221 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                         i32 %238 = OpConstant 5 
                               Output f32_3* %278 = OpVariable Output 
                                             %283 = OpTypePointer Uniform %6 
                                         f32 %290 = OpConstant 3.674022E-40 
                                         u32 %292 = OpConstant 3 
                                       f32_2 %296 = OpConstantComposite %290 %290 
                               Output f32_4* %300 = OpVariable Output 
                               Output f32_4* %312 = OpVariable Output 
                                             %313 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 1 1 1 1 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %39 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %160 %166 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpLoad %160 
                                       f32_4 %171 = OpFMul %169 %170 
                                                      OpStore %167 %171 
                                       f32_4 %172 = OpLoad %160 
                                       f32_4 %173 = OpLoad %160 
                                       f32_4 %174 = OpFMul %172 %173 
                                                      OpStore %160 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 0 0 0 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %26 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %175 %181 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFNegate %183 
                              Uniform f32_4* %185 = OpAccessChain %23 %49 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFAdd %184 %186 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %175 
                                       f32_4 %189 = OpLoad %60 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %167 
                                       f32_4 %193 = OpFAdd %191 %192 
                                                      OpStore %167 %193 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpLoad %60 
                                       f32_4 %196 = OpVectorShuffle %195 %195 2 2 2 2 
                                       f32_4 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %167 
                                       f32_4 %199 = OpFAdd %197 %198 
                                                      OpStore %60 %199 
                                       f32_4 %200 = OpLoad %175 
                                       f32_4 %201 = OpLoad %175 
                                       f32_4 %202 = OpFMul %200 %201 
                                       f32_4 %203 = OpLoad %160 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %160 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %160 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %160 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %218 = OpAccessChain %23 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFMul %216 %219 
                                       f32_4 %223 = OpFAdd %220 %222 
                                                      OpStore %9 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFDiv %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %60 
                                       f32_4 %227 = OpLoad %160 
                                       f32_4 %228 = OpFMul %226 %227 
                                                      OpStore %60 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %60 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpLoad %60 
                                       f32_4 %235 = OpFMul %233 %234 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %23 %238 %26 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %237 %241 
                                       f32_4 %243 = OpLoad %60 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %60 %244 
                              Uniform f32_4* %245 = OpAccessChain %23 %238 %31 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %60 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %60 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %60 %255 
                              Uniform f32_4* %256 = OpAccessChain %23 %238 %39 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %60 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %9 %266 
                              Uniform f32_4* %267 = OpAccessChain %23 %238 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 3 3 3 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %272 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                                      OpStore %278 %280 
                                Private f32* %281 = OpAccessChain %47 %88 
                                         f32 %282 = OpLoad %281 
                                Uniform f32* %284 = OpAccessChain %23 %31 %120 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %282 %285 
                                Private f32* %287 = OpAccessChain %9 %120 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %120 
                                         f32 %289 = OpLoad %288 
                                         f32 %291 = OpFMul %289 %290 
                                Private f32* %293 = OpAccessChain %9 %292 
                                                      OpStore %293 %291 
                                       f32_4 %294 = OpLoad %47 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 3 
                                       f32_2 %297 = OpFMul %295 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 1 5 3 
                                                      OpStore %9 %299 
                                       f32_4 %301 = OpLoad %47 
                                       f32_2 %302 = OpVectorShuffle %301 %301 2 3 
                                       f32_4 %303 = OpLoad %300 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore %300 %304 
                                       f32_4 %305 = OpLoad %9 
                                       f32_2 %306 = OpVectorShuffle %305 %305 2 2 
                                       f32_4 %307 = OpLoad %9 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 3 
                                       f32_2 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %300 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 2 3 
                                                      OpStore %300 %311 
                                                      OpStore %312 %231 
                                 Output f32* %314 = OpAccessChain %92 %31 %88 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                 Output f32* %317 = OpAccessChain %92 %31 %88 
                                                      OpStore %317 %316 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 421
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %381 %402 %414 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %381 Location 381 
                                                      OpDecorate %402 Location 402 
                                                      OpDecorate %414 Location 414 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 15 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 16 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 14 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                                             %160 = OpTypePointer Private %111 
                              Private f32_3* %161 = OpVariable Private 
                              Private f32_4* %178 = OpVariable Private 
                              Private f32_3* %184 = OpVariable Private 
                                         i32 %185 = OpConstant 9 
                                         i32 %191 = OpConstant 10 
                                         i32 %197 = OpConstant 11 
                                         i32 %203 = OpConstant 12 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         u32 %213 = OpConstant 3 
                                         i32 %215 = OpConstant 6 
                                         i32 %221 = OpConstant 7 
                                         i32 %227 = OpConstant 8 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                              Private f32_4* %259 = OpVariable Private 
                              Private f32_4* %266 = OpVariable Private 
                              Private f32_4* %274 = OpVariable Private 
                                         f32 %310 = OpConstant 3.674022E-40 
                                       f32_4 %311 = OpConstantComposite %310 %310 %310 %310 
                                         i32 %316 = OpConstant 4 
                                       f32_4 %320 = OpConstantComposite %212 %212 %212 %212 
                                       f32_4 %328 = OpConstantComposite %238 %238 %238 %238 
                                         i32 %335 = OpConstant 5 
                               Output f32_3* %381 = OpVariable Output 
                                             %386 = OpTypePointer Uniform %6 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_2 %398 = OpConstantComposite %393 %393 
                               Output f32_4* %402 = OpVariable Output 
                               Output f32_4* %414 = OpVariable Output 
                                             %415 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                Private f32* %162 = OpAccessChain %60 %88 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %60 %88 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %161 %120 
                                                      OpStore %167 %166 
                                Private f32* %168 = OpAccessChain %60 %120 
                                         f32 %169 = OpLoad %168 
                                Private f32* %170 = OpAccessChain %60 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                Private f32* %173 = OpAccessChain %161 %120 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFNegate %174 
                                         f32 %176 = OpFAdd %172 %175 
                                Private f32* %177 = OpAccessChain %161 %120 
                                                      OpStore %177 %176 
                                       f32_4 %179 = OpLoad %60 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 2 2 0 
                                       f32_4 %181 = OpLoad %60 
                                       f32_4 %182 = OpVectorShuffle %181 %181 0 1 2 2 
                                       f32_4 %183 = OpFMul %180 %182 
                                                      OpStore %178 %183 
                              Uniform f32_4* %186 = OpAccessChain %23 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %178 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %184 %120 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %23 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %178 
                                         f32 %195 = OpDot %193 %194 
                                Private f32* %196 = OpAccessChain %184 %88 
                                                      OpStore %196 %195 
                              Uniform f32_4* %198 = OpAccessChain %23 %197 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpLoad %178 
                                         f32 %201 = OpDot %199 %200 
                                Private f32* %202 = OpAccessChain %184 %134 
                                                      OpStore %202 %201 
                              Uniform f32_4* %204 = OpAccessChain %23 %203 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpLoad %161 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 0 0 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %210 = OpLoad %184 
                                       f32_3 %211 = OpFAdd %209 %210 
                                                      OpStore %161 %211 
                                Private f32* %214 = OpAccessChain %60 %213 
                                                      OpStore %214 %212 
                              Uniform f32_4* %216 = OpAccessChain %23 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %60 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %178 %120 
                                                      OpStore %220 %219 
                              Uniform f32_4* %222 = OpAccessChain %23 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %60 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %178 %88 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %23 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %60 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %178 %134 
                                                      OpStore %232 %231 
                                       f32_3 %233 = OpLoad %161 
                                       f32_4 %234 = OpLoad %178 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore %161 %236 
                                       f32_3 %237 = OpLoad %161 
                                       f32_3 %240 = OpExtInst %1 40 %237 %239 
                                                      OpStore %161 %240 
                                       f32_3 %242 = OpLoad %161 
                                       f32_3 %243 = OpExtInst %1 30 %242 
                                                      OpStore %241 %243 
                                       f32_3 %244 = OpLoad %241 
                                       f32_3 %247 = OpFMul %244 %246 
                                                      OpStore %241 %247 
                                       f32_3 %248 = OpLoad %241 
                                       f32_3 %249 = OpExtInst %1 29 %248 
                                                      OpStore %241 %249 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %241 
                                       f32_3 %258 = OpExtInst %1 40 %257 %239 
                                                      OpStore %241 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 1 1 1 1 
                                       f32_4 %262 = OpFNegate %261 
                              Uniform f32_4* %263 = OpAccessChain %23 %39 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpFAdd %262 %264 
                                                      OpStore %259 %265 
                                       f32_4 %267 = OpLoad %60 
                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
                                       f32_4 %269 = OpLoad %259 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %266 %270 
                                       f32_4 %271 = OpLoad %259 
                                       f32_4 %272 = OpLoad %259 
                                       f32_4 %273 = OpFMul %271 %272 
                                                      OpStore %259 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %23 %26 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %274 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 2 2 2 2 
                                       f32_4 %283 = OpFNegate %282 
                              Uniform f32_4* %284 = OpAccessChain %23 %49 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpFAdd %283 %285 
                                                      OpStore %9 %286 
                                       f32_4 %287 = OpLoad %274 
                                       f32_4 %288 = OpLoad %60 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %266 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %266 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpLoad %60 
                                       f32_4 %295 = OpVectorShuffle %294 %294 2 2 2 2 
                                       f32_4 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %266 
                                       f32_4 %298 = OpFAdd %296 %297 
                                                      OpStore %60 %298 
                                       f32_4 %299 = OpLoad %274 
                                       f32_4 %300 = OpLoad %274 
                                       f32_4 %301 = OpFMul %299 %300 
                                       f32_4 %302 = OpLoad %259 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %259 %303 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpFMul %304 %305 
                                       f32_4 %307 = OpLoad %259 
                                       f32_4 %308 = OpFAdd %306 %307 
                                                      OpStore %9 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %312 = OpExtInst %1 40 %309 %311 
                                                      OpStore %9 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpExtInst %1 32 %313 
                                                      OpStore %259 %314 
                                       f32_4 %315 = OpLoad %9 
                              Uniform f32_4* %317 = OpAccessChain %23 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFMul %315 %318 
                                       f32_4 %321 = OpFAdd %319 %320 
                                                      OpStore %9 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFDiv %320 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %60 
                                       f32_4 %325 = OpLoad %259 
                                       f32_4 %326 = OpFMul %324 %325 
                                                      OpStore %60 %326 
                                       f32_4 %327 = OpLoad %60 
                                       f32_4 %329 = OpExtInst %1 40 %327 %328 
                                                      OpStore %60 %329 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpLoad %60 
                                       f32_4 %332 = OpFMul %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                              Uniform f32_4* %336 = OpAccessChain %23 %335 %26 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %334 %338 
                                       f32_4 %340 = OpLoad %60 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %60 %341 
                              Uniform f32_4* %342 = OpAccessChain %23 %335 %31 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_4 %348 = OpLoad %60 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFAdd %347 %349 
                                       f32_4 %351 = OpLoad %60 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %60 %352 
                              Uniform f32_4* %353 = OpAccessChain %23 %335 %39 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 2 2 2 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %60 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                              Uniform f32_4* %364 = OpAccessChain %23 %335 %49 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 3 3 3 
                                       f32_3 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %9 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpLoad %241 
                                       f32_3 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                                      OpStore %381 %383 
                                Private f32* %384 = OpAccessChain %47 %88 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %387 = OpAccessChain %23 %31 %120 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %385 %388 
                                Private f32* %390 = OpAccessChain %9 %120 
                                                      OpStore %390 %389 
                                Private f32* %391 = OpAccessChain %9 %120 
                                         f32 %392 = OpLoad %391 
                                         f32 %394 = OpFMul %392 %393 
                                Private f32* %395 = OpAccessChain %9 %213 
                                                      OpStore %395 %394 
                                       f32_4 %396 = OpLoad %47 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 3 
                                       f32_2 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 1 5 3 
                                                      OpStore %9 %401 
                                       f32_4 %403 = OpLoad %47 
                                       f32_2 %404 = OpVectorShuffle %403 %403 2 3 
                                       f32_4 %405 = OpLoad %402 
                                       f32_4 %406 = OpVectorShuffle %405 %404 0 1 4 5 
                                                      OpStore %402 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_2 %408 = OpVectorShuffle %407 %407 2 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 3 
                                       f32_2 %411 = OpFAdd %408 %410 
                                       f32_4 %412 = OpLoad %402 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 2 3 
                                                      OpStore %402 %413 
                                                      OpStore %414 %328 
                                 Output f32* %416 = OpAccessChain %92 %31 %88 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                 Output f32* %419 = OpAccessChain %92 %31 %88 
                                                      OpStore %419 %418 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %81 %93 %94 %107 %138 %144 %147 %149 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %79 0 BuiltIn 79 
                                                      OpMemberDecorate %79 1 BuiltIn 79 
                                                      OpMemberDecorate %79 2 BuiltIn 79 
                                                      OpDecorate %79 Block 
                                                      OpDecorate %93 Location 93 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %107 Location 107 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %149 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %77 = OpConstant 1 
                                              %78 = OpTypeArray %6 %77 
                                              %79 = OpTypeStruct %7 %6 %78 
                                              %80 = OpTypePointer Output %79 
         Output struct {f32_4; f32; f32[1];}* %81 = OpVariable Output 
                                              %89 = OpTypePointer Output %7 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                                Output f32_2* %93 = OpVariable Output 
                                 Input f32_4* %94 = OpVariable Input 
                                             %105 = OpTypeVector %6 3 
                                             %106 = OpTypePointer Input %105 
                                Input f32_3* %107 = OpVariable Input 
                                         u32 %113 = OpConstant 0 
                                             %114 = OpTypePointer Private %6 
                                         u32 %127 = OpConstant 2 
                                Private f32* %129 = OpVariable Private 
                                             %137 = OpTypePointer Output %105 
                               Output f32_3* %138 = OpVariable Output 
                               Output f32_3* %144 = OpVariable Output 
                               Output f32_4* %147 = OpVariable Output 
                               Output f32_3* %149 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_3 %151 = OpConstantComposite %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %36 %24 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %36 %23 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %36 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %82 = OpAccessChain %21 %36 %46 
                                        f32_4 %83 = OpLoad %82 
                                        f32_4 %84 = OpLoad %44 
                                        f32_4 %85 = OpVectorShuffle %84 %84 3 3 3 3 
                                        f32_4 %86 = OpFMul %83 %85 
                                        f32_4 %87 = OpLoad %57 
                                        f32_4 %88 = OpFAdd %86 %87 
                                Output f32_4* %90 = OpAccessChain %81 %23 
                                                      OpStore %90 %88 
                                        f32_4 %95 = OpLoad %94 
                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
                               Uniform f32_4* %97 = OpAccessChain %21 %46 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                                       f32_2 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                       f32_2 %104 = OpFAdd %100 %103 
                                                      OpStore %93 %104 
                                       f32_3 %108 = OpLoad %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %23 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                         f32 %112 = OpDot %108 %111 
                                Private f32* %115 = OpAccessChain %44 %113 
                                                      OpStore %115 %112 
                                       f32_3 %116 = OpLoad %107 
                              Uniform f32_4* %117 = OpAccessChain %21 %24 %24 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %116 %119 
                                Private f32* %121 = OpAccessChain %44 %77 
                                                      OpStore %121 %120 
                                       f32_3 %122 = OpLoad %107 
                              Uniform f32_4* %123 = OpAccessChain %21 %24 %36 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %128 = OpAccessChain %44 %127 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %44 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %44 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %136 = OpExtInst %1 32 %135 
                                                      OpStore %129 %136 
                                         f32 %139 = OpLoad %129 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_4 %141 = OpLoad %44 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                                      OpStore %138 %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                                      OpStore %147 %148 
                                                      OpStore %149 %151 
                                 Output f32* %153 = OpAccessChain %81 %23 %77 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %81 %23 %77 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 273
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %83 %95 %96 %110 %149 %152 %155 %264 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %81 0 BuiltIn 81 
                                                      OpMemberDecorate %81 1 BuiltIn 81 
                                                      OpMemberDecorate %81 2 BuiltIn 81 
                                                      OpDecorate %81 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %264 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 9 
                                          u32 %79 = OpConstant 1 
                                              %80 = OpTypeArray %6 %79 
                                              %81 = OpTypeStruct %7 %6 %80 
                                              %82 = OpTypePointer Output %81 
         Output struct {f32_4; f32; f32[1];}* %83 = OpVariable Output 
                                              %91 = OpTypePointer Output %7 
                                              %93 = OpTypeVector %6 2 
                                              %94 = OpTypePointer Output %93 
                                Output f32_2* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                          i32 %99 = OpConstant 10 
                                             %108 = OpTypeVector %6 3 
                                             %109 = OpTypePointer Input %108 
                                Input f32_3* %110 = OpVariable Input 
                                         i32 %112 = OpConstant 8 
                                         u32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Private %6 
                                         u32 %131 = OpConstant 2 
                                Private f32* %133 = OpVariable Private 
                                             %148 = OpTypePointer Output %108 
                               Output f32_3* %149 = OpVariable Output 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_4* %155 = OpVariable Output 
                                             %157 = OpTypePointer Private %108 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                               Output f32_3* %264 = OpVariable Output 
                                             %267 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %84 = OpAccessChain %21 %61 %47 
                                        f32_4 %85 = OpLoad %84 
                                        f32_4 %86 = OpLoad %45 
                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
                                        f32_4 %88 = OpFMul %85 %87 
                                        f32_4 %89 = OpLoad %58 
                                        f32_4 %90 = OpFAdd %88 %89 
                                Output f32_4* %92 = OpAccessChain %83 %29 
                                                      OpStore %92 %90 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %98 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %99 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                                      OpStore %95 %107 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 %29 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                         f32 %116 = OpDot %111 %115 
                                Private f32* %119 = OpAccessChain %45 %117 
                                                      OpStore %119 %116 
                                       f32_3 %120 = OpLoad %110 
                              Uniform f32_4* %121 = OpAccessChain %21 %112 %24 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %120 %123 
                                Private f32* %125 = OpAccessChain %45 %79 
                                                      OpStore %125 %124 
                                       f32_3 %126 = OpLoad %110 
                              Uniform f32_4* %127 = OpAccessChain %21 %112 %37 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %132 = OpAccessChain %45 %131 
                                                      OpStore %132 %130 
                                       f32_4 %134 = OpLoad %45 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 32 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %45 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %45 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %45 %147 
                                       f32_4 %150 = OpLoad %45 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                                      OpStore %149 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                                      OpStore %155 %156 
                                Private f32* %159 = OpAccessChain %45 %79 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %45 %79 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %117 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %45 %117 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %45 %117 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %117 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %117 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %45 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %117 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %79 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %131 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %45 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %45 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %117 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %45 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %79 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %45 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %131 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %158 %232 
                                       f32_3 %233 = OpLoad %158 
                                       f32_3 %234 = OpExtInst %1 30 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                       f32_4 %237 = OpLoad %45 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                                       f32_4 %244 = OpLoad %45 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpExtInst %1 29 %245 
                                       f32_4 %247 = OpLoad %45 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %45 %248 
                                       f32_4 %249 = OpLoad %45 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %45 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %45 %258 
                                       f32_4 %259 = OpLoad %45 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpExtInst %1 40 %260 %231 
                                       f32_4 %262 = OpLoad %45 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %45 %263 
                                       f32_4 %265 = OpLoad %45 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                                      OpStore %264 %266 
                                 Output f32* %268 = OpAccessChain %83 %29 %79 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFNegate %269 
                                 Output f32* %271 = OpAccessChain %83 %29 %79 
                                                      OpStore %271 %270 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat11;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %88 %94 %95 %109 %140 %146 %149 %151 %173 %185 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %86 0 BuiltIn 86 
                                                      OpMemberDecorate %86 1 BuiltIn 86 
                                                      OpMemberDecorate %86 2 BuiltIn 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %94 Location 94 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %109 Location 109 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %185 Location 185 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                               Private f32_4* %57 = OpVariable Private 
                                          u32 %84 = OpConstant 1 
                                              %85 = OpTypeArray %6 %84 
                                              %86 = OpTypeStruct %7 %6 %85 
                                              %87 = OpTypePointer Output %86 
         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
                                              %90 = OpTypePointer Output %7 
                                              %92 = OpTypeVector %6 2 
                                              %93 = OpTypePointer Output %92 
                                Output f32_2* %94 = OpVariable Output 
                                 Input f32_4* %95 = OpVariable Input 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeVector %6 3 
                                             %108 = OpTypePointer Input %107 
                                Input f32_3* %109 = OpVariable Input 
                                         u32 %115 = OpConstant 0 
                                             %116 = OpTypePointer Private %6 
                                         u32 %129 = OpConstant 2 
                                Private f32* %131 = OpVariable Private 
                                             %139 = OpTypePointer Output %107 
                               Output f32_3* %140 = OpVariable Output 
                               Output f32_3* %146 = OpVariable Output 
                               Output f32_4* %149 = OpVariable Output 
                               Output f32_3* %151 = OpVariable Output 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_3 %153 = OpConstantComposite %152 %152 %152 
                                             %156 = OpTypePointer Uniform %6 
                                         f32 %163 = OpConstant 3.674022E-40 
                                         u32 %165 = OpConstant 3 
                                       f32_2 %169 = OpConstantComposite %163 %163 
                               Output f32_4* %173 = OpVariable Output 
                               Output f32_4* %185 = OpVariable Output 
                                       f32_4 %186 = OpConstantComposite %152 %152 %152 %152 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %50 = OpAccessChain %21 %23 %46 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %11 
                                        f32_4 %53 = OpVectorShuffle %52 %52 3 3 3 3 
                                        f32_4 %54 = OpFMul %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpFAdd %54 %55 
                                                      OpStore %9 %56 
                                        f32_4 %58 = OpLoad %44 
                                        f32_4 %59 = OpVectorShuffle %58 %58 1 1 1 1 
                               Uniform f32_4* %60 = OpAccessChain %21 %46 %23 
                                        f32_4 %61 = OpLoad %60 
                                        f32_4 %62 = OpFMul %59 %61 
                                                      OpStore %57 %62 
                               Uniform f32_4* %63 = OpAccessChain %21 %46 %28 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpLoad %44 
                                        f32_4 %66 = OpVectorShuffle %65 %65 0 0 0 0 
                                        f32_4 %67 = OpFMul %64 %66 
                                        f32_4 %68 = OpLoad %57 
                                        f32_4 %69 = OpFAdd %67 %68 
                                                      OpStore %57 %69 
                               Uniform f32_4* %70 = OpAccessChain %21 %46 %36 
                                        f32_4 %71 = OpLoad %70 
                                        f32_4 %72 = OpLoad %44 
                                        f32_4 %73 = OpVectorShuffle %72 %72 2 2 2 2 
                                        f32_4 %74 = OpFMul %71 %73 
                                        f32_4 %75 = OpLoad %57 
                                        f32_4 %76 = OpFAdd %74 %75 
                                                      OpStore %57 %76 
                               Uniform f32_4* %77 = OpAccessChain %21 %46 %46 
                                        f32_4 %78 = OpLoad %77 
                                        f32_4 %79 = OpLoad %44 
                                        f32_4 %80 = OpVectorShuffle %79 %79 3 3 3 3 
                                        f32_4 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %57 
                                        f32_4 %83 = OpFAdd %81 %82 
                                                      OpStore %44 %83 
                                        f32_4 %89 = OpLoad %44 
                                Output f32_4* %91 = OpAccessChain %88 %28 
                                                      OpStore %91 %89 
                                        f32_4 %96 = OpLoad %95 
                                        f32_2 %97 = OpVectorShuffle %96 %96 0 1 
                               Uniform f32_4* %99 = OpAccessChain %21 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %21 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %94 %106 
                                       f32_3 %110 = OpLoad %109 
                              Uniform f32_4* %111 = OpAccessChain %21 %36 %28 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                         f32 %114 = OpDot %110 %113 
                                Private f32* %117 = OpAccessChain %57 %115 
                                                      OpStore %117 %114 
                                       f32_3 %118 = OpLoad %109 
                              Uniform f32_4* %119 = OpAccessChain %21 %36 %23 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %118 %121 
                                Private f32* %123 = OpAccessChain %57 %84 
                                                      OpStore %123 %122 
                                       f32_3 %124 = OpLoad %109 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %36 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %57 %129 
                                                      OpStore %130 %128 
                                       f32_4 %132 = OpLoad %57 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %57 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                                      OpStore %131 %136 
                                         f32 %137 = OpLoad %131 
                                         f32 %138 = OpExtInst %1 32 %137 
                                                      OpStore %131 %138 
                                         f32 %141 = OpLoad %131 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %57 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                                      OpStore %149 %150 
                                                      OpStore %151 %153 
                                Private f32* %154 = OpAccessChain %44 %84 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %157 = OpAccessChain %21 %28 %115 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %155 %158 
                                Private f32* %160 = OpAccessChain %9 %115 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %9 %115 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %166 = OpAccessChain %9 %165 
                                                      OpStore %166 %164 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %170 = OpFMul %168 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 1 5 3 
                                                      OpStore %9 %172 
                                       f32_4 %174 = OpLoad %44 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_4 %176 = OpLoad %173 
                                       f32_4 %177 = OpVectorShuffle %176 %175 0 1 4 5 
                                                      OpStore %173 %177 
                                       f32_4 %178 = OpLoad %9 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad %173 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore %173 %184 
                                                      OpStore %185 %186 
                                 Output f32* %188 = OpAccessChain %88 %28 %84 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %88 %28 %84 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat17;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 303
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %96 %97 %111 %150 %153 %156 %266 %283 %295 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %283 Location 283 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %58 = OpVariable Private 
                                          i32 %61 = OpConstant 10 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %92 = OpTypePointer Output %7 
                                              %94 = OpTypeVector %6 2 
                                              %95 = OpTypePointer Output %94 
                                Output f32_2* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                         i32 %100 = OpConstant 11 
                                             %109 = OpTypeVector %6 3 
                                             %110 = OpTypePointer Input %109 
                                Input f32_3* %111 = OpVariable Input 
                                         i32 %113 = OpConstant 9 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                                             %149 = OpTypePointer Output %109 
                               Output f32_3* %150 = OpVariable Output 
                               Output f32_3* %153 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                             %158 = OpTypePointer Private %109 
                              Private f32_3* %159 = OpVariable Private 
                              Private f32_4* %176 = OpVariable Private 
                              Private f32_3* %182 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         i32 %189 = OpConstant 5 
                                         i32 %195 = OpConstant 6 
                                         i32 %201 = OpConstant 7 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         u32 %211 = OpConstant 3 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_3 %233 = OpConstantComposite %232 %232 %232 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_3 %242 = OpConstantComposite %241 %241 %241 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_3 %257 = OpConstantComposite %256 %256 %256 
                               Output f32_3* %266 = OpVariable Output 
                                             %271 = OpTypePointer Uniform %6 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_4* %283 = OpVariable Output 
                               Output f32_4* %295 = OpVariable Output 
                                       f32_4 %296 = OpConstantComposite %232 %232 %232 %232 
                                             %297 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %51 = OpAccessChain %21 %23 %47 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %11 
                                        f32_4 %54 = OpVectorShuffle %53 %53 3 3 3 3 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %9 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %62 = OpAccessChain %21 %61 %24 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpFMul %60 %63 
                                                      OpStore %58 %64 
                               Uniform f32_4* %65 = OpAccessChain %21 %61 %29 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %45 
                                        f32_4 %68 = OpVectorShuffle %67 %67 0 0 0 0 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %58 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %58 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %61 %37 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %45 
                                        f32_4 %75 = OpVectorShuffle %74 %74 2 2 2 2 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %58 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %58 %78 
                               Uniform f32_4* %79 = OpAccessChain %21 %61 %47 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %45 
                                        f32_4 %82 = OpVectorShuffle %81 %81 3 3 3 3 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %58 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %45 %85 
                                        f32_4 %91 = OpLoad %45 
                                Output f32_4* %93 = OpAccessChain %90 %29 
                                                      OpStore %93 %91 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %99 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %100 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %96 %108 
                                       f32_3 %112 = OpLoad %111 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 %29 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %112 %116 
                                Private f32* %120 = OpAccessChain %58 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %111 
                              Uniform f32_4* %122 = OpAccessChain %21 %113 %24 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %58 %86 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %111 
                              Uniform f32_4* %128 = OpAccessChain %21 %113 %37 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %58 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %58 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %58 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %142 = OpLoad %134 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_4 %144 = OpLoad %58 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %58 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %58 %148 
                                       f32_4 %151 = OpLoad %58 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                                      OpStore %153 %155 
                                       f32_4 %157 = OpLoad %9 
                                                      OpStore %156 %157 
                                Private f32* %160 = OpAccessChain %58 %86 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %58 %86 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %159 %118 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %58 %118 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %58 %118 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %159 %118 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                         f32 %174 = OpFAdd %170 %173 
                                Private f32* %175 = OpAccessChain %159 %118 
                                                      OpStore %175 %174 
                                       f32_4 %177 = OpLoad %58 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %58 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %176 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %176 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %182 %118 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %176 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %182 %86 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %176 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %182 %132 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %21 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpLoad %159 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %182 
                                       f32_3 %209 = OpFAdd %207 %208 
                                                      OpStore %159 %209 
                                Private f32* %212 = OpAccessChain %58 %211 
                                                      OpStore %212 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %58 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %182 %118 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %58 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %182 %86 
                                                      OpStore %222 %221 
                              Uniform f32_4* %223 = OpAccessChain %21 %47 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %58 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %182 %132 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %159 
                                       f32_3 %229 = OpLoad %182 
                                       f32_3 %230 = OpFAdd %228 %229 
                                                      OpStore %159 %230 
                                       f32_3 %231 = OpLoad %159 
                                       f32_3 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %159 %234 
                                       f32_3 %235 = OpLoad %159 
                                       f32_3 %236 = OpExtInst %1 30 %235 
                                       f32_4 %237 = OpLoad %58 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %58 %238 
                                       f32_4 %239 = OpLoad %58 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %58 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %58 %245 
                                       f32_4 %246 = OpLoad %58 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpExtInst %1 29 %247 
                                       f32_4 %249 = OpLoad %58 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %58 %250 
                                       f32_4 %251 = OpLoad %58 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %258 = OpFAdd %255 %257 
                                       f32_4 %259 = OpLoad %58 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %58 %260 
                                       f32_4 %261 = OpLoad %58 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpExtInst %1 40 %262 %233 
                                       f32_4 %264 = OpLoad %58 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %58 %265 
                                       f32_4 %267 = OpLoad %58 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                                      OpStore %266 %268 
                                Private f32* %269 = OpAccessChain %45 %86 
                                         f32 %270 = OpLoad %269 
                                Uniform f32* %272 = OpAccessChain %21 %29 %118 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %45 %86 
                                                      OpStore %275 %274 
                                       f32_4 %276 = OpLoad %45 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 3 1 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %58 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 1 5 6 
                                                      OpStore %58 %282 
                                       f32_4 %284 = OpLoad %45 
                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
                                       f32_4 %286 = OpLoad %283 
                                       f32_4 %287 = OpVectorShuffle %286 %285 0 1 4 5 
                                                      OpStore %283 %287 
                                       f32_4 %288 = OpLoad %58 
                                       f32_2 %289 = OpVectorShuffle %288 %288 2 2 
                                       f32_4 %290 = OpLoad %58 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 3 
                                       f32_2 %292 = OpFAdd %289 %291 
                                       f32_4 %293 = OpLoad %283 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 2 3 
                                                      OpStore %283 %294 
                                                      OpStore %295 %296 
                                 Output f32* %298 = OpAccessChain %90 %29 %86 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFNegate %299 
                                 Output f32* %301 = OpAccessChain %90 %29 %86 
                                                      OpStore %301 %300 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 284
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %275 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %275 Location 275 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 7 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 8 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                              Private f32_4* %165 = OpVariable Private 
                              Private f32_4* %173 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_4 %210 = OpConstantComposite %209 %209 %209 %209 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_4 %219 = OpConstantComposite %218 %218 %218 %218 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_4 %228 = OpConstantComposite %227 %227 %227 %227 
                                         i32 %235 = OpConstant 4 
                               Output f32_3* %275 = OpVariable Output 
                                             %278 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %159 1 1 1 1 
                                       f32_4 %161 = OpFNegate %160 
                              Uniform f32_4* %162 = OpAccessChain %23 %26 
                                       f32_4 %163 = OpLoad %162 
                                       f32_4 %164 = OpFAdd %161 %163 
                                                      OpStore %60 %164 
                                       f32_4 %166 = OpLoad %47 
                                       f32_4 %167 = OpVectorShuffle %166 %166 1 1 1 1 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                       f32_4 %170 = OpLoad %60 
                                       f32_4 %171 = OpLoad %60 
                                       f32_4 %172 = OpFMul %170 %171 
                                                      OpStore %60 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 0 0 0 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %31 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %173 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_4 %181 = OpVectorShuffle %180 %180 2 2 2 2 
                                       f32_4 %182 = OpFNegate %181 
                              Uniform f32_4* %183 = OpAccessChain %23 %39 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpFAdd %182 %184 
                                                      OpStore %9 %185 
                                       f32_4 %186 = OpLoad %173 
                                       f32_4 %187 = OpLoad %47 
                                       f32_4 %188 = OpVectorShuffle %187 %187 0 0 0 0 
                                       f32_4 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %165 
                                       f32_4 %191 = OpFAdd %189 %190 
                                                      OpStore %165 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpLoad %47 
                                       f32_4 %194 = OpVectorShuffle %193 %193 2 2 2 2 
                                       f32_4 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %165 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %47 %197 
                                       f32_4 %198 = OpLoad %173 
                                       f32_4 %199 = OpLoad %173 
                                       f32_4 %200 = OpFMul %198 %199 
                                       f32_4 %201 = OpLoad %60 
                                       f32_4 %202 = OpFAdd %200 %201 
                                                      OpStore %60 %202 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %60 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %211 = OpExtInst %1 40 %208 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 32 %212 
                                                      OpStore %60 %213 
                                       f32_4 %214 = OpLoad %9 
                              Uniform f32_4* %215 = OpAccessChain %23 %49 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFMul %214 %216 
                                       f32_4 %220 = OpFAdd %217 %219 
                                                      OpStore %9 %220 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpFDiv %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %47 
                                       f32_4 %224 = OpLoad %60 
                                       f32_4 %225 = OpFMul %223 %224 
                                                      OpStore %47 %225 
                                       f32_4 %226 = OpLoad %47 
                                       f32_4 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %47 %229 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpLoad %47 
                                       f32_4 %232 = OpFMul %230 %231 
                                                      OpStore %9 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %236 = OpAccessChain %23 %235 %26 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %234 %238 
                                       f32_4 %240 = OpLoad %47 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %47 %241 
                              Uniform f32_4* %242 = OpAccessChain %23 %235 %31 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %9 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 0 0 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %47 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %247 %249 
                                       f32_4 %251 = OpLoad %47 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %47 %252 
                              Uniform f32_4* %253 = OpAccessChain %23 %235 %39 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 2 2 2 
                                       f32_3 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %47 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFAdd %258 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %9 %263 
                              Uniform f32_4* %264 = OpAccessChain %23 %235 %49 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %9 
                                       f32_3 %268 = OpVectorShuffle %267 %267 3 3 3 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpFAdd %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %9 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                                      OpStore %275 %277 
                                 Output f32* %279 = OpAccessChain %85 %31 %81 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                 Output f32* %282 = OpAccessChain %85 %31 %81 
                                                      OpStore %282 %281 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat5;
bool u_xlatb5;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 386
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %85 %97 %98 %112 %151 %154 %157 %377 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %377 Location 377 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 14 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                         i32 %101 = OpConstant 15 
                                             %110 = OpTypeVector %6 3 
                                             %111 = OpTypePointer Input %110 
                                Input f32_3* %112 = OpVariable Input 
                                         i32 %114 = OpConstant 13 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         u32 %133 = OpConstant 2 
                                Private f32* %135 = OpVariable Private 
                                             %150 = OpTypePointer Output %110 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                                             %159 = OpTypePointer Private %110 
                              Private f32_3* %160 = OpVariable Private 
                              Private f32_4* %177 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %184 = OpConstant 8 
                                         i32 %190 = OpConstant 9 
                                         i32 %196 = OpConstant 10 
                                         i32 %202 = OpConstant 11 
                                         f32 %211 = OpConstant 3.674022E-40 
                                         u32 %212 = OpConstant 3 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                              Private f32_3* %239 = OpVariable Private 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_3 %250 = OpConstantComposite %249 %249 %249 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_3 %253 = OpConstantComposite %252 %252 %252 
                              Private f32_4* %263 = OpVariable Private 
                              Private f32_4* %271 = OpVariable Private 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_4 %308 = OpConstantComposite %307 %307 %307 %307 
                                       f32_4 %316 = OpConstantComposite %211 %211 %211 %211 
                                       f32_4 %324 = OpConstantComposite %236 %236 %236 %236 
                                         i32 %331 = OpConstant 4 
                               Output f32_3* %377 = OpVariable Output 
                                             %380 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %86 = OpAccessChain %23 %63 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %60 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %31 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %23 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                                      OpStore %97 %109 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %115 = OpAccessChain %23 %114 %31 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                         f32 %118 = OpDot %113 %117 
                                Private f32* %121 = OpAccessChain %47 %119 
                                                      OpStore %121 %118 
                                       f32_3 %122 = OpLoad %112 
                              Uniform f32_4* %123 = OpAccessChain %23 %114 %26 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                         f32 %126 = OpDot %122 %125 
                                Private f32* %127 = OpAccessChain %47 %81 
                                                      OpStore %127 %126 
                                       f32_3 %128 = OpLoad %112 
                              Uniform f32_4* %129 = OpAccessChain %23 %114 %39 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpDot %128 %131 
                                Private f32* %134 = OpAccessChain %47 %133 
                                                      OpStore %134 %132 
                                       f32_4 %136 = OpLoad %47 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %47 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                         f32 %140 = OpDot %137 %139 
                                                      OpStore %135 %140 
                                         f32 %141 = OpLoad %135 
                                         f32 %142 = OpExtInst %1 32 %141 
                                                      OpStore %135 %142 
                                         f32 %143 = OpLoad %135 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %47 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %47 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %47 %149 
                                       f32_4 %152 = OpLoad %47 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                                      OpStore %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                                      OpStore %157 %158 
                                Private f32* %161 = OpAccessChain %47 %81 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %47 %81 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                Private f32* %166 = OpAccessChain %160 %119 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %47 %119 
                                         f32 %168 = OpLoad %167 
                                Private f32* %169 = OpAccessChain %47 %119 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %168 %170 
                                Private f32* %172 = OpAccessChain %160 %119 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %171 %174 
                                Private f32* %176 = OpAccessChain %160 %119 
                                                      OpStore %176 %175 
                                       f32_4 %178 = OpLoad %47 
                                       f32_4 %179 = OpVectorShuffle %178 %178 1 2 2 0 
                                       f32_4 %180 = OpLoad %47 
                                       f32_4 %181 = OpVectorShuffle %180 %180 0 1 2 2 
                                       f32_4 %182 = OpFMul %179 %181 
                                                      OpStore %177 %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %177 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %183 %119 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %23 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %177 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %183 %81 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %23 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %177 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %183 %133 
                                                      OpStore %201 %200 
                              Uniform f32_4* %203 = OpAccessChain %23 %202 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpLoad %160 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 0 0 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %209 = OpLoad %183 
                                       f32_3 %210 = OpFAdd %208 %209 
                                                      OpStore %160 %210 
                                Private f32* %213 = OpAccessChain %47 %212 
                                                      OpStore %213 %211 
                              Uniform f32_4* %215 = OpAccessChain %23 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %47 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %183 %119 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %23 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %47 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %183 %81 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %23 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %47 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %183 %133 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %160 
                                       f32_3 %233 = OpLoad %183 
                                       f32_3 %234 = OpFAdd %232 %233 
                                                      OpStore %160 %234 
                                       f32_3 %235 = OpLoad %160 
                                       f32_3 %238 = OpExtInst %1 40 %235 %237 
                                                      OpStore %160 %238 
                                       f32_3 %240 = OpLoad %160 
                                       f32_3 %241 = OpExtInst %1 30 %240 
                                                      OpStore %239 %241 
                                       f32_3 %242 = OpLoad %239 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %239 %245 
                                       f32_3 %246 = OpLoad %239 
                                       f32_3 %247 = OpExtInst %1 29 %246 
                                                      OpStore %239 %247 
                                       f32_3 %248 = OpLoad %239 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %254 = OpFAdd %251 %253 
                                                      OpStore %239 %254 
                                       f32_3 %255 = OpLoad %239 
                                       f32_3 %256 = OpExtInst %1 40 %255 %237 
                                                      OpStore %239 %256 
                                       f32_4 %257 = OpLoad %9 
                                       f32_4 %258 = OpVectorShuffle %257 %257 1 1 1 1 
                                       f32_4 %259 = OpFNegate %258 
                              Uniform f32_4* %260 = OpAccessChain %23 %26 
                                       f32_4 %261 = OpLoad %260 
                                       f32_4 %262 = OpFAdd %259 %261 
                                                      OpStore %60 %262 
                                       f32_4 %264 = OpLoad %47 
                                       f32_4 %265 = OpVectorShuffle %264 %264 1 1 1 1 
                                       f32_4 %266 = OpLoad %60 
                                       f32_4 %267 = OpFMul %265 %266 
                                                      OpStore %263 %267 
                                       f32_4 %268 = OpLoad %60 
                                       f32_4 %269 = OpLoad %60 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %60 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_4 %273 = OpVectorShuffle %272 %272 0 0 0 0 
                                       f32_4 %274 = OpFNegate %273 
                              Uniform f32_4* %275 = OpAccessChain %23 %31 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpFAdd %274 %276 
                                                      OpStore %271 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %278 2 2 2 2 
                                       f32_4 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %23 %39 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpFAdd %280 %282 
                                                      OpStore %9 %283 
                                       f32_4 %284 = OpLoad %271 
                                       f32_4 %285 = OpLoad %47 
                                       f32_4 %286 = OpVectorShuffle %285 %285 0 0 0 0 
                                       f32_4 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %263 
                                       f32_4 %289 = OpFAdd %287 %288 
                                                      OpStore %263 %289 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpLoad %47 
                                       f32_4 %292 = OpVectorShuffle %291 %291 2 2 2 2 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %263 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %47 %295 
                                       f32_4 %296 = OpLoad %271 
                                       f32_4 %297 = OpLoad %271 
                                       f32_4 %298 = OpFMul %296 %297 
                                       f32_4 %299 = OpLoad %60 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %60 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpLoad %9 
                                       f32_4 %303 = OpFMul %301 %302 
                                       f32_4 %304 = OpLoad %60 
                                       f32_4 %305 = OpFAdd %303 %304 
                                                      OpStore %9 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %309 = OpExtInst %1 40 %306 %308 
                                                      OpStore %9 %309 
                                       f32_4 %310 = OpLoad %9 
                                       f32_4 %311 = OpExtInst %1 32 %310 
                                                      OpStore %60 %311 
                                       f32_4 %312 = OpLoad %9 
                              Uniform f32_4* %313 = OpAccessChain %23 %49 
                                       f32_4 %314 = OpLoad %313 
                                       f32_4 %315 = OpFMul %312 %314 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %9 %317 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpFDiv %316 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %47 
                                       f32_4 %321 = OpLoad %60 
                                       f32_4 %322 = OpFMul %320 %321 
                                                      OpStore %47 %322 
                                       f32_4 %323 = OpLoad %47 
                                       f32_4 %325 = OpExtInst %1 40 %323 %324 
                                                      OpStore %47 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpLoad %47 
                                       f32_4 %328 = OpFMul %326 %327 
                                                      OpStore %9 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 1 1 1 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 %26 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFMul %330 %334 
                                       f32_4 %336 = OpLoad %47 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %47 %337 
                              Uniform f32_4* %338 = OpAccessChain %23 %331 %31 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 0 0 
                                       f32_3 %343 = OpFMul %340 %342 
                                       f32_4 %344 = OpLoad %47 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %47 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %47 %348 
                              Uniform f32_4* %349 = OpAccessChain %23 %331 %39 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 2 2 2 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %47 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %9 %359 
                              Uniform f32_4* %360 = OpAccessChain %23 %331 %49 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 3 3 3 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %365 %367 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %9 %370 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpLoad %239 
                                       f32_3 %374 = OpFAdd %372 %373 
                                       f32_4 %375 = OpLoad %9 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %9 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                                      OpStore %377 %379 
                                 Output f32* %381 = OpAccessChain %85 %31 %81 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFNegate %382 
                                 Output f32* %384 = OpAccessChain %85 %31 %81 
                                                      OpStore %384 %383 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %149 %245 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 RelaxedPrecision 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpMemberDecorate %89 1 Offset 89 
                                                      OpMemberDecorate %89 2 Offset 89 
                                                      OpMemberDecorate %89 3 Offset 89 
                                                      OpMemberDecorate %89 4 Offset 89 
                                                      OpMemberDecorate %89 5 RelaxedPrecision 
                                                      OpMemberDecorate %89 5 Offset 89 
                                                      OpMemberDecorate %89 6 Offset 89 
                                                      OpMemberDecorate %89 7 RelaxedPrecision 
                                                      OpMemberDecorate %89 7 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %142 SpecId 142 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %245 Location 245 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %284 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeStruct %7 %7 %88 %76 %76 %7 %7 %6 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %91 = OpVariable Uniform 
                                              %92 = OpTypeInt 32 1 
                                          i32 %93 = OpConstant 6 
                                              %94 = OpTypePointer Uniform %7 
                               Private f32_3* %99 = OpVariable Private 
                                         u32 %107 = OpConstant 3 
                                         i32 %110 = OpConstant 7 
                                             %111 = OpTypePointer Uniform %6 
                               Private bool* %117 = OpVariable Private 
                                         f32 %120 = OpConstant 3.674022E-40 
                                         i32 %123 = OpConstant 0 
                                         i32 %124 = OpConstant 1 
                                         i32 %126 = OpConstant -1 
                                         f32 %134 = OpConstant 3.674022E-40 
                                        bool %136 = OpConstantFalse 
                                        bool %142 = OpSpecConstantFalse 
                                             %148 = OpTypePointer Input %76 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                             %179 = OpTypePointer Function %76 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %76 
                              Private f32_4* %195 = OpVariable Private 
                                Private f32* %202 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %207 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %221 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %222 = OpTypeSampledImage %221 
                                             %223 = OpTypePointer UniformConstant %222 
 UniformConstant read_only Texture3DSampled* %224 = OpVariable UniformConstant 
                                Input f32_3* %245 = OpVariable Input 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %252 = OpConstant 5 
                              Private f32_3* %257 = OpVariable Private 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %95 = OpAccessChain %91 %93 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpFAdd %86 %97 
                                                      OpStore %84 %98 
                              Uniform f32_4* %100 = OpAccessChain %91 %93 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 3 3 3 
                                       f32_3 %103 = OpLoad %84 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_3 %105 = OpLoad %78 
                                       f32_3 %106 = OpFAdd %104 %105 
                                                      OpStore %99 %106 
                                Private f32* %108 = OpAccessChain %9 %107 
                                         f32 %109 = OpLoad %108 
                                Uniform f32* %112 = OpAccessChain %91 %110 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %109 %114 
                                Private f32* %116 = OpAccessChain %23 %25 
                                                      OpStore %116 %115 
                                Private f32* %118 = OpAccessChain %23 %25 
                                         f32 %119 = OpLoad %118 
                                        bool %121 = OpFOrdLessThan %119 %120 
                                                      OpStore %117 %121 
                                        bool %122 = OpLoad %117 
                                         i32 %125 = OpSelect %122 %124 %123 
                                         i32 %127 = OpIMul %125 %126 
                                        bool %128 = OpINotEqual %127 %123 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %130 
                                             %129 = OpLabel 
                                                      OpKill
                                             %130 = OpLabel 
                                Uniform f32* %132 = OpAccessChain %91 %124 %25 
                                         f32 %133 = OpLoad %132 
                                        bool %135 = OpFOrdEqual %133 %134 
                                                      OpStore %117 %135 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %138 
                                             %137 = OpLabel 
                                        bool %139 = OpLoad %117 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %141 
                                             %140 = OpLabel 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %230 
                                             %143 = OpLabel 
                                Uniform f32* %145 = OpAccessChain %91 %124 %74 
                                         f32 %146 = OpLoad %145 
                                        bool %147 = OpFOrdEqual %146 %134 
                                                      OpStore %117 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %91 %152 %124 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %84 %156 
                              Uniform f32_4* %157 = OpAccessChain %91 %152 %123 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %149 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %84 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %84 %164 
                              Uniform f32_4* %165 = OpAccessChain %91 %152 %152 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpLoad %149 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %84 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %84 %172 
                                       f32_3 %173 = OpLoad %84 
                              Uniform f32_4* %175 = OpAccessChain %91 %152 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %173 %177 
                                                      OpStore %84 %178 
                                        bool %181 = OpLoad %117 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %84 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %149 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %84 %187 
                                       f32_3 %188 = OpLoad %84 
                              Uniform f32_3* %191 = OpAccessChain %91 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %84 %194 
                                       f32_3 %196 = OpLoad %84 
                              Uniform f32_3* %197 = OpAccessChain %91 %174 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %203 = OpAccessChain %195 %74 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %208 = OpFAdd %206 %207 
                                                      OpStore %202 %208 
                                Uniform f32* %210 = OpAccessChain %91 %124 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %207 
                                Private f32* %215 = OpAccessChain %84 %25 
                                                      OpStore %215 %214 
                                         f32 %216 = OpLoad %202 
                                Private f32* %217 = OpAccessChain %84 %25 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 40 %216 %218 
                                Private f32* %220 = OpAccessChain %195 %25 
                                                      OpStore %220 %219 
                  read_only Texture3DSampled %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %195 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 2 3 
                                       f32_4 %228 = OpImageSampleImplicitLod %225 %227 
                                                      OpStore %195 %228 
                                       f32_4 %229 = OpLoad %195 
                                                      OpStore %23 %229 
                                                      OpBranch %144 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %23 %25 
                                                      OpStore %231 %134 
                                Private f32* %232 = OpAccessChain %23 %74 
                                                      OpStore %232 %134 
                                Private f32* %233 = OpAccessChain %23 %209 
                                                      OpStore %233 %134 
                                Private f32* %234 = OpAccessChain %23 %107 
                                                      OpStore %234 %134 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_4 %235 = OpLoad %23 
                              Uniform f32_4* %236 = OpAccessChain %91 %123 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                Private f32* %239 = OpAccessChain %37 %25 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %37 %25 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 43 %241 %120 %134 
                                Private f32* %243 = OpAccessChain %37 %25 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %99 
                                       f32_3 %246 = OpLoad %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %23 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %23 %249 
                                       f32_3 %251 = OpLoad %99 
                              Uniform f32_4* %253 = OpAccessChain %91 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %250 %256 
                                       f32_2 %258 = OpLoad %37 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 0 0 
                                       f32_3 %260 = OpLoad %250 
                                       f32_3 %261 = OpFMul %259 %260 
                                                      OpStore %257 %261 
                                       f32_3 %262 = OpLoad %250 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_2 %264 = OpLoad %37 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                              Uniform f32_4* %267 = OpAccessChain %91 %93 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %266 %269 
                                                      OpStore %99 %270 
                              Uniform f32_4* %271 = OpAccessChain %91 %93 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpLoad %99 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_3 %276 = OpLoad %257 
                                       f32_3 %277 = OpFAdd %275 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %23 %107 
                                                      OpStore %280 %120 
                                       f32_4 %283 = OpLoad %9 
                                       f32_4 %284 = OpLoad %23 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %282 %285 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat20;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 319
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %278 %300 %312 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %278 Location 278 
                                                      OpDecorate %300 Location 300 
                                                      OpDecorate %312 Location 312 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 8 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 9 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 7 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         i32 %217 = OpConstant 4 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_4 %222 = OpConstantComposite %221 %221 %221 %221 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                         i32 %238 = OpConstant 5 
                               Output f32_3* %278 = OpVariable Output 
                                             %283 = OpTypePointer Uniform %6 
                                         f32 %290 = OpConstant 3.674022E-40 
                                         u32 %292 = OpConstant 3 
                                       f32_2 %296 = OpConstantComposite %290 %290 
                               Output f32_4* %300 = OpVariable Output 
                               Output f32_4* %312 = OpVariable Output 
                                             %313 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 1 1 1 1 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %39 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %160 %166 
                                       f32_4 %168 = OpLoad %60 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpLoad %160 
                                       f32_4 %171 = OpFMul %169 %170 
                                                      OpStore %167 %171 
                                       f32_4 %172 = OpLoad %160 
                                       f32_4 %173 = OpLoad %160 
                                       f32_4 %174 = OpFMul %172 %173 
                                                      OpStore %160 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 0 0 0 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %26 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %175 %181 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %182 2 2 2 2 
                                       f32_4 %184 = OpFNegate %183 
                              Uniform f32_4* %185 = OpAccessChain %23 %49 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFAdd %184 %186 
                                                      OpStore %9 %187 
                                       f32_4 %188 = OpLoad %175 
                                       f32_4 %189 = OpLoad %60 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %167 
                                       f32_4 %193 = OpFAdd %191 %192 
                                                      OpStore %167 %193 
                                       f32_4 %194 = OpLoad %9 
                                       f32_4 %195 = OpLoad %60 
                                       f32_4 %196 = OpVectorShuffle %195 %195 2 2 2 2 
                                       f32_4 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %167 
                                       f32_4 %199 = OpFAdd %197 %198 
                                                      OpStore %60 %199 
                                       f32_4 %200 = OpLoad %175 
                                       f32_4 %201 = OpLoad %175 
                                       f32_4 %202 = OpFMul %200 %201 
                                       f32_4 %203 = OpLoad %160 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %160 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %160 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %160 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %218 = OpAccessChain %23 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFMul %216 %219 
                                       f32_4 %223 = OpFAdd %220 %222 
                                                      OpStore %9 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFDiv %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %60 
                                       f32_4 %227 = OpLoad %160 
                                       f32_4 %228 = OpFMul %226 %227 
                                                      OpStore %60 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %232 = OpExtInst %1 40 %229 %231 
                                                      OpStore %60 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpLoad %60 
                                       f32_4 %235 = OpFMul %233 %234 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 1 1 1 
                              Uniform f32_4* %239 = OpAccessChain %23 %238 %26 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %237 %241 
                                       f32_4 %243 = OpLoad %60 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %60 %244 
                              Uniform f32_4* %245 = OpAccessChain %23 %238 %31 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %60 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %60 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %60 %255 
                              Uniform f32_4* %256 = OpAccessChain %23 %238 %39 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 2 2 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %60 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %9 %266 
                              Uniform f32_4* %267 = OpAccessChain %23 %238 %49 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 3 3 3 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %272 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                                      OpStore %278 %280 
                                Private f32* %281 = OpAccessChain %47 %88 
                                         f32 %282 = OpLoad %281 
                                Uniform f32* %284 = OpAccessChain %23 %31 %120 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %282 %285 
                                Private f32* %287 = OpAccessChain %9 %120 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %120 
                                         f32 %289 = OpLoad %288 
                                         f32 %291 = OpFMul %289 %290 
                                Private f32* %293 = OpAccessChain %9 %292 
                                                      OpStore %293 %291 
                                       f32_4 %294 = OpLoad %47 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 3 
                                       f32_2 %297 = OpFMul %295 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 1 5 3 
                                                      OpStore %9 %299 
                                       f32_4 %301 = OpLoad %47 
                                       f32_2 %302 = OpVectorShuffle %301 %301 2 3 
                                       f32_4 %303 = OpLoad %300 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore %300 %304 
                                       f32_4 %305 = OpLoad %9 
                                       f32_2 %306 = OpVectorShuffle %305 %305 2 2 
                                       f32_4 %307 = OpLoad %9 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 3 
                                       f32_2 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %300 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 2 3 
                                                      OpStore %300 %311 
                                                      OpStore %312 %231 
                                 Output f32* %314 = OpAccessChain %92 %31 %88 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFNegate %315 
                                 Output f32* %317 = OpAccessChain %92 %31 %88 
                                                      OpStore %317 %316 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
float u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat0.x * 15.9375;
    u_xlat5 = floor(u_xlat1.x);
    u_xlat2.x = u_xlat5 * 0.0625 + 0.0399999991;
    u_xlatb5 = u_xlat1.x>=(-u_xlat1.x);
    u_xlat1.x = fract(abs(u_xlat1.x));
    u_xlat1.x = (u_xlatb5) ? u_xlat1.x : (-u_xlat1.x);
    u_xlat2.y = u_xlat1.x + 0.0399999991;
    u_xlat10_1 = texture(_PaletteTex, u_xlat2.xy);
    u_xlat2.xyz = (-u_xlat10_1.xyz) + _OverrideColor.xyz;
    u_xlat1.xyz = _OverrideColor.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(u_xlat13) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat2.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 421
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %92 %98 %99 %113 %152 %155 %158 %381 %402 %414 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %381 Location 381 
                                                      OpDecorate %402 Location 402 
                                                      OpDecorate %414 Location 414 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 15 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 16 
                                             %111 = OpTypeVector %6 3 
                                             %112 = OpTypePointer Input %111 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 14 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                                             %151 = OpTypePointer Output %111 
                               Output f32_3* %152 = OpVariable Output 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_4* %158 = OpVariable Output 
                                             %160 = OpTypePointer Private %111 
                              Private f32_3* %161 = OpVariable Private 
                              Private f32_4* %178 = OpVariable Private 
                              Private f32_3* %184 = OpVariable Private 
                                         i32 %185 = OpConstant 9 
                                         i32 %191 = OpConstant 10 
                                         i32 %197 = OpConstant 11 
                                         i32 %203 = OpConstant 12 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         u32 %213 = OpConstant 3 
                                         i32 %215 = OpConstant 6 
                                         i32 %221 = OpConstant 7 
                                         i32 %227 = OpConstant 8 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                                       f32_3 %246 = OpConstantComposite %245 %245 %245 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                              Private f32_4* %259 = OpVariable Private 
                              Private f32_4* %266 = OpVariable Private 
                              Private f32_4* %274 = OpVariable Private 
                                         f32 %310 = OpConstant 3.674022E-40 
                                       f32_4 %311 = OpConstantComposite %310 %310 %310 %310 
                                         i32 %316 = OpConstant 4 
                                       f32_4 %320 = OpConstantComposite %212 %212 %212 %212 
                                       f32_4 %328 = OpConstantComposite %238 %238 %238 %238 
                                         i32 %335 = OpConstant 5 
                               Output f32_3* %381 = OpVariable Output 
                                             %386 = OpTypePointer Uniform %6 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_2 %398 = OpConstantComposite %393 %393 
                               Output f32_4* %402 = OpVariable Output 
                               Output f32_4* %414 = OpVariable Output 
                                             %415 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %53 = OpAccessChain %23 %25 %49 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %11 
                                        f32_4 %56 = OpVectorShuffle %55 %55 3 3 3 3 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %9 %59 
                                        f32_4 %61 = OpLoad %47 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %23 %63 %26 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %62 %65 
                                                      OpStore %60 %66 
                               Uniform f32_4* %67 = OpAccessChain %23 %63 %31 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %47 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %60 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %60 %73 
                               Uniform f32_4* %74 = OpAccessChain %23 %63 %39 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %47 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %60 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %60 %80 
                               Uniform f32_4* %81 = OpAccessChain %23 %63 %49 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %47 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %60 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %47 %87 
                                        f32_4 %93 = OpLoad %47 
                                Output f32_4* %95 = OpAccessChain %92 %31 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %23 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %23 %115 %31 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %60 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %23 %115 %26 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %60 %88 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %23 %115 %39 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %60 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %60 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %60 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %60 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %60 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %60 %150 
                                       f32_4 %153 = OpLoad %60 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                                      OpStore %158 %159 
                                Private f32* %162 = OpAccessChain %60 %88 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %60 %88 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %161 %120 
                                                      OpStore %167 %166 
                                Private f32* %168 = OpAccessChain %60 %120 
                                         f32 %169 = OpLoad %168 
                                Private f32* %170 = OpAccessChain %60 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                Private f32* %173 = OpAccessChain %161 %120 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFNegate %174 
                                         f32 %176 = OpFAdd %172 %175 
                                Private f32* %177 = OpAccessChain %161 %120 
                                                      OpStore %177 %176 
                                       f32_4 %179 = OpLoad %60 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 2 2 0 
                                       f32_4 %181 = OpLoad %60 
                                       f32_4 %182 = OpVectorShuffle %181 %181 0 1 2 2 
                                       f32_4 %183 = OpFMul %180 %182 
                                                      OpStore %178 %183 
                              Uniform f32_4* %186 = OpAccessChain %23 %185 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %178 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %184 %120 
                                                      OpStore %190 %189 
                              Uniform f32_4* %192 = OpAccessChain %23 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %178 
                                         f32 %195 = OpDot %193 %194 
                                Private f32* %196 = OpAccessChain %184 %88 
                                                      OpStore %196 %195 
                              Uniform f32_4* %198 = OpAccessChain %23 %197 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpLoad %178 
                                         f32 %201 = OpDot %199 %200 
                                Private f32* %202 = OpAccessChain %184 %134 
                                                      OpStore %202 %201 
                              Uniform f32_4* %204 = OpAccessChain %23 %203 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpLoad %161 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 0 0 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %210 = OpLoad %184 
                                       f32_3 %211 = OpFAdd %209 %210 
                                                      OpStore %161 %211 
                                Private f32* %214 = OpAccessChain %60 %213 
                                                      OpStore %214 %212 
                              Uniform f32_4* %216 = OpAccessChain %23 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %60 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %178 %120 
                                                      OpStore %220 %219 
                              Uniform f32_4* %222 = OpAccessChain %23 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %60 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %178 %88 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %23 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %60 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %178 %134 
                                                      OpStore %232 %231 
                                       f32_3 %233 = OpLoad %161 
                                       f32_4 %234 = OpLoad %178 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore %161 %236 
                                       f32_3 %237 = OpLoad %161 
                                       f32_3 %240 = OpExtInst %1 40 %237 %239 
                                                      OpStore %161 %240 
                                       f32_3 %242 = OpLoad %161 
                                       f32_3 %243 = OpExtInst %1 30 %242 
                                                      OpStore %241 %243 
                                       f32_3 %244 = OpLoad %241 
                                       f32_3 %247 = OpFMul %244 %246 
                                                      OpStore %241 %247 
                                       f32_3 %248 = OpLoad %241 
                                       f32_3 %249 = OpExtInst %1 29 %248 
                                                      OpStore %241 %249 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %256 = OpFAdd %253 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %241 
                                       f32_3 %258 = OpExtInst %1 40 %257 %239 
                                                      OpStore %241 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 1 1 1 1 
                                       f32_4 %262 = OpFNegate %261 
                              Uniform f32_4* %263 = OpAccessChain %23 %39 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpFAdd %262 %264 
                                                      OpStore %259 %265 
                                       f32_4 %267 = OpLoad %60 
                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
                                       f32_4 %269 = OpLoad %259 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %266 %270 
                                       f32_4 %271 = OpLoad %259 
                                       f32_4 %272 = OpLoad %259 
                                       f32_4 %273 = OpFMul %271 %272 
                                                      OpStore %259 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %23 %26 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %274 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %281 2 2 2 2 
                                       f32_4 %283 = OpFNegate %282 
                              Uniform f32_4* %284 = OpAccessChain %23 %49 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpFAdd %283 %285 
                                                      OpStore %9 %286 
                                       f32_4 %287 = OpLoad %274 
                                       f32_4 %288 = OpLoad %60 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %266 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %266 %292 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpLoad %60 
                                       f32_4 %295 = OpVectorShuffle %294 %294 2 2 2 2 
                                       f32_4 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %266 
                                       f32_4 %298 = OpFAdd %296 %297 
                                                      OpStore %60 %298 
                                       f32_4 %299 = OpLoad %274 
                                       f32_4 %300 = OpLoad %274 
                                       f32_4 %301 = OpFMul %299 %300 
                                       f32_4 %302 = OpLoad %259 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %259 %303 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpLoad %9 
                                       f32_4 %306 = OpFMul %304 %305 
                                       f32_4 %307 = OpLoad %259 
                                       f32_4 %308 = OpFAdd %306 %307 
                                                      OpStore %9 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %312 = OpExtInst %1 40 %309 %311 
                                                      OpStore %9 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpExtInst %1 32 %313 
                                                      OpStore %259 %314 
                                       f32_4 %315 = OpLoad %9 
                              Uniform f32_4* %317 = OpAccessChain %23 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFMul %315 %318 
                                       f32_4 %321 = OpFAdd %319 %320 
                                                      OpStore %9 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpFDiv %320 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %60 
                                       f32_4 %325 = OpLoad %259 
                                       f32_4 %326 = OpFMul %324 %325 
                                                      OpStore %60 %326 
                                       f32_4 %327 = OpLoad %60 
                                       f32_4 %329 = OpExtInst %1 40 %327 %328 
                                                      OpStore %60 %329 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpLoad %60 
                                       f32_4 %332 = OpFMul %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
                              Uniform f32_4* %336 = OpAccessChain %23 %335 %26 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %334 %338 
                                       f32_4 %340 = OpLoad %60 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %60 %341 
                              Uniform f32_4* %342 = OpAccessChain %23 %335 %31 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_4 %348 = OpLoad %60 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFAdd %347 %349 
                                       f32_4 %351 = OpLoad %60 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %60 %352 
                              Uniform f32_4* %353 = OpAccessChain %23 %335 %39 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 2 2 2 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %60 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                              Uniform f32_4* %364 = OpAccessChain %23 %335 %49 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 3 3 3 
                                       f32_3 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %9 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpLoad %241 
                                       f32_3 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                                      OpStore %381 %383 
                                Private f32* %384 = OpAccessChain %47 %88 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %387 = OpAccessChain %23 %31 %120 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %385 %388 
                                Private f32* %390 = OpAccessChain %9 %120 
                                                      OpStore %390 %389 
                                Private f32* %391 = OpAccessChain %9 %120 
                                         f32 %392 = OpLoad %391 
                                         f32 %394 = OpFMul %392 %393 
                                Private f32* %395 = OpAccessChain %9 %213 
                                                      OpStore %395 %394 
                                       f32_4 %396 = OpLoad %47 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 3 
                                       f32_2 %399 = OpFMul %397 %398 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 1 5 3 
                                                      OpStore %9 %401 
                                       f32_4 %403 = OpLoad %47 
                                       f32_2 %404 = OpVectorShuffle %403 %403 2 3 
                                       f32_4 %405 = OpLoad %402 
                                       f32_4 %406 = OpVectorShuffle %405 %404 0 1 4 5 
                                                      OpStore %402 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_2 %408 = OpVectorShuffle %407 %407 2 2 
                                       f32_4 %409 = OpLoad %9 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 3 
                                       f32_2 %411 = OpFAdd %408 %410 
                                       f32_4 %412 = OpLoad %402 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 2 3 
                                                      OpStore %402 %413 
                                                      OpStore %414 %328 
                                 Output f32* %416 = OpAccessChain %92 %31 %88 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                 Output f32* %419 = OpAccessChain %92 %31 %88 
                                                      OpStore %419 %418 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 391
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %134 %308 %350 %386 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpDecorate %89 ArrayStride 89 
                                                      OpMemberDecorate %90 0 Offset 90 
                                                      OpMemberDecorate %90 1 RelaxedPrecision 
                                                      OpMemberDecorate %90 1 Offset 90 
                                                      OpMemberDecorate %90 2 RelaxedPrecision 
                                                      OpMemberDecorate %90 2 Offset 90 
                                                      OpMemberDecorate %90 3 Offset 90 
                                                      OpMemberDecorate %90 4 Offset 90 
                                                      OpMemberDecorate %90 5 Offset 90 
                                                      OpMemberDecorate %90 6 Offset 90 
                                                      OpMemberDecorate %90 7 Offset 90 
                                                      OpMemberDecorate %90 8 Offset 90 
                                                      OpMemberDecorate %90 9 RelaxedPrecision 
                                                      OpMemberDecorate %90 9 Offset 90 
                                                      OpMemberDecorate %90 10 Offset 90 
                                                      OpMemberDecorate %90 11 RelaxedPrecision 
                                                      OpMemberDecorate %90 11 Offset 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %92 DescriptorSet 92 
                                                      OpDecorate %92 Binding 92 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %207 SpecId 207 
                                                      OpDecorate %287 DescriptorSet 287 
                                                      OpDecorate %287 Binding 287 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %350 Location 350 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                                      OpDecorate %388 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %29 = OpConstant 3.674022E-40 
                                 Private f32* %32 = OpVariable Private 
                                              %36 = OpTypePointer Private %15 
                               Private f32_2* %37 = OpVariable Private 
                                          f32 %39 = OpConstant 3.674022E-40 
                                          f32 %41 = OpConstant 3.674022E-40 
                                              %44 = OpTypeBool 
                                              %45 = OpTypePointer Private %44 
                                Private bool* %46 = OpVariable Private 
                                              %58 = OpTypePointer Function %6 
                                          u32 %74 = OpConstant 1 
                                              %76 = OpTypeVector %6 3 
                                              %77 = OpTypePointer Private %76 
                               Private f32_3* %78 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %79 = OpVariable UniformConstant 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %87 = OpConstant 4 
                                              %88 = OpTypeArray %7 %87 
                                              %89 = OpTypeArray %7 %87 
                                              %90 = OpTypeStruct %76 %7 %7 %7 %88 %7 %89 %76 %76 %7 %7 %6 
                                              %91 = OpTypePointer Uniform %90 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %92 = OpVariable Uniform 
                                              %93 = OpTypeInt 32 1 
                                          i32 %94 = OpConstant 10 
                                              %95 = OpTypePointer Uniform %7 
                              Private f32_3* %100 = OpVariable Private 
                                         u32 %108 = OpConstant 3 
                                         i32 %111 = OpConstant 11 
                                             %112 = OpTypePointer Uniform %6 
                               Private bool* %118 = OpVariable Private 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %124 = OpConstant 0 
                                         i32 %125 = OpConstant 1 
                                         i32 %127 = OpConstant -1 
                                             %133 = OpTypePointer Input %76 
                                Input f32_3* %134 = OpVariable Input 
                                             %137 = OpTypePointer Uniform %76 
                              Private f32_3* %141 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         u32 %143 = OpConstant 2 
                                         i32 %150 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                         i32 %159 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                               Private bool* %196 = OpVariable Private 
                                         i32 %197 = OpConstant 5 
                                        bool %201 = OpConstantFalse 
                                        bool %207 = OpSpecConstantFalse 
                               Private bool* %210 = OpVariable Private 
                                         i32 %216 = OpConstant 6 
                              Private f32_3* %242 = OpVariable Private 
                                             %243 = OpTypePointer Function %76 
                                         i32 %253 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %260 = OpConstant 7 
                                         f32 %268 = OpConstant 3.674022E-40 
                                         f32 %270 = OpConstant 3.674022E-40 
                                Private f32* %273 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                             %284 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                             %286 = OpTypePointer UniformConstant %285 
 UniformConstant read_only Texture3DSampled* %287 = OpVariable UniformConstant 
                                             %307 = OpTypePointer Input %7 
                                Input f32_4* %308 = OpVariable Input 
                                Private f32* %316 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %317 = OpVariable UniformConstant 
                              Private f32_3* %323 = OpVariable Private 
                                Input f32_3* %350 = OpVariable Input 
                                         i32 %356 = OpConstant 9 
                              Private f32_3* %361 = OpVariable Private 
                                             %385 = OpTypePointer Output %7 
                               Output f32_4* %386 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %59 = OpVariable Function 
                             Function f32_3* %244 = OpVariable Function 
                               Function f32* %338 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %20 = OpVectorShuffle %19 %19 0 3 
                                        f32_4 %21 = OpLoad %9 
                                        f32_4 %22 = OpVectorShuffle %21 %20 4 1 2 5 
                                                      OpStore %9 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                          f32 %28 = OpLoad %27 
                                          f32 %30 = OpFMul %28 %29 
                                 Private f32* %31 = OpAccessChain %23 %25 
                                                      OpStore %31 %30 
                                 Private f32* %33 = OpAccessChain %23 %25 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpExtInst %1 8 %34 
                                                      OpStore %32 %35 
                                          f32 %38 = OpLoad %32 
                                          f32 %40 = OpFMul %38 %39 
                                          f32 %42 = OpFAdd %40 %41 
                                 Private f32* %43 = OpAccessChain %37 %25 
                                                      OpStore %43 %42 
                                 Private f32* %47 = OpAccessChain %23 %25 
                                          f32 %48 = OpLoad %47 
                                 Private f32* %49 = OpAccessChain %23 %25 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFNegate %50 
                                         bool %52 = OpFOrdGreaterThanEqual %48 %51 
                                                      OpStore %46 %52 
                                 Private f32* %53 = OpAccessChain %23 %25 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 4 %54 
                                          f32 %56 = OpExtInst %1 10 %55 
                                 Private f32* %57 = OpAccessChain %23 %25 
                                                      OpStore %57 %56 
                                         bool %60 = OpLoad %46 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %65 
                                              %61 = OpLabel 
                                 Private f32* %63 = OpAccessChain %23 %25 
                                          f32 %64 = OpLoad %63 
                                                      OpStore %59 %64 
                                                      OpBranch %62 
                                              %65 = OpLabel 
                                 Private f32* %66 = OpAccessChain %23 %25 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                                      OpStore %59 %68 
                                                      OpBranch %62 
                                              %62 = OpLabel 
                                          f32 %69 = OpLoad %59 
                                 Private f32* %70 = OpAccessChain %23 %25 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %23 %25 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %72 %41 
                                 Private f32* %75 = OpAccessChain %37 %74 
                                                      OpStore %75 %73 
                   read_only Texture2DSampled %80 = OpLoad %79 
                                        f32_2 %81 = OpLoad %37 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                                      OpStore %78 %83 
                                        f32_3 %85 = OpLoad %78 
                                        f32_3 %86 = OpFNegate %85 
                               Uniform f32_4* %96 = OpAccessChain %92 %94 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %86 %98 
                                                      OpStore %84 %99 
                              Uniform f32_4* %101 = OpAccessChain %92 %94 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 3 3 3 
                                       f32_3 %104 = OpLoad %84 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_3 %106 = OpLoad %78 
                                       f32_3 %107 = OpFAdd %105 %106 
                                                      OpStore %100 %107 
                                Private f32* %109 = OpAccessChain %9 %108 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %113 = OpAccessChain %92 %111 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                         f32 %116 = OpFAdd %110 %115 
                                Private f32* %117 = OpAccessChain %23 %25 
                                                      OpStore %117 %116 
                                Private f32* %119 = OpAccessChain %23 %25 
                                         f32 %120 = OpLoad %119 
                                        bool %122 = OpFOrdLessThan %120 %121 
                                                      OpStore %118 %122 
                                        bool %123 = OpLoad %118 
                                         i32 %126 = OpSelect %123 %125 %124 
                                         i32 %128 = OpIMul %126 %127 
                                        bool %129 = OpINotEqual %128 %124 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %131 
                                             %130 = OpLabel 
                                                      OpKill
                                             %131 = OpLabel 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                              Uniform f32_3* %138 = OpAccessChain %92 %124 
                                       f32_3 %139 = OpLoad %138 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %84 %140 
                                Uniform f32* %144 = OpAccessChain %92 %142 %124 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %141 %25 
                                                      OpStore %146 %145 
                                Uniform f32* %147 = OpAccessChain %92 %142 %125 %143 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %141 %74 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %92 %142 %150 %143 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %141 %143 
                                                      OpStore %153 %152 
                                       f32_3 %155 = OpLoad %84 
                                       f32_3 %156 = OpLoad %141 
                                         f32 %157 = OpDot %155 %156 
                                                      OpStore %154 %157 
                                       f32_3 %158 = OpLoad %134 
                              Uniform f32_4* %160 = OpAccessChain %92 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %84 %164 
                                       f32_3 %165 = OpLoad %84 
                                       f32_3 %166 = OpLoad %84 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %84 %25 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %84 %25 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 31 %170 
                                Private f32* %172 = OpAccessChain %84 %25 
                                                      OpStore %172 %171 
                                         f32 %173 = OpLoad %154 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %175 = OpAccessChain %84 %25 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                Private f32* %178 = OpAccessChain %84 %25 
                                                      OpStore %178 %177 
                                Uniform f32* %179 = OpAccessChain %92 %159 %108 
                                         f32 %180 = OpLoad %179 
                                Private f32* %181 = OpAccessChain %84 %25 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                         f32 %184 = OpLoad %154 
                                         f32 %185 = OpFAdd %183 %184 
                                                      OpStore %154 %185 
                                         f32 %186 = OpLoad %154 
                                Uniform f32* %187 = OpAccessChain %92 %150 %143 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFMul %186 %188 
                                Uniform f32* %190 = OpAccessChain %92 %150 %108 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFAdd %189 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 43 %193 %121 %194 
                                                      OpStore %154 %195 
                                Uniform f32* %198 = OpAccessChain %92 %197 %25 
                                         f32 %199 = OpLoad %198 
                                        bool %200 = OpFOrdEqual %199 %194 
                                                      OpStore %196 %200 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                        bool %204 = OpLoad %196 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %206 
                                             %205 = OpLabel 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                                      OpBranch %203 
                                             %203 = OpLabel 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %293 
                                             %208 = OpLabel 
                                Uniform f32* %211 = OpAccessChain %92 %197 %74 
                                         f32 %212 = OpLoad %211 
                                        bool %213 = OpFOrdEqual %212 %194 
                                                      OpStore %210 %213 
                                       f32_3 %214 = OpLoad %134 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %92 %216 %125 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_3 %220 = OpFMul %215 %219 
                                                      OpStore %141 %220 
                              Uniform f32_4* %221 = OpAccessChain %92 %216 %124 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpLoad %134 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_3 %227 = OpLoad %141 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %141 %228 
                              Uniform f32_4* %229 = OpAccessChain %92 %216 %150 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpLoad %134 
                                       f32_3 %233 = OpVectorShuffle %232 %232 2 2 2 
                                       f32_3 %234 = OpFMul %231 %233 
                                       f32_3 %235 = OpLoad %141 
                                       f32_3 %236 = OpFAdd %234 %235 
                                                      OpStore %141 %236 
                                       f32_3 %237 = OpLoad %141 
                              Uniform f32_4* %238 = OpAccessChain %92 %216 %159 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFAdd %237 %240 
                                                      OpStore %141 %241 
                                        bool %245 = OpLoad %210 
                                                      OpSelectionMerge %247 None 
                                                      OpBranchConditional %245 %246 %249 
                                             %246 = OpLabel 
                                       f32_3 %248 = OpLoad %141 
                                                      OpStore %244 %248 
                                                      OpBranch %247 
                                             %249 = OpLabel 
                                       f32_3 %250 = OpLoad %134 
                                                      OpStore %244 %250 
                                                      OpBranch %247 
                                             %247 = OpLabel 
                                       f32_3 %251 = OpLoad %244 
                                                      OpStore %242 %251 
                                       f32_3 %252 = OpLoad %242 
                              Uniform f32_3* %254 = OpAccessChain %92 %253 
                                       f32_3 %255 = OpLoad %254 
                                       f32_3 %256 = OpFNegate %255 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %242 %257 
                                       f32_3 %259 = OpLoad %242 
                              Uniform f32_3* %261 = OpAccessChain %92 %260 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFMul %259 %262 
                                       f32_4 %264 = OpLoad %258 
                                       f32_4 %265 = OpVectorShuffle %264 %263 0 4 5 6 
                                                      OpStore %258 %265 
                                Private f32* %266 = OpAccessChain %258 %74 
                                         f32 %267 = OpLoad %266 
                                         f32 %269 = OpFMul %267 %268 
                                         f32 %271 = OpFAdd %269 %270 
                                Private f32* %272 = OpAccessChain %242 %25 
                                                      OpStore %272 %271 
                                Uniform f32* %274 = OpAccessChain %92 %197 %143 
                                         f32 %275 = OpLoad %274 
                                         f32 %277 = OpFMul %275 %276 
                                         f32 %278 = OpFAdd %277 %270 
                                                      OpStore %273 %278 
                                         f32 %279 = OpLoad %273 
                                Private f32* %280 = OpAccessChain %242 %25 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 40 %279 %281 
                                Private f32* %283 = OpAccessChain %258 %25 
                                                      OpStore %283 %282 
                  read_only Texture3DSampled %288 = OpLoad %287 
                                       f32_4 %289 = OpLoad %258 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 2 3 
                                       f32_4 %291 = OpImageSampleImplicitLod %288 %290 
                                                      OpStore %258 %291 
                                       f32_4 %292 = OpLoad %258 
                                                      OpStore %23 %292 
                                                      OpBranch %209 
                                             %293 = OpLabel 
                                Private f32* %294 = OpAccessChain %23 %25 
                                                      OpStore %294 %194 
                                Private f32* %295 = OpAccessChain %23 %74 
                                                      OpStore %295 %194 
                                Private f32* %296 = OpAccessChain %23 %143 
                                                      OpStore %296 %194 
                                Private f32* %297 = OpAccessChain %23 %108 
                                                      OpStore %297 %194 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                       f32_4 %298 = OpLoad %23 
                              Uniform f32_4* %299 = OpAccessChain %92 %125 
                                       f32_4 %300 = OpLoad %299 
                                         f32 %301 = OpDot %298 %300 
                                Private f32* %302 = OpAccessChain %37 %25 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %37 %25 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpExtInst %1 43 %304 %121 %194 
                                Private f32* %306 = OpAccessChain %37 %25 
                                                      OpStore %306 %305 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpLoad %308 
                                       f32_2 %312 = OpVectorShuffle %311 %311 3 3 
                                       f32_2 %313 = OpFDiv %310 %312 
                                       f32_3 %314 = OpLoad %242 
                                       f32_3 %315 = OpVectorShuffle %314 %313 3 4 2 
                                                      OpStore %242 %315 
                  read_only Texture2DSampled %318 = OpLoad %317 
                                       f32_3 %319 = OpLoad %242 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 0 
                                                      OpStore %316 %322 
                                         f32 %324 = OpLoad %154 
                                         f32 %325 = OpLoad %316 
                                         f32 %326 = OpFAdd %324 %325 
                                Private f32* %327 = OpAccessChain %323 %25 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %323 %25 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %121 %194 
                                Private f32* %331 = OpAccessChain %323 %25 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %323 %25 
                                         f32 %333 = OpLoad %332 
                                Private f32* %334 = OpAccessChain %37 %25 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpExtInst %1 37 %333 %335 
                                Private f32* %337 = OpAccessChain %37 %25 
                                                      OpStore %337 %336 
                                        bool %339 = OpLoad %196 
                                                      OpSelectionMerge %341 None 
                                                      OpBranchConditional %339 %340 %344 
                                             %340 = OpLabel 
                                Private f32* %342 = OpAccessChain %37 %25 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %338 %343 
                                                      OpBranch %341 
                                             %344 = OpLabel 
                                Private f32* %345 = OpAccessChain %323 %25 
                                         f32 %346 = OpLoad %345 
                                                      OpStore %338 %346 
                                                      OpBranch %341 
                                             %341 = OpLabel 
                                         f32 %347 = OpLoad %338 
                                Private f32* %348 = OpAccessChain %37 %25 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %100 
                                       f32_3 %351 = OpLoad %350 
                                       f32_3 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %23 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %23 %354 
                                       f32_3 %355 = OpLoad %100 
                              Uniform f32_4* %357 = OpAccessChain %92 %356 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFMul %355 %359 
                                                      OpStore %323 %360 
                                       f32_2 %362 = OpLoad %37 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 0 0 
                                       f32_3 %364 = OpLoad %323 
                                       f32_3 %365 = OpFMul %363 %364 
                                                      OpStore %361 %365 
                                       f32_3 %366 = OpLoad %323 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_2 %368 = OpLoad %37 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                                       f32_3 %370 = OpFMul %367 %369 
                              Uniform f32_4* %371 = OpAccessChain %92 %94 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFAdd %370 %373 
                                                      OpStore %100 %374 
                              Uniform f32_4* %375 = OpAccessChain %92 %94 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpLoad %100 
                                       f32_3 %379 = OpFMul %377 %378 
                                       f32_3 %380 = OpLoad %361 
                                       f32_3 %381 = OpFAdd %379 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %9 %383 
                                Private f32* %384 = OpAccessChain %23 %108 
                                                      OpStore %384 %121 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpLoad %23 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %386 %389 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "PIXEL_SHADOW_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "PIXEL_SHADOW_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "PIXEL_SHADOW_ON" }
""
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  GpuProgramID 67482
Program "vp" {
SubProgram "d3d11 " {
Keywords { "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _OverrideColor;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat2;
bool u_xlatb2;
float u_xlat4;
float u_xlat6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_0.w + (-_Cutoff);
    u_xlat0.x = u_xlat10_0.x * 15.9375;
    u_xlatb2 = u_xlat2<0.0;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    u_xlatb2 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat4 = fract(abs(u_xlat0.x));
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat1.x = u_xlat0.x * 0.0625 + 0.0399999991;
    u_xlat0.x = (u_xlatb2) ? u_xlat4 : (-u_xlat4);
    u_xlat1.y = u_xlat0.x + 0.0399999991;
    u_xlat10_0 = texture(_PaletteTex, u_xlat1.xy);
    u_xlat1.xyz = (-u_xlat10_0.xyz) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %209 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %209 Location 209 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                               Output f32_4* %209 = OpVariable Output 
                                             %217 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFMul %191 %193 
                                                      OpStore %21 %194 
                              Uniform f32_4* %195 = OpAccessChain %42 %120 %120 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %13 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
                                       f32_4 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %21 
                                       f32_4 %201 = OpFAdd %199 %200 
                                                      OpStore %21 %201 
                              Uniform f32_4* %202 = OpAccessChain %42 %120 %44 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 2 2 2 2 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %210 = OpAccessChain %42 %120 %92 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %13 
                                       f32_4 %213 = OpVectorShuffle %212 %212 3 3 3 3 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %209 %216 
                                 Output f32* %218 = OpAccessChain %166 %120 %162 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                 Output f32* %221 = OpAccessChain %166 %120 %162 
                                                      OpStore %221 %220 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 187
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %173 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 1 
                                              %30 = OpTypeVector %26 4 
                                              %31 = OpTypeStruct %19 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; u32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 4 
                                              %36 = OpTypePointer Uniform %6 
                                 Private f32* %41 = OpVariable Private 
                                          u32 %42 = OpConstant 0 
                                          f32 %45 = OpConstant 3.674022E-40 
                                              %47 = OpTypeBool 
                                              %48 = OpTypePointer Private %47 
                                Private bool* %49 = OpVariable Private 
                                          f32 %51 = OpConstant 3.674022E-40 
                                          i32 %54 = OpConstant 0 
                                          i32 %55 = OpConstant 1 
                                          i32 %57 = OpConstant -1 
                                              %72 = OpTypePointer Private %15 
                               Private f32_2* %73 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                                              %80 = OpTypePointer Function %6 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                               Private f32_3* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %19 
                              Private f32_3* %106 = OpVariable Private 
                                Private f32* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 2 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %130 = OpConstant 3 
                                             %143 = OpTypePointer Private %19 
                              Private f32_4* %144 = OpVariable Private 
                                             %145 = OpTypePointer Function %7 
                                             %147 = OpTypeVector %47 4 
                                             %148 = OpTypePointer Uniform %30 
                                       f32_3 %157 = OpConstantComposite %51 %51 %51 
                                         u32 %170 = OpConstant 3 
                                             %172 = OpTypePointer Output %19 
                               Output f32_4* %173 = OpVariable Output 
                                             %174 = OpTypePointer Function %19 
                                       f32_4 %182 = OpConstantComposite %51 %51 %51 %121 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                             Function f32_3* %146 = OpVariable Function 
                               Function f32* %161 = OpVariable Function 
                             Function f32_4* %175 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %21 = OpVectorShuffle %20 %20 0 3 
                                        f32_3 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %21 3 4 2 
                                                      OpStore %9 %23 
                                 Private f32* %28 = OpAccessChain %9 %27 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %29 %39 
                                                      OpStore %25 %40 
                                 Private f32* %43 = OpAccessChain %9 %42 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                                      OpStore %41 %46 
                                          f32 %50 = OpLoad %25 
                                         bool %52 = OpFOrdLessThan %50 %51 
                                                      OpStore %49 %52 
                                         bool %53 = OpLoad %49 
                                          i32 %56 = OpSelect %53 %55 %54 
                                          i32 %58 = OpIMul %56 %57 
                                         bool %59 = OpINotEqual %58 %54 
                                                      OpSelectionMerge %61 None 
                                                      OpBranchConditional %59 %60 %61 
                                              %60 = OpLabel 
                                                      OpKill
                                              %61 = OpLabel 
                                          f32 %63 = OpLoad %41 
                                          f32 %64 = OpLoad %41 
                                          f32 %65 = OpFNegate %64 
                                         bool %66 = OpFOrdGreaterThanEqual %63 %65 
                                                      OpStore %49 %66 
                                          f32 %67 = OpLoad %41 
                                          f32 %68 = OpExtInst %1 4 %67 
                                          f32 %69 = OpExtInst %1 10 %68 
                                                      OpStore %25 %69 
                                          f32 %70 = OpLoad %41 
                                          f32 %71 = OpExtInst %1 8 %70 
                                                      OpStore %41 %71 
                                          f32 %74 = OpLoad %41 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                 Private f32* %79 = OpAccessChain %73 %42 
                                                      OpStore %79 %78 
                                         bool %82 = OpLoad %49 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                          f32 %85 = OpLoad %25 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                          f32 %87 = OpLoad %25 
                                          f32 %88 = OpFNegate %87 
                                                      OpStore %81 %88 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %89 = OpLoad %81 
                                                      OpStore %25 %89 
                                          f32 %90 = OpLoad %25 
                                          f32 %91 = OpFAdd %90 %77 
                                 Private f32* %92 = OpAccessChain %73 %27 
                                                      OpStore %92 %91 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_2 %95 = OpLoad %73 
                                        f32_4 %96 = OpImageSampleImplicitLod %94 %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                                      OpStore %9 %97 
                                        f32_3 %99 = OpLoad %9 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_4* %102 = OpAccessChain %33 %54 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %100 %104 
                                                      OpStore %98 %105 
                              Uniform f32_4* %107 = OpAccessChain %33 %54 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 3 3 3 
                                       f32_3 %110 = OpLoad %98 
                                       f32_3 %111 = OpFMul %109 %110 
                                       f32_3 %112 = OpLoad %9 
                                       f32_3 %113 = OpFAdd %111 %112 
                                                      OpStore %106 %113 
                                       f32_3 %114 = OpLoad %106 
                                       f32_3 %115 = OpExtInst %1 30 %114 
                                                      OpStore %106 %115 
                                Uniform f32* %118 = OpAccessChain %33 %117 
                                         f32 %119 = OpLoad %118 
                                                      OpStore %116 %119 
                                         f32 %120 = OpLoad %116 
                                         f32 %122 = OpExtInst %1 43 %120 %51 %121 
                                                      OpStore %116 %122 
                                       f32_3 %123 = OpLoad %106 
                                         f32 %124 = OpLoad %116 
                                       f32_3 %125 = OpCompositeConstruct %124 %124 %124 
                                       f32_3 %126 = OpFMul %123 %125 
                                                      OpStore %106 %126 
                                       f32_3 %127 = OpLoad %106 
                                       f32_3 %128 = OpExtInst %1 29 %127 
                                                      OpStore %106 %128 
                                       f32_3 %129 = OpLoad %106 
                                Uniform f32* %131 = OpAccessChain %33 %130 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %33 %130 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %33 %130 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpExtInst %1 37 %129 %141 
                                                      OpStore %106 %142 
                              Uniform u32_4* %149 = OpAccessChain %33 %55 
                                       u32_4 %150 = OpLoad %149 
                                         u32 %151 = OpCompositeExtract %150 0 
                                        bool %152 = OpINotEqual %151 %42 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %156 
                                             %153 = OpLabel 
                                       f32_3 %155 = OpLoad %106 
                                                      OpStore %146 %155 
                                                      OpBranch %154 
                                             %156 = OpLabel 
                                                      OpStore %146 %157 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %158 = OpLoad %146 
                                       f32_4 %159 = OpLoad %144 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %144 %160 
                              Uniform u32_4* %162 = OpAccessChain %33 %55 
                                       u32_4 %163 = OpLoad %162 
                                         u32 %164 = OpCompositeExtract %163 0 
                                        bool %165 = OpINotEqual %164 %42 
                                                      OpSelectionMerge %167 None 
                                                      OpBranchConditional %165 %166 %168 
                                             %166 = OpLabel 
                                                      OpStore %161 %121 
                                                      OpBranch %167 
                                             %168 = OpLabel 
                                                      OpStore %161 %51 
                                                      OpBranch %167 
                                             %167 = OpLabel 
                                         f32 %169 = OpLoad %161 
                                Private f32* %171 = OpAccessChain %144 %170 
                                                      OpStore %171 %169 
                              Uniform u32_4* %176 = OpAccessChain %33 %55 
                                       u32_4 %177 = OpLoad %176 
                                         u32 %178 = OpCompositeExtract %177 1 
                                        bool %179 = OpINotEqual %178 %42 
                                                      OpSelectionMerge %181 None 
                                                      OpBranchConditional %179 %180 %183 
                                             %180 = OpLabel 
                                                      OpStore %175 %182 
                                                      OpBranch %181 
                                             %183 = OpLabel 
                                       f32_4 %184 = OpLoad %144 
                                                      OpStore %175 %184 
                                                      OpBranch %181 
                                             %181 = OpLabel 
                                       f32_4 %185 = OpLoad %175 
                                                      OpStore %173 %185 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _OverrideColor;
uniform 	int unity_VisualizationMode;
uniform 	int _CheckAlbedo;
uniform 	vec4 _AlbedoCompareColor;
uniform 	float _AlbedoMinLuminance;
uniform 	float _AlbedoMaxLuminance;
uniform 	float _AlbedoHueTolerance;
uniform 	float _AlbedoSaturationTolerance;
uniform 	vec4 unity_MaterialValidateLowColor;
uniform 	vec4 unity_MaterialValidateHighColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
bvec3 u_xlatb7;
float u_xlat8;
vec2 u_xlat9;
vec2 u_xlat10;
vec2 u_xlat12;
bool u_xlatb12;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat6.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb6 = u_xlat6.x<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    if(unity_VisualizationMode == 0) {
        u_xlat0.x = u_xlat10_0.x * 15.9375;
        u_xlat6.x = floor(u_xlat0.x);
        u_xlat1.x = u_xlat6.x * 0.0625 + 0.0399999991;
        u_xlatb6 = u_xlat0.x>=(-u_xlat0.x);
        u_xlat0.x = fract(abs(u_xlat0.x));
        u_xlat0.x = (u_xlatb6) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat1.y = u_xlat0.x + 0.0399999991;
        u_xlat10_0 = texture(_PaletteTex, u_xlat1.xy);
        u_xlat1.xyz = (-u_xlat10_0.xyz) + _OverrideColor.xyz;
        u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat10_0.xyz;
        u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
        u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
        u_xlatb3.xyz = lessThan(u_xlat0.xyzx, vec4(1.0, 1.0, 1.0, 0.0)).xyz;
        u_xlat4.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
        u_xlat4.xyz = log2(u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
        u_xlat4.xyz = exp2(u_xlat4.xyz);
        u_xlat5.xyz = log2(u_xlat0.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
        u_xlat5.xyz = exp2(u_xlat5.xyz);
        u_xlat3.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat3.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat3.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat2.x = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
        u_xlat18 = dot(u_xlat1.xyz, vec3(0.333299994, 0.333299994, 0.333299994));
        u_xlat18 = (_CheckAlbedo != 0) ? u_xlat2.x : u_xlat18;
        if(_CheckAlbedo == 0) {
            u_xlatb1.x = u_xlat18<0.0120000001;
            u_xlatb7.x = 0.899999976<u_xlat18;
            u_xlat2.y = 0.0;
            u_xlat3 = (u_xlatb7.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxy;
            SV_Target0 = (u_xlatb1.x) ? unity_MaterialValidateLowColor : u_xlat3;
        } else {
            u_xlatb1.x = u_xlat18<_AlbedoMinLuminance;
            if(u_xlatb1.x){
                SV_Target0 = unity_MaterialValidateLowColor;
            } else {
                u_xlatb18 = _AlbedoMaxLuminance<u_xlat18;
                if(u_xlatb18){
                    SV_Target0 = unity_MaterialValidateHighColor;
                } else {
                    u_xlatb1.xy = lessThan(u_xlat0.yxyy, u_xlat0.zzzz).xy;
                    u_xlatb18 = u_xlatb1.y && u_xlatb1.x;
                    if(u_xlatb18){
                        u_xlatb18 = u_xlat0.z!=0.0;
                        u_xlatb1.x = u_xlat0.y<u_xlat0.x;
                        u_xlat1.x = (u_xlatb1.x) ? u_xlat0.y : u_xlat0.x;
                        u_xlat1.x = u_xlat0.z + (-u_xlat1.x);
                        u_xlatb13 = u_xlat1.x!=0.0;
                        u_xlat9.y = u_xlat1.x / u_xlat0.z;
                        u_xlat19 = (-u_xlat0.y) + u_xlat0.x;
                        u_xlat1.x = u_xlat19 / u_xlat1.x;
                        u_xlat9.x = u_xlat1.x + 4.0;
                        u_xlat10.x = u_xlat19 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb13)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat1.x = u_xlat3.y * 0.166666672;
                        u_xlatb13 = u_xlat3.y<36.0;
                        u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb13) ? u_xlat19 : u_xlat1.x;
                        u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                    } else {
                        u_xlatb18 = u_xlat0.x<u_xlat0.y;
                        if(u_xlatb18){
                            u_xlatb18 = u_xlat0.y!=0.0;
                            u_xlat7 = (u_xlatb1.y) ? u_xlat0.x : u_xlat0.z;
                            u_xlat7 = u_xlat0.y + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.y;
                            u_xlat8 = (-u_xlat0.x) + u_xlat0.z;
                            u_xlat7 = u_xlat8 / u_xlat7;
                            u_xlat9.x = u_xlat7 + 2.0;
                            u_xlat10.x = u_xlat8 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat7 = u_xlat3.y * 0.166666672;
                            u_xlatb19 = u_xlat3.y<36.0;
                            u_xlat8 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb19) ? u_xlat8 : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                        } else {
                            u_xlatb18 = u_xlat0.x!=0.0;
                            u_xlatb7.x = u_xlat0.z<u_xlat0.y;
                            u_xlat7 = (u_xlatb7.x) ? u_xlat0.z : u_xlat0.y;
                            u_xlat7 = u_xlat0.x + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.x;
                            u_xlat6.x = (-u_xlat0.z) + u_xlat0.y;
                            u_xlat9.x = u_xlat6.x / u_xlat7;
                            u_xlat6.y = 0.0;
                            u_xlat0.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat6.xy;
                            u_xlat7 = u_xlat0.y * 0.166666672;
                            u_xlatb19 = u_xlat0.y<36.0;
                            u_xlat6.x = u_xlat0.y * 0.166666672 + 1.0;
                            u_xlat0.x = (u_xlatb19) ? u_xlat6.x : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat0.xz, vec2(bvec2(u_xlatb18)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlatb0.xy = lessThan(_AlbedoCompareColor.yxyy, _AlbedoCompareColor.zzzz).xy;
                    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
                    if(u_xlatb0.x){
                        u_xlatb0.x = _AlbedoCompareColor.z!=0.0;
                        u_xlat6.x = min(_AlbedoCompareColor.y, _AlbedoCompareColor.x);
                        u_xlat6.x = (-u_xlat6.x) + _AlbedoCompareColor.z;
                        u_xlatb12 = u_xlat6.x!=0.0;
                        u_xlat9.y = u_xlat6.x / _AlbedoCompareColor.z;
                        u_xlat18 = (-_AlbedoCompareColor.y) + _AlbedoCompareColor.x;
                        u_xlat6.x = u_xlat18 / u_xlat6.x;
                        u_xlat9.x = u_xlat6.x + 4.0;
                        u_xlat10.x = u_xlat18 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb12)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat6.x = u_xlat3.y * 0.166666672;
                        u_xlatb12 = u_xlat3.y<36.0;
                        u_xlat18 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
                        u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(u_xlatb0.xx));
                    } else {
                        u_xlatb12 = _AlbedoCompareColor.x<_AlbedoCompareColor.y;
                        if(u_xlatb12){
                            u_xlatb12 = _AlbedoCompareColor.y!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.x, _AlbedoCompareColor.z);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.y;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.y;
                            u_xlat19 = (-_AlbedoCompareColor.x) + _AlbedoCompareColor.z;
                            u_xlat18 = u_xlat19 / u_xlat18;
                            u_xlat9.x = u_xlat18 + 2.0;
                            u_xlat10.x = u_xlat19 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        } else {
                            u_xlatb12 = _AlbedoCompareColor.x!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.z, _AlbedoCompareColor.y);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.x;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.x;
                            u_xlat10.x = (-_AlbedoCompareColor.z) + _AlbedoCompareColor.y;
                            u_xlat9.x = u_xlat10.x / u_xlat18;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlat12.xy = u_xlat0.yx + (-vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance));
                    u_xlatb7.xz = lessThan(u_xlat1.zzxx, u_xlat12.xxyy).xz;
                    u_xlat12.x = u_xlat12.y + 1.0;
                    u_xlatb12 = u_xlat1.x<u_xlat12.x;
                    u_xlatb12 = u_xlatb12 && u_xlatb7.z;
                    u_xlatb12 = u_xlatb12 || u_xlatb7.x;
                    u_xlat0.xy = u_xlat0.yx + vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance);
                    u_xlatb0.xw = lessThan(u_xlat0.xxxy, u_xlat1.zzzx).xw;
                    u_xlat6.x = u_xlat0.y + -1.0;
                    u_xlatb6 = u_xlat6.x<u_xlat1.x;
                    u_xlatb6 = u_xlatb6 && u_xlatb0.w;
                    u_xlatb0.x = u_xlatb6 || u_xlatb0.x;
                    u_xlat2.z = 0.0;
                    u_xlat1 = (u_xlatb0.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxz;
                    SV_Target0 = (bool(u_xlatb12)) ? unity_MaterialValidateLowColor : u_xlat1;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    } else {
        u_xlatb0.x = unity_VisualizationMode==1;
        SV_Target0 = mix(vec4(0.0, 0.0, 0.0, 0.0), unity_MaterialValidateLowColor, vec4(u_xlatb0.xxxx));
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %209 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %209 Location 209 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                               Output f32_4* %209 = OpVariable Output 
                                             %217 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFMul %191 %193 
                                                      OpStore %21 %194 
                              Uniform f32_4* %195 = OpAccessChain %42 %120 %120 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %13 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
                                       f32_4 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %21 
                                       f32_4 %201 = OpFAdd %199 %200 
                                                      OpStore %21 %201 
                              Uniform f32_4* %202 = OpAccessChain %42 %120 %44 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 2 2 2 2 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %210 = OpAccessChain %42 %120 %92 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %13 
                                       f32_4 %213 = OpVectorShuffle %212 %212 3 3 3 3 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %209 %216 
                                 Output f32* %218 = OpAccessChain %166 %120 %162 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                 Output f32* %221 = OpAccessChain %166 %120 %162 
                                                      OpStore %221 %220 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1175
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %331 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 RelaxedPrecision 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 RelaxedPrecision 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 RelaxedPrecision 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 RelaxedPrecision 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 RelaxedPrecision 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 RelaxedPrecision 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %73 SpecId 73 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %127 DescriptorSet 127 
                                                      OpDecorate %127 Binding 127 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %302 SpecId 302 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %767 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %863 SpecId 863 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %871 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %900 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %905 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %914 RelaxedPrecision 
                                                      OpDecorate %915 RelaxedPrecision 
                                                      OpDecorate %932 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %937 RelaxedPrecision 
                                                      OpDecorate %938 RelaxedPrecision 
                                                      OpDecorate %940 RelaxedPrecision 
                                                      OpDecorate %945 RelaxedPrecision 
                                                      OpDecorate %946 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %955 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %966 RelaxedPrecision 
                                                      OpDecorate %968 RelaxedPrecision 
                                                      OpDecorate %973 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %980 RelaxedPrecision 
                                                      OpDecorate %981 RelaxedPrecision 
                                                      OpDecorate %984 RelaxedPrecision 
                                                      OpDecorate %985 RelaxedPrecision 
                                                      OpDecorate %987 RelaxedPrecision 
                                                      OpDecorate %988 RelaxedPrecision 
                                                      OpDecorate %991 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %999 RelaxedPrecision 
                                                      OpDecorate %1001 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1004 RelaxedPrecision 
                                                      OpDecorate %1006 RelaxedPrecision 
                                                      OpDecorate %1007 RelaxedPrecision 
                                                      OpDecorate %1010 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1021 RelaxedPrecision 
                                                      OpDecorate %1023 RelaxedPrecision 
                                                      OpDecorate %1024 RelaxedPrecision 
                                                      OpDecorate %1028 RelaxedPrecision 
                                                      OpDecorate %1029 RelaxedPrecision 
                                                      OpDecorate %1032 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1038 RelaxedPrecision 
                                                      OpDecorate %1039 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1048 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1057 RelaxedPrecision 
                                                      OpDecorate %1059 RelaxedPrecision 
                                                      OpDecorate %1062 RelaxedPrecision 
                                                      OpDecorate %1063 RelaxedPrecision 
                                                      OpDecorate %1066 RelaxedPrecision 
                                                      OpDecorate %1069 RelaxedPrecision 
                                                      OpDecorate %1070 RelaxedPrecision 
                                                      OpDecorate %1071 RelaxedPrecision 
                                                      OpDecorate %1072 RelaxedPrecision 
                                                      OpDecorate %1073 RelaxedPrecision 
                                                      OpDecorate %1074 RelaxedPrecision 
                                                      OpDecorate %1075 RelaxedPrecision 
                                                      OpDecorate %1076 RelaxedPrecision 
                                                      OpDecorate %1077 RelaxedPrecision 
                                                      OpDecorate %1080 RelaxedPrecision 
                                                      OpDecorate %1081 RelaxedPrecision 
                                                      OpDecorate %1085 RelaxedPrecision 
                                                      OpDecorate %1087 RelaxedPrecision 
                                                      OpDecorate %1102 RelaxedPrecision 
                                                      OpDecorate %1103 RelaxedPrecision 
                                                      OpDecorate %1105 RelaxedPrecision 
                                                      OpDecorate %1107 RelaxedPrecision 
                                                      OpDecorate %1108 RelaxedPrecision 
                                                      OpDecorate %1109 RelaxedPrecision 
                                                      OpDecorate %1112 RelaxedPrecision 
                                                      OpDecorate %1113 RelaxedPrecision 
                                                      OpDecorate %1114 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1119 RelaxedPrecision 
                                                      OpDecorate %1121 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1143 RelaxedPrecision 
                                                      OpDecorate %1145 RelaxedPrecision 
                                                      OpDecorate %1146 RelaxedPrecision 
                                                      OpDecorate %1147 RelaxedPrecision 
                                                      OpDecorate %1154 RelaxedPrecision 
                                                      OpDecorate %1156 RelaxedPrecision 
                                                      OpDecorate %1157 RelaxedPrecision 
                                                      OpDecorate %1170 RelaxedPrecision 
                                                      OpDecorate %1173 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                                              %24 = OpTypePointer Private %19 
                               Private f32_4* %25 = OpVariable Private 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 1 
                                              %28 = OpTypePointer Private %6 
                                              %31 = OpTypeInt 32 1 
                                              %32 = OpTypeStruct %19 %31 %31 %19 %6 %6 %6 %6 %19 %19 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; i32; i32; f32_4; f32; f32; f32; f32; f32_4; f32_4; f32;}* %34 = OpVariable Uniform 
                                          i32 %35 = OpConstant 10 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %41 = OpConstant 0 
                                              %43 = OpTypeBool 
                                              %44 = OpTypeVector %43 2 
                                              %45 = OpTypePointer Private %44 
                              Private bool_2* %46 = OpVariable Private 
                                          f32 %49 = OpConstant 3.674022E-40 
                                          i32 %55 = OpConstant 0 
                                          i32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant -1 
                                         bool %64 = OpConstantFalse 
                                              %67 = OpTypePointer Uniform %31 
                                         bool %73 = OpSpecConstantFalse 
                                         bool %74 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                          f32 %79 = OpConstant 3.674022E-40 
                               Private f32_3* %82 = OpVariable Private 
                               Private f32_4* %87 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                              Private bool_2* %95 = OpVariable Private 
                                             %109 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %127 = OpVariable UniformConstant 
                              Private f32_3* %133 = OpVariable Private 
                                             %136 = OpTypePointer Uniform %19 
                              Private f32_3* %141 = OpVariable Private 
                                             %149 = OpTypeVector %43 3 
                                             %150 = OpTypePointer Private %149 
                             Private bool_3* %151 = OpVariable Private 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_4 %153 = OpConstantComposite %152 %152 %152 %49 
                                             %156 = OpTypeVector %43 4 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %161 = OpConstant 3.674022E-40 
                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
                             Private bool_3* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                       f32_4 %168 = OpConstantComposite %167 %167 %167 %49 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                         f32 %177 = OpConstant 3.674022E-40 
                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                              Private f32_3* %188 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_3 %193 = OpConstantComposite %192 %192 %192 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %227 = OpConstant 2 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_3 %275 = OpConstantComposite %272 %273 %274 
                                Private f32* %278 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         i32 %284 = OpConstant 2 
                                        bool %302 = OpSpecConstantFalse 
                                        bool %303 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                             %306 = OpTypePointer Private %43 
                               Private bool* %307 = OpVariable Private 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %311 = OpConstant 3.674022E-40 
                                             %317 = OpTypePointer Function %19 
                                         i32 %323 = OpConstant 9 
                                             %330 = OpTypePointer Output %19 
                               Output f32_4* %331 = OpVariable Output 
                                         i32 %336 = OpConstant 8 
                                         i32 %344 = OpConstant 4 
                                         i32 %354 = OpConstant 5 
                                Private f32* %433 = OpVariable Private 
                                         f32 %436 = OpConstant 3.674022E-40 
                                Private f32* %438 = OpVariable Private 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %467 = OpConstant 3.674022E-40 
                                             %487 = OpTypePointer Function %15 
                                       f32_2 %495 = OpConstantComposite %49 %49 
                                             %535 = OpTypePointer Private %15 
                              Private f32_2* %536 = OpVariable Private 
                              Private f32_2* %556 = OpVariable Private 
                                         f32 %559 = OpConstant 3.674022E-40 
                                       f32_2 %560 = OpConstantComposite %559 %559 
                              Private f32_3* %574 = OpVariable Private 
                              Private f32_2* %662 = OpVariable Private 
                                Private f32* %688 = OpVariable Private 
                                         i32 %723 = OpConstant 3 
                              Private f32_2* %785 = OpVariable Private 
                                       f32_2 %788 = OpConstantComposite %436 %436 
                                        bool %863 = OpSpecConstantFalse 
                              Private f32_2* %871 = OpVariable Private 
                                Private f32* %912 = OpVariable Private 
                             Private f32_2* %1001 = OpVariable Private 
                                        i32 %1064 = OpConstant 7 
                                        i32 %1067 = OpConstant 6 
                              Private bool* %1083 = OpVariable Private 
                                        f32 %1120 = OpConstant 3.674022E-40 
                                      f32_4 %1172 = OpConstantComposite %49 %49 %49 %49 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %110 = OpVariable Function 
                               Function f32* %198 = OpVariable Function 
                               Function f32* %210 = OpVariable Function 
                               Function f32* %222 = OpVariable Function 
                               Function f32* %235 = OpVariable Function 
                               Function f32* %247 = OpVariable Function 
                               Function f32* %259 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                             Function f32_4* %318 = OpVariable Function 
                             Function f32_4* %332 = OpVariable Function 
                               Function f32* %391 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %452 = OpVariable Function 
                               Function f32* %476 = OpVariable Function 
                             Function f32_2* %488 = OpVariable Function 
                               Function f32* %511 = OpVariable Function 
                               Function f32* %562 = OpVariable Function 
                               Function f32* %575 = OpVariable Function 
                               Function f32* %599 = OpVariable Function 
                             Function f32_2* %611 = OpVariable Function 
                               Function f32* %632 = OpVariable Function 
                             Function f32_2* %677 = OpVariable Function 
                               Function f32* %702 = OpVariable Function 
                             Function f32_2* %713 = OpVariable Function 
                               Function f32* %790 = OpVariable Function 
                               Function f32* %802 = OpVariable Function 
                               Function f32* %826 = OpVariable Function 
                             Function f32_2* %838 = OpVariable Function 
                               Function f32* %916 = OpVariable Function 
                               Function f32* %927 = OpVariable Function 
                               Function f32* %949 = OpVariable Function 
                             Function f32_2* %960 = OpVariable Function 
                            Function f32_2* %1016 = OpVariable Function 
                              Function f32* %1040 = OpVariable Function 
                            Function f32_2* %1051 = OpVariable Function 
                            Function f32_4* %1137 = OpVariable Function 
                            Function f32_4* %1148 = OpVariable Function 
                            Function f32_4* %1164 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %21 = OpVectorShuffle %20 %20 0 3 
                                        f32_3 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %21 3 4 2 
                                                      OpStore %9 %23 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %37 = OpAccessChain %34 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %30 %39 
                                 Private f32* %42 = OpAccessChain %25 %41 
                                                      OpStore %42 %40 
                                 Private f32* %47 = OpAccessChain %25 %41 
                                          f32 %48 = OpLoad %47 
                                         bool %50 = OpFOrdLessThan %48 %49 
                                       bool_2 %51 = OpLoad %46 
                                       bool_2 %52 = OpCompositeInsert %50 %51 0 
                                                      OpStore %46 %52 
                                       bool_2 %53 = OpLoad %46 
                                         bool %54 = OpCompositeExtract %53 0 
                                          i32 %57 = OpSelect %54 %56 %55 
                                          i32 %59 = OpIMul %57 %58 
                                         bool %60 = OpINotEqual %59 %55 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %62 
                                              %61 = OpLabel 
                                                      OpKill
                                              %62 = OpLabel 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                 Uniform i32* %68 = OpAccessChain %34 %56 
                                          i32 %69 = OpLoad %68 
                                         bool %70 = OpIEqual %69 %55 
                                                      OpSelectionMerge %72 None 
                                                      OpBranchConditional %70 %71 %72 
                                              %71 = OpLabel 
                                                      OpBranch %72 
                                              %72 = OpLabel 
                                                      OpBranch %66 
                                              %66 = OpLabel 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %1158 
                                              %75 = OpLabel 
                                 Private f32* %77 = OpAccessChain %9 %41 
                                          f32 %78 = OpLoad %77 
                                          f32 %80 = OpFMul %78 %79 
                                 Private f32* %81 = OpAccessChain %25 %41 
                                                      OpStore %81 %80 
                                 Private f32* %83 = OpAccessChain %25 %41 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpExtInst %1 8 %84 
                                 Private f32* %86 = OpAccessChain %82 %41 
                                                      OpStore %86 %85 
                                 Private f32* %88 = OpAccessChain %82 %41 
                                          f32 %89 = OpLoad %88 
                                          f32 %91 = OpFMul %89 %90 
                                          f32 %93 = OpFAdd %91 %92 
                                 Private f32* %94 = OpAccessChain %87 %41 
                                                      OpStore %94 %93 
                                 Private f32* %96 = OpAccessChain %25 %41 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %98 = OpAccessChain %25 %41 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFNegate %99 
                                        bool %101 = OpFOrdGreaterThanEqual %97 %100 
                                      bool_2 %102 = OpLoad %95 
                                      bool_2 %103 = OpCompositeInsert %101 %102 0 
                                                      OpStore %95 %103 
                                Private f32* %104 = OpAccessChain %25 %41 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 4 %105 
                                         f32 %107 = OpExtInst %1 10 %106 
                                Private f32* %108 = OpAccessChain %25 %41 
                                                      OpStore %108 %107 
                                      bool_2 %111 = OpLoad %95 
                                        bool %112 = OpCompositeExtract %111 0 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %117 
                                             %113 = OpLabel 
                                Private f32* %115 = OpAccessChain %25 %41 
                                         f32 %116 = OpLoad %115 
                                                      OpStore %110 %116 
                                                      OpBranch %114 
                                             %117 = OpLabel 
                                Private f32* %118 = OpAccessChain %25 %41 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                                      OpStore %110 %120 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                         f32 %121 = OpLoad %110 
                                Private f32* %122 = OpAccessChain %25 %41 
                                                      OpStore %122 %121 
                                Private f32* %123 = OpAccessChain %25 %41 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %124 %92 
                                Private f32* %126 = OpAccessChain %87 %27 
                                                      OpStore %126 %125 
                  read_only Texture2DSampled %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %87 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpImageSampleImplicitLod %128 %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                                      OpStore %9 %132 
                                       f32_3 %134 = OpLoad %9 
                                       f32_3 %135 = OpFNegate %134 
                              Uniform f32_4* %137 = OpAccessChain %34 %55 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFAdd %135 %139 
                                                      OpStore %133 %140 
                              Uniform f32_4* %142 = OpAccessChain %34 %55 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpLoad %133 
                                       f32_3 %146 = OpFMul %144 %145 
                                       f32_3 %147 = OpLoad %9 
                                       f32_3 %148 = OpFAdd %146 %147 
                                                      OpStore %141 %148 
                                       f32_3 %154 = OpLoad %141 
                                       f32_4 %155 = OpVectorShuffle %154 %154 0 1 2 0 
                                      bool_4 %157 = OpFOrdGreaterThanEqual %153 %155 
                                      bool_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %151 %158 
                                       f32_3 %160 = OpLoad %141 
                                       f32_3 %163 = OpFMul %160 %162 
                                                      OpStore %159 %163 
                                       f32_3 %165 = OpLoad %141 
                                       f32_4 %166 = OpVectorShuffle %165 %165 0 1 2 0 
                                      bool_4 %169 = OpFOrdLessThan %166 %168 
                                      bool_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                                      OpStore %164 %170 
                                       f32_3 %172 = OpLoad %141 
                                       f32_3 %175 = OpFAdd %172 %174 
                                                      OpStore %171 %175 
                                       f32_3 %176 = OpLoad %171 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %171 %179 
                                       f32_3 %180 = OpLoad %171 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %171 %181 
                                       f32_3 %182 = OpLoad %171 
                                       f32_3 %185 = OpFMul %182 %184 
                                                      OpStore %171 %185 
                                       f32_3 %186 = OpLoad %171 
                                       f32_3 %187 = OpExtInst %1 29 %186 
                                                      OpStore %171 %187 
                                       f32_3 %189 = OpLoad %141 
                                       f32_3 %190 = OpExtInst %1 30 %189 
                                                      OpStore %188 %190 
                                       f32_3 %191 = OpLoad %188 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %188 %194 
                                       f32_3 %195 = OpLoad %188 
                                       f32_3 %196 = OpExtInst %1 29 %195 
                                                      OpStore %188 %196 
                                      bool_3 %199 = OpLoad %164 
                                        bool %200 = OpCompositeExtract %199 0 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %205 
                                             %201 = OpLabel 
                                Private f32* %203 = OpAccessChain %171 %41 
                                         f32 %204 = OpLoad %203 
                                                      OpStore %198 %204 
                                                      OpBranch %202 
                                             %205 = OpLabel 
                                Private f32* %206 = OpAccessChain %188 %41 
                                         f32 %207 = OpLoad %206 
                                                      OpStore %198 %207 
                                                      OpBranch %202 
                                             %202 = OpLabel 
                                         f32 %208 = OpLoad %198 
                                Private f32* %209 = OpAccessChain %197 %41 
                                                      OpStore %209 %208 
                                      bool_3 %211 = OpLoad %164 
                                        bool %212 = OpCompositeExtract %211 1 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %217 
                                             %213 = OpLabel 
                                Private f32* %215 = OpAccessChain %171 %27 
                                         f32 %216 = OpLoad %215 
                                                      OpStore %210 %216 
                                                      OpBranch %214 
                                             %217 = OpLabel 
                                Private f32* %218 = OpAccessChain %188 %27 
                                         f32 %219 = OpLoad %218 
                                                      OpStore %210 %219 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                         f32 %220 = OpLoad %210 
                                Private f32* %221 = OpAccessChain %197 %27 
                                                      OpStore %221 %220 
                                      bool_3 %223 = OpLoad %164 
                                        bool %224 = OpCompositeExtract %223 2 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %230 
                                             %225 = OpLabel 
                                Private f32* %228 = OpAccessChain %171 %227 
                                         f32 %229 = OpLoad %228 
                                                      OpStore %222 %229 
                                                      OpBranch %226 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %188 %227 
                                         f32 %232 = OpLoad %231 
                                                      OpStore %222 %232 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %233 = OpLoad %222 
                                Private f32* %234 = OpAccessChain %197 %227 
                                                      OpStore %234 %233 
                                      bool_3 %236 = OpLoad %151 
                                        bool %237 = OpCompositeExtract %236 0 
                                                      OpSelectionMerge %239 None 
                                                      OpBranchConditional %237 %238 %242 
                                             %238 = OpLabel 
                                Private f32* %240 = OpAccessChain %159 %41 
                                         f32 %241 = OpLoad %240 
                                                      OpStore %235 %241 
                                                      OpBranch %239 
                                             %242 = OpLabel 
                                Private f32* %243 = OpAccessChain %197 %41 
                                         f32 %244 = OpLoad %243 
                                                      OpStore %235 %244 
                                                      OpBranch %239 
                                             %239 = OpLabel 
                                         f32 %245 = OpLoad %235 
                                Private f32* %246 = OpAccessChain %133 %41 
                                                      OpStore %246 %245 
                                      bool_3 %248 = OpLoad %151 
                                        bool %249 = OpCompositeExtract %248 1 
                                                      OpSelectionMerge %251 None 
                                                      OpBranchConditional %249 %250 %254 
                                             %250 = OpLabel 
                                Private f32* %252 = OpAccessChain %159 %27 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %247 %253 
                                                      OpBranch %251 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %197 %27 
                                         f32 %256 = OpLoad %255 
                                                      OpStore %247 %256 
                                                      OpBranch %251 
                                             %251 = OpLabel 
                                         f32 %257 = OpLoad %247 
                                Private f32* %258 = OpAccessChain %133 %27 
                                                      OpStore %258 %257 
                                      bool_3 %260 = OpLoad %151 
                                        bool %261 = OpCompositeExtract %260 2 
                                                      OpSelectionMerge %263 None 
                                                      OpBranchConditional %261 %262 %266 
                                             %262 = OpLabel 
                                Private f32* %264 = OpAccessChain %159 %227 
                                         f32 %265 = OpLoad %264 
                                                      OpStore %259 %265 
                                                      OpBranch %263 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %197 %227 
                                         f32 %268 = OpLoad %267 
                                                      OpStore %259 %268 
                                                      OpBranch %263 
                                             %263 = OpLabel 
                                         f32 %269 = OpLoad %259 
                                Private f32* %270 = OpAccessChain %133 %227 
                                                      OpStore %270 %269 
                                       f32_3 %271 = OpLoad %133 
                                         f32 %276 = OpDot %271 %275 
                                Private f32* %277 = OpAccessChain %25 %41 
                                                      OpStore %277 %276 
                                       f32_3 %279 = OpLoad %133 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %278 %282 
                                Uniform i32* %285 = OpAccessChain %34 %284 
                                         i32 %286 = OpLoad %285 
                                        bool %287 = OpINotEqual %286 %55 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %292 
                                             %288 = OpLabel 
                                Private f32* %290 = OpAccessChain %25 %41 
                                         f32 %291 = OpLoad %290 
                                                      OpStore %283 %291 
                                                      OpBranch %289 
                                             %292 = OpLabel 
                                         f32 %293 = OpLoad %278 
                                                      OpStore %283 %293 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                         f32 %294 = OpLoad %283 
                                                      OpStore %278 %294 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %64 %295 %296 
                                             %295 = OpLabel 
                                Uniform i32* %297 = OpAccessChain %34 %284 
                                         i32 %298 = OpLoad %297 
                                        bool %299 = OpIEqual %298 %55 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                                      OpSelectionMerge %305 None 
                                                      OpBranchConditional %303 %304 %342 
                                             %304 = OpLabel 
                                         f32 %308 = OpLoad %278 
                                        bool %310 = OpFOrdLessThan %308 %309 
                                                      OpStore %307 %310 
                                         f32 %312 = OpLoad %278 
                                        bool %313 = OpFOrdLessThan %311 %312 
                                      bool_3 %314 = OpLoad %151 
                                      bool_3 %315 = OpCompositeInsert %313 %314 0 
                                                      OpStore %151 %315 
                                Private f32* %316 = OpAccessChain %25 %27 
                                                      OpStore %316 %49 
                                      bool_3 %319 = OpLoad %151 
                                        bool %320 = OpCompositeExtract %319 0 
                                                      OpSelectionMerge %322 None 
                                                      OpBranchConditional %320 %321 %326 
                                             %321 = OpLabel 
                              Uniform f32_4* %324 = OpAccessChain %34 %323 
                                       f32_4 %325 = OpLoad %324 
                                                      OpStore %318 %325 
                                                      OpBranch %322 
                                             %326 = OpLabel 
                                       f32_4 %327 = OpLoad %25 
                                       f32_4 %328 = OpVectorShuffle %327 %327 0 0 0 1 
                                                      OpStore %318 %328 
                                                      OpBranch %322 
                                             %322 = OpLabel 
                                       f32_4 %329 = OpLoad %318 
                                                      OpStore %87 %329 
                                        bool %333 = OpLoad %307 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %339 
                                             %334 = OpLabel 
                              Uniform f32_4* %337 = OpAccessChain %34 %336 
                                       f32_4 %338 = OpLoad %337 
                                                      OpStore %332 %338 
                                                      OpBranch %335 
                                             %339 = OpLabel 
                                       f32_4 %340 = OpLoad %87 
                                                      OpStore %332 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_4 %341 = OpLoad %332 
                                                      OpStore %331 %341 
                                                      OpBranch %305 
                                             %342 = OpLabel 
                                         f32 %343 = OpLoad %278 
                                Uniform f32* %345 = OpAccessChain %34 %344 
                                         f32 %346 = OpLoad %345 
                                        bool %347 = OpFOrdLessThan %343 %346 
                                                      OpStore %307 %347 
                                        bool %348 = OpLoad %307 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %353 
                                             %349 = OpLabel 
                              Uniform f32_4* %351 = OpAccessChain %34 %336 
                                       f32_4 %352 = OpLoad %351 
                                                      OpStore %331 %352 
                                                      OpBranch %350 
                                             %353 = OpLabel 
                                Uniform f32* %355 = OpAccessChain %34 %354 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpLoad %278 
                                        bool %358 = OpFOrdLessThan %356 %357 
                                                      OpStore %307 %358 
                                        bool %359 = OpLoad %307 
                                                      OpSelectionMerge %361 None 
                                                      OpBranchConditional %359 %360 %364 
                                             %360 = OpLabel 
                              Uniform f32_4* %362 = OpAccessChain %34 %323 
                                       f32_4 %363 = OpLoad %362 
                                                      OpStore %331 %363 
                                                      OpBranch %361 
                                             %364 = OpLabel 
                                       f32_3 %365 = OpLoad %141 
                                       f32_4 %366 = OpVectorShuffle %365 %365 1 0 1 1 
                                       f32_3 %367 = OpLoad %141 
                                       f32_4 %368 = OpVectorShuffle %367 %367 2 2 2 2 
                                      bool_4 %369 = OpFOrdLessThan %366 %368 
                                      bool_2 %370 = OpVectorShuffle %369 %369 0 1 
                                      bool_3 %371 = OpLoad %151 
                                      bool_3 %372 = OpVectorShuffle %371 %370 3 4 2 
                                                      OpStore %151 %372 
                                      bool_3 %373 = OpLoad %151 
                                        bool %374 = OpCompositeExtract %373 1 
                                      bool_3 %375 = OpLoad %151 
                                        bool %376 = OpCompositeExtract %375 0 
                                        bool %377 = OpLogicalAnd %374 %376 
                                                      OpStore %307 %377 
                                        bool %378 = OpLoad %307 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %499 
                                             %379 = OpLabel 
                                Private f32* %381 = OpAccessChain %141 %227 
                                         f32 %382 = OpLoad %381 
                                        bool %383 = OpFOrdNotEqual %382 %49 
                                                      OpStore %307 %383 
                                Private f32* %384 = OpAccessChain %141 %27 
                                         f32 %385 = OpLoad %384 
                                Private f32* %386 = OpAccessChain %141 %41 
                                         f32 %387 = OpLoad %386 
                                        bool %388 = OpFOrdLessThan %385 %387 
                                      bool_3 %389 = OpLoad %151 
                                      bool_3 %390 = OpCompositeInsert %388 %389 0 
                                                      OpStore %151 %390 
                                      bool_3 %392 = OpLoad %151 
                                        bool %393 = OpCompositeExtract %392 0 
                                                      OpSelectionMerge %395 None 
                                                      OpBranchConditional %393 %394 %398 
                                             %394 = OpLabel 
                                Private f32* %396 = OpAccessChain %141 %27 
                                         f32 %397 = OpLoad %396 
                                                      OpStore %391 %397 
                                                      OpBranch %395 
                                             %398 = OpLabel 
                                Private f32* %399 = OpAccessChain %141 %41 
                                         f32 %400 = OpLoad %399 
                                                      OpStore %391 %400 
                                                      OpBranch %395 
                                             %395 = OpLabel 
                                         f32 %401 = OpLoad %391 
                                Private f32* %402 = OpAccessChain %82 %41 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %141 %227 
                                         f32 %404 = OpLoad %403 
                                Private f32* %405 = OpAccessChain %82 %41 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFNegate %406 
                                         f32 %408 = OpFAdd %404 %407 
                                Private f32* %409 = OpAccessChain %82 %41 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %82 %41 
                                         f32 %411 = OpLoad %410 
                                        bool %412 = OpFOrdNotEqual %411 %49 
                                      bool_3 %413 = OpLoad %151 
                                      bool_3 %414 = OpCompositeInsert %412 %413 0 
                                                      OpStore %151 %414 
                                Private f32* %415 = OpAccessChain %82 %41 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %141 %227 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFDiv %416 %418 
                                                      OpStore %278 %419 
                                Private f32* %420 = OpAccessChain %141 %27 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFNegate %421 
                                Private f32* %423 = OpAccessChain %141 %41 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFAdd %422 %424 
                                Private f32* %426 = OpAccessChain %87 %41 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %87 %41 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %82 %41 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFDiv %428 %430 
                                Private f32* %432 = OpAccessChain %82 %41 
                                                      OpStore %432 %431 
                                Private f32* %434 = OpAccessChain %82 %41 
                                         f32 %435 = OpLoad %434 
                                         f32 %437 = OpFAdd %435 %436 
                                                      OpStore %433 %437 
                                Private f32* %439 = OpAccessChain %87 %41 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFAdd %440 %436 
                                                      OpStore %438 %441 
                                      bool_3 %443 = OpLoad %151 
                                        bool %444 = OpCompositeExtract %443 0 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %433 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                         f32 %449 = OpLoad %438 
                                                      OpStore %442 %449 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %450 = OpLoad %442 
                                Private f32* %451 = OpAccessChain %82 %41 
                                                      OpStore %451 %450 
                                      bool_3 %453 = OpLoad %151 
                                        bool %454 = OpCompositeExtract %453 0 
                                                      OpSelectionMerge %456 None 
                                                      OpBranchConditional %454 %455 %458 
                                             %455 = OpLabel 
                                         f32 %457 = OpLoad %278 
                                                      OpStore %452 %457 
                                                      OpBranch %456 
                                             %458 = OpLabel 
                                                      OpStore %452 %49 
                                                      OpBranch %456 
                                             %456 = OpLabel 
                                         f32 %459 = OpLoad %452 
                                Private f32* %460 = OpAccessChain %87 %227 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %82 %41 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                                      OpStore %278 %464 
                                Private f32* %465 = OpAccessChain %82 %41 
                                         f32 %466 = OpLoad %465 
                                        bool %468 = OpFOrdLessThan %466 %467 
                                      bool_3 %469 = OpLoad %151 
                                      bool_3 %470 = OpCompositeInsert %468 %469 0 
                                                      OpStore %151 %470 
                                Private f32* %471 = OpAccessChain %82 %41 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %472 %463 
                                         f32 %474 = OpFAdd %473 %167 
                                Private f32* %475 = OpAccessChain %82 %41 
                                                      OpStore %475 %474 
                                      bool_3 %477 = OpLoad %151 
                                        bool %478 = OpCompositeExtract %477 0 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %483 
                                             %479 = OpLabel 
                                Private f32* %481 = OpAccessChain %82 %41 
                                         f32 %482 = OpLoad %481 
                                                      OpStore %476 %482 
                                                      OpBranch %480 
                                             %483 = OpLabel 
                                         f32 %484 = OpLoad %278 
                                                      OpStore %476 %484 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %485 = OpLoad %476 
                                Private f32* %486 = OpAccessChain %87 %41 
                                                      OpStore %486 %485 
                                        bool %489 = OpLoad %307 
                                                      OpSelectionMerge %491 None 
                                                      OpBranchConditional %489 %490 %494 
                                             %490 = OpLabel 
                                       f32_4 %492 = OpLoad %87 
                                       f32_2 %493 = OpVectorShuffle %492 %492 0 2 
                                                      OpStore %488 %493 
                                                      OpBranch %491 
                                             %494 = OpLabel 
                                                      OpStore %488 %495 
                                                      OpBranch %491 
                                             %491 = OpLabel 
                                       f32_2 %496 = OpLoad %488 
                                       f32_3 %497 = OpLoad %82 
                                       f32_3 %498 = OpVectorShuffle %497 %496 3 1 4 
                                                      OpStore %82 %498 
                                                      OpBranch %380 
                                             %499 = OpLabel 
                                Private f32* %500 = OpAccessChain %141 %41 
                                         f32 %501 = OpLoad %500 
                                Private f32* %502 = OpAccessChain %141 %27 
                                         f32 %503 = OpLoad %502 
                                        bool %504 = OpFOrdLessThan %501 %503 
                                                      OpStore %307 %504 
                                        bool %505 = OpLoad %307 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %621 
                                             %506 = OpLabel 
                                Private f32* %508 = OpAccessChain %141 %27 
                                         f32 %509 = OpLoad %508 
                                        bool %510 = OpFOrdNotEqual %509 %49 
                                                      OpStore %307 %510 
                                      bool_3 %512 = OpLoad %151 
                                        bool %513 = OpCompositeExtract %512 1 
                                                      OpSelectionMerge %515 None 
                                                      OpBranchConditional %513 %514 %518 
                                             %514 = OpLabel 
                                Private f32* %516 = OpAccessChain %141 %41 
                                         f32 %517 = OpLoad %516 
                                                      OpStore %511 %517 
                                                      OpBranch %515 
                                             %518 = OpLabel 
                                Private f32* %519 = OpAccessChain %141 %227 
                                         f32 %520 = OpLoad %519 
                                                      OpStore %511 %520 
                                                      OpBranch %515 
                                             %515 = OpLabel 
                                         f32 %521 = OpLoad %511 
                                Private f32* %522 = OpAccessChain %87 %41 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %141 %27 
                                         f32 %524 = OpLoad %523 
                                Private f32* %525 = OpAccessChain %87 %41 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFNegate %526 
                                         f32 %528 = OpFAdd %524 %527 
                                Private f32* %529 = OpAccessChain %87 %41 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %87 %41 
                                         f32 %531 = OpLoad %530 
                                        bool %532 = OpFOrdNotEqual %531 %49 
                                      bool_3 %533 = OpLoad %151 
                                      bool_3 %534 = OpCompositeInsert %532 %533 0 
                                                      OpStore %151 %534 
                                Private f32* %537 = OpAccessChain %87 %41 
                                         f32 %538 = OpLoad %537 
                                Private f32* %539 = OpAccessChain %141 %27 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFDiv %538 %540 
                                Private f32* %542 = OpAccessChain %536 %41 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %141 %41 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %141 %227 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %87 %227 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %87 %227 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %87 %41 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFDiv %551 %553 
                                Private f32* %555 = OpAccessChain %87 %41 
                                                      OpStore %555 %554 
                                       f32_4 %557 = OpLoad %87 
                                       f32_2 %558 = OpVectorShuffle %557 %557 0 2 
                                       f32_2 %561 = OpFAdd %558 %560 
                                                      OpStore %556 %561 
                                      bool_3 %563 = OpLoad %151 
                                        bool %564 = OpCompositeExtract %563 0 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %569 
                                             %565 = OpLabel 
                                Private f32* %567 = OpAccessChain %556 %41 
                                         f32 %568 = OpLoad %567 
                                                      OpStore %562 %568 
                                                      OpBranch %566 
                                             %569 = OpLabel 
                                Private f32* %570 = OpAccessChain %556 %27 
                                         f32 %571 = OpLoad %570 
                                                      OpStore %562 %571 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                         f32 %572 = OpLoad %562 
                                Private f32* %573 = OpAccessChain %87 %41 
                                                      OpStore %573 %572 
                                      bool_3 %576 = OpLoad %151 
                                        bool %577 = OpCompositeExtract %576 0 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %582 
                                             %578 = OpLabel 
                                Private f32* %580 = OpAccessChain %536 %41 
                                         f32 %581 = OpLoad %580 
                                                      OpStore %575 %581 
                                                      OpBranch %579 
                                             %582 = OpLabel 
                                                      OpStore %575 %49 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                         f32 %583 = OpLoad %575 
                                Private f32* %584 = OpAccessChain %574 %227 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %87 %41 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %586 %463 
                                Private f32* %588 = OpAccessChain %536 %41 
                                                      OpStore %588 %587 
                                Private f32* %589 = OpAccessChain %87 %41 
                                         f32 %590 = OpLoad %589 
                                        bool %591 = OpFOrdLessThan %590 %467 
                                      bool_3 %592 = OpLoad %151 
                                      bool_3 %593 = OpCompositeInsert %591 %592 0 
                                                      OpStore %151 %593 
                                Private f32* %594 = OpAccessChain %87 %41 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %595 %463 
                                         f32 %597 = OpFAdd %596 %167 
                                Private f32* %598 = OpAccessChain %87 %41 
                                                      OpStore %598 %597 
                                      bool_3 %600 = OpLoad %151 
                                        bool %601 = OpCompositeExtract %600 0 
                                                      OpSelectionMerge %603 None 
                                                      OpBranchConditional %601 %602 %606 
                                             %602 = OpLabel 
                                Private f32* %604 = OpAccessChain %87 %41 
                                         f32 %605 = OpLoad %604 
                                                      OpStore %599 %605 
                                                      OpBranch %603 
                                             %606 = OpLabel 
                                Private f32* %607 = OpAccessChain %536 %41 
                                         f32 %608 = OpLoad %607 
                                                      OpStore %599 %608 
                                                      OpBranch %603 
                                             %603 = OpLabel 
                                         f32 %609 = OpLoad %599 
                                Private f32* %610 = OpAccessChain %574 %41 
                                                      OpStore %610 %609 
                                        bool %612 = OpLoad %307 
                                                      OpSelectionMerge %614 None 
                                                      OpBranchConditional %612 %613 %617 
                                             %613 = OpLabel 
                                       f32_3 %615 = OpLoad %574 
                                       f32_2 %616 = OpVectorShuffle %615 %615 0 2 
                                                      OpStore %611 %616 
                                                      OpBranch %614 
                                             %617 = OpLabel 
                                                      OpStore %611 %495 
                                                      OpBranch %614 
                                             %614 = OpLabel 
                                       f32_2 %618 = OpLoad %611 
                                       f32_3 %619 = OpLoad %82 
                                       f32_3 %620 = OpVectorShuffle %619 %618 3 1 4 
                                                      OpStore %82 %620 
                                                      OpBranch %507 
                                             %621 = OpLabel 
                                Private f32* %622 = OpAccessChain %141 %41 
                                         f32 %623 = OpLoad %622 
                                        bool %624 = OpFOrdNotEqual %623 %49 
                                                      OpStore %307 %624 
                                Private f32* %625 = OpAccessChain %141 %227 
                                         f32 %626 = OpLoad %625 
                                Private f32* %627 = OpAccessChain %141 %27 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdLessThan %626 %628 
                                      bool_3 %630 = OpLoad %151 
                                      bool_3 %631 = OpCompositeInsert %629 %630 0 
                                                      OpStore %151 %631 
                                      bool_3 %633 = OpLoad %151 
                                        bool %634 = OpCompositeExtract %633 0 
                                                      OpSelectionMerge %636 None 
                                                      OpBranchConditional %634 %635 %639 
                                             %635 = OpLabel 
                                Private f32* %637 = OpAccessChain %141 %227 
                                         f32 %638 = OpLoad %637 
                                                      OpStore %632 %638 
                                                      OpBranch %636 
                                             %639 = OpLabel 
                                Private f32* %640 = OpAccessChain %141 %27 
                                         f32 %641 = OpLoad %640 
                                                      OpStore %632 %641 
                                                      OpBranch %636 
                                             %636 = OpLabel 
                                         f32 %642 = OpLoad %632 
                                Private f32* %643 = OpAccessChain %87 %41 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %141 %41 
                                         f32 %645 = OpLoad %644 
                                Private f32* %646 = OpAccessChain %87 %41 
                                         f32 %647 = OpLoad %646 
                                         f32 %648 = OpFNegate %647 
                                         f32 %649 = OpFAdd %645 %648 
                                Private f32* %650 = OpAccessChain %87 %41 
                                                      OpStore %650 %649 
                                Private f32* %651 = OpAccessChain %87 %41 
                                         f32 %652 = OpLoad %651 
                                        bool %653 = OpFOrdNotEqual %652 %49 
                                      bool_3 %654 = OpLoad %151 
                                      bool_3 %655 = OpCompositeInsert %653 %654 0 
                                                      OpStore %151 %655 
                                Private f32* %656 = OpAccessChain %87 %41 
                                         f32 %657 = OpLoad %656 
                                Private f32* %658 = OpAccessChain %141 %41 
                                         f32 %659 = OpLoad %658 
                                         f32 %660 = OpFDiv %657 %659 
                                Private f32* %661 = OpAccessChain %536 %27 
                                                      OpStore %661 %660 
                                Private f32* %663 = OpAccessChain %141 %227 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFNegate %664 
                                Private f32* %666 = OpAccessChain %141 %27 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFAdd %665 %667 
                                Private f32* %669 = OpAccessChain %662 %41 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %662 %41 
                                         f32 %671 = OpLoad %670 
                                Private f32* %672 = OpAccessChain %87 %41 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFDiv %671 %673 
                                Private f32* %675 = OpAccessChain %536 %41 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %662 %27 
                                                      OpStore %676 %49 
                                      bool_3 %678 = OpLoad %151 
                                        bool %679 = OpCompositeExtract %678 0 
                                                      OpSelectionMerge %681 None 
                                                      OpBranchConditional %679 %680 %683 
                                             %680 = OpLabel 
                                       f32_2 %682 = OpLoad %536 
                                                      OpStore %677 %682 
                                                      OpBranch %681 
                                             %683 = OpLabel 
                                       f32_2 %684 = OpLoad %662 
                                                      OpStore %677 %684 
                                                      OpBranch %681 
                                             %681 = OpLabel 
                                       f32_2 %685 = OpLoad %677 
                                       f32_4 %686 = OpLoad %87 
                                       f32_4 %687 = OpVectorShuffle %686 %685 0 4 5 3 
                                                      OpStore %87 %687 
                                Private f32* %689 = OpAccessChain %87 %27 
                                         f32 %690 = OpLoad %689 
                                         f32 %691 = OpFMul %690 %463 
                                                      OpStore %688 %691 
                                Private f32* %692 = OpAccessChain %87 %27 
                                         f32 %693 = OpLoad %692 
                                        bool %694 = OpFOrdLessThan %693 %467 
                                      bool_2 %695 = OpLoad %95 
                                      bool_2 %696 = OpCompositeInsert %694 %695 0 
                                                      OpStore %95 %696 
                                Private f32* %697 = OpAccessChain %87 %27 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpFMul %698 %463 
                                         f32 %700 = OpFAdd %699 %167 
                                Private f32* %701 = OpAccessChain %536 %41 
                                                      OpStore %701 %700 
                                      bool_2 %703 = OpLoad %95 
                                        bool %704 = OpCompositeExtract %703 0 
                                                      OpSelectionMerge %706 None 
                                                      OpBranchConditional %704 %705 %709 
                                             %705 = OpLabel 
                                Private f32* %707 = OpAccessChain %536 %41 
                                         f32 %708 = OpLoad %707 
                                                      OpStore %702 %708 
                                                      OpBranch %706 
                                             %709 = OpLabel 
                                         f32 %710 = OpLoad %688 
                                                      OpStore %702 %710 
                                                      OpBranch %706 
                                             %706 = OpLabel 
                                         f32 %711 = OpLoad %702 
                                Private f32* %712 = OpAccessChain %87 %41 
                                                      OpStore %712 %711 
                                        bool %714 = OpLoad %307 
                                                      OpSelectionMerge %716 None 
                                                      OpBranchConditional %714 %715 %719 
                                             %715 = OpLabel 
                                       f32_4 %717 = OpLoad %87 
                                       f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                                                      OpStore %713 %718 
                                                      OpBranch %716 
                                             %719 = OpLabel 
                                                      OpStore %713 %495 
                                                      OpBranch %716 
                                             %716 = OpLabel 
                                       f32_2 %720 = OpLoad %713 
                                       f32_3 %721 = OpLoad %82 
                                       f32_3 %722 = OpVectorShuffle %721 %720 3 1 4 
                                                      OpStore %82 %722 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                              Uniform f32_4* %724 = OpAccessChain %34 %723 
                                       f32_4 %725 = OpLoad %724 
                                       f32_4 %726 = OpVectorShuffle %725 %725 1 0 1 1 
                              Uniform f32_4* %727 = OpAccessChain %34 %723 
                                       f32_4 %728 = OpLoad %727 
                                       f32_4 %729 = OpVectorShuffle %728 %728 2 2 2 2 
                                      bool_4 %730 = OpFOrdLessThan %726 %729 
                                      bool_2 %731 = OpVectorShuffle %730 %730 0 1 
                                                      OpStore %95 %731 
                                      bool_2 %732 = OpLoad %95 
                                        bool %733 = OpCompositeExtract %732 1 
                                      bool_2 %734 = OpLoad %95 
                                        bool %735 = OpCompositeExtract %734 0 
                                        bool %736 = OpLogicalAnd %733 %735 
                                      bool_2 %737 = OpLoad %95 
                                      bool_2 %738 = OpCompositeInsert %736 %737 0 
                                                      OpStore %95 %738 
                                      bool_2 %739 = OpLoad %95 
                                        bool %740 = OpCompositeExtract %739 0 
                                                      OpSelectionMerge %742 None 
                                                      OpBranchConditional %740 %741 %849 
                                             %741 = OpLabel 
                                Uniform f32* %743 = OpAccessChain %34 %723 %227 
                                         f32 %744 = OpLoad %743 
                                        bool %745 = OpFOrdNotEqual %744 %49 
                                      bool_2 %746 = OpLoad %95 
                                      bool_2 %747 = OpCompositeInsert %745 %746 0 
                                                      OpStore %95 %747 
                                Uniform f32* %748 = OpAccessChain %34 %723 %27 
                                         f32 %749 = OpLoad %748 
                                Uniform f32* %750 = OpAccessChain %34 %723 %41 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpExtInst %1 37 %749 %751 
                                Private f32* %753 = OpAccessChain %87 %41 
                                                      OpStore %753 %752 
                                Private f32* %754 = OpAccessChain %87 %41 
                                         f32 %755 = OpLoad %754 
                                         f32 %756 = OpFNegate %755 
                                Uniform f32* %757 = OpAccessChain %34 %723 %227 
                                         f32 %758 = OpLoad %757 
                                         f32 %759 = OpFAdd %756 %758 
                                Private f32* %760 = OpAccessChain %87 %41 
                                                      OpStore %760 %759 
                                Private f32* %761 = OpAccessChain %87 %41 
                                         f32 %762 = OpLoad %761 
                                        bool %763 = OpFOrdNotEqual %762 %49 
                                      bool_2 %764 = OpLoad %46 
                                      bool_2 %765 = OpCompositeInsert %763 %764 0 
                                                      OpStore %46 %765 
                                Private f32* %766 = OpAccessChain %87 %41 
                                         f32 %767 = OpLoad %766 
                                Uniform f32* %768 = OpAccessChain %34 %723 %227 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpFDiv %767 %769 
                                Private f32* %771 = OpAccessChain %536 %41 
                                                      OpStore %771 %770 
                                Uniform f32* %772 = OpAccessChain %34 %723 %27 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFNegate %773 
                                Uniform f32* %775 = OpAccessChain %34 %723 %41 
                                         f32 %776 = OpLoad %775 
                                         f32 %777 = OpFAdd %774 %776 
                                Private f32* %778 = OpAccessChain %87 %227 
                                                      OpStore %778 %777 
                                Private f32* %779 = OpAccessChain %87 %227 
                                         f32 %780 = OpLoad %779 
                                Private f32* %781 = OpAccessChain %87 %41 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFDiv %780 %782 
                                Private f32* %784 = OpAccessChain %87 %41 
                                                      OpStore %784 %783 
                                       f32_4 %786 = OpLoad %87 
                                       f32_2 %787 = OpVectorShuffle %786 %786 0 2 
                                       f32_2 %789 = OpFAdd %787 %788 
                                                      OpStore %785 %789 
                                      bool_2 %791 = OpLoad %46 
                                        bool %792 = OpCompositeExtract %791 0 
                                                      OpSelectionMerge %794 None 
                                                      OpBranchConditional %792 %793 %797 
                                             %793 = OpLabel 
                                Private f32* %795 = OpAccessChain %785 %41 
                                         f32 %796 = OpLoad %795 
                                                      OpStore %790 %796 
                                                      OpBranch %794 
                                             %797 = OpLabel 
                                Private f32* %798 = OpAccessChain %785 %27 
                                         f32 %799 = OpLoad %798 
                                                      OpStore %790 %799 
                                                      OpBranch %794 
                                             %794 = OpLabel 
                                         f32 %800 = OpLoad %790 
                                Private f32* %801 = OpAccessChain %87 %41 
                                                      OpStore %801 %800 
                                      bool_2 %803 = OpLoad %46 
                                        bool %804 = OpCompositeExtract %803 0 
                                                      OpSelectionMerge %806 None 
                                                      OpBranchConditional %804 %805 %809 
                                             %805 = OpLabel 
                                Private f32* %807 = OpAccessChain %536 %41 
                                         f32 %808 = OpLoad %807 
                                                      OpStore %802 %808 
                                                      OpBranch %806 
                                             %809 = OpLabel 
                                                      OpStore %802 %49 
                                                      OpBranch %806 
                                             %806 = OpLabel 
                                         f32 %810 = OpLoad %802 
                                Private f32* %811 = OpAccessChain %574 %227 
                                                      OpStore %811 %810 
                                Private f32* %812 = OpAccessChain %87 %41 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %813 %463 
                                Private f32* %815 = OpAccessChain %536 %41 
                                                      OpStore %815 %814 
                                Private f32* %816 = OpAccessChain %87 %41 
                                         f32 %817 = OpLoad %816 
                                        bool %818 = OpFOrdLessThan %817 %467 
                                      bool_2 %819 = OpLoad %46 
                                      bool_2 %820 = OpCompositeInsert %818 %819 0 
                                                      OpStore %46 %820 
                                Private f32* %821 = OpAccessChain %87 %41 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFMul %822 %463 
                                         f32 %824 = OpFAdd %823 %167 
                                Private f32* %825 = OpAccessChain %87 %41 
                                                      OpStore %825 %824 
                                      bool_2 %827 = OpLoad %46 
                                        bool %828 = OpCompositeExtract %827 0 
                                                      OpSelectionMerge %830 None 
                                                      OpBranchConditional %828 %829 %833 
                                             %829 = OpLabel 
                                Private f32* %831 = OpAccessChain %87 %41 
                                         f32 %832 = OpLoad %831 
                                                      OpStore %826 %832 
                                                      OpBranch %830 
                                             %833 = OpLabel 
                                Private f32* %834 = OpAccessChain %536 %41 
                                         f32 %835 = OpLoad %834 
                                                      OpStore %826 %835 
                                                      OpBranch %830 
                                             %830 = OpLabel 
                                         f32 %836 = OpLoad %826 
                                Private f32* %837 = OpAccessChain %574 %41 
                                                      OpStore %837 %836 
                                      bool_2 %839 = OpLoad %95 
                                        bool %840 = OpCompositeExtract %839 0 
                                                      OpSelectionMerge %842 None 
                                                      OpBranchConditional %840 %841 %845 
                                             %841 = OpLabel 
                                       f32_3 %843 = OpLoad %574 
                                       f32_2 %844 = OpVectorShuffle %843 %843 0 2 
                                                      OpStore %838 %844 
                                                      OpBranch %842 
                                             %845 = OpLabel 
                                                      OpStore %838 %495 
                                                      OpBranch %842 
                                             %842 = OpLabel 
                                       f32_2 %846 = OpLoad %838 
                                       f32_4 %847 = OpLoad %87 
                                       f32_4 %848 = OpVectorShuffle %847 %846 4 5 2 3 
                                                      OpStore %87 %848 
                                                      OpBranch %742 
                                             %849 = OpLabel 
                                Uniform f32* %850 = OpAccessChain %34 %723 %41 
                                         f32 %851 = OpLoad %850 
                                Uniform f32* %852 = OpAccessChain %34 %723 %27 
                                         f32 %853 = OpLoad %852 
                                        bool %854 = OpFOrdLessThan %851 %853 
                                      bool_2 %855 = OpLoad %95 
                                      bool_2 %856 = OpCompositeInsert %854 %855 0 
                                                      OpStore %95 %856 
                                                      OpSelectionMerge %858 None 
                                                      OpBranchConditional %64 %857 %858 
                                             %857 = OpLabel 
                                      bool_2 %859 = OpLoad %95 
                                        bool %860 = OpCompositeExtract %859 0 
                                                      OpSelectionMerge %862 None 
                                                      OpBranchConditional %860 %861 %862 
                                             %861 = OpLabel 
                                                      OpBranch %862 
                                             %862 = OpLabel 
                                                      OpBranch %858 
                                             %858 = OpLabel 
                                                      OpSelectionMerge %865 None 
                                                      OpBranchConditional %863 %864 %971 
                                             %864 = OpLabel 
                                Uniform f32* %866 = OpAccessChain %34 %723 %27 
                                         f32 %867 = OpLoad %866 
                                        bool %868 = OpFOrdNotEqual %867 %49 
                                      bool_2 %869 = OpLoad %95 
                                      bool_2 %870 = OpCompositeInsert %868 %869 0 
                                                      OpStore %95 %870 
                                Uniform f32* %872 = OpAccessChain %34 %723 %41 
                                         f32 %873 = OpLoad %872 
                                Uniform f32* %874 = OpAccessChain %34 %723 %227 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpExtInst %1 37 %873 %875 
                                Private f32* %877 = OpAccessChain %871 %41 
                                                      OpStore %877 %876 
                                Private f32* %878 = OpAccessChain %871 %41 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFNegate %879 
                                Uniform f32* %881 = OpAccessChain %34 %723 %27 
                                         f32 %882 = OpLoad %881 
                                         f32 %883 = OpFAdd %880 %882 
                                Private f32* %884 = OpAccessChain %871 %41 
                                                      OpStore %884 %883 
                                Private f32* %885 = OpAccessChain %871 %41 
                                         f32 %886 = OpLoad %885 
                                        bool %887 = OpFOrdNotEqual %886 %49 
                                      bool_2 %888 = OpLoad %46 
                                      bool_2 %889 = OpCompositeInsert %887 %888 0 
                                                      OpStore %46 %889 
                                Private f32* %890 = OpAccessChain %871 %41 
                                         f32 %891 = OpLoad %890 
                                Uniform f32* %892 = OpAccessChain %34 %723 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFDiv %891 %893 
                                                      OpStore %688 %894 
                                Uniform f32* %895 = OpAccessChain %34 %723 %41 
                                         f32 %896 = OpLoad %895 
                                         f32 %897 = OpFNegate %896 
                                Uniform f32* %898 = OpAccessChain %34 %723 %227 
                                         f32 %899 = OpLoad %898 
                                         f32 %900 = OpFAdd %897 %899 
                                Private f32* %901 = OpAccessChain %574 %41 
                                                      OpStore %901 %900 
                                Private f32* %902 = OpAccessChain %574 %41 
                                         f32 %903 = OpLoad %902 
                                Private f32* %904 = OpAccessChain %871 %41 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFDiv %903 %905 
                                Private f32* %907 = OpAccessChain %871 %41 
                                                      OpStore %907 %906 
                                Private f32* %908 = OpAccessChain %871 %41 
                                         f32 %909 = OpLoad %908 
                                         f32 %910 = OpFAdd %909 %559 
                                Private f32* %911 = OpAccessChain %785 %41 
                                                      OpStore %911 %910 
                                Private f32* %913 = OpAccessChain %574 %41 
                                         f32 %914 = OpLoad %913 
                                         f32 %915 = OpFAdd %914 %559 
                                                      OpStore %912 %915 
                                      bool_2 %917 = OpLoad %46 
                                        bool %918 = OpCompositeExtract %917 0 
                                                      OpSelectionMerge %920 None 
                                                      OpBranchConditional %918 %919 %923 
                                             %919 = OpLabel 
                                Private f32* %921 = OpAccessChain %785 %41 
                                         f32 %922 = OpLoad %921 
                                                      OpStore %916 %922 
                                                      OpBranch %920 
                                             %923 = OpLabel 
                                         f32 %924 = OpLoad %912 
                                                      OpStore %916 %924 
                                                      OpBranch %920 
                                             %920 = OpLabel 
                                         f32 %925 = OpLoad %916 
                                Private f32* %926 = OpAccessChain %871 %41 
                                                      OpStore %926 %925 
                                      bool_2 %928 = OpLoad %46 
                                        bool %929 = OpCompositeExtract %928 0 
                                                      OpSelectionMerge %931 None 
                                                      OpBranchConditional %929 %930 %933 
                                             %930 = OpLabel 
                                         f32 %932 = OpLoad %688 
                                                      OpStore %927 %932 
                                                      OpBranch %931 
                                             %933 = OpLabel 
                                                      OpStore %927 %49 
                                                      OpBranch %931 
                                             %931 = OpLabel 
                                         f32 %934 = OpLoad %927 
                                Private f32* %935 = OpAccessChain %574 %227 
                                                      OpStore %935 %934 
                                Private f32* %936 = OpAccessChain %871 %41 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFMul %937 %463 
                                                      OpStore %688 %938 
                                Private f32* %939 = OpAccessChain %871 %41 
                                         f32 %940 = OpLoad %939 
                                        bool %941 = OpFOrdLessThan %940 %467 
                                      bool_2 %942 = OpLoad %46 
                                      bool_2 %943 = OpCompositeInsert %941 %942 0 
                                                      OpStore %46 %943 
                                Private f32* %944 = OpAccessChain %871 %41 
                                         f32 %945 = OpLoad %944 
                                         f32 %946 = OpFMul %945 %463 
                                         f32 %947 = OpFAdd %946 %167 
                                Private f32* %948 = OpAccessChain %871 %41 
                                                      OpStore %948 %947 
                                      bool_2 %950 = OpLoad %46 
                                        bool %951 = OpCompositeExtract %950 0 
                                                      OpSelectionMerge %953 None 
                                                      OpBranchConditional %951 %952 %956 
                                             %952 = OpLabel 
                                Private f32* %954 = OpAccessChain %871 %41 
                                         f32 %955 = OpLoad %954 
                                                      OpStore %949 %955 
                                                      OpBranch %953 
                                             %956 = OpLabel 
                                         f32 %957 = OpLoad %688 
                                                      OpStore %949 %957 
                                                      OpBranch %953 
                                             %953 = OpLabel 
                                         f32 %958 = OpLoad %949 
                                Private f32* %959 = OpAccessChain %574 %41 
                                                      OpStore %959 %958 
                                      bool_2 %961 = OpLoad %95 
                                        bool %962 = OpCompositeExtract %961 0 
                                                      OpSelectionMerge %964 None 
                                                      OpBranchConditional %962 %963 %967 
                                             %963 = OpLabel 
                                       f32_3 %965 = OpLoad %574 
                                       f32_2 %966 = OpVectorShuffle %965 %965 0 2 
                                                      OpStore %960 %966 
                                                      OpBranch %964 
                                             %967 = OpLabel 
                                                      OpStore %960 %495 
                                                      OpBranch %964 
                                             %964 = OpLabel 
                                       f32_2 %968 = OpLoad %960 
                                       f32_4 %969 = OpLoad %87 
                                       f32_4 %970 = OpVectorShuffle %969 %968 4 5 2 3 
                                                      OpStore %87 %970 
                                                      OpBranch %865 
                                             %971 = OpLabel 
                                Uniform f32* %972 = OpAccessChain %34 %723 %41 
                                         f32 %973 = OpLoad %972 
                                        bool %974 = OpFOrdNotEqual %973 %49 
                                      bool_2 %975 = OpLoad %95 
                                      bool_2 %976 = OpCompositeInsert %974 %975 0 
                                                      OpStore %95 %976 
                                Uniform f32* %977 = OpAccessChain %34 %723 %227 
                                         f32 %978 = OpLoad %977 
                                Uniform f32* %979 = OpAccessChain %34 %723 %27 
                                         f32 %980 = OpLoad %979 
                                         f32 %981 = OpExtInst %1 37 %978 %980 
                                Private f32* %982 = OpAccessChain %871 %41 
                                                      OpStore %982 %981 
                                Private f32* %983 = OpAccessChain %871 %41 
                                         f32 %984 = OpLoad %983 
                                         f32 %985 = OpFNegate %984 
                                Uniform f32* %986 = OpAccessChain %34 %723 %41 
                                         f32 %987 = OpLoad %986 
                                         f32 %988 = OpFAdd %985 %987 
                                Private f32* %989 = OpAccessChain %871 %41 
                                                      OpStore %989 %988 
                                Private f32* %990 = OpAccessChain %871 %41 
                                         f32 %991 = OpLoad %990 
                                        bool %992 = OpFOrdNotEqual %991 %49 
                                      bool_2 %993 = OpLoad %46 
                                      bool_2 %994 = OpCompositeInsert %992 %993 0 
                                                      OpStore %46 %994 
                                Private f32* %995 = OpAccessChain %871 %41 
                                         f32 %996 = OpLoad %995 
                                Uniform f32* %997 = OpAccessChain %34 %723 %41 
                                         f32 %998 = OpLoad %997 
                                         f32 %999 = OpFDiv %996 %998 
                               Private f32* %1000 = OpAccessChain %662 %27 
                                                      OpStore %1000 %999 
                               Uniform f32* %1002 = OpAccessChain %34 %723 %227 
                                        f32 %1003 = OpLoad %1002 
                                        f32 %1004 = OpFNegate %1003 
                               Uniform f32* %1005 = OpAccessChain %34 %723 %27 
                                        f32 %1006 = OpLoad %1005 
                                        f32 %1007 = OpFAdd %1004 %1006 
                               Private f32* %1008 = OpAccessChain %1001 %41 
                                                      OpStore %1008 %1007 
                               Private f32* %1009 = OpAccessChain %1001 %41 
                                        f32 %1010 = OpLoad %1009 
                               Private f32* %1011 = OpAccessChain %871 %41 
                                        f32 %1012 = OpLoad %1011 
                                        f32 %1013 = OpFDiv %1010 %1012 
                               Private f32* %1014 = OpAccessChain %662 %41 
                                                      OpStore %1014 %1013 
                               Private f32* %1015 = OpAccessChain %1001 %27 
                                                      OpStore %1015 %49 
                                     bool_2 %1017 = OpLoad %46 
                                       bool %1018 = OpCompositeExtract %1017 0 
                                                      OpSelectionMerge %1020 None 
                                                      OpBranchConditional %1018 %1019 %1022 
                                            %1019 = OpLabel 
                                      f32_2 %1021 = OpLoad %662 
                                                      OpStore %1016 %1021 
                                                      OpBranch %1020 
                                            %1022 = OpLabel 
                                      f32_2 %1023 = OpLoad %1001 
                                                      OpStore %1016 %1023 
                                                      OpBranch %1020 
                                            %1020 = OpLabel 
                                      f32_2 %1024 = OpLoad %1016 
                                      f32_3 %1025 = OpLoad %574 
                                      f32_3 %1026 = OpVectorShuffle %1025 %1024 0 3 4 
                                                      OpStore %574 %1026 
                               Private f32* %1027 = OpAccessChain %574 %27 
                                        f32 %1028 = OpLoad %1027 
                                        f32 %1029 = OpFMul %1028 %463 
                               Private f32* %1030 = OpAccessChain %871 %41 
                                                      OpStore %1030 %1029 
                               Private f32* %1031 = OpAccessChain %574 %27 
                                        f32 %1032 = OpLoad %1031 
                                       bool %1033 = OpFOrdLessThan %1032 %467 
                                     bool_2 %1034 = OpLoad %46 
                                     bool_2 %1035 = OpCompositeInsert %1033 %1034 0 
                                                      OpStore %46 %1035 
                               Private f32* %1036 = OpAccessChain %574 %27 
                                        f32 %1037 = OpLoad %1036 
                                        f32 %1038 = OpFMul %1037 %463 
                                        f32 %1039 = OpFAdd %1038 %167 
                                                      OpStore %688 %1039 
                                     bool_2 %1041 = OpLoad %46 
                                       bool %1042 = OpCompositeExtract %1041 0 
                                                      OpSelectionMerge %1044 None 
                                                      OpBranchConditional %1042 %1043 %1046 
                                            %1043 = OpLabel 
                                        f32 %1045 = OpLoad %688 
                                                      OpStore %1040 %1045 
                                                      OpBranch %1044 
                                            %1046 = OpLabel 
                               Private f32* %1047 = OpAccessChain %871 %41 
                                        f32 %1048 = OpLoad %1047 
                                                      OpStore %1040 %1048 
                                                      OpBranch %1044 
                                            %1044 = OpLabel 
                                        f32 %1049 = OpLoad %1040 
                               Private f32* %1050 = OpAccessChain %574 %41 
                                                      OpStore %1050 %1049 
                                     bool_2 %1052 = OpLoad %95 
                                       bool %1053 = OpCompositeExtract %1052 0 
                                                      OpSelectionMerge %1055 None 
                                                      OpBranchConditional %1053 %1054 %1058 
                                            %1054 = OpLabel 
                                      f32_3 %1056 = OpLoad %574 
                                      f32_2 %1057 = OpVectorShuffle %1056 %1056 0 2 
                                                      OpStore %1051 %1057 
                                                      OpBranch %1055 
                                            %1058 = OpLabel 
                                                      OpStore %1051 %495 
                                                      OpBranch %1055 
                                            %1055 = OpLabel 
                                      f32_2 %1059 = OpLoad %1051 
                                      f32_4 %1060 = OpLoad %87 
                                      f32_4 %1061 = OpVectorShuffle %1060 %1059 4 5 2 3 
                                                      OpStore %87 %1061 
                                                      OpBranch %865 
                                             %865 = OpLabel 
                                                      OpBranch %742 
                                             %742 = OpLabel 
                                      f32_4 %1062 = OpLoad %87 
                                      f32_2 %1063 = OpVectorShuffle %1062 %1062 1 0 
                               Uniform f32* %1065 = OpAccessChain %34 %1064 
                                        f32 %1066 = OpLoad %1065 
                               Uniform f32* %1068 = OpAccessChain %34 %1067 
                                        f32 %1069 = OpLoad %1068 
                                      f32_2 %1070 = OpCompositeConstruct %1066 %1069 
                                      f32_2 %1071 = OpFNegate %1070 
                                      f32_2 %1072 = OpFAdd %1063 %1071 
                                                      OpStore %871 %1072 
                                      f32_3 %1073 = OpLoad %82 
                                      f32_4 %1074 = OpVectorShuffle %1073 %1073 2 0 2 2 
                                      f32_2 %1075 = OpLoad %871 
                                      f32_4 %1076 = OpVectorShuffle %1075 %1075 0 1 0 0 
                                     bool_4 %1077 = OpFOrdLessThan %1074 %1076 
                                     bool_2 %1078 = OpVectorShuffle %1077 %1077 0 1 
                                                      OpStore %95 %1078 
                               Private f32* %1079 = OpAccessChain %871 %27 
                                        f32 %1080 = OpLoad %1079 
                                        f32 %1081 = OpFAdd %1080 %167 
                               Private f32* %1082 = OpAccessChain %871 %41 
                                                      OpStore %1082 %1081 
                               Private f32* %1084 = OpAccessChain %82 %41 
                                        f32 %1085 = OpLoad %1084 
                               Private f32* %1086 = OpAccessChain %871 %41 
                                        f32 %1087 = OpLoad %1086 
                                       bool %1088 = OpFOrdLessThan %1085 %1087 
                                                      OpStore %1083 %1088 
                                       bool %1089 = OpLoad %1083 
                                     bool_2 %1090 = OpLoad %95 
                                       bool %1091 = OpCompositeExtract %1090 1 
                                       bool %1092 = OpLogicalAnd %1089 %1091 
                                     bool_2 %1093 = OpLoad %46 
                                     bool_2 %1094 = OpCompositeInsert %1092 %1093 0 
                                                      OpStore %46 %1094 
                                     bool_2 %1095 = OpLoad %46 
                                       bool %1096 = OpCompositeExtract %1095 0 
                                     bool_2 %1097 = OpLoad %95 
                                       bool %1098 = OpCompositeExtract %1097 0 
                                       bool %1099 = OpLogicalOr %1096 %1098 
                                     bool_2 %1100 = OpLoad %95 
                                     bool_2 %1101 = OpCompositeInsert %1099 %1100 0 
                                                      OpStore %95 %1101 
                                      f32_4 %1102 = OpLoad %87 
                                      f32_2 %1103 = OpVectorShuffle %1102 %1102 1 0 
                               Uniform f32* %1104 = OpAccessChain %34 %1064 
                                        f32 %1105 = OpLoad %1104 
                               Uniform f32* %1106 = OpAccessChain %34 %1067 
                                        f32 %1107 = OpLoad %1106 
                                      f32_2 %1108 = OpCompositeConstruct %1105 %1107 
                                      f32_2 %1109 = OpFAdd %1103 %1108 
                                      f32_4 %1110 = OpLoad %87 
                                      f32_4 %1111 = OpVectorShuffle %1110 %1109 4 5 2 3 
                                                      OpStore %87 %1111 
                                      f32_4 %1112 = OpLoad %87 
                                      f32_4 %1113 = OpVectorShuffle %1112 %1112 0 1 0 0 
                                      f32_3 %1114 = OpLoad %82 
                                      f32_4 %1115 = OpVectorShuffle %1114 %1114 2 0 2 2 
                                     bool_4 %1116 = OpFOrdLessThan %1113 %1115 
                                     bool_2 %1117 = OpVectorShuffle %1116 %1116 0 1 
                                                      OpStore %46 %1117 
                               Private f32* %1118 = OpAccessChain %87 %27 
                                        f32 %1119 = OpLoad %1118 
                                        f32 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %278 %1121 
                                        f32 %1122 = OpLoad %278 
                               Private f32* %1123 = OpAccessChain %82 %41 
                                        f32 %1124 = OpLoad %1123 
                                       bool %1125 = OpFOrdLessThan %1122 %1124 
                                                      OpStore %307 %1125 
                                       bool %1126 = OpLoad %307 
                                     bool_2 %1127 = OpLoad %46 
                                       bool %1128 = OpCompositeExtract %1127 1 
                                       bool %1129 = OpLogicalAnd %1126 %1128 
                                                      OpStore %1083 %1129 
                                       bool %1130 = OpLoad %1083 
                                     bool_2 %1131 = OpLoad %46 
                                       bool %1132 = OpCompositeExtract %1131 0 
                                       bool %1133 = OpLogicalOr %1130 %1132 
                                     bool_2 %1134 = OpLoad %46 
                                     bool_2 %1135 = OpCompositeInsert %1133 %1134 0 
                                                      OpStore %46 %1135 
                               Private f32* %1136 = OpAccessChain %25 %227 
                                                      OpStore %1136 %49 
                                     bool_2 %1138 = OpLoad %46 
                                       bool %1139 = OpCompositeExtract %1138 0 
                                                      OpSelectionMerge %1141 None 
                                                      OpBranchConditional %1139 %1140 %1144 
                                            %1140 = OpLabel 
                             Uniform f32_4* %1142 = OpAccessChain %34 %323 
                                      f32_4 %1143 = OpLoad %1142 
                                                      OpStore %1137 %1143 
                                                      OpBranch %1141 
                                            %1144 = OpLabel 
                                      f32_4 %1145 = OpLoad %25 
                                      f32_4 %1146 = OpVectorShuffle %1145 %1145 0 0 0 2 
                                                      OpStore %1137 %1146 
                                                      OpBranch %1141 
                                            %1141 = OpLabel 
                                      f32_4 %1147 = OpLoad %1137 
                                                      OpStore %25 %1147 
                                     bool_2 %1149 = OpLoad %95 
                                       bool %1150 = OpCompositeExtract %1149 0 
                                                      OpSelectionMerge %1152 None 
                                                      OpBranchConditional %1150 %1151 %1155 
                                            %1151 = OpLabel 
                             Uniform f32_4* %1153 = OpAccessChain %34 %336 
                                      f32_4 %1154 = OpLoad %1153 
                                                      OpStore %1148 %1154 
                                                      OpBranch %1152 
                                            %1155 = OpLabel 
                                      f32_4 %1156 = OpLoad %25 
                                                      OpStore %1148 %1156 
                                                      OpBranch %1152 
                                            %1152 = OpLabel 
                                      f32_4 %1157 = OpLoad %1148 
                                                      OpStore %331 %1157 
                                                      OpBranch %361 
                                             %361 = OpLabel 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                                      OpBranch %305 
                                             %305 = OpLabel 
                                                      OpBranch %76 
                                            %1158 = OpLabel 
                               Uniform i32* %1159 = OpAccessChain %34 %56 
                                        i32 %1160 = OpLoad %1159 
                                       bool %1161 = OpIEqual %1160 %56 
                                     bool_2 %1162 = OpLoad %95 
                                     bool_2 %1163 = OpCompositeInsert %1161 %1162 0 
                                                      OpStore %95 %1163 
                                     bool_2 %1165 = OpLoad %95 
                                       bool %1166 = OpCompositeExtract %1165 0 
                                                      OpSelectionMerge %1168 None 
                                                      OpBranchConditional %1166 %1167 %1171 
                                            %1167 = OpLabel 
                             Uniform f32_4* %1169 = OpAccessChain %34 %336 
                                      f32_4 %1170 = OpLoad %1169 
                                                      OpStore %1164 %1170 
                                                      OpBranch %1168 
                                            %1171 = OpLabel 
                                                      OpStore %1164 %1172 
                                                      OpBranch %1168 
                                            %1168 = OpLabel 
                                      f32_4 %1173 = OpLoad %1164 
                                                      OpStore %331 %1173 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _OverrideColor;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat2;
bool u_xlatb2;
float u_xlat4;
float u_xlat6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_0.w + (-_Cutoff);
    u_xlat0.x = u_xlat10_0.x * 15.9375;
    u_xlatb2 = u_xlat2<0.0;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    u_xlatb2 = u_xlat0.x>=(-u_xlat0.x);
    u_xlat4 = fract(abs(u_xlat0.x));
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat1.x = u_xlat0.x * 0.0625 + 0.0399999991;
    u_xlat0.x = (u_xlatb2) ? u_xlat4 : (-u_xlat4);
    u_xlat1.y = u_xlat0.x + 0.0399999991;
    u_xlat10_0 = texture(_PaletteTex, u_xlat1.xy);
    u_xlat1.xyz = (-u_xlat10_0.xyz) + _OverrideColor.xyz;
    u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %209 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %209 Location 209 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                               Output f32_4* %209 = OpVariable Output 
                                             %217 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFMul %191 %193 
                                                      OpStore %21 %194 
                              Uniform f32_4* %195 = OpAccessChain %42 %120 %120 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %13 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
                                       f32_4 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %21 
                                       f32_4 %201 = OpFAdd %199 %200 
                                                      OpStore %21 %201 
                              Uniform f32_4* %202 = OpAccessChain %42 %120 %44 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 2 2 2 2 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %210 = OpAccessChain %42 %120 %92 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %13 
                                       f32_4 %213 = OpVectorShuffle %212 %212 3 3 3 3 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %209 %216 
                                 Output f32* %218 = OpAccessChain %166 %120 %162 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                 Output f32* %221 = OpAccessChain %166 %120 %162 
                                                      OpStore %221 %220 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 187
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %173 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %93 DescriptorSet 93 
                                                      OpDecorate %93 Binding 93 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 1 
                                              %30 = OpTypeVector %26 4 
                                              %31 = OpTypeStruct %19 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; u32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 4 
                                              %36 = OpTypePointer Uniform %6 
                                 Private f32* %41 = OpVariable Private 
                                          u32 %42 = OpConstant 0 
                                          f32 %45 = OpConstant 3.674022E-40 
                                              %47 = OpTypeBool 
                                              %48 = OpTypePointer Private %47 
                                Private bool* %49 = OpVariable Private 
                                          f32 %51 = OpConstant 3.674022E-40 
                                          i32 %54 = OpConstant 0 
                                          i32 %55 = OpConstant 1 
                                          i32 %57 = OpConstant -1 
                                              %72 = OpTypePointer Private %15 
                               Private f32_2* %73 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                                              %80 = OpTypePointer Function %6 
  UniformConstant read_only Texture2DSampled* %93 = OpVariable UniformConstant 
                               Private f32_3* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %19 
                              Private f32_3* %106 = OpVariable Private 
                                Private f32* %116 = OpVariable Private 
                                         i32 %117 = OpConstant 2 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %130 = OpConstant 3 
                                             %143 = OpTypePointer Private %19 
                              Private f32_4* %144 = OpVariable Private 
                                             %145 = OpTypePointer Function %7 
                                             %147 = OpTypeVector %47 4 
                                             %148 = OpTypePointer Uniform %30 
                                       f32_3 %157 = OpConstantComposite %51 %51 %51 
                                         u32 %170 = OpConstant 3 
                                             %172 = OpTypePointer Output %19 
                               Output f32_4* %173 = OpVariable Output 
                                             %174 = OpTypePointer Function %19 
                                       f32_4 %182 = OpConstantComposite %51 %51 %51 %121 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                             Function f32_3* %146 = OpVariable Function 
                               Function f32* %161 = OpVariable Function 
                             Function f32_4* %175 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %21 = OpVectorShuffle %20 %20 0 3 
                                        f32_3 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %21 3 4 2 
                                                      OpStore %9 %23 
                                 Private f32* %28 = OpAccessChain %9 %27 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %29 %39 
                                                      OpStore %25 %40 
                                 Private f32* %43 = OpAccessChain %9 %42 
                                          f32 %44 = OpLoad %43 
                                          f32 %46 = OpFMul %44 %45 
                                                      OpStore %41 %46 
                                          f32 %50 = OpLoad %25 
                                         bool %52 = OpFOrdLessThan %50 %51 
                                                      OpStore %49 %52 
                                         bool %53 = OpLoad %49 
                                          i32 %56 = OpSelect %53 %55 %54 
                                          i32 %58 = OpIMul %56 %57 
                                         bool %59 = OpINotEqual %58 %54 
                                                      OpSelectionMerge %61 None 
                                                      OpBranchConditional %59 %60 %61 
                                              %60 = OpLabel 
                                                      OpKill
                                              %61 = OpLabel 
                                          f32 %63 = OpLoad %41 
                                          f32 %64 = OpLoad %41 
                                          f32 %65 = OpFNegate %64 
                                         bool %66 = OpFOrdGreaterThanEqual %63 %65 
                                                      OpStore %49 %66 
                                          f32 %67 = OpLoad %41 
                                          f32 %68 = OpExtInst %1 4 %67 
                                          f32 %69 = OpExtInst %1 10 %68 
                                                      OpStore %25 %69 
                                          f32 %70 = OpLoad %41 
                                          f32 %71 = OpExtInst %1 8 %70 
                                                      OpStore %41 %71 
                                          f32 %74 = OpLoad %41 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                 Private f32* %79 = OpAccessChain %73 %42 
                                                      OpStore %79 %78 
                                         bool %82 = OpLoad %49 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                          f32 %85 = OpLoad %25 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                          f32 %87 = OpLoad %25 
                                          f32 %88 = OpFNegate %87 
                                                      OpStore %81 %88 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %89 = OpLoad %81 
                                                      OpStore %25 %89 
                                          f32 %90 = OpLoad %25 
                                          f32 %91 = OpFAdd %90 %77 
                                 Private f32* %92 = OpAccessChain %73 %27 
                                                      OpStore %92 %91 
                   read_only Texture2DSampled %94 = OpLoad %93 
                                        f32_2 %95 = OpLoad %73 
                                        f32_4 %96 = OpImageSampleImplicitLod %94 %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                                      OpStore %9 %97 
                                        f32_3 %99 = OpLoad %9 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_4* %102 = OpAccessChain %33 %54 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %100 %104 
                                                      OpStore %98 %105 
                              Uniform f32_4* %107 = OpAccessChain %33 %54 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 3 3 3 
                                       f32_3 %110 = OpLoad %98 
                                       f32_3 %111 = OpFMul %109 %110 
                                       f32_3 %112 = OpLoad %9 
                                       f32_3 %113 = OpFAdd %111 %112 
                                                      OpStore %106 %113 
                                       f32_3 %114 = OpLoad %106 
                                       f32_3 %115 = OpExtInst %1 30 %114 
                                                      OpStore %106 %115 
                                Uniform f32* %118 = OpAccessChain %33 %117 
                                         f32 %119 = OpLoad %118 
                                                      OpStore %116 %119 
                                         f32 %120 = OpLoad %116 
                                         f32 %122 = OpExtInst %1 43 %120 %51 %121 
                                                      OpStore %116 %122 
                                       f32_3 %123 = OpLoad %106 
                                         f32 %124 = OpLoad %116 
                                       f32_3 %125 = OpCompositeConstruct %124 %124 %124 
                                       f32_3 %126 = OpFMul %123 %125 
                                                      OpStore %106 %126 
                                       f32_3 %127 = OpLoad %106 
                                       f32_3 %128 = OpExtInst %1 29 %127 
                                                      OpStore %106 %128 
                                       f32_3 %129 = OpLoad %106 
                                Uniform f32* %131 = OpAccessChain %33 %130 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %33 %130 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %135 = OpAccessChain %33 %130 
                                         f32 %136 = OpLoad %135 
                                       f32_3 %137 = OpCompositeConstruct %132 %134 %136 
                                         f32 %138 = OpCompositeExtract %137 0 
                                         f32 %139 = OpCompositeExtract %137 1 
                                         f32 %140 = OpCompositeExtract %137 2 
                                       f32_3 %141 = OpCompositeConstruct %138 %139 %140 
                                       f32_3 %142 = OpExtInst %1 37 %129 %141 
                                                      OpStore %106 %142 
                              Uniform u32_4* %149 = OpAccessChain %33 %55 
                                       u32_4 %150 = OpLoad %149 
                                         u32 %151 = OpCompositeExtract %150 0 
                                        bool %152 = OpINotEqual %151 %42 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %156 
                                             %153 = OpLabel 
                                       f32_3 %155 = OpLoad %106 
                                                      OpStore %146 %155 
                                                      OpBranch %154 
                                             %156 = OpLabel 
                                                      OpStore %146 %157 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %158 = OpLoad %146 
                                       f32_4 %159 = OpLoad %144 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %144 %160 
                              Uniform u32_4* %162 = OpAccessChain %33 %55 
                                       u32_4 %163 = OpLoad %162 
                                         u32 %164 = OpCompositeExtract %163 0 
                                        bool %165 = OpINotEqual %164 %42 
                                                      OpSelectionMerge %167 None 
                                                      OpBranchConditional %165 %166 %168 
                                             %166 = OpLabel 
                                                      OpStore %161 %121 
                                                      OpBranch %167 
                                             %168 = OpLabel 
                                                      OpStore %161 %51 
                                                      OpBranch %167 
                                             %167 = OpLabel 
                                         f32 %169 = OpLoad %161 
                                Private f32* %171 = OpAccessChain %144 %170 
                                                      OpStore %171 %169 
                              Uniform u32_4* %176 = OpAccessChain %33 %55 
                                       u32_4 %177 = OpLoad %176 
                                         u32 %178 = OpCompositeExtract %177 1 
                                        bool %179 = OpINotEqual %178 %42 
                                                      OpSelectionMerge %181 None 
                                                      OpBranchConditional %179 %180 %183 
                                             %180 = OpLabel 
                                                      OpStore %175 %182 
                                                      OpBranch %181 
                                             %183 = OpLabel 
                                       f32_4 %184 = OpLoad %144 
                                                      OpStore %175 %184 
                                                      OpBranch %181 
                                             %181 = OpLabel 
                                       f32_4 %185 = OpLoad %175 
                                                      OpStore %173 %185 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _OverrideColor;
uniform 	int unity_VisualizationMode;
uniform 	int _CheckAlbedo;
uniform 	vec4 _AlbedoCompareColor;
uniform 	float _AlbedoMinLuminance;
uniform 	float _AlbedoMaxLuminance;
uniform 	float _AlbedoHueTolerance;
uniform 	float _AlbedoSaturationTolerance;
uniform 	vec4 unity_MaterialValidateLowColor;
uniform 	vec4 unity_MaterialValidateHighColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _PaletteTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec3 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
bvec3 u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
bvec3 u_xlatb7;
float u_xlat8;
vec2 u_xlat9;
vec2 u_xlat10;
vec2 u_xlat12;
bool u_xlatb12;
bool u_xlatb13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat6.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb6 = u_xlat6.x<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    if(unity_VisualizationMode == 0) {
        u_xlat0.x = u_xlat10_0.x * 15.9375;
        u_xlat6.x = floor(u_xlat0.x);
        u_xlat1.x = u_xlat6.x * 0.0625 + 0.0399999991;
        u_xlatb6 = u_xlat0.x>=(-u_xlat0.x);
        u_xlat0.x = fract(abs(u_xlat0.x));
        u_xlat0.x = (u_xlatb6) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat1.y = u_xlat0.x + 0.0399999991;
        u_xlat10_0 = texture(_PaletteTex, u_xlat1.xy);
        u_xlat1.xyz = (-u_xlat10_0.xyz) + _OverrideColor.xyz;
        u_xlat0.xyz = _OverrideColor.www * u_xlat1.xyz + u_xlat10_0.xyz;
        u_xlatb1.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat0.xyzx).xyz;
        u_xlat2.xyz = u_xlat0.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
        u_xlatb3.xyz = lessThan(u_xlat0.xyzx, vec4(1.0, 1.0, 1.0, 0.0)).xyz;
        u_xlat4.xyz = u_xlat0.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
        u_xlat4.xyz = log2(u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
        u_xlat4.xyz = exp2(u_xlat4.xyz);
        u_xlat5.xyz = log2(u_xlat0.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
        u_xlat5.xyz = exp2(u_xlat5.xyz);
        u_xlat3.x = (u_xlatb3.x) ? u_xlat4.x : u_xlat5.x;
        u_xlat3.y = (u_xlatb3.y) ? u_xlat4.y : u_xlat5.y;
        u_xlat3.z = (u_xlatb3.z) ? u_xlat4.z : u_xlat5.z;
        u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : u_xlat3.x;
        u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : u_xlat3.y;
        u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : u_xlat3.z;
        u_xlat2.x = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
        u_xlat18 = dot(u_xlat1.xyz, vec3(0.333299994, 0.333299994, 0.333299994));
        u_xlat18 = (_CheckAlbedo != 0) ? u_xlat2.x : u_xlat18;
        if(_CheckAlbedo == 0) {
            u_xlatb1.x = u_xlat18<0.0120000001;
            u_xlatb7.x = 0.899999976<u_xlat18;
            u_xlat2.y = 0.0;
            u_xlat3 = (u_xlatb7.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxy;
            SV_Target0 = (u_xlatb1.x) ? unity_MaterialValidateLowColor : u_xlat3;
        } else {
            u_xlatb1.x = u_xlat18<_AlbedoMinLuminance;
            if(u_xlatb1.x){
                SV_Target0 = unity_MaterialValidateLowColor;
            } else {
                u_xlatb18 = _AlbedoMaxLuminance<u_xlat18;
                if(u_xlatb18){
                    SV_Target0 = unity_MaterialValidateHighColor;
                } else {
                    u_xlatb1.xy = lessThan(u_xlat0.yxyy, u_xlat0.zzzz).xy;
                    u_xlatb18 = u_xlatb1.y && u_xlatb1.x;
                    if(u_xlatb18){
                        u_xlatb18 = u_xlat0.z!=0.0;
                        u_xlatb1.x = u_xlat0.y<u_xlat0.x;
                        u_xlat1.x = (u_xlatb1.x) ? u_xlat0.y : u_xlat0.x;
                        u_xlat1.x = u_xlat0.z + (-u_xlat1.x);
                        u_xlatb13 = u_xlat1.x!=0.0;
                        u_xlat9.y = u_xlat1.x / u_xlat0.z;
                        u_xlat19 = (-u_xlat0.y) + u_xlat0.x;
                        u_xlat1.x = u_xlat19 / u_xlat1.x;
                        u_xlat9.x = u_xlat1.x + 4.0;
                        u_xlat10.x = u_xlat19 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb13)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat1.x = u_xlat3.y * 0.166666672;
                        u_xlatb13 = u_xlat3.y<36.0;
                        u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb13) ? u_xlat19 : u_xlat1.x;
                        u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                    } else {
                        u_xlatb18 = u_xlat0.x<u_xlat0.y;
                        if(u_xlatb18){
                            u_xlatb18 = u_xlat0.y!=0.0;
                            u_xlat7 = (u_xlatb1.y) ? u_xlat0.x : u_xlat0.z;
                            u_xlat7 = u_xlat0.y + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.y;
                            u_xlat8 = (-u_xlat0.x) + u_xlat0.z;
                            u_xlat7 = u_xlat8 / u_xlat7;
                            u_xlat9.x = u_xlat7 + 2.0;
                            u_xlat10.x = u_xlat8 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat7 = u_xlat3.y * 0.166666672;
                            u_xlatb19 = u_xlat3.y<36.0;
                            u_xlat8 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb19) ? u_xlat8 : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb18)));
                        } else {
                            u_xlatb18 = u_xlat0.x!=0.0;
                            u_xlatb7.x = u_xlat0.z<u_xlat0.y;
                            u_xlat7 = (u_xlatb7.x) ? u_xlat0.z : u_xlat0.y;
                            u_xlat7 = u_xlat0.x + (-u_xlat7);
                            u_xlatb19 = u_xlat7!=0.0;
                            u_xlat9.y = u_xlat7 / u_xlat0.x;
                            u_xlat6.x = (-u_xlat0.z) + u_xlat0.y;
                            u_xlat9.x = u_xlat6.x / u_xlat7;
                            u_xlat6.y = 0.0;
                            u_xlat0.yz = (bool(u_xlatb19)) ? u_xlat9.xy : u_xlat6.xy;
                            u_xlat7 = u_xlat0.y * 0.166666672;
                            u_xlatb19 = u_xlat0.y<36.0;
                            u_xlat6.x = u_xlat0.y * 0.166666672 + 1.0;
                            u_xlat0.x = (u_xlatb19) ? u_xlat6.x : u_xlat7;
                            u_xlat1.xz = mix(vec2(0.0, 0.0), u_xlat0.xz, vec2(bvec2(u_xlatb18)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlatb0.xy = lessThan(_AlbedoCompareColor.yxyy, _AlbedoCompareColor.zzzz).xy;
                    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
                    if(u_xlatb0.x){
                        u_xlatb0.x = _AlbedoCompareColor.z!=0.0;
                        u_xlat6.x = min(_AlbedoCompareColor.y, _AlbedoCompareColor.x);
                        u_xlat6.x = (-u_xlat6.x) + _AlbedoCompareColor.z;
                        u_xlatb12 = u_xlat6.x!=0.0;
                        u_xlat9.y = u_xlat6.x / _AlbedoCompareColor.z;
                        u_xlat18 = (-_AlbedoCompareColor.y) + _AlbedoCompareColor.x;
                        u_xlat6.x = u_xlat18 / u_xlat6.x;
                        u_xlat9.x = u_xlat6.x + 4.0;
                        u_xlat10.x = u_xlat18 + 4.0;
                        u_xlat10.y = 0.0;
                        u_xlat3.yz = (bool(u_xlatb12)) ? u_xlat9.xy : u_xlat10.xy;
                        u_xlat6.x = u_xlat3.y * 0.166666672;
                        u_xlatb12 = u_xlat3.y<36.0;
                        u_xlat18 = u_xlat3.y * 0.166666672 + 1.0;
                        u_xlat3.x = (u_xlatb12) ? u_xlat18 : u_xlat6.x;
                        u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(u_xlatb0.xx));
                    } else {
                        u_xlatb12 = _AlbedoCompareColor.x<_AlbedoCompareColor.y;
                        if(u_xlatb12){
                            u_xlatb12 = _AlbedoCompareColor.y!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.x, _AlbedoCompareColor.z);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.y;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.y;
                            u_xlat19 = (-_AlbedoCompareColor.x) + _AlbedoCompareColor.z;
                            u_xlat18 = u_xlat19 / u_xlat18;
                            u_xlat9.x = u_xlat18 + 2.0;
                            u_xlat10.x = u_xlat19 + 2.0;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        } else {
                            u_xlatb12 = _AlbedoCompareColor.x!=0.0;
                            u_xlat18 = min(_AlbedoCompareColor.z, _AlbedoCompareColor.y);
                            u_xlat18 = (-u_xlat18) + _AlbedoCompareColor.x;
                            u_xlatb7.x = u_xlat18!=0.0;
                            u_xlat9.y = u_xlat18 / _AlbedoCompareColor.x;
                            u_xlat10.x = (-_AlbedoCompareColor.z) + _AlbedoCompareColor.y;
                            u_xlat9.x = u_xlat10.x / u_xlat18;
                            u_xlat10.y = 0.0;
                            u_xlat3.yz = (u_xlatb7.x) ? u_xlat9.xy : u_xlat10.xy;
                            u_xlat18 = u_xlat3.y * 0.166666672;
                            u_xlatb7.x = u_xlat3.y<36.0;
                            u_xlat19 = u_xlat3.y * 0.166666672 + 1.0;
                            u_xlat3.x = (u_xlatb7.x) ? u_xlat19 : u_xlat18;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat3.xz, vec2(bvec2(u_xlatb12)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlat12.xy = u_xlat0.yx + (-vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance));
                    u_xlatb7.xz = lessThan(u_xlat1.zzxx, u_xlat12.xxyy).xz;
                    u_xlat12.x = u_xlat12.y + 1.0;
                    u_xlatb12 = u_xlat1.x<u_xlat12.x;
                    u_xlatb12 = u_xlatb12 && u_xlatb7.z;
                    u_xlatb12 = u_xlatb12 || u_xlatb7.x;
                    u_xlat0.xy = u_xlat0.yx + vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance);
                    u_xlatb0.xw = lessThan(u_xlat0.xxxy, u_xlat1.zzzx).xw;
                    u_xlat6.x = u_xlat0.y + -1.0;
                    u_xlatb6 = u_xlat6.x<u_xlat1.x;
                    u_xlatb6 = u_xlatb6 && u_xlatb0.w;
                    u_xlatb0.x = u_xlatb6 || u_xlatb0.x;
                    u_xlat2.z = 0.0;
                    u_xlat1 = (u_xlatb0.x) ? unity_MaterialValidateHighColor : u_xlat2.xxxz;
                    SV_Target0 = (bool(u_xlatb12)) ? unity_MaterialValidateLowColor : u_xlat1;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    } else {
        u_xlatb0.x = unity_VisualizationMode==1;
        SV_Target0 = mix(vec4(0.0, 0.0, 0.0, 0.0), unity_MaterialValidateLowColor, vec4(u_xlatb0.xxxx));
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %209 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %209 Location 209 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                               Output f32_4* %209 = OpVariable Output 
                                             %217 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_4 %191 = OpVectorShuffle %190 %190 1 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpFMul %191 %193 
                                                      OpStore %21 %194 
                              Uniform f32_4* %195 = OpAccessChain %42 %120 %120 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %13 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
                                       f32_4 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %21 
                                       f32_4 %201 = OpFAdd %199 %200 
                                                      OpStore %21 %201 
                              Uniform f32_4* %202 = OpAccessChain %42 %120 %44 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %13 
                                       f32_4 %205 = OpVectorShuffle %204 %204 2 2 2 2 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %21 %208 
                              Uniform f32_4* %210 = OpAccessChain %42 %120 %92 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %13 
                                       f32_4 %213 = OpVectorShuffle %212 %212 3 3 3 3 
                                       f32_4 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_4 %216 = OpFAdd %214 %215 
                                                      OpStore %209 %216 
                                 Output f32* %218 = OpAccessChain %166 %120 %162 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFNegate %219 
                                 Output f32* %221 = OpAccessChain %166 %120 %162 
                                                      OpStore %221 %220 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1175
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %331 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 RelaxedPrecision 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 RelaxedPrecision 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 RelaxedPrecision 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 RelaxedPrecision 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 RelaxedPrecision 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 RelaxedPrecision 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 RelaxedPrecision 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %73 SpecId 73 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %127 DescriptorSet 127 
                                                      OpDecorate %127 Binding 127 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %302 SpecId 302 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %331 Location 331 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %538 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %554 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %671 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %688 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %708 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %767 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %773 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %780 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %787 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %810 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %817 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %844 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %853 RelaxedPrecision 
                                                      OpDecorate %863 SpecId 863 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %871 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %876 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %882 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %900 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %905 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %914 RelaxedPrecision 
                                                      OpDecorate %915 RelaxedPrecision 
                                                      OpDecorate %932 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %937 RelaxedPrecision 
                                                      OpDecorate %938 RelaxedPrecision 
                                                      OpDecorate %940 RelaxedPrecision 
                                                      OpDecorate %945 RelaxedPrecision 
                                                      OpDecorate %946 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %955 RelaxedPrecision 
                                                      OpDecorate %957 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %966 RelaxedPrecision 
                                                      OpDecorate %968 RelaxedPrecision 
                                                      OpDecorate %973 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %980 RelaxedPrecision 
                                                      OpDecorate %981 RelaxedPrecision 
                                                      OpDecorate %984 RelaxedPrecision 
                                                      OpDecorate %985 RelaxedPrecision 
                                                      OpDecorate %987 RelaxedPrecision 
                                                      OpDecorate %988 RelaxedPrecision 
                                                      OpDecorate %991 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %999 RelaxedPrecision 
                                                      OpDecorate %1001 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1004 RelaxedPrecision 
                                                      OpDecorate %1006 RelaxedPrecision 
                                                      OpDecorate %1007 RelaxedPrecision 
                                                      OpDecorate %1010 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1021 RelaxedPrecision 
                                                      OpDecorate %1023 RelaxedPrecision 
                                                      OpDecorate %1024 RelaxedPrecision 
                                                      OpDecorate %1028 RelaxedPrecision 
                                                      OpDecorate %1029 RelaxedPrecision 
                                                      OpDecorate %1032 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1038 RelaxedPrecision 
                                                      OpDecorate %1039 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1048 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1057 RelaxedPrecision 
                                                      OpDecorate %1059 RelaxedPrecision 
                                                      OpDecorate %1062 RelaxedPrecision 
                                                      OpDecorate %1063 RelaxedPrecision 
                                                      OpDecorate %1066 RelaxedPrecision 
                                                      OpDecorate %1069 RelaxedPrecision 
                                                      OpDecorate %1070 RelaxedPrecision 
                                                      OpDecorate %1071 RelaxedPrecision 
                                                      OpDecorate %1072 RelaxedPrecision 
                                                      OpDecorate %1073 RelaxedPrecision 
                                                      OpDecorate %1074 RelaxedPrecision 
                                                      OpDecorate %1075 RelaxedPrecision 
                                                      OpDecorate %1076 RelaxedPrecision 
                                                      OpDecorate %1077 RelaxedPrecision 
                                                      OpDecorate %1080 RelaxedPrecision 
                                                      OpDecorate %1081 RelaxedPrecision 
                                                      OpDecorate %1085 RelaxedPrecision 
                                                      OpDecorate %1087 RelaxedPrecision 
                                                      OpDecorate %1102 RelaxedPrecision 
                                                      OpDecorate %1103 RelaxedPrecision 
                                                      OpDecorate %1105 RelaxedPrecision 
                                                      OpDecorate %1107 RelaxedPrecision 
                                                      OpDecorate %1108 RelaxedPrecision 
                                                      OpDecorate %1109 RelaxedPrecision 
                                                      OpDecorate %1112 RelaxedPrecision 
                                                      OpDecorate %1113 RelaxedPrecision 
                                                      OpDecorate %1114 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1119 RelaxedPrecision 
                                                      OpDecorate %1121 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1143 RelaxedPrecision 
                                                      OpDecorate %1145 RelaxedPrecision 
                                                      OpDecorate %1146 RelaxedPrecision 
                                                      OpDecorate %1147 RelaxedPrecision 
                                                      OpDecorate %1154 RelaxedPrecision 
                                                      OpDecorate %1156 RelaxedPrecision 
                                                      OpDecorate %1157 RelaxedPrecision 
                                                      OpDecorate %1170 RelaxedPrecision 
                                                      OpDecorate %1173 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                                              %24 = OpTypePointer Private %19 
                               Private f32_4* %25 = OpVariable Private 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 1 
                                              %28 = OpTypePointer Private %6 
                                              %31 = OpTypeInt 32 1 
                                              %32 = OpTypeStruct %19 %31 %31 %19 %6 %6 %6 %6 %19 %19 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; i32; i32; f32_4; f32; f32; f32; f32; f32_4; f32_4; f32;}* %34 = OpVariable Uniform 
                                          i32 %35 = OpConstant 10 
                                              %36 = OpTypePointer Uniform %6 
                                          u32 %41 = OpConstant 0 
                                              %43 = OpTypeBool 
                                              %44 = OpTypeVector %43 2 
                                              %45 = OpTypePointer Private %44 
                              Private bool_2* %46 = OpVariable Private 
                                          f32 %49 = OpConstant 3.674022E-40 
                                          i32 %55 = OpConstant 0 
                                          i32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant -1 
                                         bool %64 = OpConstantFalse 
                                              %67 = OpTypePointer Uniform %31 
                                         bool %73 = OpSpecConstantFalse 
                                         bool %74 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                          f32 %79 = OpConstant 3.674022E-40 
                               Private f32_3* %82 = OpVariable Private 
                               Private f32_4* %87 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                              Private bool_2* %95 = OpVariable Private 
                                             %109 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %127 = OpVariable UniformConstant 
                              Private f32_3* %133 = OpVariable Private 
                                             %136 = OpTypePointer Uniform %19 
                              Private f32_3* %141 = OpVariable Private 
                                             %149 = OpTypeVector %43 3 
                                             %150 = OpTypePointer Private %149 
                             Private bool_3* %151 = OpVariable Private 
                                         f32 %152 = OpConstant 3.674022E-40 
                                       f32_4 %153 = OpConstantComposite %152 %152 %152 %49 
                                             %156 = OpTypeVector %43 4 
                              Private f32_3* %159 = OpVariable Private 
                                         f32 %161 = OpConstant 3.674022E-40 
                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
                             Private bool_3* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                       f32_4 %168 = OpConstantComposite %167 %167 %167 %49 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %173 = OpConstant 3.674022E-40 
                                       f32_3 %174 = OpConstantComposite %173 %173 %173 
                                         f32 %177 = OpConstant 3.674022E-40 
                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                              Private f32_3* %188 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_3 %193 = OpConstantComposite %192 %192 %192 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %227 = OpConstant 2 
                                         f32 %272 = OpConstant 3.674022E-40 
                                         f32 %273 = OpConstant 3.674022E-40 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_3 %275 = OpConstantComposite %272 %273 %274 
                                Private f32* %278 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         i32 %284 = OpConstant 2 
                                        bool %302 = OpSpecConstantFalse 
                                        bool %303 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                             %306 = OpTypePointer Private %43 
                               Private bool* %307 = OpVariable Private 
                                         f32 %309 = OpConstant 3.674022E-40 
                                         f32 %311 = OpConstant 3.674022E-40 
                                             %317 = OpTypePointer Function %19 
                                         i32 %323 = OpConstant 9 
                                             %330 = OpTypePointer Output %19 
                               Output f32_4* %331 = OpVariable Output 
                                         i32 %336 = OpConstant 8 
                                         i32 %344 = OpConstant 4 
                                         i32 %354 = OpConstant 5 
                                Private f32* %433 = OpVariable Private 
                                         f32 %436 = OpConstant 3.674022E-40 
                                Private f32* %438 = OpVariable Private 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %467 = OpConstant 3.674022E-40 
                                             %487 = OpTypePointer Function %15 
                                       f32_2 %495 = OpConstantComposite %49 %49 
                                             %535 = OpTypePointer Private %15 
                              Private f32_2* %536 = OpVariable Private 
                              Private f32_2* %556 = OpVariable Private 
                                         f32 %559 = OpConstant 3.674022E-40 
                                       f32_2 %560 = OpConstantComposite %559 %559 
                              Private f32_3* %574 = OpVariable Private 
                              Private f32_2* %662 = OpVariable Private 
                                Private f32* %688 = OpVariable Private 
                                         i32 %723 = OpConstant 3 
                              Private f32_2* %785 = OpVariable Private 
                                       f32_2 %788 = OpConstantComposite %436 %436 
                                        bool %863 = OpSpecConstantFalse 
                              Private f32_2* %871 = OpVariable Private 
                                Private f32* %912 = OpVariable Private 
                             Private f32_2* %1001 = OpVariable Private 
                                        i32 %1064 = OpConstant 7 
                                        i32 %1067 = OpConstant 6 
                              Private bool* %1083 = OpVariable Private 
                                        f32 %1120 = OpConstant 3.674022E-40 
                                      f32_4 %1172 = OpConstantComposite %49 %49 %49 %49 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %110 = OpVariable Function 
                               Function f32* %198 = OpVariable Function 
                               Function f32* %210 = OpVariable Function 
                               Function f32* %222 = OpVariable Function 
                               Function f32* %235 = OpVariable Function 
                               Function f32* %247 = OpVariable Function 
                               Function f32* %259 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                             Function f32_4* %318 = OpVariable Function 
                             Function f32_4* %332 = OpVariable Function 
                               Function f32* %391 = OpVariable Function 
                               Function f32* %442 = OpVariable Function 
                               Function f32* %452 = OpVariable Function 
                               Function f32* %476 = OpVariable Function 
                             Function f32_2* %488 = OpVariable Function 
                               Function f32* %511 = OpVariable Function 
                               Function f32* %562 = OpVariable Function 
                               Function f32* %575 = OpVariable Function 
                               Function f32* %599 = OpVariable Function 
                             Function f32_2* %611 = OpVariable Function 
                               Function f32* %632 = OpVariable Function 
                             Function f32_2* %677 = OpVariable Function 
                               Function f32* %702 = OpVariable Function 
                             Function f32_2* %713 = OpVariable Function 
                               Function f32* %790 = OpVariable Function 
                               Function f32* %802 = OpVariable Function 
                               Function f32* %826 = OpVariable Function 
                             Function f32_2* %838 = OpVariable Function 
                               Function f32* %916 = OpVariable Function 
                               Function f32* %927 = OpVariable Function 
                               Function f32* %949 = OpVariable Function 
                             Function f32_2* %960 = OpVariable Function 
                            Function f32_2* %1016 = OpVariable Function 
                              Function f32* %1040 = OpVariable Function 
                            Function f32_2* %1051 = OpVariable Function 
                            Function f32_4* %1137 = OpVariable Function 
                            Function f32_4* %1148 = OpVariable Function 
                            Function f32_4* %1164 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_2 %21 = OpVectorShuffle %20 %20 0 3 
                                        f32_3 %22 = OpLoad %9 
                                        f32_3 %23 = OpVectorShuffle %22 %21 3 4 2 
                                                      OpStore %9 %23 
                                 Private f32* %29 = OpAccessChain %9 %27 
                                          f32 %30 = OpLoad %29 
                                 Uniform f32* %37 = OpAccessChain %34 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %30 %39 
                                 Private f32* %42 = OpAccessChain %25 %41 
                                                      OpStore %42 %40 
                                 Private f32* %47 = OpAccessChain %25 %41 
                                          f32 %48 = OpLoad %47 
                                         bool %50 = OpFOrdLessThan %48 %49 
                                       bool_2 %51 = OpLoad %46 
                                       bool_2 %52 = OpCompositeInsert %50 %51 0 
                                                      OpStore %46 %52 
                                       bool_2 %53 = OpLoad %46 
                                         bool %54 = OpCompositeExtract %53 0 
                                          i32 %57 = OpSelect %54 %56 %55 
                                          i32 %59 = OpIMul %57 %58 
                                         bool %60 = OpINotEqual %59 %55 
                                                      OpSelectionMerge %62 None 
                                                      OpBranchConditional %60 %61 %62 
                                              %61 = OpLabel 
                                                      OpKill
                                              %62 = OpLabel 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                 Uniform i32* %68 = OpAccessChain %34 %56 
                                          i32 %69 = OpLoad %68 
                                         bool %70 = OpIEqual %69 %55 
                                                      OpSelectionMerge %72 None 
                                                      OpBranchConditional %70 %71 %72 
                                              %71 = OpLabel 
                                                      OpBranch %72 
                                              %72 = OpLabel 
                                                      OpBranch %66 
                                              %66 = OpLabel 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %1158 
                                              %75 = OpLabel 
                                 Private f32* %77 = OpAccessChain %9 %41 
                                          f32 %78 = OpLoad %77 
                                          f32 %80 = OpFMul %78 %79 
                                 Private f32* %81 = OpAccessChain %25 %41 
                                                      OpStore %81 %80 
                                 Private f32* %83 = OpAccessChain %25 %41 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpExtInst %1 8 %84 
                                 Private f32* %86 = OpAccessChain %82 %41 
                                                      OpStore %86 %85 
                                 Private f32* %88 = OpAccessChain %82 %41 
                                          f32 %89 = OpLoad %88 
                                          f32 %91 = OpFMul %89 %90 
                                          f32 %93 = OpFAdd %91 %92 
                                 Private f32* %94 = OpAccessChain %87 %41 
                                                      OpStore %94 %93 
                                 Private f32* %96 = OpAccessChain %25 %41 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %98 = OpAccessChain %25 %41 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFNegate %99 
                                        bool %101 = OpFOrdGreaterThanEqual %97 %100 
                                      bool_2 %102 = OpLoad %95 
                                      bool_2 %103 = OpCompositeInsert %101 %102 0 
                                                      OpStore %95 %103 
                                Private f32* %104 = OpAccessChain %25 %41 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpExtInst %1 4 %105 
                                         f32 %107 = OpExtInst %1 10 %106 
                                Private f32* %108 = OpAccessChain %25 %41 
                                                      OpStore %108 %107 
                                      bool_2 %111 = OpLoad %95 
                                        bool %112 = OpCompositeExtract %111 0 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %117 
                                             %113 = OpLabel 
                                Private f32* %115 = OpAccessChain %25 %41 
                                         f32 %116 = OpLoad %115 
                                                      OpStore %110 %116 
                                                      OpBranch %114 
                                             %117 = OpLabel 
                                Private f32* %118 = OpAccessChain %25 %41 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFNegate %119 
                                                      OpStore %110 %120 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                         f32 %121 = OpLoad %110 
                                Private f32* %122 = OpAccessChain %25 %41 
                                                      OpStore %122 %121 
                                Private f32* %123 = OpAccessChain %25 %41 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFAdd %124 %92 
                                Private f32* %126 = OpAccessChain %87 %27 
                                                      OpStore %126 %125 
                  read_only Texture2DSampled %128 = OpLoad %127 
                                       f32_4 %129 = OpLoad %87 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpImageSampleImplicitLod %128 %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                                      OpStore %9 %132 
                                       f32_3 %134 = OpLoad %9 
                                       f32_3 %135 = OpFNegate %134 
                              Uniform f32_4* %137 = OpAccessChain %34 %55 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFAdd %135 %139 
                                                      OpStore %133 %140 
                              Uniform f32_4* %142 = OpAccessChain %34 %55 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpLoad %133 
                                       f32_3 %146 = OpFMul %144 %145 
                                       f32_3 %147 = OpLoad %9 
                                       f32_3 %148 = OpFAdd %146 %147 
                                                      OpStore %141 %148 
                                       f32_3 %154 = OpLoad %141 
                                       f32_4 %155 = OpVectorShuffle %154 %154 0 1 2 0 
                                      bool_4 %157 = OpFOrdGreaterThanEqual %153 %155 
                                      bool_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %151 %158 
                                       f32_3 %160 = OpLoad %141 
                                       f32_3 %163 = OpFMul %160 %162 
                                                      OpStore %159 %163 
                                       f32_3 %165 = OpLoad %141 
                                       f32_4 %166 = OpVectorShuffle %165 %165 0 1 2 0 
                                      bool_4 %169 = OpFOrdLessThan %166 %168 
                                      bool_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                                      OpStore %164 %170 
                                       f32_3 %172 = OpLoad %141 
                                       f32_3 %175 = OpFAdd %172 %174 
                                                      OpStore %171 %175 
                                       f32_3 %176 = OpLoad %171 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %171 %179 
                                       f32_3 %180 = OpLoad %171 
                                       f32_3 %181 = OpExtInst %1 30 %180 
                                                      OpStore %171 %181 
                                       f32_3 %182 = OpLoad %171 
                                       f32_3 %185 = OpFMul %182 %184 
                                                      OpStore %171 %185 
                                       f32_3 %186 = OpLoad %171 
                                       f32_3 %187 = OpExtInst %1 29 %186 
                                                      OpStore %171 %187 
                                       f32_3 %189 = OpLoad %141 
                                       f32_3 %190 = OpExtInst %1 30 %189 
                                                      OpStore %188 %190 
                                       f32_3 %191 = OpLoad %188 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %188 %194 
                                       f32_3 %195 = OpLoad %188 
                                       f32_3 %196 = OpExtInst %1 29 %195 
                                                      OpStore %188 %196 
                                      bool_3 %199 = OpLoad %164 
                                        bool %200 = OpCompositeExtract %199 0 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %205 
                                             %201 = OpLabel 
                                Private f32* %203 = OpAccessChain %171 %41 
                                         f32 %204 = OpLoad %203 
                                                      OpStore %198 %204 
                                                      OpBranch %202 
                                             %205 = OpLabel 
                                Private f32* %206 = OpAccessChain %188 %41 
                                         f32 %207 = OpLoad %206 
                                                      OpStore %198 %207 
                                                      OpBranch %202 
                                             %202 = OpLabel 
                                         f32 %208 = OpLoad %198 
                                Private f32* %209 = OpAccessChain %197 %41 
                                                      OpStore %209 %208 
                                      bool_3 %211 = OpLoad %164 
                                        bool %212 = OpCompositeExtract %211 1 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %217 
                                             %213 = OpLabel 
                                Private f32* %215 = OpAccessChain %171 %27 
                                         f32 %216 = OpLoad %215 
                                                      OpStore %210 %216 
                                                      OpBranch %214 
                                             %217 = OpLabel 
                                Private f32* %218 = OpAccessChain %188 %27 
                                         f32 %219 = OpLoad %218 
                                                      OpStore %210 %219 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                         f32 %220 = OpLoad %210 
                                Private f32* %221 = OpAccessChain %197 %27 
                                                      OpStore %221 %220 
                                      bool_3 %223 = OpLoad %164 
                                        bool %224 = OpCompositeExtract %223 2 
                                                      OpSelectionMerge %226 None 
                                                      OpBranchConditional %224 %225 %230 
                                             %225 = OpLabel 
                                Private f32* %228 = OpAccessChain %171 %227 
                                         f32 %229 = OpLoad %228 
                                                      OpStore %222 %229 
                                                      OpBranch %226 
                                             %230 = OpLabel 
                                Private f32* %231 = OpAccessChain %188 %227 
                                         f32 %232 = OpLoad %231 
                                                      OpStore %222 %232 
                                                      OpBranch %226 
                                             %226 = OpLabel 
                                         f32 %233 = OpLoad %222 
                                Private f32* %234 = OpAccessChain %197 %227 
                                                      OpStore %234 %233 
                                      bool_3 %236 = OpLoad %151 
                                        bool %237 = OpCompositeExtract %236 0 
                                                      OpSelectionMerge %239 None 
                                                      OpBranchConditional %237 %238 %242 
                                             %238 = OpLabel 
                                Private f32* %240 = OpAccessChain %159 %41 
                                         f32 %241 = OpLoad %240 
                                                      OpStore %235 %241 
                                                      OpBranch %239 
                                             %242 = OpLabel 
                                Private f32* %243 = OpAccessChain %197 %41 
                                         f32 %244 = OpLoad %243 
                                                      OpStore %235 %244 
                                                      OpBranch %239 
                                             %239 = OpLabel 
                                         f32 %245 = OpLoad %235 
                                Private f32* %246 = OpAccessChain %133 %41 
                                                      OpStore %246 %245 
                                      bool_3 %248 = OpLoad %151 
                                        bool %249 = OpCompositeExtract %248 1 
                                                      OpSelectionMerge %251 None 
                                                      OpBranchConditional %249 %250 %254 
                                             %250 = OpLabel 
                                Private f32* %252 = OpAccessChain %159 %27 
                                         f32 %253 = OpLoad %252 
                                                      OpStore %247 %253 
                                                      OpBranch %251 
                                             %254 = OpLabel 
                                Private f32* %255 = OpAccessChain %197 %27 
                                         f32 %256 = OpLoad %255 
                                                      OpStore %247 %256 
                                                      OpBranch %251 
                                             %251 = OpLabel 
                                         f32 %257 = OpLoad %247 
                                Private f32* %258 = OpAccessChain %133 %27 
                                                      OpStore %258 %257 
                                      bool_3 %260 = OpLoad %151 
                                        bool %261 = OpCompositeExtract %260 2 
                                                      OpSelectionMerge %263 None 
                                                      OpBranchConditional %261 %262 %266 
                                             %262 = OpLabel 
                                Private f32* %264 = OpAccessChain %159 %227 
                                         f32 %265 = OpLoad %264 
                                                      OpStore %259 %265 
                                                      OpBranch %263 
                                             %266 = OpLabel 
                                Private f32* %267 = OpAccessChain %197 %227 
                                         f32 %268 = OpLoad %267 
                                                      OpStore %259 %268 
                                                      OpBranch %263 
                                             %263 = OpLabel 
                                         f32 %269 = OpLoad %259 
                                Private f32* %270 = OpAccessChain %133 %227 
                                                      OpStore %270 %269 
                                       f32_3 %271 = OpLoad %133 
                                         f32 %276 = OpDot %271 %275 
                                Private f32* %277 = OpAccessChain %25 %41 
                                                      OpStore %277 %276 
                                       f32_3 %279 = OpLoad %133 
                                         f32 %282 = OpDot %279 %281 
                                                      OpStore %278 %282 
                                Uniform i32* %285 = OpAccessChain %34 %284 
                                         i32 %286 = OpLoad %285 
                                        bool %287 = OpINotEqual %286 %55 
                                                      OpSelectionMerge %289 None 
                                                      OpBranchConditional %287 %288 %292 
                                             %288 = OpLabel 
                                Private f32* %290 = OpAccessChain %25 %41 
                                         f32 %291 = OpLoad %290 
                                                      OpStore %283 %291 
                                                      OpBranch %289 
                                             %292 = OpLabel 
                                         f32 %293 = OpLoad %278 
                                                      OpStore %283 %293 
                                                      OpBranch %289 
                                             %289 = OpLabel 
                                         f32 %294 = OpLoad %283 
                                                      OpStore %278 %294 
                                                      OpSelectionMerge %296 None 
                                                      OpBranchConditional %64 %295 %296 
                                             %295 = OpLabel 
                                Uniform i32* %297 = OpAccessChain %34 %284 
                                         i32 %298 = OpLoad %297 
                                        bool %299 = OpIEqual %298 %55 
                                                      OpSelectionMerge %301 None 
                                                      OpBranchConditional %299 %300 %301 
                                             %300 = OpLabel 
                                                      OpBranch %301 
                                             %301 = OpLabel 
                                                      OpBranch %296 
                                             %296 = OpLabel 
                                                      OpSelectionMerge %305 None 
                                                      OpBranchConditional %303 %304 %342 
                                             %304 = OpLabel 
                                         f32 %308 = OpLoad %278 
                                        bool %310 = OpFOrdLessThan %308 %309 
                                                      OpStore %307 %310 
                                         f32 %312 = OpLoad %278 
                                        bool %313 = OpFOrdLessThan %311 %312 
                                      bool_3 %314 = OpLoad %151 
                                      bool_3 %315 = OpCompositeInsert %313 %314 0 
                                                      OpStore %151 %315 
                                Private f32* %316 = OpAccessChain %25 %27 
                                                      OpStore %316 %49 
                                      bool_3 %319 = OpLoad %151 
                                        bool %320 = OpCompositeExtract %319 0 
                                                      OpSelectionMerge %322 None 
                                                      OpBranchConditional %320 %321 %326 
                                             %321 = OpLabel 
                              Uniform f32_4* %324 = OpAccessChain %34 %323 
                                       f32_4 %325 = OpLoad %324 
                                                      OpStore %318 %325 
                                                      OpBranch %322 
                                             %326 = OpLabel 
                                       f32_4 %327 = OpLoad %25 
                                       f32_4 %328 = OpVectorShuffle %327 %327 0 0 0 1 
                                                      OpStore %318 %328 
                                                      OpBranch %322 
                                             %322 = OpLabel 
                                       f32_4 %329 = OpLoad %318 
                                                      OpStore %87 %329 
                                        bool %333 = OpLoad %307 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %339 
                                             %334 = OpLabel 
                              Uniform f32_4* %337 = OpAccessChain %34 %336 
                                       f32_4 %338 = OpLoad %337 
                                                      OpStore %332 %338 
                                                      OpBranch %335 
                                             %339 = OpLabel 
                                       f32_4 %340 = OpLoad %87 
                                                      OpStore %332 %340 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_4 %341 = OpLoad %332 
                                                      OpStore %331 %341 
                                                      OpBranch %305 
                                             %342 = OpLabel 
                                         f32 %343 = OpLoad %278 
                                Uniform f32* %345 = OpAccessChain %34 %344 
                                         f32 %346 = OpLoad %345 
                                        bool %347 = OpFOrdLessThan %343 %346 
                                                      OpStore %307 %347 
                                        bool %348 = OpLoad %307 
                                                      OpSelectionMerge %350 None 
                                                      OpBranchConditional %348 %349 %353 
                                             %349 = OpLabel 
                              Uniform f32_4* %351 = OpAccessChain %34 %336 
                                       f32_4 %352 = OpLoad %351 
                                                      OpStore %331 %352 
                                                      OpBranch %350 
                                             %353 = OpLabel 
                                Uniform f32* %355 = OpAccessChain %34 %354 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpLoad %278 
                                        bool %358 = OpFOrdLessThan %356 %357 
                                                      OpStore %307 %358 
                                        bool %359 = OpLoad %307 
                                                      OpSelectionMerge %361 None 
                                                      OpBranchConditional %359 %360 %364 
                                             %360 = OpLabel 
                              Uniform f32_4* %362 = OpAccessChain %34 %323 
                                       f32_4 %363 = OpLoad %362 
                                                      OpStore %331 %363 
                                                      OpBranch %361 
                                             %364 = OpLabel 
                                       f32_3 %365 = OpLoad %141 
                                       f32_4 %366 = OpVectorShuffle %365 %365 1 0 1 1 
                                       f32_3 %367 = OpLoad %141 
                                       f32_4 %368 = OpVectorShuffle %367 %367 2 2 2 2 
                                      bool_4 %369 = OpFOrdLessThan %366 %368 
                                      bool_2 %370 = OpVectorShuffle %369 %369 0 1 
                                      bool_3 %371 = OpLoad %151 
                                      bool_3 %372 = OpVectorShuffle %371 %370 3 4 2 
                                                      OpStore %151 %372 
                                      bool_3 %373 = OpLoad %151 
                                        bool %374 = OpCompositeExtract %373 1 
                                      bool_3 %375 = OpLoad %151 
                                        bool %376 = OpCompositeExtract %375 0 
                                        bool %377 = OpLogicalAnd %374 %376 
                                                      OpStore %307 %377 
                                        bool %378 = OpLoad %307 
                                                      OpSelectionMerge %380 None 
                                                      OpBranchConditional %378 %379 %499 
                                             %379 = OpLabel 
                                Private f32* %381 = OpAccessChain %141 %227 
                                         f32 %382 = OpLoad %381 
                                        bool %383 = OpFOrdNotEqual %382 %49 
                                                      OpStore %307 %383 
                                Private f32* %384 = OpAccessChain %141 %27 
                                         f32 %385 = OpLoad %384 
                                Private f32* %386 = OpAccessChain %141 %41 
                                         f32 %387 = OpLoad %386 
                                        bool %388 = OpFOrdLessThan %385 %387 
                                      bool_3 %389 = OpLoad %151 
                                      bool_3 %390 = OpCompositeInsert %388 %389 0 
                                                      OpStore %151 %390 
                                      bool_3 %392 = OpLoad %151 
                                        bool %393 = OpCompositeExtract %392 0 
                                                      OpSelectionMerge %395 None 
                                                      OpBranchConditional %393 %394 %398 
                                             %394 = OpLabel 
                                Private f32* %396 = OpAccessChain %141 %27 
                                         f32 %397 = OpLoad %396 
                                                      OpStore %391 %397 
                                                      OpBranch %395 
                                             %398 = OpLabel 
                                Private f32* %399 = OpAccessChain %141 %41 
                                         f32 %400 = OpLoad %399 
                                                      OpStore %391 %400 
                                                      OpBranch %395 
                                             %395 = OpLabel 
                                         f32 %401 = OpLoad %391 
                                Private f32* %402 = OpAccessChain %82 %41 
                                                      OpStore %402 %401 
                                Private f32* %403 = OpAccessChain %141 %227 
                                         f32 %404 = OpLoad %403 
                                Private f32* %405 = OpAccessChain %82 %41 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFNegate %406 
                                         f32 %408 = OpFAdd %404 %407 
                                Private f32* %409 = OpAccessChain %82 %41 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %82 %41 
                                         f32 %411 = OpLoad %410 
                                        bool %412 = OpFOrdNotEqual %411 %49 
                                      bool_3 %413 = OpLoad %151 
                                      bool_3 %414 = OpCompositeInsert %412 %413 0 
                                                      OpStore %151 %414 
                                Private f32* %415 = OpAccessChain %82 %41 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %141 %227 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFDiv %416 %418 
                                                      OpStore %278 %419 
                                Private f32* %420 = OpAccessChain %141 %27 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFNegate %421 
                                Private f32* %423 = OpAccessChain %141 %41 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFAdd %422 %424 
                                Private f32* %426 = OpAccessChain %87 %41 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %87 %41 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %82 %41 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFDiv %428 %430 
                                Private f32* %432 = OpAccessChain %82 %41 
                                                      OpStore %432 %431 
                                Private f32* %434 = OpAccessChain %82 %41 
                                         f32 %435 = OpLoad %434 
                                         f32 %437 = OpFAdd %435 %436 
                                                      OpStore %433 %437 
                                Private f32* %439 = OpAccessChain %87 %41 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFAdd %440 %436 
                                                      OpStore %438 %441 
                                      bool_3 %443 = OpLoad %151 
                                        bool %444 = OpCompositeExtract %443 0 
                                                      OpSelectionMerge %446 None 
                                                      OpBranchConditional %444 %445 %448 
                                             %445 = OpLabel 
                                         f32 %447 = OpLoad %433 
                                                      OpStore %442 %447 
                                                      OpBranch %446 
                                             %448 = OpLabel 
                                         f32 %449 = OpLoad %438 
                                                      OpStore %442 %449 
                                                      OpBranch %446 
                                             %446 = OpLabel 
                                         f32 %450 = OpLoad %442 
                                Private f32* %451 = OpAccessChain %82 %41 
                                                      OpStore %451 %450 
                                      bool_3 %453 = OpLoad %151 
                                        bool %454 = OpCompositeExtract %453 0 
                                                      OpSelectionMerge %456 None 
                                                      OpBranchConditional %454 %455 %458 
                                             %455 = OpLabel 
                                         f32 %457 = OpLoad %278 
                                                      OpStore %452 %457 
                                                      OpBranch %456 
                                             %458 = OpLabel 
                                                      OpStore %452 %49 
                                                      OpBranch %456 
                                             %456 = OpLabel 
                                         f32 %459 = OpLoad %452 
                                Private f32* %460 = OpAccessChain %87 %227 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %82 %41 
                                         f32 %462 = OpLoad %461 
                                         f32 %464 = OpFMul %462 %463 
                                                      OpStore %278 %464 
                                Private f32* %465 = OpAccessChain %82 %41 
                                         f32 %466 = OpLoad %465 
                                        bool %468 = OpFOrdLessThan %466 %467 
                                      bool_3 %469 = OpLoad %151 
                                      bool_3 %470 = OpCompositeInsert %468 %469 0 
                                                      OpStore %151 %470 
                                Private f32* %471 = OpAccessChain %82 %41 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %472 %463 
                                         f32 %474 = OpFAdd %473 %167 
                                Private f32* %475 = OpAccessChain %82 %41 
                                                      OpStore %475 %474 
                                      bool_3 %477 = OpLoad %151 
                                        bool %478 = OpCompositeExtract %477 0 
                                                      OpSelectionMerge %480 None 
                                                      OpBranchConditional %478 %479 %483 
                                             %479 = OpLabel 
                                Private f32* %481 = OpAccessChain %82 %41 
                                         f32 %482 = OpLoad %481 
                                                      OpStore %476 %482 
                                                      OpBranch %480 
                                             %483 = OpLabel 
                                         f32 %484 = OpLoad %278 
                                                      OpStore %476 %484 
                                                      OpBranch %480 
                                             %480 = OpLabel 
                                         f32 %485 = OpLoad %476 
                                Private f32* %486 = OpAccessChain %87 %41 
                                                      OpStore %486 %485 
                                        bool %489 = OpLoad %307 
                                                      OpSelectionMerge %491 None 
                                                      OpBranchConditional %489 %490 %494 
                                             %490 = OpLabel 
                                       f32_4 %492 = OpLoad %87 
                                       f32_2 %493 = OpVectorShuffle %492 %492 0 2 
                                                      OpStore %488 %493 
                                                      OpBranch %491 
                                             %494 = OpLabel 
                                                      OpStore %488 %495 
                                                      OpBranch %491 
                                             %491 = OpLabel 
                                       f32_2 %496 = OpLoad %488 
                                       f32_3 %497 = OpLoad %82 
                                       f32_3 %498 = OpVectorShuffle %497 %496 3 1 4 
                                                      OpStore %82 %498 
                                                      OpBranch %380 
                                             %499 = OpLabel 
                                Private f32* %500 = OpAccessChain %141 %41 
                                         f32 %501 = OpLoad %500 
                                Private f32* %502 = OpAccessChain %141 %27 
                                         f32 %503 = OpLoad %502 
                                        bool %504 = OpFOrdLessThan %501 %503 
                                                      OpStore %307 %504 
                                        bool %505 = OpLoad %307 
                                                      OpSelectionMerge %507 None 
                                                      OpBranchConditional %505 %506 %621 
                                             %506 = OpLabel 
                                Private f32* %508 = OpAccessChain %141 %27 
                                         f32 %509 = OpLoad %508 
                                        bool %510 = OpFOrdNotEqual %509 %49 
                                                      OpStore %307 %510 
                                      bool_3 %512 = OpLoad %151 
                                        bool %513 = OpCompositeExtract %512 1 
                                                      OpSelectionMerge %515 None 
                                                      OpBranchConditional %513 %514 %518 
                                             %514 = OpLabel 
                                Private f32* %516 = OpAccessChain %141 %41 
                                         f32 %517 = OpLoad %516 
                                                      OpStore %511 %517 
                                                      OpBranch %515 
                                             %518 = OpLabel 
                                Private f32* %519 = OpAccessChain %141 %227 
                                         f32 %520 = OpLoad %519 
                                                      OpStore %511 %520 
                                                      OpBranch %515 
                                             %515 = OpLabel 
                                         f32 %521 = OpLoad %511 
                                Private f32* %522 = OpAccessChain %87 %41 
                                                      OpStore %522 %521 
                                Private f32* %523 = OpAccessChain %141 %27 
                                         f32 %524 = OpLoad %523 
                                Private f32* %525 = OpAccessChain %87 %41 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFNegate %526 
                                         f32 %528 = OpFAdd %524 %527 
                                Private f32* %529 = OpAccessChain %87 %41 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %87 %41 
                                         f32 %531 = OpLoad %530 
                                        bool %532 = OpFOrdNotEqual %531 %49 
                                      bool_3 %533 = OpLoad %151 
                                      bool_3 %534 = OpCompositeInsert %532 %533 0 
                                                      OpStore %151 %534 
                                Private f32* %537 = OpAccessChain %87 %41 
                                         f32 %538 = OpLoad %537 
                                Private f32* %539 = OpAccessChain %141 %27 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFDiv %538 %540 
                                Private f32* %542 = OpAccessChain %536 %41 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %141 %41 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                Private f32* %546 = OpAccessChain %141 %227 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                Private f32* %549 = OpAccessChain %87 %227 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %87 %227 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %87 %41 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFDiv %551 %553 
                                Private f32* %555 = OpAccessChain %87 %41 
                                                      OpStore %555 %554 
                                       f32_4 %557 = OpLoad %87 
                                       f32_2 %558 = OpVectorShuffle %557 %557 0 2 
                                       f32_2 %561 = OpFAdd %558 %560 
                                                      OpStore %556 %561 
                                      bool_3 %563 = OpLoad %151 
                                        bool %564 = OpCompositeExtract %563 0 
                                                      OpSelectionMerge %566 None 
                                                      OpBranchConditional %564 %565 %569 
                                             %565 = OpLabel 
                                Private f32* %567 = OpAccessChain %556 %41 
                                         f32 %568 = OpLoad %567 
                                                      OpStore %562 %568 
                                                      OpBranch %566 
                                             %569 = OpLabel 
                                Private f32* %570 = OpAccessChain %556 %27 
                                         f32 %571 = OpLoad %570 
                                                      OpStore %562 %571 
                                                      OpBranch %566 
                                             %566 = OpLabel 
                                         f32 %572 = OpLoad %562 
                                Private f32* %573 = OpAccessChain %87 %41 
                                                      OpStore %573 %572 
                                      bool_3 %576 = OpLoad %151 
                                        bool %577 = OpCompositeExtract %576 0 
                                                      OpSelectionMerge %579 None 
                                                      OpBranchConditional %577 %578 %582 
                                             %578 = OpLabel 
                                Private f32* %580 = OpAccessChain %536 %41 
                                         f32 %581 = OpLoad %580 
                                                      OpStore %575 %581 
                                                      OpBranch %579 
                                             %582 = OpLabel 
                                                      OpStore %575 %49 
                                                      OpBranch %579 
                                             %579 = OpLabel 
                                         f32 %583 = OpLoad %575 
                                Private f32* %584 = OpAccessChain %574 %227 
                                                      OpStore %584 %583 
                                Private f32* %585 = OpAccessChain %87 %41 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %586 %463 
                                Private f32* %588 = OpAccessChain %536 %41 
                                                      OpStore %588 %587 
                                Private f32* %589 = OpAccessChain %87 %41 
                                         f32 %590 = OpLoad %589 
                                        bool %591 = OpFOrdLessThan %590 %467 
                                      bool_3 %592 = OpLoad %151 
                                      bool_3 %593 = OpCompositeInsert %591 %592 0 
                                                      OpStore %151 %593 
                                Private f32* %594 = OpAccessChain %87 %41 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %595 %463 
                                         f32 %597 = OpFAdd %596 %167 
                                Private f32* %598 = OpAccessChain %87 %41 
                                                      OpStore %598 %597 
                                      bool_3 %600 = OpLoad %151 
                                        bool %601 = OpCompositeExtract %600 0 
                                                      OpSelectionMerge %603 None 
                                                      OpBranchConditional %601 %602 %606 
                                             %602 = OpLabel 
                                Private f32* %604 = OpAccessChain %87 %41 
                                         f32 %605 = OpLoad %604 
                                                      OpStore %599 %605 
                                                      OpBranch %603 
                                             %606 = OpLabel 
                                Private f32* %607 = OpAccessChain %536 %41 
                                         f32 %608 = OpLoad %607 
                                                      OpStore %599 %608 
                                                      OpBranch %603 
                                             %603 = OpLabel 
                                         f32 %609 = OpLoad %599 
                                Private f32* %610 = OpAccessChain %574 %41 
                                                      OpStore %610 %609 
                                        bool %612 = OpLoad %307 
                                                      OpSelectionMerge %614 None 
                                                      OpBranchConditional %612 %613 %617 
                                             %613 = OpLabel 
                                       f32_3 %615 = OpLoad %574 
                                       f32_2 %616 = OpVectorShuffle %615 %615 0 2 
                                                      OpStore %611 %616 
                                                      OpBranch %614 
                                             %617 = OpLabel 
                                                      OpStore %611 %495 
                                                      OpBranch %614 
                                             %614 = OpLabel 
                                       f32_2 %618 = OpLoad %611 
                                       f32_3 %619 = OpLoad %82 
                                       f32_3 %620 = OpVectorShuffle %619 %618 3 1 4 
                                                      OpStore %82 %620 
                                                      OpBranch %507 
                                             %621 = OpLabel 
                                Private f32* %622 = OpAccessChain %141 %41 
                                         f32 %623 = OpLoad %622 
                                        bool %624 = OpFOrdNotEqual %623 %49 
                                                      OpStore %307 %624 
                                Private f32* %625 = OpAccessChain %141 %227 
                                         f32 %626 = OpLoad %625 
                                Private f32* %627 = OpAccessChain %141 %27 
                                         f32 %628 = OpLoad %627 
                                        bool %629 = OpFOrdLessThan %626 %628 
                                      bool_3 %630 = OpLoad %151 
                                      bool_3 %631 = OpCompositeInsert %629 %630 0 
                                                      OpStore %151 %631 
                                      bool_3 %633 = OpLoad %151 
                                        bool %634 = OpCompositeExtract %633 0 
                                                      OpSelectionMerge %636 None 
                                                      OpBranchConditional %634 %635 %639 
                                             %635 = OpLabel 
                                Private f32* %637 = OpAccessChain %141 %227 
                                         f32 %638 = OpLoad %637 
                                                      OpStore %632 %638 
                                                      OpBranch %636 
                                             %639 = OpLabel 
                                Private f32* %640 = OpAccessChain %141 %27 
                                         f32 %641 = OpLoad %640 
                                                      OpStore %632 %641 
                                                      OpBranch %636 
                                             %636 = OpLabel 
                                         f32 %642 = OpLoad %632 
                                Private f32* %643 = OpAccessChain %87 %41 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %141 %41 
                                         f32 %645 = OpLoad %644 
                                Private f32* %646 = OpAccessChain %87 %41 
                                         f32 %647 = OpLoad %646 
                                         f32 %648 = OpFNegate %647 
                                         f32 %649 = OpFAdd %645 %648 
                                Private f32* %650 = OpAccessChain %87 %41 
                                                      OpStore %650 %649 
                                Private f32* %651 = OpAccessChain %87 %41 
                                         f32 %652 = OpLoad %651 
                                        bool %653 = OpFOrdNotEqual %652 %49 
                                      bool_3 %654 = OpLoad %151 
                                      bool_3 %655 = OpCompositeInsert %653 %654 0 
                                                      OpStore %151 %655 
                                Private f32* %656 = OpAccessChain %87 %41 
                                         f32 %657 = OpLoad %656 
                                Private f32* %658 = OpAccessChain %141 %41 
                                         f32 %659 = OpLoad %658 
                                         f32 %660 = OpFDiv %657 %659 
                                Private f32* %661 = OpAccessChain %536 %27 
                                                      OpStore %661 %660 
                                Private f32* %663 = OpAccessChain %141 %227 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFNegate %664 
                                Private f32* %666 = OpAccessChain %141 %27 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFAdd %665 %667 
                                Private f32* %669 = OpAccessChain %662 %41 
                                                      OpStore %669 %668 
                                Private f32* %670 = OpAccessChain %662 %41 
                                         f32 %671 = OpLoad %670 
                                Private f32* %672 = OpAccessChain %87 %41 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFDiv %671 %673 
                                Private f32* %675 = OpAccessChain %536 %41 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %662 %27 
                                                      OpStore %676 %49 
                                      bool_3 %678 = OpLoad %151 
                                        bool %679 = OpCompositeExtract %678 0 
                                                      OpSelectionMerge %681 None 
                                                      OpBranchConditional %679 %680 %683 
                                             %680 = OpLabel 
                                       f32_2 %682 = OpLoad %536 
                                                      OpStore %677 %682 
                                                      OpBranch %681 
                                             %683 = OpLabel 
                                       f32_2 %684 = OpLoad %662 
                                                      OpStore %677 %684 
                                                      OpBranch %681 
                                             %681 = OpLabel 
                                       f32_2 %685 = OpLoad %677 
                                       f32_4 %686 = OpLoad %87 
                                       f32_4 %687 = OpVectorShuffle %686 %685 0 4 5 3 
                                                      OpStore %87 %687 
                                Private f32* %689 = OpAccessChain %87 %27 
                                         f32 %690 = OpLoad %689 
                                         f32 %691 = OpFMul %690 %463 
                                                      OpStore %688 %691 
                                Private f32* %692 = OpAccessChain %87 %27 
                                         f32 %693 = OpLoad %692 
                                        bool %694 = OpFOrdLessThan %693 %467 
                                      bool_2 %695 = OpLoad %95 
                                      bool_2 %696 = OpCompositeInsert %694 %695 0 
                                                      OpStore %95 %696 
                                Private f32* %697 = OpAccessChain %87 %27 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpFMul %698 %463 
                                         f32 %700 = OpFAdd %699 %167 
                                Private f32* %701 = OpAccessChain %536 %41 
                                                      OpStore %701 %700 
                                      bool_2 %703 = OpLoad %95 
                                        bool %704 = OpCompositeExtract %703 0 
                                                      OpSelectionMerge %706 None 
                                                      OpBranchConditional %704 %705 %709 
                                             %705 = OpLabel 
                                Private f32* %707 = OpAccessChain %536 %41 
                                         f32 %708 = OpLoad %707 
                                                      OpStore %702 %708 
                                                      OpBranch %706 
                                             %709 = OpLabel 
                                         f32 %710 = OpLoad %688 
                                                      OpStore %702 %710 
                                                      OpBranch %706 
                                             %706 = OpLabel 
                                         f32 %711 = OpLoad %702 
                                Private f32* %712 = OpAccessChain %87 %41 
                                                      OpStore %712 %711 
                                        bool %714 = OpLoad %307 
                                                      OpSelectionMerge %716 None 
                                                      OpBranchConditional %714 %715 %719 
                                             %715 = OpLabel 
                                       f32_4 %717 = OpLoad %87 
                                       f32_2 %718 = OpVectorShuffle %717 %717 0 2 
                                                      OpStore %713 %718 
                                                      OpBranch %716 
                                             %719 = OpLabel 
                                                      OpStore %713 %495 
                                                      OpBranch %716 
                                             %716 = OpLabel 
                                       f32_2 %720 = OpLoad %713 
                                       f32_3 %721 = OpLoad %82 
                                       f32_3 %722 = OpVectorShuffle %721 %720 3 1 4 
                                                      OpStore %82 %722 
                                                      OpBranch %507 
                                             %507 = OpLabel 
                                                      OpBranch %380 
                                             %380 = OpLabel 
                              Uniform f32_4* %724 = OpAccessChain %34 %723 
                                       f32_4 %725 = OpLoad %724 
                                       f32_4 %726 = OpVectorShuffle %725 %725 1 0 1 1 
                              Uniform f32_4* %727 = OpAccessChain %34 %723 
                                       f32_4 %728 = OpLoad %727 
                                       f32_4 %729 = OpVectorShuffle %728 %728 2 2 2 2 
                                      bool_4 %730 = OpFOrdLessThan %726 %729 
                                      bool_2 %731 = OpVectorShuffle %730 %730 0 1 
                                                      OpStore %95 %731 
                                      bool_2 %732 = OpLoad %95 
                                        bool %733 = OpCompositeExtract %732 1 
                                      bool_2 %734 = OpLoad %95 
                                        bool %735 = OpCompositeExtract %734 0 
                                        bool %736 = OpLogicalAnd %733 %735 
                                      bool_2 %737 = OpLoad %95 
                                      bool_2 %738 = OpCompositeInsert %736 %737 0 
                                                      OpStore %95 %738 
                                      bool_2 %739 = OpLoad %95 
                                        bool %740 = OpCompositeExtract %739 0 
                                                      OpSelectionMerge %742 None 
                                                      OpBranchConditional %740 %741 %849 
                                             %741 = OpLabel 
                                Uniform f32* %743 = OpAccessChain %34 %723 %227 
                                         f32 %744 = OpLoad %743 
                                        bool %745 = OpFOrdNotEqual %744 %49 
                                      bool_2 %746 = OpLoad %95 
                                      bool_2 %747 = OpCompositeInsert %745 %746 0 
                                                      OpStore %95 %747 
                                Uniform f32* %748 = OpAccessChain %34 %723 %27 
                                         f32 %749 = OpLoad %748 
                                Uniform f32* %750 = OpAccessChain %34 %723 %41 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpExtInst %1 37 %749 %751 
                                Private f32* %753 = OpAccessChain %87 %41 
                                                      OpStore %753 %752 
                                Private f32* %754 = OpAccessChain %87 %41 
                                         f32 %755 = OpLoad %754 
                                         f32 %756 = OpFNegate %755 
                                Uniform f32* %757 = OpAccessChain %34 %723 %227 
                                         f32 %758 = OpLoad %757 
                                         f32 %759 = OpFAdd %756 %758 
                                Private f32* %760 = OpAccessChain %87 %41 
                                                      OpStore %760 %759 
                                Private f32* %761 = OpAccessChain %87 %41 
                                         f32 %762 = OpLoad %761 
                                        bool %763 = OpFOrdNotEqual %762 %49 
                                      bool_2 %764 = OpLoad %46 
                                      bool_2 %765 = OpCompositeInsert %763 %764 0 
                                                      OpStore %46 %765 
                                Private f32* %766 = OpAccessChain %87 %41 
                                         f32 %767 = OpLoad %766 
                                Uniform f32* %768 = OpAccessChain %34 %723 %227 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpFDiv %767 %769 
                                Private f32* %771 = OpAccessChain %536 %41 
                                                      OpStore %771 %770 
                                Uniform f32* %772 = OpAccessChain %34 %723 %27 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFNegate %773 
                                Uniform f32* %775 = OpAccessChain %34 %723 %41 
                                         f32 %776 = OpLoad %775 
                                         f32 %777 = OpFAdd %774 %776 
                                Private f32* %778 = OpAccessChain %87 %227 
                                                      OpStore %778 %777 
                                Private f32* %779 = OpAccessChain %87 %227 
                                         f32 %780 = OpLoad %779 
                                Private f32* %781 = OpAccessChain %87 %41 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFDiv %780 %782 
                                Private f32* %784 = OpAccessChain %87 %41 
                                                      OpStore %784 %783 
                                       f32_4 %786 = OpLoad %87 
                                       f32_2 %787 = OpVectorShuffle %786 %786 0 2 
                                       f32_2 %789 = OpFAdd %787 %788 
                                                      OpStore %785 %789 
                                      bool_2 %791 = OpLoad %46 
                                        bool %792 = OpCompositeExtract %791 0 
                                                      OpSelectionMerge %794 None 
                                                      OpBranchConditional %792 %793 %797 
                                             %793 = OpLabel 
                                Private f32* %795 = OpAccessChain %785 %41 
                                         f32 %796 = OpLoad %795 
                                                      OpStore %790 %796 
                                                      OpBranch %794 
                                             %797 = OpLabel 
                                Private f32* %798 = OpAccessChain %785 %27 
                                         f32 %799 = OpLoad %798 
                                                      OpStore %790 %799 
                                                      OpBranch %794 
                                             %794 = OpLabel 
                                         f32 %800 = OpLoad %790 
                                Private f32* %801 = OpAccessChain %87 %41 
                                                      OpStore %801 %800 
                                      bool_2 %803 = OpLoad %46 
                                        bool %804 = OpCompositeExtract %803 0 
                                                      OpSelectionMerge %806 None 
                                                      OpBranchConditional %804 %805 %809 
                                             %805 = OpLabel 
                                Private f32* %807 = OpAccessChain %536 %41 
                                         f32 %808 = OpLoad %807 
                                                      OpStore %802 %808 
                                                      OpBranch %806 
                                             %809 = OpLabel 
                                                      OpStore %802 %49 
                                                      OpBranch %806 
                                             %806 = OpLabel 
                                         f32 %810 = OpLoad %802 
                                Private f32* %811 = OpAccessChain %574 %227 
                                                      OpStore %811 %810 
                                Private f32* %812 = OpAccessChain %87 %41 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %813 %463 
                                Private f32* %815 = OpAccessChain %536 %41 
                                                      OpStore %815 %814 
                                Private f32* %816 = OpAccessChain %87 %41 
                                         f32 %817 = OpLoad %816 
                                        bool %818 = OpFOrdLessThan %817 %467 
                                      bool_2 %819 = OpLoad %46 
                                      bool_2 %820 = OpCompositeInsert %818 %819 0 
                                                      OpStore %46 %820 
                                Private f32* %821 = OpAccessChain %87 %41 
                                         f32 %822 = OpLoad %821 
                                         f32 %823 = OpFMul %822 %463 
                                         f32 %824 = OpFAdd %823 %167 
                                Private f32* %825 = OpAccessChain %87 %41 
                                                      OpStore %825 %824 
                                      bool_2 %827 = OpLoad %46 
                                        bool %828 = OpCompositeExtract %827 0 
                                                      OpSelectionMerge %830 None 
                                                      OpBranchConditional %828 %829 %833 
                                             %829 = OpLabel 
                                Private f32* %831 = OpAccessChain %87 %41 
                                         f32 %832 = OpLoad %831 
                                                      OpStore %826 %832 
                                                      OpBranch %830 
                                             %833 = OpLabel 
                                Private f32* %834 = OpAccessChain %536 %41 
                                         f32 %835 = OpLoad %834 
                                                      OpStore %826 %835 
                                                      OpBranch %830 
                                             %830 = OpLabel 
                                         f32 %836 = OpLoad %826 
                                Private f32* %837 = OpAccessChain %574 %41 
                                                      OpStore %837 %836 
                                      bool_2 %839 = OpLoad %95 
                                        bool %840 = OpCompositeExtract %839 0 
                                                      OpSelectionMerge %842 None 
                                                      OpBranchConditional %840 %841 %845 
                                             %841 = OpLabel 
                                       f32_3 %843 = OpLoad %574 
                                       f32_2 %844 = OpVectorShuffle %843 %843 0 2 
                                                      OpStore %838 %844 
                                                      OpBranch %842 
                                             %845 = OpLabel 
                                                      OpStore %838 %495 
                                                      OpBranch %842 
                                             %842 = OpLabel 
                                       f32_2 %846 = OpLoad %838 
                                       f32_4 %847 = OpLoad %87 
                                       f32_4 %848 = OpVectorShuffle %847 %846 4 5 2 3 
                                                      OpStore %87 %848 
                                                      OpBranch %742 
                                             %849 = OpLabel 
                                Uniform f32* %850 = OpAccessChain %34 %723 %41 
                                         f32 %851 = OpLoad %850 
                                Uniform f32* %852 = OpAccessChain %34 %723 %27 
                                         f32 %853 = OpLoad %852 
                                        bool %854 = OpFOrdLessThan %851 %853 
                                      bool_2 %855 = OpLoad %95 
                                      bool_2 %856 = OpCompositeInsert %854 %855 0 
                                                      OpStore %95 %856 
                                                      OpSelectionMerge %858 None 
                                                      OpBranchConditional %64 %857 %858 
                                             %857 = OpLabel 
                                      bool_2 %859 = OpLoad %95 
                                        bool %860 = OpCompositeExtract %859 0 
                                                      OpSelectionMerge %862 None 
                                                      OpBranchConditional %860 %861 %862 
                                             %861 = OpLabel 
                                                      OpBranch %862 
                                             %862 = OpLabel 
                                                      OpBranch %858 
                                             %858 = OpLabel 
                                                      OpSelectionMerge %865 None 
                                                      OpBranchConditional %863 %864 %971 
                                             %864 = OpLabel 
                                Uniform f32* %866 = OpAccessChain %34 %723 %27 
                                         f32 %867 = OpLoad %866 
                                        bool %868 = OpFOrdNotEqual %867 %49 
                                      bool_2 %869 = OpLoad %95 
                                      bool_2 %870 = OpCompositeInsert %868 %869 0 
                                                      OpStore %95 %870 
                                Uniform f32* %872 = OpAccessChain %34 %723 %41 
                                         f32 %873 = OpLoad %872 
                                Uniform f32* %874 = OpAccessChain %34 %723 %227 
                                         f32 %875 = OpLoad %874 
                                         f32 %876 = OpExtInst %1 37 %873 %875 
                                Private f32* %877 = OpAccessChain %871 %41 
                                                      OpStore %877 %876 
                                Private f32* %878 = OpAccessChain %871 %41 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFNegate %879 
                                Uniform f32* %881 = OpAccessChain %34 %723 %27 
                                         f32 %882 = OpLoad %881 
                                         f32 %883 = OpFAdd %880 %882 
                                Private f32* %884 = OpAccessChain %871 %41 
                                                      OpStore %884 %883 
                                Private f32* %885 = OpAccessChain %871 %41 
                                         f32 %886 = OpLoad %885 
                                        bool %887 = OpFOrdNotEqual %886 %49 
                                      bool_2 %888 = OpLoad %46 
                                      bool_2 %889 = OpCompositeInsert %887 %888 0 
                                                      OpStore %46 %889 
                                Private f32* %890 = OpAccessChain %871 %41 
                                         f32 %891 = OpLoad %890 
                                Uniform f32* %892 = OpAccessChain %34 %723 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFDiv %891 %893 
                                                      OpStore %688 %894 
                                Uniform f32* %895 = OpAccessChain %34 %723 %41 
                                         f32 %896 = OpLoad %895 
                                         f32 %897 = OpFNegate %896 
                                Uniform f32* %898 = OpAccessChain %34 %723 %227 
                                         f32 %899 = OpLoad %898 
                                         f32 %900 = OpFAdd %897 %899 
                                Private f32* %901 = OpAccessChain %574 %41 
                                                      OpStore %901 %900 
                                Private f32* %902 = OpAccessChain %574 %41 
                                         f32 %903 = OpLoad %902 
                                Private f32* %904 = OpAccessChain %871 %41 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFDiv %903 %905 
                                Private f32* %907 = OpAccessChain %871 %41 
                                                      OpStore %907 %906 
                                Private f32* %908 = OpAccessChain %871 %41 
                                         f32 %909 = OpLoad %908 
                                         f32 %910 = OpFAdd %909 %559 
                                Private f32* %911 = OpAccessChain %785 %41 
                                                      OpStore %911 %910 
                                Private f32* %913 = OpAccessChain %574 %41 
                                         f32 %914 = OpLoad %913 
                                         f32 %915 = OpFAdd %914 %559 
                                                      OpStore %912 %915 
                                      bool_2 %917 = OpLoad %46 
                                        bool %918 = OpCompositeExtract %917 0 
                                                      OpSelectionMerge %920 None 
                                                      OpBranchConditional %918 %919 %923 
                                             %919 = OpLabel 
                                Private f32* %921 = OpAccessChain %785 %41 
                                         f32 %922 = OpLoad %921 
                                                      OpStore %916 %922 
                                                      OpBranch %920 
                                             %923 = OpLabel 
                                         f32 %924 = OpLoad %912 
                                                      OpStore %916 %924 
                                                      OpBranch %920 
                                             %920 = OpLabel 
                                         f32 %925 = OpLoad %916 
                                Private f32* %926 = OpAccessChain %871 %41 
                                                      OpStore %926 %925 
                                      bool_2 %928 = OpLoad %46 
                                        bool %929 = OpCompositeExtract %928 0 
                                                      OpSelectionMerge %931 None 
                                                      OpBranchConditional %929 %930 %933 
                                             %930 = OpLabel 
                                         f32 %932 = OpLoad %688 
                                                      OpStore %927 %932 
                                                      OpBranch %931 
                                             %933 = OpLabel 
                                                      OpStore %927 %49 
                                                      OpBranch %931 
                                             %931 = OpLabel 
                                         f32 %934 = OpLoad %927 
                                Private f32* %935 = OpAccessChain %574 %227 
                                                      OpStore %935 %934 
                                Private f32* %936 = OpAccessChain %871 %41 
                                         f32 %937 = OpLoad %936 
                                         f32 %938 = OpFMul %937 %463 
                                                      OpStore %688 %938 
                                Private f32* %939 = OpAccessChain %871 %41 
                                         f32 %940 = OpLoad %939 
                                        bool %941 = OpFOrdLessThan %940 %467 
                                      bool_2 %942 = OpLoad %46 
                                      bool_2 %943 = OpCompositeInsert %941 %942 0 
                                                      OpStore %46 %943 
                                Private f32* %944 = OpAccessChain %871 %41 
                                         f32 %945 = OpLoad %944 
                                         f32 %946 = OpFMul %945 %463 
                                         f32 %947 = OpFAdd %946 %167 
                                Private f32* %948 = OpAccessChain %871 %41 
                                                      OpStore %948 %947 
                                      bool_2 %950 = OpLoad %46 
                                        bool %951 = OpCompositeExtract %950 0 
                                                      OpSelectionMerge %953 None 
                                                      OpBranchConditional %951 %952 %956 
                                             %952 = OpLabel 
                                Private f32* %954 = OpAccessChain %871 %41 
                                         f32 %955 = OpLoad %954 
                                                      OpStore %949 %955 
                                                      OpBranch %953 
                                             %956 = OpLabel 
                                         f32 %957 = OpLoad %688 
                                                      OpStore %949 %957 
                                                      OpBranch %953 
                                             %953 = OpLabel 
                                         f32 %958 = OpLoad %949 
                                Private f32* %959 = OpAccessChain %574 %41 
                                                      OpStore %959 %958 
                                      bool_2 %961 = OpLoad %95 
                                        bool %962 = OpCompositeExtract %961 0 
                                                      OpSelectionMerge %964 None 
                                                      OpBranchConditional %962 %963 %967 
                                             %963 = OpLabel 
                                       f32_3 %965 = OpLoad %574 
                                       f32_2 %966 = OpVectorShuffle %965 %965 0 2 
                                                      OpStore %960 %966 
                                                      OpBranch %964 
                                             %967 = OpLabel 
                                                      OpStore %960 %495 
                                                      OpBranch %964 
                                             %964 = OpLabel 
                                       f32_2 %968 = OpLoad %960 
                                       f32_4 %969 = OpLoad %87 
                                       f32_4 %970 = OpVectorShuffle %969 %968 4 5 2 3 
                                                      OpStore %87 %970 
                                                      OpBranch %865 
                                             %971 = OpLabel 
                                Uniform f32* %972 = OpAccessChain %34 %723 %41 
                                         f32 %973 = OpLoad %972 
                                        bool %974 = OpFOrdNotEqual %973 %49 
                                      bool_2 %975 = OpLoad %95 
                                      bool_2 %976 = OpCompositeInsert %974 %975 0 
                                                      OpStore %95 %976 
                                Uniform f32* %977 = OpAccessChain %34 %723 %227 
                                         f32 %978 = OpLoad %977 
                                Uniform f32* %979 = OpAccessChain %34 %723 %27 
                                         f32 %980 = OpLoad %979 
                                         f32 %981 = OpExtInst %1 37 %978 %980 
                                Private f32* %982 = OpAccessChain %871 %41 
                                                      OpStore %982 %981 
                                Private f32* %983 = OpAccessChain %871 %41 
                                         f32 %984 = OpLoad %983 
                                         f32 %985 = OpFNegate %984 
                                Uniform f32* %986 = OpAccessChain %34 %723 %41 
                                         f32 %987 = OpLoad %986 
                                         f32 %988 = OpFAdd %985 %987 
                                Private f32* %989 = OpAccessChain %871 %41 
                                                      OpStore %989 %988 
                                Private f32* %990 = OpAccessChain %871 %41 
                                         f32 %991 = OpLoad %990 
                                        bool %992 = OpFOrdNotEqual %991 %49 
                                      bool_2 %993 = OpLoad %46 
                                      bool_2 %994 = OpCompositeInsert %992 %993 0 
                                                      OpStore %46 %994 
                                Private f32* %995 = OpAccessChain %871 %41 
                                         f32 %996 = OpLoad %995 
                                Uniform f32* %997 = OpAccessChain %34 %723 %41 
                                         f32 %998 = OpLoad %997 
                                         f32 %999 = OpFDiv %996 %998 
                               Private f32* %1000 = OpAccessChain %662 %27 
                                                      OpStore %1000 %999 
                               Uniform f32* %1002 = OpAccessChain %34 %723 %227 
                                        f32 %1003 = OpLoad %1002 
                                        f32 %1004 = OpFNegate %1003 
                               Uniform f32* %1005 = OpAccessChain %34 %723 %27 
                                        f32 %1006 = OpLoad %1005 
                                        f32 %1007 = OpFAdd %1004 %1006 
                               Private f32* %1008 = OpAccessChain %1001 %41 
                                                      OpStore %1008 %1007 
                               Private f32* %1009 = OpAccessChain %1001 %41 
                                        f32 %1010 = OpLoad %1009 
                               Private f32* %1011 = OpAccessChain %871 %41 
                                        f32 %1012 = OpLoad %1011 
                                        f32 %1013 = OpFDiv %1010 %1012 
                               Private f32* %1014 = OpAccessChain %662 %41 
                                                      OpStore %1014 %1013 
                               Private f32* %1015 = OpAccessChain %1001 %27 
                                                      OpStore %1015 %49 
                                     bool_2 %1017 = OpLoad %46 
                                       bool %1018 = OpCompositeExtract %1017 0 
                                                      OpSelectionMerge %1020 None 
                                                      OpBranchConditional %1018 %1019 %1022 
                                            %1019 = OpLabel 
                                      f32_2 %1021 = OpLoad %662 
                                                      OpStore %1016 %1021 
                                                      OpBranch %1020 
                                            %1022 = OpLabel 
                                      f32_2 %1023 = OpLoad %1001 
                                                      OpStore %1016 %1023 
                                                      OpBranch %1020 
                                            %1020 = OpLabel 
                                      f32_2 %1024 = OpLoad %1016 
                                      f32_3 %1025 = OpLoad %574 
                                      f32_3 %1026 = OpVectorShuffle %1025 %1024 0 3 4 
                                                      OpStore %574 %1026 
                               Private f32* %1027 = OpAccessChain %574 %27 
                                        f32 %1028 = OpLoad %1027 
                                        f32 %1029 = OpFMul %1028 %463 
                               Private f32* %1030 = OpAccessChain %871 %41 
                                                      OpStore %1030 %1029 
                               Private f32* %1031 = OpAccessChain %574 %27 
                                        f32 %1032 = OpLoad %1031 
                                       bool %1033 = OpFOrdLessThan %1032 %467 
                                     bool_2 %1034 = OpLoad %46 
                                     bool_2 %1035 = OpCompositeInsert %1033 %1034 0 
                                                      OpStore %46 %1035 
                               Private f32* %1036 = OpAccessChain %574 %27 
                                        f32 %1037 = OpLoad %1036 
                                        f32 %1038 = OpFMul %1037 %463 
                                        f32 %1039 = OpFAdd %1038 %167 
                                                      OpStore %688 %1039 
                                     bool_2 %1041 = OpLoad %46 
                                       bool %1042 = OpCompositeExtract %1041 0 
                                                      OpSelectionMerge %1044 None 
                                                      OpBranchConditional %1042 %1043 %1046 
                                            %1043 = OpLabel 
                                        f32 %1045 = OpLoad %688 
                                                      OpStore %1040 %1045 
                                                      OpBranch %1044 
                                            %1046 = OpLabel 
                               Private f32* %1047 = OpAccessChain %871 %41 
                                        f32 %1048 = OpLoad %1047 
                                                      OpStore %1040 %1048 
                                                      OpBranch %1044 
                                            %1044 = OpLabel 
                                        f32 %1049 = OpLoad %1040 
                               Private f32* %1050 = OpAccessChain %574 %41 
                                                      OpStore %1050 %1049 
                                     bool_2 %1052 = OpLoad %95 
                                       bool %1053 = OpCompositeExtract %1052 0 
                                                      OpSelectionMerge %1055 None 
                                                      OpBranchConditional %1053 %1054 %1058 
                                            %1054 = OpLabel 
                                      f32_3 %1056 = OpLoad %574 
                                      f32_2 %1057 = OpVectorShuffle %1056 %1056 0 2 
                                                      OpStore %1051 %1057 
                                                      OpBranch %1055 
                                            %1058 = OpLabel 
                                                      OpStore %1051 %495 
                                                      OpBranch %1055 
                                            %1055 = OpLabel 
                                      f32_2 %1059 = OpLoad %1051 
                                      f32_4 %1060 = OpLoad %87 
                                      f32_4 %1061 = OpVectorShuffle %1060 %1059 4 5 2 3 
                                                      OpStore %87 %1061 
                                                      OpBranch %865 
                                             %865 = OpLabel 
                                                      OpBranch %742 
                                             %742 = OpLabel 
                                      f32_4 %1062 = OpLoad %87 
                                      f32_2 %1063 = OpVectorShuffle %1062 %1062 1 0 
                               Uniform f32* %1065 = OpAccessChain %34 %1064 
                                        f32 %1066 = OpLoad %1065 
                               Uniform f32* %1068 = OpAccessChain %34 %1067 
                                        f32 %1069 = OpLoad %1068 
                                      f32_2 %1070 = OpCompositeConstruct %1066 %1069 
                                      f32_2 %1071 = OpFNegate %1070 
                                      f32_2 %1072 = OpFAdd %1063 %1071 
                                                      OpStore %871 %1072 
                                      f32_3 %1073 = OpLoad %82 
                                      f32_4 %1074 = OpVectorShuffle %1073 %1073 2 0 2 2 
                                      f32_2 %1075 = OpLoad %871 
                                      f32_4 %1076 = OpVectorShuffle %1075 %1075 0 1 0 0 
                                     bool_4 %1077 = OpFOrdLessThan %1074 %1076 
                                     bool_2 %1078 = OpVectorShuffle %1077 %1077 0 1 
                                                      OpStore %95 %1078 
                               Private f32* %1079 = OpAccessChain %871 %27 
                                        f32 %1080 = OpLoad %1079 
                                        f32 %1081 = OpFAdd %1080 %167 
                               Private f32* %1082 = OpAccessChain %871 %41 
                                                      OpStore %1082 %1081 
                               Private f32* %1084 = OpAccessChain %82 %41 
                                        f32 %1085 = OpLoad %1084 
                               Private f32* %1086 = OpAccessChain %871 %41 
                                        f32 %1087 = OpLoad %1086 
                                       bool %1088 = OpFOrdLessThan %1085 %1087 
                                                      OpStore %1083 %1088 
                                       bool %1089 = OpLoad %1083 
                                     bool_2 %1090 = OpLoad %95 
                                       bool %1091 = OpCompositeExtract %1090 1 
                                       bool %1092 = OpLogicalAnd %1089 %1091 
                                     bool_2 %1093 = OpLoad %46 
                                     bool_2 %1094 = OpCompositeInsert %1092 %1093 0 
                                                      OpStore %46 %1094 
                                     bool_2 %1095 = OpLoad %46 
                                       bool %1096 = OpCompositeExtract %1095 0 
                                     bool_2 %1097 = OpLoad %95 
                                       bool %1098 = OpCompositeExtract %1097 0 
                                       bool %1099 = OpLogicalOr %1096 %1098 
                                     bool_2 %1100 = OpLoad %95 
                                     bool_2 %1101 = OpCompositeInsert %1099 %1100 0 
                                                      OpStore %95 %1101 
                                      f32_4 %1102 = OpLoad %87 
                                      f32_2 %1103 = OpVectorShuffle %1102 %1102 1 0 
                               Uniform f32* %1104 = OpAccessChain %34 %1064 
                                        f32 %1105 = OpLoad %1104 
                               Uniform f32* %1106 = OpAccessChain %34 %1067 
                                        f32 %1107 = OpLoad %1106 
                                      f32_2 %1108 = OpCompositeConstruct %1105 %1107 
                                      f32_2 %1109 = OpFAdd %1103 %1108 
                                      f32_4 %1110 = OpLoad %87 
                                      f32_4 %1111 = OpVectorShuffle %1110 %1109 4 5 2 3 
                                                      OpStore %87 %1111 
                                      f32_4 %1112 = OpLoad %87 
                                      f32_4 %1113 = OpVectorShuffle %1112 %1112 0 1 0 0 
                                      f32_3 %1114 = OpLoad %82 
                                      f32_4 %1115 = OpVectorShuffle %1114 %1114 2 0 2 2 
                                     bool_4 %1116 = OpFOrdLessThan %1113 %1115 
                                     bool_2 %1117 = OpVectorShuffle %1116 %1116 0 1 
                                                      OpStore %46 %1117 
                               Private f32* %1118 = OpAccessChain %87 %27 
                                        f32 %1119 = OpLoad %1118 
                                        f32 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %278 %1121 
                                        f32 %1122 = OpLoad %278 
                               Private f32* %1123 = OpAccessChain %82 %41 
                                        f32 %1124 = OpLoad %1123 
                                       bool %1125 = OpFOrdLessThan %1122 %1124 
                                                      OpStore %307 %1125 
                                       bool %1126 = OpLoad %307 
                                     bool_2 %1127 = OpLoad %46 
                                       bool %1128 = OpCompositeExtract %1127 1 
                                       bool %1129 = OpLogicalAnd %1126 %1128 
                                                      OpStore %1083 %1129 
                                       bool %1130 = OpLoad %1083 
                                     bool_2 %1131 = OpLoad %46 
                                       bool %1132 = OpCompositeExtract %1131 0 
                                       bool %1133 = OpLogicalOr %1130 %1132 
                                     bool_2 %1134 = OpLoad %46 
                                     bool_2 %1135 = OpCompositeInsert %1133 %1134 0 
                                                      OpStore %46 %1135 
                               Private f32* %1136 = OpAccessChain %25 %227 
                                                      OpStore %1136 %49 
                                     bool_2 %1138 = OpLoad %46 
                                       bool %1139 = OpCompositeExtract %1138 0 
                                                      OpSelectionMerge %1141 None 
                                                      OpBranchConditional %1139 %1140 %1144 
                                            %1140 = OpLabel 
                             Uniform f32_4* %1142 = OpAccessChain %34 %323 
                                      f32_4 %1143 = OpLoad %1142 
                                                      OpStore %1137 %1143 
                                                      OpBranch %1141 
                                            %1144 = OpLabel 
                                      f32_4 %1145 = OpLoad %25 
                                      f32_4 %1146 = OpVectorShuffle %1145 %1145 0 0 0 2 
                                                      OpStore %1137 %1146 
                                                      OpBranch %1141 
                                            %1141 = OpLabel 
                                      f32_4 %1147 = OpLoad %1137 
                                                      OpStore %25 %1147 
                                     bool_2 %1149 = OpLoad %95 
                                       bool %1150 = OpCompositeExtract %1149 0 
                                                      OpSelectionMerge %1152 None 
                                                      OpBranchConditional %1150 %1151 %1155 
                                            %1151 = OpLabel 
                             Uniform f32_4* %1153 = OpAccessChain %34 %336 
                                      f32_4 %1154 = OpLoad %1153 
                                                      OpStore %1148 %1154 
                                                      OpBranch %1152 
                                            %1155 = OpLabel 
                                      f32_4 %1156 = OpLoad %25 
                                                      OpStore %1148 %1156 
                                                      OpBranch %1152 
                                            %1152 = OpLabel 
                                      f32_4 %1157 = OpLoad %1148 
                                                      OpStore %331 %1157 
                                                      OpBranch %361 
                                             %361 = OpLabel 
                                                      OpBranch %350 
                                             %350 = OpLabel 
                                                      OpBranch %305 
                                             %305 = OpLabel 
                                                      OpBranch %76 
                                            %1158 = OpLabel 
                               Uniform i32* %1159 = OpAccessChain %34 %56 
                                        i32 %1160 = OpLoad %1159 
                                       bool %1161 = OpIEqual %1160 %56 
                                     bool_2 %1162 = OpLoad %95 
                                     bool_2 %1163 = OpCompositeInsert %1161 %1162 0 
                                                      OpStore %95 %1163 
                                     bool_2 %1165 = OpLoad %95 
                                       bool %1166 = OpCompositeExtract %1165 0 
                                                      OpSelectionMerge %1168 None 
                                                      OpBranchConditional %1166 %1167 %1171 
                                            %1167 = OpLabel 
                             Uniform f32_4* %1169 = OpAccessChain %34 %336 
                                      f32_4 %1170 = OpLoad %1169 
                                                      OpStore %1164 %1170 
                                                      OpBranch %1168 
                                            %1171 = OpLabel 
                                                      OpStore %1164 %1172 
                                                      OpBranch %1168 
                                            %1168 = OpLabel 
                                      f32_4 %1173 = OpLoad %1164 
                                                      OpStore %331 %1173 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_OFF" }
""
}
SubProgram "d3d11 " {
Keywords { "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "PIXEL_SHADOW_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
""
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" "PIXEL_SHADOW_ON" }
""
}
}
}
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  Cull Off
  Fog {
   Mode Off
  }
  GpuProgramID 131090
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat1.x = in_POSITION0.z + 0.0625;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + vec4(0.0, -0.0625, 0.0250000004, 0.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.w = min(u_xlat10_0.w, 0.699999988);
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 112
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %88 0 BuiltIn 88 
                                              OpMemberDecorate %88 1 BuiltIn 88 
                                              OpMemberDecorate %88 2 BuiltIn 88 
                                              OpDecorate %88 Block 
                                              OpDecorate %102 Location 102 
                                              OpDecorate %103 Location 103 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                       Private f32_4* %35 = OpVariable Private 
                                  u32 %36 = OpConstant 2 
                                      %37 = OpTypePointer Input %6 
                                  f32 %40 = OpConstant 3.674022E-40 
                                  u32 %42 = OpConstant 0 
                                      %43 = OpTypePointer Private %6 
                                  i32 %45 = OpConstant 2 
                                  i32 %53 = OpConstant 3 
                                  f32 %62 = OpConstant 3.674022E-40 
                                  f32 %63 = OpConstant 3.674022E-40 
                                  f32 %64 = OpConstant 3.674022E-40 
                                f32_4 %65 = OpConstantComposite %62 %63 %64 %62 
                                  u32 %86 = OpConstant 1 
                                      %87 = OpTypeArray %6 %86 
                                      %88 = OpTypeStruct %7 %6 %87 
                                      %89 = OpTypePointer Output %88 
 Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                      %98 = OpTypePointer Output %7 
                                     %100 = OpTypeVector %6 2 
                                     %101 = OpTypePointer Output %100 
                       Output f32_2* %102 = OpVariable Output 
                        Input f32_4* %103 = OpVariable Input 
                                     %106 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                           Input f32* %38 = OpAccessChain %11 %36 
                                  f32 %39 = OpLoad %38 
                                  f32 %41 = OpFAdd %39 %40 
                         Private f32* %44 = OpAccessChain %35 %42 
                                              OpStore %44 %41 
                       Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
                                f32_4 %47 = OpLoad %46 
                                f32_4 %48 = OpLoad %35 
                                f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                f32_4 %50 = OpFMul %47 %49 
                                f32_4 %51 = OpLoad %9 
                                f32_4 %52 = OpFAdd %50 %51 
                                              OpStore %9 %52 
                       Uniform f32_4* %54 = OpAccessChain %20 %22 %53 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %11 
                                f32_4 %57 = OpVectorShuffle %56 %56 3 3 3 3 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %9 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %9 %60 
                                f32_4 %61 = OpLoad %9 
                                f32_4 %66 = OpFAdd %61 %65 
                                              OpStore %9 %66 
                                f32_4 %67 = OpLoad %9 
                                f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                       Uniform f32_4* %69 = OpAccessChain %20 %23 %23 
                                f32_4 %70 = OpLoad %69 
                                f32_4 %71 = OpFMul %68 %70 
                                              OpStore %35 %71 
                       Uniform f32_4* %72 = OpAccessChain %20 %23 %22 
                                f32_4 %73 = OpLoad %72 
                                f32_4 %74 = OpLoad %9 
                                f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                f32_4 %76 = OpFMul %73 %75 
                                f32_4 %77 = OpLoad %35 
                                f32_4 %78 = OpFAdd %76 %77 
                                              OpStore %35 %78 
                       Uniform f32_4* %79 = OpAccessChain %20 %23 %45 
                                f32_4 %80 = OpLoad %79 
                                f32_4 %81 = OpLoad %9 
                                f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                f32_4 %83 = OpFMul %80 %82 
                                f32_4 %84 = OpLoad %35 
                                f32_4 %85 = OpFAdd %83 %84 
                                              OpStore %35 %85 
                       Uniform f32_4* %91 = OpAccessChain %20 %23 %53 
                                f32_4 %92 = OpLoad %91 
                                f32_4 %93 = OpLoad %9 
                                f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                f32_4 %95 = OpFMul %92 %94 
                                f32_4 %96 = OpLoad %35 
                                f32_4 %97 = OpFAdd %95 %96 
                        Output f32_4* %99 = OpAccessChain %90 %22 
                                              OpStore %99 %97 
                               f32_4 %104 = OpLoad %103 
                               f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                              OpStore %102 %105 
                         Output f32* %107 = OpAccessChain %90 %22 %86 
                                 f32 %108 = OpLoad %107 
                                 f32 %109 = OpFNegate %108 
                         Output f32* %110 = OpAccessChain %90 %22 %86 
                                              OpStore %110 %109 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 38
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %16 %28 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %8 RelaxedPrecision 
                                                    OpDecorate %12 RelaxedPrecision 
                                                    OpDecorate %12 DescriptorSet 12 
                                                    OpDecorate %12 Binding 12 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %16 Location 16 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpDecorate %24 RelaxedPrecision 
                                                    OpDecorate %26 RelaxedPrecision 
                                                    OpDecorate %28 RelaxedPrecision 
                                                    OpDecorate %28 Location 28 
                                                    OpDecorate %29 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypePointer Private %6 
                                Private f32* %8 = OpVariable Private 
                                             %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %10 = OpTypeSampledImage %9 
                                            %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2DSampled* %12 = OpVariable UniformConstant 
                                            %14 = OpTypeVector %6 2 
                                            %15 = OpTypePointer Input %14 
                               Input f32_2* %16 = OpVariable Input 
                                            %18 = OpTypeVector %6 4 
                                            %20 = OpTypeInt 32 0 
                                        u32 %21 = OpConstant 3 
                               Private f32* %23 = OpVariable Private 
                                        f32 %25 = OpConstant 3.674022E-40 
                                            %27 = OpTypePointer Output %18 
                              Output f32_4* %28 = OpVariable Output 
                                            %30 = OpTypePointer Output %6 
                                            %32 = OpTypeVector %6 3 
                                        f32 %33 = OpConstant 3.674022E-40 
                                      f32_3 %34 = OpConstantComposite %33 %33 %33 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %13 = OpLoad %12 
                                      f32_2 %17 = OpLoad %16 
                                      f32_4 %19 = OpImageSampleImplicitLod %13 %17 
                                        f32 %22 = OpCompositeExtract %19 3 
                                                    OpStore %8 %22 
                                        f32 %24 = OpLoad %8 
                                        f32 %26 = OpExtInst %1 37 %24 %25 
                                                    OpStore %23 %26 
                                        f32 %29 = OpLoad %23 
                                Output f32* %31 = OpAccessChain %28 %21 
                                                    OpStore %31 %29 
                                      f32_4 %35 = OpLoad %28 
                                      f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                                    OpStore %28 %36 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "VertexLit"
}