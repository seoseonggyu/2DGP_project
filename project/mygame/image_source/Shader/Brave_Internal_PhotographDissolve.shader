//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/Internal/PhotographDissolve" {
Properties {
_Color ("Color", Color) = (1,1,1,1)
_DissolvePower ("Dissolve Power", Range(0.65, -0.5)) = 0.2
_DissolveEmissionThickness ("Dissolve Emission Thickness", Range(-0.02, -0.05)) = -0.03
_DissolveEmissionColor ("Dissolve Emission Color", Color) = (1,1,1,1)
_MainTex ("Main Texture", 2D) = "white" { }
_DissolveTex ("Dissolve Texture", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "IGNOREPROJECTOR" = "true" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  GpuProgramID 21669
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 171
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 %160 %163 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %160 Location 160 
                                                      OpDecorate %163 Location 163 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                               Output f32_3* %160 = OpVariable Output 
                                         f32 %161 = OpConstant 3.674022E-40 
                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
                               Output f32_4* %163 = OpVariable Output 
                                       f32_4 %164 = OpConstantComposite %161 %161 %161 %161 
                                             %165 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                                      OpStore %160 %162 
                                                      OpStore %163 %164 
                                 Output f32* %166 = OpAccessChain %85 %23 %81 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFNegate %167 
                                 Output f32* %169 = OpAccessChain %85 %23 %81 
                                                      OpStore %169 %168 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 286
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %97 %98 %127 %165 %275 %278 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %127 Location 127 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %278 Location 278 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                Output f32_4* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                              %99 = OpTypeVector %6 2 
                                         i32 %102 = OpConstant 10 
                                         i32 %115 = OpConstant 11 
                                             %126 = OpTypePointer Input %51 
                                Input f32_3* %127 = OpVariable Input 
                                         i32 %129 = OpConstant 8 
                                         u32 %134 = OpConstant 0 
                                             %135 = OpTypePointer Private %6 
                                         u32 %148 = OpConstant 2 
                                Private f32* %150 = OpVariable Private 
                               Output f32_3* %165 = OpVariable Output 
                                             %168 = OpTypePointer Private %51 
                              Private f32_3* %169 = OpVariable Private 
                              Private f32_4* %186 = OpVariable Private 
                              Private f32_3* %192 = OpVariable Private 
                                         i32 %198 = OpConstant 4 
                                         i32 %204 = OpConstant 5 
                                         i32 %210 = OpConstant 6 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         u32 %220 = OpConstant 3 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_3 %242 = OpConstantComposite %241 %241 %241 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %262 = OpConstant 3.674022E-40 
                                       f32_3 %263 = OpConstantComposite %262 %262 %262 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_3 %266 = OpConstantComposite %265 %265 %265 
                               Output f32_3* %275 = OpVariable Output 
                               Output f32_4* %278 = OpVariable Output 
                                       f32_4 %279 = OpConstantComposite %241 %241 %241 %241 
                                             %280 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %100 = OpLoad %98 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                       f32_4 %111 = OpLoad %97 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 3 
                                                      OpStore %97 %112 
                                       f32_4 %113 = OpLoad %98 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %21 %115 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                       f32_4 %124 = OpLoad %97 
                                       f32_4 %125 = OpVectorShuffle %124 %123 0 1 4 5 
                                                      OpStore %97 %125 
                                       f32_3 %128 = OpLoad %127 
                              Uniform f32_4* %130 = OpAccessChain %21 %129 %29 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %128 %132 
                                Private f32* %136 = OpAccessChain %9 %134 
                                                      OpStore %136 %133 
                                       f32_3 %137 = OpLoad %127 
                              Uniform f32_4* %138 = OpAccessChain %21 %129 %24 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %9 %83 
                                                      OpStore %142 %141 
                                       f32_3 %143 = OpLoad %127 
                              Uniform f32_4* %144 = OpAccessChain %21 %129 %37 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %149 = OpAccessChain %9 %148 
                                                      OpStore %149 %147 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_4 %153 = OpLoad %9 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %152 %154 
                                                      OpStore %150 %155 
                                         f32 %156 = OpLoad %150 
                                         f32 %157 = OpExtInst %1 32 %156 
                                                      OpStore %150 %157 
                                         f32 %158 = OpLoad %150 
                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %9 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore %165 %167 
                                Private f32* %170 = OpAccessChain %9 %83 
                                         f32 %171 = OpLoad %170 
                                Private f32* %172 = OpAccessChain %9 %83 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %171 %173 
                                Private f32* %175 = OpAccessChain %169 %134 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %134 
                                         f32 %177 = OpLoad %176 
                                Private f32* %178 = OpAccessChain %9 %134 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                Private f32* %181 = OpAccessChain %169 %134 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFNegate %182 
                                         f32 %184 = OpFAdd %180 %183 
                                Private f32* %185 = OpAccessChain %169 %134 
                                                      OpStore %185 %184 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %187 1 2 2 0 
                                       f32_4 %189 = OpLoad %9 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 1 2 2 
                                       f32_4 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                              Uniform f32_4* %193 = OpAccessChain %21 %47 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpLoad %186 
                                         f32 %196 = OpDot %194 %195 
                                Private f32* %197 = OpAccessChain %192 %134 
                                                      OpStore %197 %196 
                              Uniform f32_4* %199 = OpAccessChain %21 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %186 
                                         f32 %202 = OpDot %200 %201 
                                Private f32* %203 = OpAccessChain %192 %83 
                                                      OpStore %203 %202 
                              Uniform f32_4* %205 = OpAccessChain %21 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_4 %207 = OpLoad %186 
                                         f32 %208 = OpDot %206 %207 
                                Private f32* %209 = OpAccessChain %192 %148 
                                                      OpStore %209 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %210 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpLoad %169 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 0 0 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_3 %217 = OpLoad %192 
                                       f32_3 %218 = OpFAdd %216 %217 
                                                      OpStore %169 %218 
                                Private f32* %221 = OpAccessChain %9 %220 
                                                      OpStore %221 %219 
                              Uniform f32_4* %222 = OpAccessChain %21 %29 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %9 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %192 %134 
                                                      OpStore %226 %225 
                              Uniform f32_4* %227 = OpAccessChain %21 %24 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %9 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %192 %83 
                                                      OpStore %231 %230 
                              Uniform f32_4* %232 = OpAccessChain %21 %37 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %9 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %192 %148 
                                                      OpStore %236 %235 
                                       f32_3 %237 = OpLoad %169 
                                       f32_3 %238 = OpLoad %192 
                                       f32_3 %239 = OpFAdd %237 %238 
                                                      OpStore %169 %239 
                                       f32_3 %240 = OpLoad %169 
                                       f32_3 %243 = OpExtInst %1 40 %240 %242 
                                                      OpStore %169 %243 
                                       f32_3 %244 = OpLoad %169 
                                       f32_3 %245 = OpExtInst %1 30 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %9 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %9 %254 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpExtInst %1 29 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %9 %259 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %267 = OpFAdd %264 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %9 %269 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpExtInst %1 40 %271 %242 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %9 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                                      OpStore %275 %277 
                                                      OpStore %278 %279 
                                 Output f32* %281 = OpAccessChain %87 %29 %83 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFNegate %282 
                                 Output f32* %284 = OpAccessChain %87 %29 %83 
                                                      OpStore %284 %283 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 199
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %96 %97 %126 %156 %162 %179 %191 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %126 Location 126 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %191 Location 191 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                Output f32_4* %96 = OpVariable Output 
                                 Input f32_4* %97 = OpVariable Input 
                                              %98 = OpTypeVector %6 2 
                                         i32 %101 = OpConstant 4 
                                         i32 %114 = OpConstant 5 
                                             %125 = OpTypePointer Input %50 
                                Input f32_3* %126 = OpVariable Input 
                                         u32 %132 = OpConstant 0 
                                             %133 = OpTypePointer Private %6 
                                         u32 %146 = OpConstant 2 
                                Private f32* %148 = OpVariable Private 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %162 = OpVariable Output 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_3 %164 = OpConstantComposite %163 %163 %163 
                                             %167 = OpTypePointer Uniform %6 
                                         f32 %174 = OpConstant 3.674022E-40 
                                       f32_3 %175 = OpConstantComposite %174 %174 %174 
                               Output f32_4* %179 = OpVariable Output 
                               Output f32_4* %191 = OpVariable Output 
                                       f32_4 %192 = OpConstantComposite %163 %163 %163 %163 
                                             %193 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                        f32_4 %99 = OpLoad %97 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %102 = OpAccessChain %21 %101 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %105 = OpFMul %100 %104 
                              Uniform f32_4* %106 = OpAccessChain %21 %101 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 2 3 
                                       f32_2 %109 = OpFAdd %105 %108 
                                       f32_4 %110 = OpLoad %96 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 3 
                                                      OpStore %96 %111 
                                       f32_4 %112 = OpLoad %97 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                              Uniform f32_4* %115 = OpAccessChain %21 %114 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %118 = OpFMul %113 %117 
                              Uniform f32_4* %119 = OpAccessChain %21 %114 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 2 3 
                                       f32_2 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %96 
                                       f32_4 %124 = OpVectorShuffle %123 %122 0 1 4 5 
                                                      OpStore %96 %124 
                                       f32_3 %127 = OpLoad %126 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %28 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %134 = OpAccessChain %44 %132 
                                                      OpStore %134 %131 
                                       f32_3 %135 = OpLoad %126 
                              Uniform f32_4* %136 = OpAccessChain %21 %36 %23 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %135 %138 
                                Private f32* %140 = OpAccessChain %44 %88 
                                                      OpStore %140 %139 
                                       f32_3 %141 = OpLoad %126 
                              Uniform f32_4* %142 = OpAccessChain %21 %36 %36 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %141 %144 
                                Private f32* %147 = OpAccessChain %44 %146 
                                                      OpStore %147 %145 
                                       f32_4 %149 = OpLoad %44 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %44 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %148 %153 
                                         f32 %154 = OpLoad %148 
                                         f32 %155 = OpExtInst %1 32 %154 
                                                      OpStore %148 %155 
                                         f32 %157 = OpLoad %148 
                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
                                       f32_4 %159 = OpLoad %44 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                                      OpStore %156 %161 
                                                      OpStore %162 %164 
                                Private f32* %165 = OpAccessChain %9 %88 
                                         f32 %166 = OpLoad %165 
                                Uniform f32* %168 = OpAccessChain %21 %28 %132 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %166 %169 
                                Private f32* %171 = OpAccessChain %9 %88 
                                                      OpStore %171 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 3 1 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %44 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 1 5 6 
                                                      OpStore %44 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 3 
                                       f32_4 %182 = OpLoad %179 
                                       f32_4 %183 = OpVectorShuffle %182 %181 0 1 4 5 
                                                      OpStore %179 %183 
                                       f32_4 %184 = OpLoad %44 
                                       f32_2 %185 = OpVectorShuffle %184 %184 2 2 
                                       f32_4 %186 = OpLoad %44 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 3 
                                       f32_2 %188 = OpFAdd %185 %187 
                                       f32_4 %189 = OpLoad %179 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 2 3 
                                                      OpStore %179 %190 
                                                      OpStore %191 %192 
                                 Output f32* %194 = OpAccessChain %92 %28 %88 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                 Output f32* %197 = OpAccessChain %92 %28 %88 
                                                      OpStore %197 %196 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat2.x = u_xlat1.y * u_xlat1.y;
    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 315
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %98 %99 %128 %166 %278 %295 %307 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %278 Location 278 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %307 Location 307 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                Output f32_4* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                         i32 %103 = OpConstant 11 
                                         i32 %116 = OpConstant 12 
                                             %127 = OpTypePointer Input %51 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %130 = OpConstant 9 
                                         u32 %135 = OpConstant 0 
                                             %136 = OpTypePointer Private %6 
                                         u32 %149 = OpConstant 2 
                                Private f32* %151 = OpVariable Private 
                               Output f32_3* %166 = OpVariable Output 
                                             %169 = OpTypePointer Private %51 
                              Private f32_3* %170 = OpVariable Private 
                              Private f32_4* %187 = OpVariable Private 
                              Private f32_3* %193 = OpVariable Private 
                                         i32 %194 = OpConstant 4 
                                         i32 %200 = OpConstant 5 
                                         i32 %206 = OpConstant 6 
                                         i32 %212 = OpConstant 7 
                                         f32 %221 = OpConstant 3.674022E-40 
                                         u32 %222 = OpConstant 3 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_3 %266 = OpConstantComposite %265 %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                               Output f32_3* %278 = OpVariable Output 
                                             %283 = OpTypePointer Uniform %6 
                                         f32 %290 = OpConstant 3.674022E-40 
                                       f32_3 %291 = OpConstantComposite %290 %290 %290 
                               Output f32_4* %295 = OpVariable Output 
                               Output f32_4* %307 = OpVariable Output 
                                       f32_4 %308 = OpConstantComposite %244 %244 %244 %244 
                                             %309 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %101 = OpLoad %99 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                       f32_4 %112 = OpLoad %98 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 3 
                                                      OpStore %98 %113 
                                       f32_4 %114 = OpLoad %99 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_2 %120 = OpFMul %115 %119 
                              Uniform f32_4* %121 = OpAccessChain %21 %116 
                                       f32_4 %122 = OpLoad %121 
                                       f32_2 %123 = OpVectorShuffle %122 %122 2 3 
                                       f32_2 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %98 
                                       f32_4 %126 = OpVectorShuffle %125 %124 0 1 4 5 
                                                      OpStore %98 %126 
                                       f32_3 %129 = OpLoad %128 
                              Uniform f32_4* %131 = OpAccessChain %21 %130 %29 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %129 %133 
                                Private f32* %137 = OpAccessChain %45 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %128 
                              Uniform f32_4* %139 = OpAccessChain %21 %130 %24 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %138 %141 
                                Private f32* %143 = OpAccessChain %45 %90 
                                                      OpStore %143 %142 
                                       f32_3 %144 = OpLoad %128 
                              Uniform f32_4* %145 = OpAccessChain %21 %130 %37 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %144 %147 
                                Private f32* %150 = OpAccessChain %45 %149 
                                                      OpStore %150 %148 
                                       f32_4 %152 = OpLoad %45 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %45 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %153 %155 
                                                      OpStore %151 %156 
                                         f32 %157 = OpLoad %151 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %151 %158 
                                         f32 %159 = OpLoad %151 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_4 %161 = OpLoad %45 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %45 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %45 %165 
                                       f32_4 %167 = OpLoad %45 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                                      OpStore %166 %168 
                                Private f32* %171 = OpAccessChain %45 %90 
                                         f32 %172 = OpLoad %171 
                                Private f32* %173 = OpAccessChain %45 %90 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFMul %172 %174 
                                Private f32* %176 = OpAccessChain %170 %135 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %45 %135 
                                         f32 %178 = OpLoad %177 
                                Private f32* %179 = OpAccessChain %45 %135 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %178 %180 
                                Private f32* %182 = OpAccessChain %170 %135 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %181 %184 
                                Private f32* %186 = OpAccessChain %170 %135 
                                                      OpStore %186 %185 
                                       f32_4 %188 = OpLoad %45 
                                       f32_4 %189 = OpVectorShuffle %188 %188 1 2 2 0 
                                       f32_4 %190 = OpLoad %45 
                                       f32_4 %191 = OpVectorShuffle %190 %190 0 1 2 2 
                                       f32_4 %192 = OpFMul %189 %191 
                                                      OpStore %187 %192 
                              Uniform f32_4* %195 = OpAccessChain %21 %194 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %187 
                                         f32 %198 = OpDot %196 %197 
                                Private f32* %199 = OpAccessChain %193 %135 
                                                      OpStore %199 %198 
                              Uniform f32_4* %201 = OpAccessChain %21 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %187 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %193 %90 
                                                      OpStore %205 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %187 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %193 %149 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpLoad %170 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_3 %219 = OpLoad %193 
                                       f32_3 %220 = OpFAdd %218 %219 
                                                      OpStore %170 %220 
                                Private f32* %223 = OpAccessChain %45 %222 
                                                      OpStore %223 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %24 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %45 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %187 %135 
                                                      OpStore %228 %227 
                              Uniform f32_4* %229 = OpAccessChain %21 %37 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %45 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %187 %90 
                                                      OpStore %233 %232 
                              Uniform f32_4* %234 = OpAccessChain %21 %47 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpLoad %45 
                                         f32 %237 = OpDot %235 %236 
                                Private f32* %238 = OpAccessChain %187 %149 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %170 
                                       f32_4 %240 = OpLoad %187 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                                      OpStore %170 %242 
                                       f32_3 %243 = OpLoad %170 
                                       f32_3 %246 = OpExtInst %1 40 %243 %245 
                                                      OpStore %170 %246 
                                       f32_3 %247 = OpLoad %170 
                                       f32_3 %248 = OpExtInst %1 30 %247 
                                       f32_4 %249 = OpLoad %45 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %45 %250 
                                       f32_4 %251 = OpLoad %45 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_4 %256 = OpLoad %45 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %45 %257 
                                       f32_4 %258 = OpLoad %45 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 29 %259 
                                       f32_4 %261 = OpLoad %45 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %45 %262 
                                       f32_4 %263 = OpLoad %45 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %45 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %45 %272 
                                       f32_4 %273 = OpLoad %45 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpExtInst %1 40 %274 %245 
                                       f32_4 %276 = OpLoad %45 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %45 %277 
                                       f32_4 %279 = OpLoad %45 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                                      OpStore %278 %280 
                                Private f32* %281 = OpAccessChain %9 %90 
                                         f32 %282 = OpLoad %281 
                                Uniform f32* %284 = OpAccessChain %21 %29 %135 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %282 %285 
                                Private f32* %287 = OpAccessChain %9 %90 
                                                      OpStore %287 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 3 1 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %45 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 1 5 6 
                                                      OpStore %45 %294 
                                       f32_4 %296 = OpLoad %9 
                                       f32_2 %297 = OpVectorShuffle %296 %296 2 3 
                                       f32_4 %298 = OpLoad %295 
                                       f32_4 %299 = OpVectorShuffle %298 %297 0 1 4 5 
                                                      OpStore %295 %299 
                                       f32_4 %300 = OpLoad %45 
                                       f32_2 %301 = OpVectorShuffle %300 %300 2 2 
                                       f32_4 %302 = OpLoad %45 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 3 
                                       f32_2 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %295 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 2 3 
                                                      OpStore %295 %306 
                                                      OpStore %307 %308 
                                 Output f32* %310 = OpAccessChain %94 %29 %90 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                 Output f32* %313 = OpAccessChain %94 %29 %90 
                                                      OpStore %313 %312 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %100 %101 %130 %169 %172 %291 %294 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %291 Location 291 
                                                      OpDecorate %294 Location 294 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 5 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 7 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                               Output f32_4* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                             %102 = OpTypeVector %6 2 
                                         i32 %105 = OpConstant 8 
                                         i32 %118 = OpConstant 9 
                                             %129 = OpTypePointer Input %53 
                                Input f32_3* %130 = OpVariable Input 
                                         i32 %132 = OpConstant 6 
                                         u32 %137 = OpConstant 0 
                                             %138 = OpTypePointer Private %6 
                                         u32 %151 = OpConstant 2 
                                Private f32* %153 = OpVariable Private 
                                             %168 = OpTypePointer Output %53 
                               Output f32_3* %169 = OpVariable Output 
                               Output f32_3* %172 = OpVariable Output 
                              Private f32_4* %181 = OpVariable Private 
                              Private f32_4* %189 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                       f32_4 %226 = OpConstantComposite %225 %225 %225 %225 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_4 %235 = OpConstantComposite %234 %234 %234 %234 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_4 %244 = OpConstantComposite %243 %243 %243 %243 
                                         i32 %251 = OpConstant 4 
                               Output f32_3* %291 = OpVariable Output 
                               Output f32_4* %294 = OpVariable Output 
                                             %295 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %103 = OpLoad %101 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                              Uniform f32_4* %106 = OpAccessChain %23 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_2 %109 = OpFMul %104 %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %105 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                                       f32_2 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %100 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 3 
                                                      OpStore %100 %115 
                                       f32_4 %116 = OpLoad %101 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                       f32_2 %122 = OpFMul %117 %121 
                              Uniform f32_4* %123 = OpAccessChain %23 %118 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 2 3 
                                       f32_2 %126 = OpFAdd %122 %125 
                                       f32_4 %127 = OpLoad %100 
                                       f32_4 %128 = OpVectorShuffle %127 %126 0 1 4 5 
                                                      OpStore %100 %128 
                                       f32_3 %131 = OpLoad %130 
                              Uniform f32_4* %133 = OpAccessChain %23 %132 %31 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %131 %135 
                                Private f32* %139 = OpAccessChain %47 %137 
                                                      OpStore %139 %136 
                                       f32_3 %140 = OpLoad %130 
                              Uniform f32_4* %141 = OpAccessChain %23 %132 %26 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %140 %143 
                                Private f32* %145 = OpAccessChain %47 %86 
                                                      OpStore %145 %144 
                                       f32_3 %146 = OpLoad %130 
                              Uniform f32_4* %147 = OpAccessChain %23 %132 %39 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                         f32 %150 = OpDot %146 %149 
                                Private f32* %152 = OpAccessChain %47 %151 
                                                      OpStore %152 %150 
                                       f32_4 %154 = OpLoad %47 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %155 %157 
                                                      OpStore %153 %158 
                                         f32 %159 = OpLoad %153 
                                         f32 %160 = OpExtInst %1 32 %159 
                                                      OpStore %153 %160 
                                         f32 %161 = OpLoad %153 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_4 %163 = OpLoad %47 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %47 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %47 %167 
                                       f32_4 %170 = OpLoad %47 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                                      OpStore %169 %171 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                                      OpStore %172 %174 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 1 1 1 1 
                                       f32_4 %177 = OpFNegate %176 
                              Uniform f32_4* %178 = OpAccessChain %23 %26 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpFAdd %177 %179 
                                                      OpStore %65 %180 
                                       f32_4 %182 = OpLoad %47 
                                       f32_4 %183 = OpVectorShuffle %182 %182 1 1 1 1 
                                       f32_4 %184 = OpLoad %65 
                                       f32_4 %185 = OpFMul %183 %184 
                                                      OpStore %181 %185 
                                       f32_4 %186 = OpLoad %65 
                                       f32_4 %187 = OpLoad %65 
                                       f32_4 %188 = OpFMul %186 %187 
                                                      OpStore %65 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %190 0 0 0 0 
                                       f32_4 %192 = OpFNegate %191 
                              Uniform f32_4* %193 = OpAccessChain %23 %31 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpFAdd %192 %194 
                                                      OpStore %189 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %196 2 2 2 2 
                                       f32_4 %198 = OpFNegate %197 
                              Uniform f32_4* %199 = OpAccessChain %23 %39 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpFAdd %198 %200 
                                                      OpStore %9 %201 
                                       f32_4 %202 = OpLoad %189 
                                       f32_4 %203 = OpLoad %47 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %181 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %181 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpLoad %47 
                                       f32_4 %210 = OpVectorShuffle %209 %209 2 2 2 2 
                                       f32_4 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %181 
                                       f32_4 %213 = OpFAdd %211 %212 
                                                      OpStore %47 %213 
                                       f32_4 %214 = OpLoad %189 
                                       f32_4 %215 = OpLoad %189 
                                       f32_4 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %65 
                                       f32_4 %218 = OpFAdd %216 %217 
                                                      OpStore %65 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpLoad %9 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %65 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %9 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %227 = OpExtInst %1 40 %224 %226 
                                                      OpStore %9 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpExtInst %1 32 %228 
                                                      OpStore %65 %229 
                                       f32_4 %230 = OpLoad %9 
                              Uniform f32_4* %231 = OpAccessChain %23 %49 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpFMul %230 %232 
                                       f32_4 %236 = OpFAdd %233 %235 
                                                      OpStore %9 %236 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpFDiv %235 %237 
                                                      OpStore %9 %238 
                                       f32_4 %239 = OpLoad %47 
                                       f32_4 %240 = OpLoad %65 
                                       f32_4 %241 = OpFMul %239 %240 
                                                      OpStore %47 %241 
                                       f32_4 %242 = OpLoad %47 
                                       f32_4 %245 = OpExtInst %1 40 %242 %244 
                                                      OpStore %47 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpLoad %47 
                                       f32_4 %248 = OpFMul %246 %247 
                                                      OpStore %9 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %23 %251 %26 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                       f32_4 %256 = OpLoad %47 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %47 %257 
                              Uniform f32_4* %258 = OpAccessChain %23 %251 %31 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %47 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %263 %265 
                                       f32_4 %267 = OpLoad %47 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %47 %268 
                              Uniform f32_4* %269 = OpAccessChain %23 %251 %39 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 2 2 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %47 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                              Uniform f32_4* %280 = OpAccessChain %23 %251 %49 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 3 3 3 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %9 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFAdd %285 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                                      OpStore %291 %293 
                                                      OpStore %294 %244 
                                 Output f32* %296 = OpAccessChain %90 %31 %86 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                 Output f32* %299 = OpAccessChain %90 %31 %86 
                                                      OpStore %299 %298 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 403
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %100 %101 %130 %169 %172 %393 %396 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %396 Location 396 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                               Output f32_4* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                             %102 = OpTypeVector %6 2 
                                         i32 %105 = OpConstant 15 
                                         i32 %118 = OpConstant 16 
                                             %129 = OpTypePointer Input %53 
                                Input f32_3* %130 = OpVariable Input 
                                         i32 %132 = OpConstant 13 
                                         u32 %137 = OpConstant 0 
                                             %138 = OpTypePointer Private %6 
                                         u32 %151 = OpConstant 2 
                                Private f32* %153 = OpVariable Private 
                                             %168 = OpTypePointer Output %53 
                               Output f32_3* %169 = OpVariable Output 
                               Output f32_3* %172 = OpVariable Output 
                                             %175 = OpTypePointer Private %53 
                              Private f32_3* %176 = OpVariable Private 
                              Private f32_4* %193 = OpVariable Private 
                              Private f32_3* %199 = OpVariable Private 
                                         i32 %200 = OpConstant 8 
                                         i32 %206 = OpConstant 9 
                                         i32 %212 = OpConstant 10 
                                         i32 %218 = OpConstant 11 
                                         f32 %227 = OpConstant 3.674022E-40 
                                         u32 %228 = OpConstant 3 
                                         i32 %230 = OpConstant 5 
                                         i32 %236 = OpConstant 6 
                                         i32 %242 = OpConstant 7 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_3 %253 = OpConstantComposite %252 %252 %252 
                              Private f32_3* %255 = OpVariable Private 
                                         f32 %259 = OpConstant 3.674022E-40 
                                       f32_3 %260 = OpConstantComposite %259 %259 %259 
                                         f32 %265 = OpConstant 3.674022E-40 
                                       f32_3 %266 = OpConstantComposite %265 %265 %265 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                              Private f32_4* %279 = OpVariable Private 
                              Private f32_4* %287 = OpVariable Private 
                                         f32 %323 = OpConstant 3.674022E-40 
                                       f32_4 %324 = OpConstantComposite %323 %323 %323 %323 
                                       f32_4 %332 = OpConstantComposite %227 %227 %227 %227 
                                       f32_4 %340 = OpConstantComposite %252 %252 %252 %252 
                                         i32 %347 = OpConstant 4 
                               Output f32_3* %393 = OpVariable Output 
                               Output f32_4* %396 = OpVariable Output 
                                             %397 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %103 = OpLoad %101 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                              Uniform f32_4* %106 = OpAccessChain %23 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_2 %109 = OpFMul %104 %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %105 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                                       f32_2 %113 = OpFAdd %109 %112 
                                       f32_4 %114 = OpLoad %100 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 3 
                                                      OpStore %100 %115 
                                       f32_4 %116 = OpLoad %101 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                       f32_2 %122 = OpFMul %117 %121 
                              Uniform f32_4* %123 = OpAccessChain %23 %118 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 2 3 
                                       f32_2 %126 = OpFAdd %122 %125 
                                       f32_4 %127 = OpLoad %100 
                                       f32_4 %128 = OpVectorShuffle %127 %126 0 1 4 5 
                                                      OpStore %100 %128 
                                       f32_3 %131 = OpLoad %130 
                              Uniform f32_4* %133 = OpAccessChain %23 %132 %31 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %131 %135 
                                Private f32* %139 = OpAccessChain %47 %137 
                                                      OpStore %139 %136 
                                       f32_3 %140 = OpLoad %130 
                              Uniform f32_4* %141 = OpAccessChain %23 %132 %26 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %140 %143 
                                Private f32* %145 = OpAccessChain %47 %86 
                                                      OpStore %145 %144 
                                       f32_3 %146 = OpLoad %130 
                              Uniform f32_4* %147 = OpAccessChain %23 %132 %39 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                         f32 %150 = OpDot %146 %149 
                                Private f32* %152 = OpAccessChain %47 %151 
                                                      OpStore %152 %150 
                                       f32_4 %154 = OpLoad %47 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %155 %157 
                                                      OpStore %153 %158 
                                         f32 %159 = OpLoad %153 
                                         f32 %160 = OpExtInst %1 32 %159 
                                                      OpStore %153 %160 
                                         f32 %161 = OpLoad %153 
                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
                                       f32_4 %163 = OpLoad %47 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %47 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %47 %167 
                                       f32_4 %170 = OpLoad %47 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                                      OpStore %169 %171 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                                      OpStore %172 %174 
                                Private f32* %177 = OpAccessChain %47 %86 
                                         f32 %178 = OpLoad %177 
                                Private f32* %179 = OpAccessChain %47 %86 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %178 %180 
                                Private f32* %182 = OpAccessChain %176 %137 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %47 %137 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %47 %137 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %176 %137 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                         f32 %191 = OpFAdd %187 %190 
                                Private f32* %192 = OpAccessChain %176 %137 
                                                      OpStore %192 %191 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 1 2 2 0 
                                       f32_4 %196 = OpLoad %47 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 1 2 2 
                                       f32_4 %198 = OpFMul %195 %197 
                                                      OpStore %193 %198 
                              Uniform f32_4* %201 = OpAccessChain %23 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %193 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %199 %137 
                                                      OpStore %205 %204 
                              Uniform f32_4* %207 = OpAccessChain %23 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %193 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %199 %86 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %23 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %193 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %199 %151 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %23 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpLoad %176 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %221 %223 
                                       f32_3 %225 = OpLoad %199 
                                       f32_3 %226 = OpFAdd %224 %225 
                                                      OpStore %176 %226 
                                Private f32* %229 = OpAccessChain %47 %228 
                                                      OpStore %229 %227 
                              Uniform f32_4* %231 = OpAccessChain %23 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %47 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %199 %137 
                                                      OpStore %235 %234 
                              Uniform f32_4* %237 = OpAccessChain %23 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %47 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %199 %86 
                                                      OpStore %241 %240 
                              Uniform f32_4* %243 = OpAccessChain %23 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %47 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %199 %151 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %176 
                                       f32_3 %249 = OpLoad %199 
                                       f32_3 %250 = OpFAdd %248 %249 
                                                      OpStore %176 %250 
                                       f32_3 %251 = OpLoad %176 
                                       f32_3 %254 = OpExtInst %1 40 %251 %253 
                                                      OpStore %176 %254 
                                       f32_3 %256 = OpLoad %176 
                                       f32_3 %257 = OpExtInst %1 30 %256 
                                                      OpStore %255 %257 
                                       f32_3 %258 = OpLoad %255 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %255 %261 
                                       f32_3 %262 = OpLoad %255 
                                       f32_3 %263 = OpExtInst %1 29 %262 
                                                      OpStore %255 %263 
                                       f32_3 %264 = OpLoad %255 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_3 %270 = OpFAdd %267 %269 
                                                      OpStore %255 %270 
                                       f32_3 %271 = OpLoad %255 
                                       f32_3 %272 = OpExtInst %1 40 %271 %253 
                                                      OpStore %255 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %273 1 1 1 1 
                                       f32_4 %275 = OpFNegate %274 
                              Uniform f32_4* %276 = OpAccessChain %23 %26 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpFAdd %275 %277 
                                                      OpStore %65 %278 
                                       f32_4 %280 = OpLoad %47 
                                       f32_4 %281 = OpVectorShuffle %280 %280 1 1 1 1 
                                       f32_4 %282 = OpLoad %65 
                                       f32_4 %283 = OpFMul %281 %282 
                                                      OpStore %279 %283 
                                       f32_4 %284 = OpLoad %65 
                                       f32_4 %285 = OpLoad %65 
                                       f32_4 %286 = OpFMul %284 %285 
                                                      OpStore %65 %286 
                                       f32_4 %288 = OpLoad %9 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFNegate %289 
                              Uniform f32_4* %291 = OpAccessChain %23 %31 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpFAdd %290 %292 
                                                      OpStore %287 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %295 = OpVectorShuffle %294 %294 2 2 2 2 
                                       f32_4 %296 = OpFNegate %295 
                              Uniform f32_4* %297 = OpAccessChain %23 %39 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpFAdd %296 %298 
                                                      OpStore %9 %299 
                                       f32_4 %300 = OpLoad %287 
                                       f32_4 %301 = OpLoad %47 
                                       f32_4 %302 = OpVectorShuffle %301 %301 0 0 0 0 
                                       f32_4 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %279 
                                       f32_4 %305 = OpFAdd %303 %304 
                                                      OpStore %279 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %307 = OpLoad %47 
                                       f32_4 %308 = OpVectorShuffle %307 %307 2 2 2 2 
                                       f32_4 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %279 
                                       f32_4 %311 = OpFAdd %309 %310 
                                                      OpStore %47 %311 
                                       f32_4 %312 = OpLoad %287 
                                       f32_4 %313 = OpLoad %287 
                                       f32_4 %314 = OpFMul %312 %313 
                                       f32_4 %315 = OpLoad %65 
                                       f32_4 %316 = OpFAdd %314 %315 
                                                      OpStore %65 %316 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpFMul %317 %318 
                                       f32_4 %320 = OpLoad %65 
                                       f32_4 %321 = OpFAdd %319 %320 
                                                      OpStore %9 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %325 = OpExtInst %1 40 %322 %324 
                                                      OpStore %9 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpExtInst %1 32 %326 
                                                      OpStore %65 %327 
                                       f32_4 %328 = OpLoad %9 
                              Uniform f32_4* %329 = OpAccessChain %23 %49 
                                       f32_4 %330 = OpLoad %329 
                                       f32_4 %331 = OpFMul %328 %330 
                                       f32_4 %333 = OpFAdd %331 %332 
                                                      OpStore %9 %333 
                                       f32_4 %334 = OpLoad %9 
                                       f32_4 %335 = OpFDiv %332 %334 
                                                      OpStore %9 %335 
                                       f32_4 %336 = OpLoad %47 
                                       f32_4 %337 = OpLoad %65 
                                       f32_4 %338 = OpFMul %336 %337 
                                                      OpStore %47 %338 
                                       f32_4 %339 = OpLoad %47 
                                       f32_4 %341 = OpExtInst %1 40 %339 %340 
                                                      OpStore %47 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpLoad %47 
                                       f32_4 %344 = OpFMul %342 %343 
                                                      OpStore %9 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 1 1 1 
                              Uniform f32_4* %348 = OpAccessChain %23 %347 %26 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFMul %346 %350 
                                       f32_4 %352 = OpLoad %47 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %47 %353 
                              Uniform f32_4* %354 = OpAccessChain %23 %347 %31 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %47 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %47 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %47 %364 
                              Uniform f32_4* %365 = OpAccessChain %23 %347 %39 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %370 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %9 %375 
                              Uniform f32_4* %376 = OpAccessChain %23 %347 %49 
                                       f32_4 %377 = OpLoad %376 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %9 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpLoad %255 
                                       f32_3 %390 = OpFAdd %388 %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 5 6 3 
                                                      OpStore %9 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                                      OpStore %393 %395 
                                                      OpStore %396 %340 
                                 Output f32* %398 = OpAccessChain %90 %31 %86 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpFNegate %399 
                                 Output f32* %401 = OpAccessChain %90 %31 %86 
                                                      OpStore %401 %400 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 335
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %101 %102 %131 %170 %173 %294 %316 %328 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %294 Location 294 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %328 Location 328 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 6 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 8 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                               Output f32_4* %101 = OpVariable Output 
                                Input f32_4* %102 = OpVariable Input 
                                             %103 = OpTypeVector %6 2 
                                         i32 %106 = OpConstant 9 
                                         i32 %119 = OpConstant 10 
                                             %130 = OpTypePointer Input %53 
                                Input f32_3* %131 = OpVariable Input 
                                         i32 %133 = OpConstant 7 
                                         u32 %138 = OpConstant 0 
                                             %139 = OpTypePointer Private %6 
                                         u32 %152 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                             %169 = OpTypePointer Output %53 
                               Output f32_3* %170 = OpVariable Output 
                               Output f32_3* %173 = OpVariable Output 
                              Private f32_4* %176 = OpVariable Private 
                              Private f32_4* %183 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_4 %228 = OpConstantComposite %227 %227 %227 %227 
                                         i32 %233 = OpConstant 4 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_4 %238 = OpConstantComposite %237 %237 %237 %237 
                                         f32 %246 = OpConstant 3.674022E-40 
                                       f32_4 %247 = OpConstantComposite %246 %246 %246 %246 
                                         i32 %254 = OpConstant 5 
                               Output f32_3* %294 = OpVariable Output 
                                             %299 = OpTypePointer Uniform %6 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         u32 %308 = OpConstant 3 
                                       f32_2 %312 = OpConstantComposite %306 %306 
                               Output f32_4* %316 = OpVariable Output 
                               Output f32_4* %328 = OpVariable Output 
                                             %329 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %104 = OpLoad %102 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %101 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %101 %116 
                                       f32_4 %117 = OpLoad %102 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFMul %118 %122 
                              Uniform f32_4* %124 = OpAccessChain %23 %119 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %127 = OpFAdd %123 %126 
                                       f32_4 %128 = OpLoad %101 
                                       f32_4 %129 = OpVectorShuffle %128 %127 0 1 4 5 
                                                      OpStore %101 %129 
                                       f32_3 %132 = OpLoad %131 
                              Uniform f32_4* %134 = OpAccessChain %23 %133 %31 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %132 %136 
                                Private f32* %140 = OpAccessChain %65 %138 
                                                      OpStore %140 %137 
                                       f32_3 %141 = OpLoad %131 
                              Uniform f32_4* %142 = OpAccessChain %23 %133 %26 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %141 %144 
                                Private f32* %146 = OpAccessChain %65 %93 
                                                      OpStore %146 %145 
                                       f32_3 %147 = OpLoad %131 
                              Uniform f32_4* %148 = OpAccessChain %23 %133 %39 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %147 %150 
                                Private f32* %153 = OpAccessChain %65 %152 
                                                      OpStore %153 %151 
                                       f32_4 %155 = OpLoad %65 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %156 %158 
                                                      OpStore %154 %159 
                                         f32 %160 = OpLoad %154 
                                         f32 %161 = OpExtInst %1 32 %160 
                                                      OpStore %154 %161 
                                         f32 %162 = OpLoad %154 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                                       f32_4 %164 = OpLoad %65 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %65 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %65 %168 
                                       f32_4 %171 = OpLoad %65 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                                      OpStore %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %173 %175 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 1 1 1 
                                       f32_4 %179 = OpFNegate %178 
                              Uniform f32_4* %180 = OpAccessChain %23 %39 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpFAdd %179 %181 
                                                      OpStore %176 %182 
                                       f32_4 %184 = OpLoad %65 
                                       f32_4 %185 = OpVectorShuffle %184 %184 1 1 1 1 
                                       f32_4 %186 = OpLoad %176 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %183 %187 
                                       f32_4 %188 = OpLoad %176 
                                       f32_4 %189 = OpLoad %176 
                                       f32_4 %190 = OpFMul %188 %189 
                                                      OpStore %176 %190 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpVectorShuffle %192 %192 0 0 0 0 
                                       f32_4 %194 = OpFNegate %193 
                              Uniform f32_4* %195 = OpAccessChain %23 %26 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpFAdd %194 %196 
                                                      OpStore %191 %197 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 2 2 2 2 
                                       f32_4 %200 = OpFNegate %199 
                              Uniform f32_4* %201 = OpAccessChain %23 %49 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpFAdd %200 %202 
                                                      OpStore %9 %203 
                                       f32_4 %204 = OpLoad %191 
                                       f32_4 %205 = OpLoad %65 
                                       f32_4 %206 = OpVectorShuffle %205 %205 0 0 0 0 
                                       f32_4 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %183 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %183 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpLoad %65 
                                       f32_4 %212 = OpVectorShuffle %211 %211 2 2 2 2 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %183 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %65 %215 
                                       f32_4 %216 = OpLoad %191 
                                       f32_4 %217 = OpLoad %191 
                                       f32_4 %218 = OpFMul %216 %217 
                                       f32_4 %219 = OpLoad %176 
                                       f32_4 %220 = OpFAdd %218 %219 
                                                      OpStore %176 %220 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpLoad %9 
                                       f32_4 %223 = OpFMul %221 %222 
                                       f32_4 %224 = OpLoad %176 
                                       f32_4 %225 = OpFAdd %223 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_4 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %9 %229 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpExtInst %1 32 %230 
                                                      OpStore %176 %231 
                                       f32_4 %232 = OpLoad %9 
                              Uniform f32_4* %234 = OpAccessChain %23 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpFMul %232 %235 
                                       f32_4 %239 = OpFAdd %236 %238 
                                                      OpStore %9 %239 
                                       f32_4 %240 = OpLoad %9 
                                       f32_4 %241 = OpFDiv %238 %240 
                                                      OpStore %9 %241 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpLoad %176 
                                       f32_4 %244 = OpFMul %242 %243 
                                                      OpStore %65 %244 
                                       f32_4 %245 = OpLoad %65 
                                       f32_4 %248 = OpExtInst %1 40 %245 %247 
                                                      OpStore %65 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_4 %250 = OpLoad %65 
                                       f32_4 %251 = OpFMul %249 %250 
                                                      OpStore %9 %251 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %255 = OpAccessChain %23 %254 %26 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFMul %253 %257 
                                       f32_4 %259 = OpLoad %65 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %65 %260 
                              Uniform f32_4* %261 = OpAccessChain %23 %254 %31 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %65 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %65 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %65 %271 
                              Uniform f32_4* %272 = OpAccessChain %23 %254 %39 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 2 2 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %65 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                              Uniform f32_4* %283 = OpAccessChain %23 %254 %49 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_4 %286 = OpLoad %9 
                                       f32_3 %287 = OpVectorShuffle %286 %286 3 3 3 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFAdd %288 %290 
                                       f32_4 %292 = OpLoad %9 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %9 %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                                      OpStore %294 %296 
                                Private f32* %297 = OpAccessChain %47 %93 
                                         f32 %298 = OpLoad %297 
                                Uniform f32* %300 = OpAccessChain %23 %31 %138 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFMul %298 %301 
                                Private f32* %303 = OpAccessChain %9 %138 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %9 %138 
                                         f32 %305 = OpLoad %304 
                                         f32 %307 = OpFMul %305 %306 
                                Private f32* %309 = OpAccessChain %9 %308 
                                                      OpStore %309 %307 
                                       f32_4 %310 = OpLoad %47 
                                       f32_2 %311 = OpVectorShuffle %310 %310 0 3 
                                       f32_2 %313 = OpFMul %311 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 1 5 3 
                                                      OpStore %9 %315 
                                       f32_4 %317 = OpLoad %47 
                                       f32_2 %318 = OpVectorShuffle %317 %317 2 3 
                                       f32_4 %319 = OpLoad %316 
                                       f32_4 %320 = OpVectorShuffle %319 %318 0 1 4 5 
                                                      OpStore %316 %320 
                                       f32_4 %321 = OpLoad %9 
                                       f32_2 %322 = OpVectorShuffle %321 %321 2 2 
                                       f32_4 %323 = OpLoad %9 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 3 
                                       f32_2 %325 = OpFAdd %322 %324 
                                       f32_4 %326 = OpLoad %316 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 2 3 
                                                      OpStore %316 %327 
                                                      OpStore %328 %247 
                                 Output f32* %330 = OpAccessChain %97 %31 %93 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                 Output f32* %333 = OpAccessChain %97 %31 %93 
                                                      OpStore %333 %332 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    u_xlat2.w = 0.0;
    u_xlat1 = u_xlat1 + u_xlat2;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 437
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %101 %102 %131 %170 %173 %397 %418 %430 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpMemberDecorate %21 17 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %173 Location 173 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %397 Location 397 
                                                      OpDecorate %418 Location 418 
                                                      OpDecorate %430 Location 430 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                               Output f32_4* %101 = OpVariable Output 
                                Input f32_4* %102 = OpVariable Input 
                                             %103 = OpTypeVector %6 2 
                                         i32 %106 = OpConstant 16 
                                         i32 %119 = OpConstant 17 
                                             %130 = OpTypePointer Input %53 
                                Input f32_3* %131 = OpVariable Input 
                                         i32 %133 = OpConstant 14 
                                         u32 %138 = OpConstant 0 
                                             %139 = OpTypePointer Private %6 
                                         u32 %152 = OpConstant 2 
                                Private f32* %154 = OpVariable Private 
                                             %169 = OpTypePointer Output %53 
                               Output f32_3* %170 = OpVariable Output 
                               Output f32_3* %173 = OpVariable Output 
                                             %176 = OpTypePointer Private %53 
                              Private f32_3* %177 = OpVariable Private 
                              Private f32_4* %194 = OpVariable Private 
                              Private f32_3* %200 = OpVariable Private 
                                         i32 %201 = OpConstant 9 
                                         i32 %207 = OpConstant 10 
                                         i32 %213 = OpConstant 11 
                                         i32 %219 = OpConstant 12 
                                         f32 %228 = OpConstant 3.674022E-40 
                                         u32 %229 = OpConstant 3 
                                         i32 %231 = OpConstant 6 
                                         i32 %237 = OpConstant 7 
                                         i32 %243 = OpConstant 8 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                              Private f32_3* %257 = OpVariable Private 
                                         f32 %261 = OpConstant 3.674022E-40 
                                       f32_3 %262 = OpConstantComposite %261 %261 %261 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_3 %268 = OpConstantComposite %267 %267 %267 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_3 %271 = OpConstantComposite %270 %270 %270 
                              Private f32_4* %275 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                              Private f32_4* %290 = OpVariable Private 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_4 %327 = OpConstantComposite %326 %326 %326 %326 
                                         i32 %332 = OpConstant 4 
                                       f32_4 %336 = OpConstantComposite %228 %228 %228 %228 
                                       f32_4 %344 = OpConstantComposite %254 %254 %254 %254 
                                         i32 %351 = OpConstant 5 
                               Output f32_3* %397 = OpVariable Output 
                                             %402 = OpTypePointer Uniform %6 
                                         f32 %409 = OpConstant 3.674022E-40 
                                       f32_2 %414 = OpConstantComposite %409 %409 
                               Output f32_4* %418 = OpVariable Output 
                               Output f32_4* %430 = OpVariable Output 
                                             %431 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %104 = OpLoad %102 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                       f32_4 %115 = OpLoad %101 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 3 
                                                      OpStore %101 %116 
                                       f32_4 %117 = OpLoad %102 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %123 = OpFMul %118 %122 
                              Uniform f32_4* %124 = OpAccessChain %23 %119 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 2 3 
                                       f32_2 %127 = OpFAdd %123 %126 
                                       f32_4 %128 = OpLoad %101 
                                       f32_4 %129 = OpVectorShuffle %128 %127 0 1 4 5 
                                                      OpStore %101 %129 
                                       f32_3 %132 = OpLoad %131 
                              Uniform f32_4* %134 = OpAccessChain %23 %133 %31 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %132 %136 
                                Private f32* %140 = OpAccessChain %65 %138 
                                                      OpStore %140 %137 
                                       f32_3 %141 = OpLoad %131 
                              Uniform f32_4* %142 = OpAccessChain %23 %133 %26 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %141 %144 
                                Private f32* %146 = OpAccessChain %65 %93 
                                                      OpStore %146 %145 
                                       f32_3 %147 = OpLoad %131 
                              Uniform f32_4* %148 = OpAccessChain %23 %133 %39 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %147 %150 
                                Private f32* %153 = OpAccessChain %65 %152 
                                                      OpStore %153 %151 
                                       f32_4 %155 = OpLoad %65 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %156 %158 
                                                      OpStore %154 %159 
                                         f32 %160 = OpLoad %154 
                                         f32 %161 = OpExtInst %1 32 %160 
                                                      OpStore %154 %161 
                                         f32 %162 = OpLoad %154 
                                       f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                                       f32_4 %164 = OpLoad %65 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFMul %163 %165 
                                       f32_4 %167 = OpLoad %65 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %65 %168 
                                       f32_4 %171 = OpLoad %65 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                                      OpStore %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %173 %175 
                                Private f32* %178 = OpAccessChain %65 %93 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %65 %93 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFMul %179 %181 
                                Private f32* %183 = OpAccessChain %177 %138 
                                                      OpStore %183 %182 
                                Private f32* %184 = OpAccessChain %65 %138 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %65 %138 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %177 %138 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFNegate %190 
                                         f32 %192 = OpFAdd %188 %191 
                                Private f32* %193 = OpAccessChain %177 %138 
                                                      OpStore %193 %192 
                                       f32_4 %195 = OpLoad %65 
                                       f32_4 %196 = OpVectorShuffle %195 %195 1 2 2 0 
                                       f32_4 %197 = OpLoad %65 
                                       f32_4 %198 = OpVectorShuffle %197 %197 0 1 2 2 
                                       f32_4 %199 = OpFMul %196 %198 
                                                      OpStore %194 %199 
                              Uniform f32_4* %202 = OpAccessChain %23 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %194 
                                         f32 %205 = OpDot %203 %204 
                                Private f32* %206 = OpAccessChain %200 %138 
                                                      OpStore %206 %205 
                              Uniform f32_4* %208 = OpAccessChain %23 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %194 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %200 %93 
                                                      OpStore %212 %211 
                              Uniform f32_4* %214 = OpAccessChain %23 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %194 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %200 %152 
                                                      OpStore %218 %217 
                              Uniform f32_4* %220 = OpAccessChain %23 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpLoad %177 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 0 0 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_3 %226 = OpLoad %200 
                                       f32_3 %227 = OpFAdd %225 %226 
                                                      OpStore %177 %227 
                                Private f32* %230 = OpAccessChain %65 %229 
                                                      OpStore %230 %228 
                              Uniform f32_4* %232 = OpAccessChain %23 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %65 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %194 %138 
                                                      OpStore %236 %235 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %65 
                                         f32 %241 = OpDot %239 %240 
                                Private f32* %242 = OpAccessChain %194 %93 
                                                      OpStore %242 %241 
                              Uniform f32_4* %244 = OpAccessChain %23 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_4 %246 = OpLoad %65 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %194 %152 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %177 
                                       f32_4 %250 = OpLoad %194 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                                      OpStore %177 %252 
                                       f32_3 %253 = OpLoad %177 
                                       f32_3 %256 = OpExtInst %1 40 %253 %255 
                                                      OpStore %177 %256 
                                       f32_3 %258 = OpLoad %177 
                                       f32_3 %259 = OpExtInst %1 30 %258 
                                                      OpStore %257 %259 
                                       f32_3 %260 = OpLoad %257 
                                       f32_3 %263 = OpFMul %260 %262 
                                                      OpStore %257 %263 
                                       f32_3 %264 = OpLoad %257 
                                       f32_3 %265 = OpExtInst %1 29 %264 
                                                      OpStore %257 %265 
                                       f32_3 %266 = OpLoad %257 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %272 = OpFAdd %269 %271 
                                                      OpStore %257 %272 
                                       f32_3 %273 = OpLoad %257 
                                       f32_3 %274 = OpExtInst %1 40 %273 %255 
                                                      OpStore %257 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %276 1 1 1 1 
                                       f32_4 %278 = OpFNegate %277 
                              Uniform f32_4* %279 = OpAccessChain %23 %39 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpFAdd %278 %280 
                                                      OpStore %275 %281 
                                       f32_4 %283 = OpLoad %65 
                                       f32_4 %284 = OpVectorShuffle %283 %283 1 1 1 1 
                                       f32_4 %285 = OpLoad %275 
                                       f32_4 %286 = OpFMul %284 %285 
                                                      OpStore %282 %286 
                                       f32_4 %287 = OpLoad %275 
                                       f32_4 %288 = OpLoad %275 
                                       f32_4 %289 = OpFMul %287 %288 
                                                      OpStore %275 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpVectorShuffle %291 %291 0 0 0 0 
                                       f32_4 %293 = OpFNegate %292 
                              Uniform f32_4* %294 = OpAccessChain %23 %26 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpFAdd %293 %295 
                                                      OpStore %290 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_4 %298 = OpVectorShuffle %297 %297 2 2 2 2 
                                       f32_4 %299 = OpFNegate %298 
                              Uniform f32_4* %300 = OpAccessChain %23 %49 
                                       f32_4 %301 = OpLoad %300 
                                       f32_4 %302 = OpFAdd %299 %301 
                                                      OpStore %9 %302 
                                       f32_4 %303 = OpLoad %290 
                                       f32_4 %304 = OpLoad %65 
                                       f32_4 %305 = OpVectorShuffle %304 %304 0 0 0 0 
                                       f32_4 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %282 
                                       f32_4 %308 = OpFAdd %306 %307 
                                                      OpStore %282 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpLoad %65 
                                       f32_4 %311 = OpVectorShuffle %310 %310 2 2 2 2 
                                       f32_4 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %282 
                                       f32_4 %314 = OpFAdd %312 %313 
                                                      OpStore %65 %314 
                                       f32_4 %315 = OpLoad %290 
                                       f32_4 %316 = OpLoad %290 
                                       f32_4 %317 = OpFMul %315 %316 
                                       f32_4 %318 = OpLoad %275 
                                       f32_4 %319 = OpFAdd %317 %318 
                                                      OpStore %275 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_4 %321 = OpLoad %9 
                                       f32_4 %322 = OpFMul %320 %321 
                                       f32_4 %323 = OpLoad %275 
                                       f32_4 %324 = OpFAdd %322 %323 
                                                      OpStore %9 %324 
                                       f32_4 %325 = OpLoad %9 
                                       f32_4 %328 = OpExtInst %1 40 %325 %327 
                                                      OpStore %9 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpExtInst %1 32 %329 
                                                      OpStore %275 %330 
                                       f32_4 %331 = OpLoad %9 
                              Uniform f32_4* %333 = OpAccessChain %23 %332 
                                       f32_4 %334 = OpLoad %333 
                                       f32_4 %335 = OpFMul %331 %334 
                                       f32_4 %337 = OpFAdd %335 %336 
                                                      OpStore %9 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_4 %339 = OpFDiv %336 %338 
                                                      OpStore %9 %339 
                                       f32_4 %340 = OpLoad %65 
                                       f32_4 %341 = OpLoad %275 
                                       f32_4 %342 = OpFMul %340 %341 
                                                      OpStore %65 %342 
                                       f32_4 %343 = OpLoad %65 
                                       f32_4 %345 = OpExtInst %1 40 %343 %344 
                                                      OpStore %65 %345 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpLoad %65 
                                       f32_4 %348 = OpFMul %346 %347 
                                                      OpStore %9 %348 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 1 1 1 
                              Uniform f32_4* %352 = OpAccessChain %23 %351 %26 
                                       f32_4 %353 = OpLoad %352 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_3 %355 = OpFMul %350 %354 
                                       f32_4 %356 = OpLoad %65 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 5 6 3 
                                                      OpStore %65 %357 
                              Uniform f32_4* %358 = OpAccessChain %23 %351 %31 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_4 %361 = OpLoad %9 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 0 0 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %65 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_3 %366 = OpFAdd %363 %365 
                                       f32_4 %367 = OpLoad %65 
                                       f32_4 %368 = OpVectorShuffle %367 %366 4 5 6 3 
                                                      OpStore %65 %368 
                              Uniform f32_4* %369 = OpAccessChain %23 %351 %39 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_4 %372 = OpLoad %9 
                                       f32_3 %373 = OpVectorShuffle %372 %372 2 2 2 
                                       f32_3 %374 = OpFMul %371 %373 
                                       f32_4 %375 = OpLoad %65 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFAdd %374 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %9 %379 
                              Uniform f32_4* %380 = OpAccessChain %23 %351 %49 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 3 3 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %9 %390 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpLoad %257 
                                       f32_3 %394 = OpFAdd %392 %393 
                                       f32_4 %395 = OpLoad %9 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %9 %396 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                                      OpStore %397 %399 
                                Private f32* %400 = OpAccessChain %47 %93 
                                         f32 %401 = OpLoad %400 
                                Uniform f32* %403 = OpAccessChain %23 %31 %138 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %401 %404 
                                Private f32* %406 = OpAccessChain %9 %138 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %9 %138 
                                         f32 %408 = OpLoad %407 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %9 %229 
                                                      OpStore %411 %410 
                                       f32_4 %412 = OpLoad %47 
                                       f32_2 %413 = OpVectorShuffle %412 %412 0 3 
                                       f32_2 %415 = OpFMul %413 %414 
                                       f32_4 %416 = OpLoad %9 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 1 5 3 
                                                      OpStore %9 %417 
                                       f32_4 %419 = OpLoad %47 
                                       f32_2 %420 = OpVectorShuffle %419 %419 2 3 
                                       f32_4 %421 = OpLoad %418 
                                       f32_4 %422 = OpVectorShuffle %421 %420 0 1 4 5 
                                                      OpStore %418 %422 
                                       f32_4 %423 = OpLoad %9 
                                       f32_2 %424 = OpVectorShuffle %423 %423 2 2 
                                       f32_4 %425 = OpLoad %9 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 3 
                                       f32_2 %427 = OpFAdd %424 %426 
                                       f32_4 %428 = OpLoad %418 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 2 3 
                                                      OpStore %418 %429 
                                                      OpStore %430 %344 
                                 Output f32* %432 = OpAccessChain %97 %31 %93 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpFNegate %433 
                                 Output f32* %435 = OpAccessChain %97 %31 %93 
                                                      OpStore %435 %434 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %272 %282 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %272 Location 272 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %41 = OpTypePointer Private %30 
                               Private f32_3* %42 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %49 = OpVariable UniformConstant 
                                              %54 = OpTypeBool 
                                              %55 = OpTypeVector %54 2 
                                              %56 = OpTypePointer Private %55 
                              Private bool_2* %57 = OpVariable Private 
                                          f32 %58 = OpConstant 3.674022E-40 
                                          u32 %59 = OpConstant 3 
                                              %65 = OpTypePointer Function %6 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %54 
                                Private bool* %78 = OpVariable Private 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 0 
                                              %87 = OpTypePointer Uniform %7 
                                         i32 %106 = OpConstant 2 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                       f32_2 %112 = OpConstantComposite %110 %111 
                                         f32 %131 = OpConstant 3.674022E-40 
                                         u32 %136 = OpConstant 2 
                                             %142 = OpTypeVector %54 4 
                               Private bool* %152 = OpVariable Private 
                              Private f32_4* %157 = OpVariable Private 
                                         u32 %169 = OpConstant 1 
                               Private bool* %173 = OpVariable Private 
                                             %182 = OpTypePointer Function %30 
                                         i32 %187 = OpConstant 1 
                                             %188 = OpTypePointer Uniform %30 
                                         f32 %198 = OpConstant 3.674022E-40 
                                       f32_3 %199 = OpConstantComposite %198 %198 %198 
                                             %213 = OpTypePointer Function %7 
                                       f32_4 %218 = OpConstantComposite %74 %74 %74 %131 
                                         i32 %224 = OpConstant 4 
                               Private bool* %230 = OpVariable Private 
                                         i32 %236 = OpConstant -1 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                       f32_3 %253 = OpConstantComposite %74 %74 %74 
                              Private f32_4* %268 = OpVariable Private 
                                             %271 = OpTypePointer Input %30 
                                Input f32_3* %272 = OpVariable Input 
                                             %281 = OpTypePointer Output %7 
                               Output f32_4* %282 = OpVariable Output 
                                             %292 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %66 = OpVariable Function 
                                Function f32* %92 = OpVariable Function 
                               Function f32* %127 = OpVariable Function 
                               Function f32* %158 = OpVariable Function 
                             Function f32_3* %183 = OpVariable Function 
                             Function f32_3* %201 = OpVariable Function 
                             Function f32_4* %214 = OpVariable Function 
                             Function f32_3* %247 = OpVariable Function 
                             Function f32_3* %257 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                 Private f32* %40 = OpAccessChain %26 %22 
                                                      OpStore %40 %39 
                                 Private f32* %43 = OpAccessChain %9 %22 
                                          f32 %44 = OpLoad %43 
                                          f32 %45 = OpFNegate %44 
                                          f32 %47 = OpFAdd %45 %46 
                                 Private f32* %48 = OpAccessChain %42 %22 
                                                      OpStore %48 %47 
                   read_only Texture2DSampled %50 = OpLoad %49 
                                        f32_4 %51 = OpLoad %16 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                                      OpStore %9 %53 
                                 Private f32* %60 = OpAccessChain %9 %59 
                                          f32 %61 = OpLoad %60 
                                         bool %62 = OpFOrdLessThan %58 %61 
                                       bool_2 %63 = OpLoad %57 
                                       bool_2 %64 = OpCompositeInsert %62 %63 0 
                                                      OpStore %57 %64 
                                       bool_2 %67 = OpLoad %57 
                                         bool %68 = OpCompositeExtract %67 0 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %73 
                                              %69 = OpLabel 
                                 Private f32* %71 = OpAccessChain %26 %22 
                                          f32 %72 = OpLoad %71 
                                                      OpStore %66 %72 
                                                      OpBranch %70 
                                              %73 = OpLabel 
                                                      OpStore %66 %74 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                          f32 %75 = OpLoad %66 
                                 Private f32* %76 = OpAccessChain %26 %22 
                                                      OpStore %76 %75 
                                 Private f32* %79 = OpAccessChain %9 %59 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdLessThan %80 %81 
                                                      OpStore %78 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                               Uniform f32_4* %88 = OpAccessChain %33 %86 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                                         bool %93 = OpLoad %78 
                                                      OpSelectionMerge %95 None 
                                                      OpBranchConditional %93 %94 %98 
                                              %94 = OpLabel 
                                 Private f32* %96 = OpAccessChain %42 %22 
                                          f32 %97 = OpLoad %96 
                                                      OpStore %92 %97 
                                                      OpBranch %95 
                                              %98 = OpLabel 
                                 Private f32* %99 = OpAccessChain %26 %22 
                                         f32 %100 = OpLoad %99 
                                                      OpStore %92 %100 
                                                      OpBranch %95 
                                              %95 = OpLabel 
                                         f32 %101 = OpLoad %92 
                                Private f32* %102 = OpAccessChain %26 %22 
                                                      OpStore %102 %101 
                                Private f32* %103 = OpAccessChain %26 %22 
                                         f32 %104 = OpLoad %103 
                                        bool %105 = OpFOrdLessThan %104 %74 
                                                      OpStore %78 %105 
                                Uniform f32* %107 = OpAccessChain %33 %106 
                                         f32 %108 = OpLoad %107 
                                       f32_2 %109 = OpCompositeConstruct %108 %108 
                                       f32_2 %113 = OpFMul %109 %112 
                                       f32_3 %114 = OpLoad %42 
                                       f32_3 %115 = OpVectorShuffle %114 %113 3 4 2 
                                                      OpStore %42 %115 
                                Private f32* %116 = OpAccessChain %42 %22 
                                         f32 %117 = OpLoad %116 
                                Private f32* %118 = OpAccessChain %26 %22 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdLessThan %117 %119 
                                      bool_2 %121 = OpLoad %57 
                                      bool_2 %122 = OpCompositeInsert %120 %121 0 
                                                      OpStore %57 %122 
                                        bool %123 = OpLoad %78 
                                      bool_2 %124 = OpLoad %57 
                                        bool %125 = OpCompositeExtract %124 0 
                                        bool %126 = OpLogicalAnd %123 %125 
                                                      OpStore %78 %126 
                                        bool %128 = OpLoad %78 
                                                      OpSelectionMerge %130 None 
                                                      OpBranchConditional %128 %129 %132 
                                             %129 = OpLabel 
                                                      OpStore %127 %131 
                                                      OpBranch %130 
                                             %132 = OpLabel 
                                Private f32* %133 = OpAccessChain %26 %22 
                                         f32 %134 = OpLoad %133 
                                                      OpStore %127 %134 
                                                      OpBranch %130 
                                             %130 = OpLabel 
                                         f32 %135 = OpLoad %127 
                                Private f32* %137 = OpAccessChain %42 %136 
                                                      OpStore %137 %135 
                                       f32_3 %138 = OpLoad %42 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 1 2 2 
                                       f32_3 %140 = OpLoad %42 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 2 0 0 
                                      bool_4 %143 = OpFOrdLessThan %139 %141 
                                      bool_2 %144 = OpVectorShuffle %143 %143 0 1 
                                                      OpStore %57 %144 
                                      bool_2 %145 = OpLoad %57 
                                        bool %146 = OpCompositeExtract %145 1 
                                      bool_2 %147 = OpLoad %57 
                                        bool %148 = OpCompositeExtract %147 0 
                                        bool %149 = OpLogicalAnd %146 %148 
                                      bool_2 %150 = OpLoad %57 
                                      bool_2 %151 = OpCompositeInsert %149 %150 0 
                                                      OpStore %57 %151 
                                        bool %153 = OpLoad %78 
                                      bool_2 %154 = OpLoad %57 
                                        bool %155 = OpCompositeExtract %154 0 
                                        bool %156 = OpLogicalOr %153 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %162 
                                             %160 = OpLabel 
                                                      OpStore %158 %131 
                                                      OpBranch %161 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %26 %22 
                                         f32 %164 = OpLoad %163 
                                                      OpStore %158 %164 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                         f32 %165 = OpLoad %158 
                                Private f32* %166 = OpAccessChain %157 %59 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %157 %59 
                                         f32 %168 = OpLoad %167 
                                Private f32* %170 = OpAccessChain %42 %169 
                                         f32 %171 = OpLoad %170 
                                        bool %172 = OpFOrdLessThan %168 %171 
                                                      OpStore %152 %172 
                                Uniform f32* %174 = OpAccessChain %33 %106 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %157 %59 
                                         f32 %177 = OpLoad %176 
                                        bool %178 = OpFOrdLessThan %175 %177 
                                                      OpStore %173 %178 
                                        bool %179 = OpLoad %173 
                                        bool %180 = OpLoad %152 
                                        bool %181 = OpLogicalAnd %179 %180 
                                                      OpStore %152 %181 
                                        bool %184 = OpLoad %78 
                                                      OpSelectionMerge %186 None 
                                                      OpBranchConditional %184 %185 %191 
                                             %185 = OpLabel 
                              Uniform f32_3* %189 = OpAccessChain %33 %187 
                                       f32_3 %190 = OpLoad %189 
                                                      OpStore %183 %190 
                                                      OpBranch %186 
                                             %191 = OpLabel 
                                       f32_3 %192 = OpLoad %83 
                                                      OpStore %183 %192 
                                                      OpBranch %186 
                                             %186 = OpLabel 
                                       f32_3 %193 = OpLoad %183 
                                       f32_4 %194 = OpLoad %26 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %26 %195 
                              Uniform f32_3* %196 = OpAccessChain %33 %187 
                                       f32_3 %197 = OpLoad %196 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %83 %200 
                                      bool_2 %202 = OpLoad %57 
                                        bool %203 = OpCompositeExtract %202 0 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %207 
                                             %204 = OpLabel 
                                       f32_3 %206 = OpLoad %83 
                                                      OpStore %201 %206 
                                                      OpBranch %205 
                                             %207 = OpLabel 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore %201 %209 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                       f32_3 %210 = OpLoad %201 
                                       f32_4 %211 = OpLoad %157 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %157 %212 
                                        bool %215 = OpLoad %152 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %219 
                                             %216 = OpLabel 
                                                      OpStore %214 %218 
                                                      OpBranch %217 
                                             %219 = OpLabel 
                                       f32_4 %220 = OpLoad %157 
                                                      OpStore %214 %220 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %221 = OpLoad %214 
                                                      OpStore %26 %221 
                                Private f32* %222 = OpAccessChain %26 %59 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %225 = OpAccessChain %33 %224 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                Private f32* %229 = OpAccessChain %157 %22 
                                                      OpStore %229 %228 
                                Private f32* %231 = OpAccessChain %157 %22 
                                         f32 %232 = OpLoad %231 
                                        bool %233 = OpFOrdLessThan %232 %74 
                                                      OpStore %230 %233 
                                        bool %234 = OpLoad %230 
                                         i32 %235 = OpSelect %234 %187 %86 
                                         i32 %237 = OpIMul %235 %236 
                                        bool %238 = OpINotEqual %237 %86 
                                                      OpSelectionMerge %240 None 
                                                      OpBranchConditional %238 %239 %240 
                                             %239 = OpLabel 
                                                      OpKill
                                             %240 = OpLabel 
                              Uniform f32_3* %242 = OpAccessChain %33 %187 
                                       f32_3 %243 = OpLoad %242 
                                       f32_3 %246 = OpFMul %243 %245 
                                                      OpStore %83 %246 
                                        bool %248 = OpLoad %78 
                                                      OpSelectionMerge %250 None 
                                                      OpBranchConditional %248 %249 %252 
                                             %249 = OpLabel 
                                       f32_3 %251 = OpLoad %83 
                                                      OpStore %247 %251 
                                                      OpBranch %250 
                                             %252 = OpLabel 
                                                      OpStore %247 %253 
                                                      OpBranch %250 
                                             %250 = OpLabel 
                                       f32_3 %254 = OpLoad %247 
                                       f32_4 %255 = OpLoad %157 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
                                                      OpStore %157 %256 
                                      bool_2 %258 = OpLoad %57 
                                        bool %259 = OpCompositeExtract %258 0 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %262 
                                             %260 = OpLabel 
                                                      OpStore %257 %253 
                                                      OpBranch %261 
                                             %262 = OpLabel 
                                       f32_4 %263 = OpLoad %157 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %257 %264 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                       f32_3 %265 = OpLoad %257 
                                       f32_4 %266 = OpLoad %157 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %157 %267 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %273 = OpLoad %272 
                                       f32_3 %274 = OpFMul %270 %273 
                                       f32_4 %275 = OpLoad %268 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %268 %276 
                                Private f32* %277 = OpAccessChain %268 %59 
                                                      OpStore %277 %74 
                                       f32_4 %278 = OpLoad %26 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %268 %280 
                                       f32_4 %283 = OpLoad %157 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %268 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %282 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %282 %289 
                                Private f32* %290 = OpAccessChain %268 %59 
                                         f32 %291 = OpLoad %290 
                                 Output f32* %293 = OpAccessChain %282 %59 
                                                      OpStore %293 %291 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  GpuProgramID 82241
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec2 u_xlat3;
bool u_xlatb3;
bool u_xlatb6;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat3.x = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb6 = 0.300000012<u_xlat10_1.w;
    u_xlat3.x = u_xlatb6 ? u_xlat3.x : float(0.0);
    u_xlatb6 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb6) ? u_xlat0.x : u_xlat3.x;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat3.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb9 = u_xlat3.x<u_xlat1.w;
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz;
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.x;
    u_xlatb3 = u_xlat3.y<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.y;
    u_xlatb3 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat0 = (bool(u_xlatb0)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat1.x = u_xlat0.w + (-Zero);
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 166
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                                             %160 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                 Output f32* %161 = OpAccessChain %85 %23 %81 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                 Output f32* %164 = OpAccessChain %85 %23 %81 
                                                      OpStore %164 %163 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %40 = OpTypePointer Private %30 
                               Private f32_3* %41 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %48 = OpVariable UniformConstant 
                                              %53 = OpTypeBool 
                                              %54 = OpTypeVector %53 2 
                                              %55 = OpTypePointer Private %54 
                              Private bool_2* %56 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          u32 %58 = OpConstant 3 
                                              %64 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %53 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Uniform %7 
                                         i32 %100 = OpConstant 2 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %104 %105 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         u32 %128 = OpConstant 2 
                                             %134 = OpTypeVector %53 4 
                               Private bool* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Function %30 
                                         i32 %155 = OpConstant 1 
                                             %156 = OpTypePointer Uniform %30 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %173 = OpConstant 1 
                               Private bool* %177 = OpVariable Private 
                              Private f32_3* %186 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                             %203 = OpTypePointer Function %7 
                                       f32_4 %208 = OpConstantComposite %72 %72 %72 %124 
                                         i32 %214 = OpConstant 4 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                         i32 %229 = OpConstant -1 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %65 = OpVariable Function 
                                Function f32* %89 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %163 = OpVariable Function 
                             Function f32_3* %192 = OpVariable Function 
                             Function f32_4* %204 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                                      OpStore %26 %39 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFNegate %43 
                                          f32 %46 = OpFAdd %44 %45 
                                 Private f32* %47 = OpAccessChain %41 %22 
                                                      OpStore %47 %46 
                   read_only Texture2DSampled %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %16 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                                      OpStore %9 %52 
                                 Private f32* %59 = OpAccessChain %9 %58 
                                          f32 %60 = OpLoad %59 
                                         bool %61 = OpFOrdLessThan %57 %60 
                                       bool_2 %62 = OpLoad %56 
                                       bool_2 %63 = OpCompositeInsert %61 %62 0 
                                                      OpStore %56 %63 
                                       bool_2 %66 = OpLoad %56 
                                         bool %67 = OpCompositeExtract %66 0 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                          f32 %70 = OpLoad %26 
                                                      OpStore %65 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %65 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %65 
                                                      OpStore %26 %73 
                                 Private f32* %76 = OpAccessChain %9 %58 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               Uniform f32_4* %85 = OpAccessChain %33 %83 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                                         bool %90 = OpLoad %75 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %95 
                                              %91 = OpLabel 
                                 Private f32* %93 = OpAccessChain %41 %22 
                                          f32 %94 = OpLoad %93 
                                                      OpStore %89 %94 
                                                      OpBranch %92 
                                              %95 = OpLabel 
                                          f32 %96 = OpLoad %26 
                                                      OpStore %89 %96 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %97 = OpLoad %89 
                                                      OpStore %26 %97 
                                          f32 %98 = OpLoad %26 
                                         bool %99 = OpFOrdLessThan %98 %72 
                                                      OpStore %75 %99 
                                Uniform f32* %101 = OpAccessChain %33 %100 
                                         f32 %102 = OpLoad %101 
                                       f32_2 %103 = OpCompositeConstruct %102 %102 
                                       f32_2 %107 = OpFMul %103 %106 
                                       f32_3 %108 = OpLoad %41 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %41 %109 
                                Private f32* %110 = OpAccessChain %41 %22 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpLoad %26 
                                        bool %113 = OpFOrdLessThan %111 %112 
                                      bool_2 %114 = OpLoad %56 
                                      bool_2 %115 = OpCompositeInsert %113 %114 0 
                                                      OpStore %56 %115 
                                        bool %116 = OpLoad %75 
                                      bool_2 %117 = OpLoad %56 
                                        bool %118 = OpCompositeExtract %117 0 
                                        bool %119 = OpLogicalAnd %116 %118 
                                                      OpStore %75 %119 
                                        bool %121 = OpLoad %75 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                         f32 %126 = OpLoad %26 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                         f32 %127 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %128 
                                                      OpStore %129 %127 
                                       f32_3 %130 = OpLoad %41 
                                       f32_4 %131 = OpVectorShuffle %130 %130 2 1 2 2 
                                       f32_3 %132 = OpLoad %41 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 2 0 0 
                                      bool_4 %135 = OpFOrdLessThan %131 %133 
                                      bool_2 %136 = OpVectorShuffle %135 %135 0 1 
                                                      OpStore %56 %136 
                                      bool_2 %137 = OpLoad %56 
                                        bool %138 = OpCompositeExtract %137 1 
                                      bool_2 %139 = OpLoad %56 
                                        bool %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpLogicalAnd %138 %140 
                                      bool_2 %142 = OpLoad %56 
                                      bool_2 %143 = OpCompositeInsert %141 %142 0 
                                                      OpStore %56 %143 
                                        bool %145 = OpLoad %75 
                                      bool_2 %146 = OpLoad %56 
                                        bool %147 = OpCompositeExtract %146 0 
                                        bool %148 = OpLogicalOr %145 %147 
                                                      OpStore %144 %148 
                                        bool %152 = OpLoad %75 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %159 
                                             %153 = OpLabel 
                              Uniform f32_3* %157 = OpAccessChain %33 %155 
                                       f32_3 %158 = OpLoad %157 
                                                      OpStore %151 %158 
                                                      OpBranch %154 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %80 
                                                      OpStore %151 %160 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %161 = OpLoad %151 
                                                      OpStore %149 %161 
                                        bool %164 = OpLoad %144 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %167 
                                             %165 = OpLabel 
                                                      OpStore %163 %124 
                                                      OpBranch %166 
                                             %167 = OpLabel 
                                         f32 %168 = OpLoad %26 
                                                      OpStore %163 %168 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %169 = OpLoad %163 
                                Private f32* %170 = OpAccessChain %162 %58 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %162 %58 
                                         f32 %172 = OpLoad %171 
                                Private f32* %174 = OpAccessChain %41 %173 
                                         f32 %175 = OpLoad %174 
                                        bool %176 = OpFOrdLessThan %172 %175 
                                                      OpStore %144 %176 
                                Uniform f32* %178 = OpAccessChain %33 %100 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %162 %58 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %177 %182 
                                        bool %183 = OpLoad %177 
                                        bool %184 = OpLoad %144 
                                        bool %185 = OpLogicalAnd %183 %184 
                                                      OpStore %144 %185 
                              Uniform f32_3* %187 = OpAccessChain %33 %155 
                                       f32_3 %188 = OpLoad %187 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                      bool_2 %193 = OpLoad %56 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %198 
                                             %195 = OpLabel 
                                       f32_3 %197 = OpLoad %186 
                                                      OpStore %192 %197 
                                                      OpBranch %196 
                                             %198 = OpLabel 
                                       f32_3 %199 = OpLoad %149 
                                                      OpStore %192 %199 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                       f32_3 %200 = OpLoad %192 
                                       f32_4 %201 = OpLoad %162 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %162 %202 
                                        bool %205 = OpLoad %144 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                                      OpStore %204 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                       f32_4 %210 = OpLoad %162 
                                                      OpStore %204 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_4 %211 = OpLoad %204 
                                                      OpStore %162 %211 
                                Private f32* %212 = OpAccessChain %162 %58 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %215 = OpAccessChain %33 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %213 %217 
                                                      OpStore %26 %218 
                                       f32_4 %221 = OpLoad %162 
                                                      OpStore %220 %221 
                                         f32 %222 = OpLoad %26 
                                        bool %223 = OpFOrdLessThan %222 %72 
                                      bool_2 %224 = OpLoad %56 
                                      bool_2 %225 = OpCompositeInsert %223 %224 0 
                                                      OpStore %56 %225 
                                      bool_2 %226 = OpLoad %56 
                                        bool %227 = OpCompositeExtract %226 0 
                                         i32 %228 = OpSelect %227 %155 %83 
                                         i32 %230 = OpIMul %228 %229 
                                        bool %231 = OpINotEqual %230 %83 
                                                      OpSelectionMerge %233 None 
                                                      OpBranchConditional %231 %232 %233 
                                             %232 = OpLabel 
                                                      OpKill
                                             %233 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec2 u_xlat3;
bool u_xlatb3;
bool u_xlatb6;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat3.x = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb6 = 0.300000012<u_xlat10_1.w;
    u_xlat3.x = u_xlatb6 ? u_xlat3.x : float(0.0);
    u_xlatb6 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb6) ? u_xlat0.x : u_xlat3.x;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat3.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb9 = u_xlat3.x<u_xlat1.w;
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz;
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.x;
    u_xlatb3 = u_xlat3.y<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.y;
    u_xlatb3 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat0 = (bool(u_xlatb0)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat1.x = u_xlat0.w + (-Zero);
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 166
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                                             %160 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                 Output f32* %161 = OpAccessChain %85 %23 %81 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                 Output f32* %164 = OpAccessChain %85 %23 %81 
                                                      OpStore %164 %163 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %40 = OpTypePointer Private %30 
                               Private f32_3* %41 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %48 = OpVariable UniformConstant 
                                              %53 = OpTypeBool 
                                              %54 = OpTypeVector %53 2 
                                              %55 = OpTypePointer Private %54 
                              Private bool_2* %56 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          u32 %58 = OpConstant 3 
                                              %64 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %53 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Uniform %7 
                                         i32 %100 = OpConstant 2 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %104 %105 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         u32 %128 = OpConstant 2 
                                             %134 = OpTypeVector %53 4 
                               Private bool* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Function %30 
                                         i32 %155 = OpConstant 1 
                                             %156 = OpTypePointer Uniform %30 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %173 = OpConstant 1 
                               Private bool* %177 = OpVariable Private 
                              Private f32_3* %186 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                             %203 = OpTypePointer Function %7 
                                       f32_4 %208 = OpConstantComposite %72 %72 %72 %124 
                                         i32 %214 = OpConstant 4 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                         i32 %229 = OpConstant -1 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %65 = OpVariable Function 
                                Function f32* %89 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %163 = OpVariable Function 
                             Function f32_3* %192 = OpVariable Function 
                             Function f32_4* %204 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                                      OpStore %26 %39 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFNegate %43 
                                          f32 %46 = OpFAdd %44 %45 
                                 Private f32* %47 = OpAccessChain %41 %22 
                                                      OpStore %47 %46 
                   read_only Texture2DSampled %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %16 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                                      OpStore %9 %52 
                                 Private f32* %59 = OpAccessChain %9 %58 
                                          f32 %60 = OpLoad %59 
                                         bool %61 = OpFOrdLessThan %57 %60 
                                       bool_2 %62 = OpLoad %56 
                                       bool_2 %63 = OpCompositeInsert %61 %62 0 
                                                      OpStore %56 %63 
                                       bool_2 %66 = OpLoad %56 
                                         bool %67 = OpCompositeExtract %66 0 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                          f32 %70 = OpLoad %26 
                                                      OpStore %65 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %65 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %65 
                                                      OpStore %26 %73 
                                 Private f32* %76 = OpAccessChain %9 %58 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               Uniform f32_4* %85 = OpAccessChain %33 %83 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                                         bool %90 = OpLoad %75 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %95 
                                              %91 = OpLabel 
                                 Private f32* %93 = OpAccessChain %41 %22 
                                          f32 %94 = OpLoad %93 
                                                      OpStore %89 %94 
                                                      OpBranch %92 
                                              %95 = OpLabel 
                                          f32 %96 = OpLoad %26 
                                                      OpStore %89 %96 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %97 = OpLoad %89 
                                                      OpStore %26 %97 
                                          f32 %98 = OpLoad %26 
                                         bool %99 = OpFOrdLessThan %98 %72 
                                                      OpStore %75 %99 
                                Uniform f32* %101 = OpAccessChain %33 %100 
                                         f32 %102 = OpLoad %101 
                                       f32_2 %103 = OpCompositeConstruct %102 %102 
                                       f32_2 %107 = OpFMul %103 %106 
                                       f32_3 %108 = OpLoad %41 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %41 %109 
                                Private f32* %110 = OpAccessChain %41 %22 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpLoad %26 
                                        bool %113 = OpFOrdLessThan %111 %112 
                                      bool_2 %114 = OpLoad %56 
                                      bool_2 %115 = OpCompositeInsert %113 %114 0 
                                                      OpStore %56 %115 
                                        bool %116 = OpLoad %75 
                                      bool_2 %117 = OpLoad %56 
                                        bool %118 = OpCompositeExtract %117 0 
                                        bool %119 = OpLogicalAnd %116 %118 
                                                      OpStore %75 %119 
                                        bool %121 = OpLoad %75 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                         f32 %126 = OpLoad %26 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                         f32 %127 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %128 
                                                      OpStore %129 %127 
                                       f32_3 %130 = OpLoad %41 
                                       f32_4 %131 = OpVectorShuffle %130 %130 2 1 2 2 
                                       f32_3 %132 = OpLoad %41 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 2 0 0 
                                      bool_4 %135 = OpFOrdLessThan %131 %133 
                                      bool_2 %136 = OpVectorShuffle %135 %135 0 1 
                                                      OpStore %56 %136 
                                      bool_2 %137 = OpLoad %56 
                                        bool %138 = OpCompositeExtract %137 1 
                                      bool_2 %139 = OpLoad %56 
                                        bool %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpLogicalAnd %138 %140 
                                      bool_2 %142 = OpLoad %56 
                                      bool_2 %143 = OpCompositeInsert %141 %142 0 
                                                      OpStore %56 %143 
                                        bool %145 = OpLoad %75 
                                      bool_2 %146 = OpLoad %56 
                                        bool %147 = OpCompositeExtract %146 0 
                                        bool %148 = OpLogicalOr %145 %147 
                                                      OpStore %144 %148 
                                        bool %152 = OpLoad %75 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %159 
                                             %153 = OpLabel 
                              Uniform f32_3* %157 = OpAccessChain %33 %155 
                                       f32_3 %158 = OpLoad %157 
                                                      OpStore %151 %158 
                                                      OpBranch %154 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %80 
                                                      OpStore %151 %160 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %161 = OpLoad %151 
                                                      OpStore %149 %161 
                                        bool %164 = OpLoad %144 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %167 
                                             %165 = OpLabel 
                                                      OpStore %163 %124 
                                                      OpBranch %166 
                                             %167 = OpLabel 
                                         f32 %168 = OpLoad %26 
                                                      OpStore %163 %168 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %169 = OpLoad %163 
                                Private f32* %170 = OpAccessChain %162 %58 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %162 %58 
                                         f32 %172 = OpLoad %171 
                                Private f32* %174 = OpAccessChain %41 %173 
                                         f32 %175 = OpLoad %174 
                                        bool %176 = OpFOrdLessThan %172 %175 
                                                      OpStore %144 %176 
                                Uniform f32* %178 = OpAccessChain %33 %100 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %162 %58 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %177 %182 
                                        bool %183 = OpLoad %177 
                                        bool %184 = OpLoad %144 
                                        bool %185 = OpLogicalAnd %183 %184 
                                                      OpStore %144 %185 
                              Uniform f32_3* %187 = OpAccessChain %33 %155 
                                       f32_3 %188 = OpLoad %187 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                      bool_2 %193 = OpLoad %56 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %198 
                                             %195 = OpLabel 
                                       f32_3 %197 = OpLoad %186 
                                                      OpStore %192 %197 
                                                      OpBranch %196 
                                             %198 = OpLabel 
                                       f32_3 %199 = OpLoad %149 
                                                      OpStore %192 %199 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                       f32_3 %200 = OpLoad %192 
                                       f32_4 %201 = OpLoad %162 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %162 %202 
                                        bool %205 = OpLoad %144 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                                      OpStore %204 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                       f32_4 %210 = OpLoad %162 
                                                      OpStore %204 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_4 %211 = OpLoad %204 
                                                      OpStore %162 %211 
                                Private f32* %212 = OpAccessChain %162 %58 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %215 = OpAccessChain %33 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %213 %217 
                                                      OpStore %26 %218 
                                       f32_4 %221 = OpLoad %162 
                                                      OpStore %220 %221 
                                         f32 %222 = OpLoad %26 
                                        bool %223 = OpFOrdLessThan %222 %72 
                                      bool_2 %224 = OpLoad %56 
                                      bool_2 %225 = OpCompositeInsert %223 %224 0 
                                                      OpStore %56 %225 
                                      bool_2 %226 = OpLoad %56 
                                        bool %227 = OpCompositeExtract %226 0 
                                         i32 %228 = OpSelect %227 %155 %83 
                                         i32 %230 = OpIMul %228 %229 
                                        bool %231 = OpINotEqual %230 %83 
                                                      OpSelectionMerge %233 None 
                                                      OpBranchConditional %231 %232 %233 
                                             %232 = OpLabel 
                                                      OpKill
                                             %233 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec2 u_xlat3;
bool u_xlatb3;
bool u_xlatb6;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat3.x = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb6 = 0.300000012<u_xlat10_1.w;
    u_xlat3.x = u_xlatb6 ? u_xlat3.x : float(0.0);
    u_xlatb6 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb6) ? u_xlat0.x : u_xlat3.x;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat3.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb9 = u_xlat3.x<u_xlat1.w;
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz;
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.x;
    u_xlatb3 = u_xlat3.y<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.y;
    u_xlatb3 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat0 = (bool(u_xlatb0)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat1.x = u_xlat0.w + (-Zero);
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 166
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                                             %160 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                 Output f32* %161 = OpAccessChain %85 %23 %81 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                 Output f32* %164 = OpAccessChain %85 %23 %81 
                                                      OpStore %164 %163 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %40 = OpTypePointer Private %30 
                               Private f32_3* %41 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %48 = OpVariable UniformConstant 
                                              %53 = OpTypeBool 
                                              %54 = OpTypeVector %53 2 
                                              %55 = OpTypePointer Private %54 
                              Private bool_2* %56 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          u32 %58 = OpConstant 3 
                                              %64 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %53 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Uniform %7 
                                         i32 %100 = OpConstant 2 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %104 %105 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         u32 %128 = OpConstant 2 
                                             %134 = OpTypeVector %53 4 
                               Private bool* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Function %30 
                                         i32 %155 = OpConstant 1 
                                             %156 = OpTypePointer Uniform %30 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %173 = OpConstant 1 
                               Private bool* %177 = OpVariable Private 
                              Private f32_3* %186 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                             %203 = OpTypePointer Function %7 
                                       f32_4 %208 = OpConstantComposite %72 %72 %72 %124 
                                         i32 %214 = OpConstant 4 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                         i32 %229 = OpConstant -1 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %65 = OpVariable Function 
                                Function f32* %89 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %163 = OpVariable Function 
                             Function f32_3* %192 = OpVariable Function 
                             Function f32_4* %204 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                                      OpStore %26 %39 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFNegate %43 
                                          f32 %46 = OpFAdd %44 %45 
                                 Private f32* %47 = OpAccessChain %41 %22 
                                                      OpStore %47 %46 
                   read_only Texture2DSampled %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %16 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                                      OpStore %9 %52 
                                 Private f32* %59 = OpAccessChain %9 %58 
                                          f32 %60 = OpLoad %59 
                                         bool %61 = OpFOrdLessThan %57 %60 
                                       bool_2 %62 = OpLoad %56 
                                       bool_2 %63 = OpCompositeInsert %61 %62 0 
                                                      OpStore %56 %63 
                                       bool_2 %66 = OpLoad %56 
                                         bool %67 = OpCompositeExtract %66 0 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                          f32 %70 = OpLoad %26 
                                                      OpStore %65 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %65 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %65 
                                                      OpStore %26 %73 
                                 Private f32* %76 = OpAccessChain %9 %58 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               Uniform f32_4* %85 = OpAccessChain %33 %83 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                                         bool %90 = OpLoad %75 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %95 
                                              %91 = OpLabel 
                                 Private f32* %93 = OpAccessChain %41 %22 
                                          f32 %94 = OpLoad %93 
                                                      OpStore %89 %94 
                                                      OpBranch %92 
                                              %95 = OpLabel 
                                          f32 %96 = OpLoad %26 
                                                      OpStore %89 %96 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %97 = OpLoad %89 
                                                      OpStore %26 %97 
                                          f32 %98 = OpLoad %26 
                                         bool %99 = OpFOrdLessThan %98 %72 
                                                      OpStore %75 %99 
                                Uniform f32* %101 = OpAccessChain %33 %100 
                                         f32 %102 = OpLoad %101 
                                       f32_2 %103 = OpCompositeConstruct %102 %102 
                                       f32_2 %107 = OpFMul %103 %106 
                                       f32_3 %108 = OpLoad %41 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %41 %109 
                                Private f32* %110 = OpAccessChain %41 %22 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpLoad %26 
                                        bool %113 = OpFOrdLessThan %111 %112 
                                      bool_2 %114 = OpLoad %56 
                                      bool_2 %115 = OpCompositeInsert %113 %114 0 
                                                      OpStore %56 %115 
                                        bool %116 = OpLoad %75 
                                      bool_2 %117 = OpLoad %56 
                                        bool %118 = OpCompositeExtract %117 0 
                                        bool %119 = OpLogicalAnd %116 %118 
                                                      OpStore %75 %119 
                                        bool %121 = OpLoad %75 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                         f32 %126 = OpLoad %26 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                         f32 %127 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %128 
                                                      OpStore %129 %127 
                                       f32_3 %130 = OpLoad %41 
                                       f32_4 %131 = OpVectorShuffle %130 %130 2 1 2 2 
                                       f32_3 %132 = OpLoad %41 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 2 0 0 
                                      bool_4 %135 = OpFOrdLessThan %131 %133 
                                      bool_2 %136 = OpVectorShuffle %135 %135 0 1 
                                                      OpStore %56 %136 
                                      bool_2 %137 = OpLoad %56 
                                        bool %138 = OpCompositeExtract %137 1 
                                      bool_2 %139 = OpLoad %56 
                                        bool %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpLogicalAnd %138 %140 
                                      bool_2 %142 = OpLoad %56 
                                      bool_2 %143 = OpCompositeInsert %141 %142 0 
                                                      OpStore %56 %143 
                                        bool %145 = OpLoad %75 
                                      bool_2 %146 = OpLoad %56 
                                        bool %147 = OpCompositeExtract %146 0 
                                        bool %148 = OpLogicalOr %145 %147 
                                                      OpStore %144 %148 
                                        bool %152 = OpLoad %75 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %159 
                                             %153 = OpLabel 
                              Uniform f32_3* %157 = OpAccessChain %33 %155 
                                       f32_3 %158 = OpLoad %157 
                                                      OpStore %151 %158 
                                                      OpBranch %154 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %80 
                                                      OpStore %151 %160 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %161 = OpLoad %151 
                                                      OpStore %149 %161 
                                        bool %164 = OpLoad %144 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %167 
                                             %165 = OpLabel 
                                                      OpStore %163 %124 
                                                      OpBranch %166 
                                             %167 = OpLabel 
                                         f32 %168 = OpLoad %26 
                                                      OpStore %163 %168 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %169 = OpLoad %163 
                                Private f32* %170 = OpAccessChain %162 %58 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %162 %58 
                                         f32 %172 = OpLoad %171 
                                Private f32* %174 = OpAccessChain %41 %173 
                                         f32 %175 = OpLoad %174 
                                        bool %176 = OpFOrdLessThan %172 %175 
                                                      OpStore %144 %176 
                                Uniform f32* %178 = OpAccessChain %33 %100 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %162 %58 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %177 %182 
                                        bool %183 = OpLoad %177 
                                        bool %184 = OpLoad %144 
                                        bool %185 = OpLogicalAnd %183 %184 
                                                      OpStore %144 %185 
                              Uniform f32_3* %187 = OpAccessChain %33 %155 
                                       f32_3 %188 = OpLoad %187 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                      bool_2 %193 = OpLoad %56 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %198 
                                             %195 = OpLabel 
                                       f32_3 %197 = OpLoad %186 
                                                      OpStore %192 %197 
                                                      OpBranch %196 
                                             %198 = OpLabel 
                                       f32_3 %199 = OpLoad %149 
                                                      OpStore %192 %199 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                       f32_3 %200 = OpLoad %192 
                                       f32_4 %201 = OpLoad %162 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %162 %202 
                                        bool %205 = OpLoad %144 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                                      OpStore %204 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                       f32_4 %210 = OpLoad %162 
                                                      OpStore %204 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_4 %211 = OpLoad %204 
                                                      OpStore %162 %211 
                                Private f32* %212 = OpAccessChain %162 %58 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %215 = OpAccessChain %33 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %213 %217 
                                                      OpStore %26 %218 
                                       f32_4 %221 = OpLoad %162 
                                                      OpStore %220 %221 
                                         f32 %222 = OpLoad %26 
                                        bool %223 = OpFOrdLessThan %222 %72 
                                      bool_2 %224 = OpLoad %56 
                                      bool_2 %225 = OpCompositeInsert %223 %224 0 
                                                      OpStore %56 %225 
                                      bool_2 %226 = OpLoad %56 
                                        bool %227 = OpCompositeExtract %226 0 
                                         i32 %228 = OpSelect %227 %155 %83 
                                         i32 %230 = OpIMul %228 %229 
                                        bool %231 = OpINotEqual %230 %83 
                                                      OpSelectionMerge %233 None 
                                                      OpBranchConditional %231 %232 %233 
                                             %232 = OpLabel 
                                                      OpKill
                                             %233 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec2 u_xlat3;
bool u_xlatb3;
bool u_xlatb6;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat3.x = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb6 = 0.300000012<u_xlat10_1.w;
    u_xlat3.x = u_xlatb6 ? u_xlat3.x : float(0.0);
    u_xlatb6 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb6) ? u_xlat0.x : u_xlat3.x;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat3.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb9 = u_xlat3.x<u_xlat1.w;
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz;
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.x;
    u_xlatb3 = u_xlat3.y<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.y;
    u_xlatb3 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat0 = (bool(u_xlatb0)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat1.x = u_xlat0.w + (-Zero);
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 166
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                                             %160 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                 Output f32* %161 = OpAccessChain %85 %23 %81 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                 Output f32* %164 = OpAccessChain %85 %23 %81 
                                                      OpStore %164 %163 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %40 = OpTypePointer Private %30 
                               Private f32_3* %41 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %48 = OpVariable UniformConstant 
                                              %53 = OpTypeBool 
                                              %54 = OpTypeVector %53 2 
                                              %55 = OpTypePointer Private %54 
                              Private bool_2* %56 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          u32 %58 = OpConstant 3 
                                              %64 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %53 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Uniform %7 
                                         i32 %100 = OpConstant 2 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %104 %105 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         u32 %128 = OpConstant 2 
                                             %134 = OpTypeVector %53 4 
                               Private bool* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Function %30 
                                         i32 %155 = OpConstant 1 
                                             %156 = OpTypePointer Uniform %30 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %173 = OpConstant 1 
                               Private bool* %177 = OpVariable Private 
                              Private f32_3* %186 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                             %203 = OpTypePointer Function %7 
                                       f32_4 %208 = OpConstantComposite %72 %72 %72 %124 
                                         i32 %214 = OpConstant 4 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                         i32 %229 = OpConstant -1 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %65 = OpVariable Function 
                                Function f32* %89 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %163 = OpVariable Function 
                             Function f32_3* %192 = OpVariable Function 
                             Function f32_4* %204 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                                      OpStore %26 %39 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFNegate %43 
                                          f32 %46 = OpFAdd %44 %45 
                                 Private f32* %47 = OpAccessChain %41 %22 
                                                      OpStore %47 %46 
                   read_only Texture2DSampled %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %16 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                                      OpStore %9 %52 
                                 Private f32* %59 = OpAccessChain %9 %58 
                                          f32 %60 = OpLoad %59 
                                         bool %61 = OpFOrdLessThan %57 %60 
                                       bool_2 %62 = OpLoad %56 
                                       bool_2 %63 = OpCompositeInsert %61 %62 0 
                                                      OpStore %56 %63 
                                       bool_2 %66 = OpLoad %56 
                                         bool %67 = OpCompositeExtract %66 0 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                          f32 %70 = OpLoad %26 
                                                      OpStore %65 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %65 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %65 
                                                      OpStore %26 %73 
                                 Private f32* %76 = OpAccessChain %9 %58 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               Uniform f32_4* %85 = OpAccessChain %33 %83 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                                         bool %90 = OpLoad %75 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %95 
                                              %91 = OpLabel 
                                 Private f32* %93 = OpAccessChain %41 %22 
                                          f32 %94 = OpLoad %93 
                                                      OpStore %89 %94 
                                                      OpBranch %92 
                                              %95 = OpLabel 
                                          f32 %96 = OpLoad %26 
                                                      OpStore %89 %96 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %97 = OpLoad %89 
                                                      OpStore %26 %97 
                                          f32 %98 = OpLoad %26 
                                         bool %99 = OpFOrdLessThan %98 %72 
                                                      OpStore %75 %99 
                                Uniform f32* %101 = OpAccessChain %33 %100 
                                         f32 %102 = OpLoad %101 
                                       f32_2 %103 = OpCompositeConstruct %102 %102 
                                       f32_2 %107 = OpFMul %103 %106 
                                       f32_3 %108 = OpLoad %41 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %41 %109 
                                Private f32* %110 = OpAccessChain %41 %22 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpLoad %26 
                                        bool %113 = OpFOrdLessThan %111 %112 
                                      bool_2 %114 = OpLoad %56 
                                      bool_2 %115 = OpCompositeInsert %113 %114 0 
                                                      OpStore %56 %115 
                                        bool %116 = OpLoad %75 
                                      bool_2 %117 = OpLoad %56 
                                        bool %118 = OpCompositeExtract %117 0 
                                        bool %119 = OpLogicalAnd %116 %118 
                                                      OpStore %75 %119 
                                        bool %121 = OpLoad %75 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                         f32 %126 = OpLoad %26 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                         f32 %127 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %128 
                                                      OpStore %129 %127 
                                       f32_3 %130 = OpLoad %41 
                                       f32_4 %131 = OpVectorShuffle %130 %130 2 1 2 2 
                                       f32_3 %132 = OpLoad %41 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 2 0 0 
                                      bool_4 %135 = OpFOrdLessThan %131 %133 
                                      bool_2 %136 = OpVectorShuffle %135 %135 0 1 
                                                      OpStore %56 %136 
                                      bool_2 %137 = OpLoad %56 
                                        bool %138 = OpCompositeExtract %137 1 
                                      bool_2 %139 = OpLoad %56 
                                        bool %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpLogicalAnd %138 %140 
                                      bool_2 %142 = OpLoad %56 
                                      bool_2 %143 = OpCompositeInsert %141 %142 0 
                                                      OpStore %56 %143 
                                        bool %145 = OpLoad %75 
                                      bool_2 %146 = OpLoad %56 
                                        bool %147 = OpCompositeExtract %146 0 
                                        bool %148 = OpLogicalOr %145 %147 
                                                      OpStore %144 %148 
                                        bool %152 = OpLoad %75 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %159 
                                             %153 = OpLabel 
                              Uniform f32_3* %157 = OpAccessChain %33 %155 
                                       f32_3 %158 = OpLoad %157 
                                                      OpStore %151 %158 
                                                      OpBranch %154 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %80 
                                                      OpStore %151 %160 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %161 = OpLoad %151 
                                                      OpStore %149 %161 
                                        bool %164 = OpLoad %144 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %167 
                                             %165 = OpLabel 
                                                      OpStore %163 %124 
                                                      OpBranch %166 
                                             %167 = OpLabel 
                                         f32 %168 = OpLoad %26 
                                                      OpStore %163 %168 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %169 = OpLoad %163 
                                Private f32* %170 = OpAccessChain %162 %58 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %162 %58 
                                         f32 %172 = OpLoad %171 
                                Private f32* %174 = OpAccessChain %41 %173 
                                         f32 %175 = OpLoad %174 
                                        bool %176 = OpFOrdLessThan %172 %175 
                                                      OpStore %144 %176 
                                Uniform f32* %178 = OpAccessChain %33 %100 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %162 %58 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %177 %182 
                                        bool %183 = OpLoad %177 
                                        bool %184 = OpLoad %144 
                                        bool %185 = OpLogicalAnd %183 %184 
                                                      OpStore %144 %185 
                              Uniform f32_3* %187 = OpAccessChain %33 %155 
                                       f32_3 %188 = OpLoad %187 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                      bool_2 %193 = OpLoad %56 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %198 
                                             %195 = OpLabel 
                                       f32_3 %197 = OpLoad %186 
                                                      OpStore %192 %197 
                                                      OpBranch %196 
                                             %198 = OpLabel 
                                       f32_3 %199 = OpLoad %149 
                                                      OpStore %192 %199 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                       f32_3 %200 = OpLoad %192 
                                       f32_4 %201 = OpLoad %162 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %162 %202 
                                        bool %205 = OpLoad %144 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                                      OpStore %204 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                       f32_4 %210 = OpLoad %162 
                                                      OpStore %204 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_4 %211 = OpLoad %204 
                                                      OpStore %162 %211 
                                Private f32* %212 = OpAccessChain %162 %58 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %215 = OpAccessChain %33 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %213 %217 
                                                      OpStore %26 %218 
                                       f32_4 %221 = OpLoad %162 
                                                      OpStore %220 %221 
                                         f32 %222 = OpLoad %26 
                                        bool %223 = OpFOrdLessThan %222 %72 
                                      bool_2 %224 = OpLoad %56 
                                      bool_2 %225 = OpCompositeInsert %223 %224 0 
                                                      OpStore %56 %225 
                                      bool_2 %226 = OpLoad %56 
                                        bool %227 = OpCompositeExtract %226 0 
                                         i32 %228 = OpSelect %227 %155 %83 
                                         i32 %230 = OpIMul %228 %229 
                                        bool %231 = OpINotEqual %230 %83 
                                                      OpSelectionMerge %233 None 
                                                      OpBranchConditional %231 %232 %233 
                                             %232 = OpLabel 
                                                      OpKill
                                             %233 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec2 u_xlat3;
bool u_xlatb3;
bool u_xlatb6;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat3.x = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb6 = 0.300000012<u_xlat10_1.w;
    u_xlat3.x = u_xlatb6 ? u_xlat3.x : float(0.0);
    u_xlatb6 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb6) ? u_xlat0.x : u_xlat3.x;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat3.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb9 = u_xlat3.x<u_xlat1.w;
    u_xlatb0 = u_xlatb9 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz;
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.x;
    u_xlatb3 = u_xlat3.y<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat2.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat2.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat2 : u_xlat1;
    u_xlatb0 = u_xlat1.w<u_xlat3.y;
    u_xlatb3 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    u_xlat0 = (bool(u_xlatb0)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat1.x = u_xlat0.w + (-Zero);
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 166
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %95 %96 %124 %154 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %124 Location 124 
                                                      OpDecorate %154 Location 154 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                Output f32_4* %95 = OpVariable Output 
                                 Input f32_4* %96 = OpVariable Input 
                                              %97 = OpTypeVector %6 2 
                                         i32 %112 = OpConstant 4 
                                             %123 = OpTypePointer Input %50 
                                Input f32_3* %124 = OpVariable Input 
                                         u32 %130 = OpConstant 0 
                                             %131 = OpTypePointer Private %6 
                                         u32 %144 = OpConstant 2 
                                Private f32* %146 = OpVariable Private 
                               Output f32_3* %154 = OpVariable Output 
                                             %160 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %98 = OpLoad %96 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 1 
                              Uniform f32_4* %100 = OpAccessChain %21 %46 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFMul %99 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %46 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 2 3 
                                       f32_2 %107 = OpFAdd %103 %106 
                                       f32_4 %108 = OpLoad %95 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 3 
                                                      OpStore %95 %109 
                                       f32_4 %110 = OpLoad %96 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_2 %116 = OpFMul %111 %115 
                              Uniform f32_4* %117 = OpAccessChain %21 %112 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 2 3 
                                       f32_2 %120 = OpFAdd %116 %119 
                                       f32_4 %121 = OpLoad %95 
                                       f32_4 %122 = OpVectorShuffle %121 %120 0 1 4 5 
                                                      OpStore %95 %122 
                                       f32_3 %125 = OpLoad %124 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %23 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %132 = OpAccessChain %9 %130 
                                                      OpStore %132 %129 
                                       f32_3 %133 = OpLoad %124 
                              Uniform f32_4* %134 = OpAccessChain %21 %24 %24 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %138 = OpAccessChain %9 %81 
                                                      OpStore %138 %137 
                                       f32_3 %139 = OpLoad %124 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %139 %142 
                                Private f32* %145 = OpAccessChain %9 %144 
                                                      OpStore %145 %143 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %155 = OpLoad %146 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                                      OpStore %154 %159 
                                 Output f32* %161 = OpAccessChain %85 %23 %81 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                 Output f32* %164 = OpAccessChain %85 %23 %81 
                                                      OpStore %164 %163 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 RelaxedPrecision 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 RelaxedPrecision 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 RelaxedPrecision 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %149 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeStruct %7 %30 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_3; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 3 
                                              %36 = OpTypePointer Uniform %6 
                                              %40 = OpTypePointer Private %30 
                               Private f32_3* %41 = OpVariable Private 
                                          f32 %45 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %48 = OpVariable UniformConstant 
                                              %53 = OpTypeBool 
                                              %54 = OpTypeVector %53 2 
                                              %55 = OpTypePointer Private %54 
                              Private bool_2* %56 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          u32 %58 = OpConstant 3 
                                              %64 = OpTypePointer Function %6 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %53 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 0 
                                              %84 = OpTypePointer Uniform %7 
                                         i32 %100 = OpConstant 2 
                                         f32 %104 = OpConstant 3.674022E-40 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %104 %105 
                                         f32 %124 = OpConstant 3.674022E-40 
                                         u32 %128 = OpConstant 2 
                                             %134 = OpTypeVector %53 4 
                               Private bool* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                             %150 = OpTypePointer Function %30 
                                         i32 %155 = OpConstant 1 
                                             %156 = OpTypePointer Uniform %30 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %173 = OpConstant 1 
                               Private bool* %177 = OpVariable Private 
                              Private f32_3* %186 = OpVariable Private 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_3 %190 = OpConstantComposite %189 %189 %189 
                                             %203 = OpTypePointer Function %7 
                                       f32_4 %208 = OpConstantComposite %72 %72 %72 %124 
                                         i32 %214 = OpConstant 4 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                         i32 %229 = OpConstant -1 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %65 = OpVariable Function 
                                Function f32* %89 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %163 = OpVariable Function 
                             Function f32_3* %192 = OpVariable Function 
                             Function f32_4* %204 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFAdd %29 %38 
                                                      OpStore %26 %39 
                                 Private f32* %42 = OpAccessChain %9 %22 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFNegate %43 
                                          f32 %46 = OpFAdd %44 %45 
                                 Private f32* %47 = OpAccessChain %41 %22 
                                                      OpStore %47 %46 
                   read_only Texture2DSampled %49 = OpLoad %48 
                                        f32_4 %50 = OpLoad %16 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                                      OpStore %9 %52 
                                 Private f32* %59 = OpAccessChain %9 %58 
                                          f32 %60 = OpLoad %59 
                                         bool %61 = OpFOrdLessThan %57 %60 
                                       bool_2 %62 = OpLoad %56 
                                       bool_2 %63 = OpCompositeInsert %61 %62 0 
                                                      OpStore %56 %63 
                                       bool_2 %66 = OpLoad %56 
                                         bool %67 = OpCompositeExtract %66 0 
                                                      OpSelectionMerge %69 None 
                                                      OpBranchConditional %67 %68 %71 
                                              %68 = OpLabel 
                                          f32 %70 = OpLoad %26 
                                                      OpStore %65 %70 
                                                      OpBranch %69 
                                              %71 = OpLabel 
                                                      OpStore %65 %72 
                                                      OpBranch %69 
                                              %69 = OpLabel 
                                          f32 %73 = OpLoad %65 
                                                      OpStore %26 %73 
                                 Private f32* %76 = OpAccessChain %9 %58 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               Uniform f32_4* %85 = OpAccessChain %33 %83 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                                         bool %90 = OpLoad %75 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %95 
                                              %91 = OpLabel 
                                 Private f32* %93 = OpAccessChain %41 %22 
                                          f32 %94 = OpLoad %93 
                                                      OpStore %89 %94 
                                                      OpBranch %92 
                                              %95 = OpLabel 
                                          f32 %96 = OpLoad %26 
                                                      OpStore %89 %96 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                          f32 %97 = OpLoad %89 
                                                      OpStore %26 %97 
                                          f32 %98 = OpLoad %26 
                                         bool %99 = OpFOrdLessThan %98 %72 
                                                      OpStore %75 %99 
                                Uniform f32* %101 = OpAccessChain %33 %100 
                                         f32 %102 = OpLoad %101 
                                       f32_2 %103 = OpCompositeConstruct %102 %102 
                                       f32_2 %107 = OpFMul %103 %106 
                                       f32_3 %108 = OpLoad %41 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %41 %109 
                                Private f32* %110 = OpAccessChain %41 %22 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpLoad %26 
                                        bool %113 = OpFOrdLessThan %111 %112 
                                      bool_2 %114 = OpLoad %56 
                                      bool_2 %115 = OpCompositeInsert %113 %114 0 
                                                      OpStore %56 %115 
                                        bool %116 = OpLoad %75 
                                      bool_2 %117 = OpLoad %56 
                                        bool %118 = OpCompositeExtract %117 0 
                                        bool %119 = OpLogicalAnd %116 %118 
                                                      OpStore %75 %119 
                                        bool %121 = OpLoad %75 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                         f32 %126 = OpLoad %26 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                         f32 %127 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %128 
                                                      OpStore %129 %127 
                                       f32_3 %130 = OpLoad %41 
                                       f32_4 %131 = OpVectorShuffle %130 %130 2 1 2 2 
                                       f32_3 %132 = OpLoad %41 
                                       f32_4 %133 = OpVectorShuffle %132 %132 0 2 0 0 
                                      bool_4 %135 = OpFOrdLessThan %131 %133 
                                      bool_2 %136 = OpVectorShuffle %135 %135 0 1 
                                                      OpStore %56 %136 
                                      bool_2 %137 = OpLoad %56 
                                        bool %138 = OpCompositeExtract %137 1 
                                      bool_2 %139 = OpLoad %56 
                                        bool %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpLogicalAnd %138 %140 
                                      bool_2 %142 = OpLoad %56 
                                      bool_2 %143 = OpCompositeInsert %141 %142 0 
                                                      OpStore %56 %143 
                                        bool %145 = OpLoad %75 
                                      bool_2 %146 = OpLoad %56 
                                        bool %147 = OpCompositeExtract %146 0 
                                        bool %148 = OpLogicalOr %145 %147 
                                                      OpStore %144 %148 
                                        bool %152 = OpLoad %75 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %159 
                                             %153 = OpLabel 
                              Uniform f32_3* %157 = OpAccessChain %33 %155 
                                       f32_3 %158 = OpLoad %157 
                                                      OpStore %151 %158 
                                                      OpBranch %154 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %80 
                                                      OpStore %151 %160 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %161 = OpLoad %151 
                                                      OpStore %149 %161 
                                        bool %164 = OpLoad %144 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %167 
                                             %165 = OpLabel 
                                                      OpStore %163 %124 
                                                      OpBranch %166 
                                             %167 = OpLabel 
                                         f32 %168 = OpLoad %26 
                                                      OpStore %163 %168 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %169 = OpLoad %163 
                                Private f32* %170 = OpAccessChain %162 %58 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %162 %58 
                                         f32 %172 = OpLoad %171 
                                Private f32* %174 = OpAccessChain %41 %173 
                                         f32 %175 = OpLoad %174 
                                        bool %176 = OpFOrdLessThan %172 %175 
                                                      OpStore %144 %176 
                                Uniform f32* %178 = OpAccessChain %33 %100 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %162 %58 
                                         f32 %181 = OpLoad %180 
                                        bool %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %177 %182 
                                        bool %183 = OpLoad %177 
                                        bool %184 = OpLoad %144 
                                        bool %185 = OpLogicalAnd %183 %184 
                                                      OpStore %144 %185 
                              Uniform f32_3* %187 = OpAccessChain %33 %155 
                                       f32_3 %188 = OpLoad %187 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                      bool_2 %193 = OpLoad %56 
                                        bool %194 = OpCompositeExtract %193 0 
                                                      OpSelectionMerge %196 None 
                                                      OpBranchConditional %194 %195 %198 
                                             %195 = OpLabel 
                                       f32_3 %197 = OpLoad %186 
                                                      OpStore %192 %197 
                                                      OpBranch %196 
                                             %198 = OpLabel 
                                       f32_3 %199 = OpLoad %149 
                                                      OpStore %192 %199 
                                                      OpBranch %196 
                                             %196 = OpLabel 
                                       f32_3 %200 = OpLoad %192 
                                       f32_4 %201 = OpLoad %162 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %162 %202 
                                        bool %205 = OpLoad %144 
                                                      OpSelectionMerge %207 None 
                                                      OpBranchConditional %205 %206 %209 
                                             %206 = OpLabel 
                                                      OpStore %204 %208 
                                                      OpBranch %207 
                                             %209 = OpLabel 
                                       f32_4 %210 = OpLoad %162 
                                                      OpStore %204 %210 
                                                      OpBranch %207 
                                             %207 = OpLabel 
                                       f32_4 %211 = OpLoad %204 
                                                      OpStore %162 %211 
                                Private f32* %212 = OpAccessChain %162 %58 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %215 = OpAccessChain %33 %214 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %213 %217 
                                                      OpStore %26 %218 
                                       f32_4 %221 = OpLoad %162 
                                                      OpStore %220 %221 
                                         f32 %222 = OpLoad %26 
                                        bool %223 = OpFOrdLessThan %222 %72 
                                      bool_2 %224 = OpLoad %56 
                                      bool_2 %225 = OpCompositeInsert %223 %224 0 
                                                      OpStore %56 %225 
                                      bool_2 %226 = OpLoad %56 
                                        bool %227 = OpCompositeExtract %226 0 
                                         i32 %228 = OpSelect %227 %155 %83 
                                         i32 %230 = OpIMul %228 %229 
                                        bool %231 = OpINotEqual %230 %83 
                                                      OpSelectionMerge %233 None 
                                                      OpBranchConditional %231 %232 %233 
                                             %232 = OpLabel 
                                                      OpKill
                                             %233 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "SHADOWCASTER"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  GpuProgramID 150037
Program "vp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
out vec3 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec3 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
float u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
bool u_xlatb2;
vec2 u_xlat4;
bool u_xlatb4;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlatb0 = 0.300000012<u_xlat10_0.w;
    u_xlatb2 = u_xlat10_0.w<0.75;
    u_xlat10_1 = texture(_DissolveTex, vs_TEXCOORD1.zw);
    u_xlat4.x = (-u_xlat10_1.x) + _DissolvePower;
    u_xlat6 = (-u_xlat10_1.x) + 0.200000003;
    u_xlat0 = u_xlatb0 ? u_xlat4.x : float(0.0);
    u_xlat0 = (u_xlatb2) ? u_xlat6 : u_xlat0;
    u_xlatb2 = u_xlat0<0.0;
    u_xlat4.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb1 = u_xlat4.x<u_xlat0;
    u_xlatb2 = u_xlatb2 && u_xlatb1;
    u_xlat1 = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlatb4 = u_xlat1<u_xlat4.x;
    u_xlatb1 = u_xlat4.y<u_xlat1;
    u_xlatb4 = u_xlatb4 && u_xlatb1;
    u_xlatb2 = u_xlatb4 || u_xlatb2;
    u_xlat4.x = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlatb6 = u_xlat4.x<u_xlat4.y;
    u_xlatb4 = _DissolveEmissionThickness<u_xlat4.x;
    u_xlatb4 = u_xlatb4 && u_xlatb6;
    u_xlatb2 = u_xlatb4 || u_xlatb2;
    u_xlat0 = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlat0 = u_xlat0 + (-Zero);
    u_xlatb0 = u_xlat0<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0 = sqrt(u_xlat0);
    u_xlat0 = u_xlat0 + unity_LightShadowBias.x;
    SV_Target0 = vec4(u_xlat0) * _LightPositionRange.wwww;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 167
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %68 %123 %133 %134 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %68 Location 68 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %134 Location 134 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeStruct %7 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %43 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                              %67 = OpTypePointer Output %12 
                                Output f32_3* %68 = OpVariable Output 
                               Private f32_4* %99 = OpVariable Private 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %6 %119 
                                             %121 = OpTypeStruct %7 %6 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %131 = OpTypePointer Output %7 
                               Output f32_4* %133 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %135 = OpTypeVector %6 2 
                                         i32 %150 = OpConstant 4 
                                             %161 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %14 %27 
                                        f32_4 %29 = OpLoad %9 
                                        f32_4 %30 = OpVectorShuffle %29 %28 4 5 6 3 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %21 %23 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %11 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %9 %42 
                               Uniform f32_4* %44 = OpAccessChain %21 %23 %43 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_4 %47 = OpLoad %11 
                                        f32_3 %48 = OpVectorShuffle %47 %47 2 2 2 
                                        f32_3 %49 = OpFMul %46 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_3 %52 = OpFAdd %49 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                                      OpStore %9 %54 
                               Uniform f32_4* %56 = OpAccessChain %21 %23 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                        f32_4 %59 = OpLoad %11 
                                        f32_3 %60 = OpVectorShuffle %59 %59 3 3 3 
                                        f32_3 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFAdd %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %9 %66 
                                        f32_4 %69 = OpLoad %9 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               Uniform f32_4* %71 = OpAccessChain %21 %31 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFNegate %73 
                                        f32_3 %75 = OpFAdd %70 %74 
                                                      OpStore %68 %75 
                                        f32_4 %76 = OpLoad %11 
                                        f32_4 %77 = OpVectorShuffle %76 %76 1 1 1 1 
                               Uniform f32_4* %78 = OpAccessChain %21 %23 %23 
                                        f32_4 %79 = OpLoad %78 
                                        f32_4 %80 = OpFMul %77 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %23 %31 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %11 
                                        f32_4 %84 = OpVectorShuffle %83 %83 0 0 0 0 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                               Uniform f32_4* %88 = OpAccessChain %21 %23 %43 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %11 
                                        f32_4 %91 = OpVectorShuffle %90 %90 2 2 2 2 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %9 %94 
                                        f32_4 %95 = OpLoad %9 
                               Uniform f32_4* %96 = OpAccessChain %21 %23 %55 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                                                      OpStore %9 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %21 %43 %23 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %101 %103 
                                                      OpStore %99 %104 
                              Uniform f32_4* %105 = OpAccessChain %21 %43 %31 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %99 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %99 %111 
                              Uniform f32_4* %112 = OpAccessChain %21 %43 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 2 2 2 2 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %99 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %99 %118 
                              Uniform f32_4* %124 = OpAccessChain %21 %43 %55 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %99 
                                       f32_4 %130 = OpFAdd %128 %129 
                               Output f32_4* %132 = OpAccessChain %123 %31 
                                                      OpStore %132 %130 
                                       f32_4 %136 = OpLoad %134 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %138 = OpAccessChain %21 %55 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                                       f32_2 %141 = OpFMul %137 %140 
                              Uniform f32_4* %142 = OpAccessChain %21 %55 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_2 %145 = OpFAdd %141 %144 
                                       f32_4 %146 = OpLoad %133 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 2 3 
                                                      OpStore %133 %147 
                                       f32_4 %148 = OpLoad %134 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                              Uniform f32_4* %151 = OpAccessChain %21 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFMul %149 %153 
                              Uniform f32_4* %155 = OpAccessChain %21 %150 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                                       f32_2 %158 = OpFAdd %154 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_4 %160 = OpVectorShuffle %159 %158 0 1 4 5 
                                                      OpStore %133 %160 
                                 Output f32* %162 = OpAccessChain %123 %31 %119 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                 Output f32* %165 = OpAccessChain %123 %31 %119 
                                                      OpStore %165 %164 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 223
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %197 %220 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpMemberDecorate %53 0 Offset 53 
                                                      OpMemberDecorate %53 1 Offset 53 
                                                      OpMemberDecorate %53 2 RelaxedPrecision 
                                                      OpMemberDecorate %53 2 Offset 53 
                                                      OpMemberDecorate %53 3 RelaxedPrecision 
                                                      OpMemberDecorate %53 3 Offset 53 
                                                      OpMemberDecorate %53 4 RelaxedPrecision 
                                                      OpMemberDecorate %53 4 Offset 53 
                                                      OpDecorate %53 Block 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %151 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                          u32 %24 = OpConstant 0 
                                              %25 = OpTypePointer Private %6 
                                              %27 = OpTypeBool 
                                              %28 = OpTypeVector %27 2 
                                              %29 = OpTypePointer Private %28 
                              Private bool_2* %30 = OpVariable Private 
                                          f32 %31 = OpConstant 3.674022E-40 
                                              %37 = OpTypePointer Private %27 
                                Private bool* %38 = OpVariable Private 
                                          f32 %41 = OpConstant 3.674022E-40 
                                 Private f32* %43 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %44 = OpVariable UniformConstant 
                                 Private f32* %50 = OpVariable Private 
                                              %53 = OpTypeStruct %7 %7 %6 %6 %6 
                                              %54 = OpTypePointer Uniform %53 
Uniform struct {f32_4; f32_4; f32; f32; f32;}* %55 = OpVariable Uniform 
                                              %56 = OpTypeInt 32 1 
                                          i32 %57 = OpConstant 3 
                                              %58 = OpTypePointer Uniform %6 
                                              %62 = OpTypeVector %6 3 
                                              %63 = OpTypePointer Private %62 
                               Private f32_3* %64 = OpVariable Private 
                                          f32 %67 = OpConstant 3.674022E-40 
                                              %70 = OpTypePointer Function %6 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %91 = OpConstant 2 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_2 %97 = OpConstantComposite %95 %96 
                                         f32 %115 = OpConstant 3.674022E-40 
                                         u32 %119 = OpConstant 2 
                                             %125 = OpTypeVector %27 4 
                                         u32 %149 = OpConstant 1 
                               Private bool* %155 = OpVariable Private 
                                         i32 %179 = OpConstant 4 
                                         i32 %187 = OpConstant 0 
                                         i32 %188 = OpConstant 1 
                                         i32 %190 = OpConstant -1 
                                             %196 = OpTypePointer Input %62 
                                Input f32_3* %197 = OpVariable Input 
                                             %214 = OpTypePointer Uniform %7 
                                             %219 = OpTypePointer Output %7 
                               Output f32_4* %220 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %71 = OpVariable Function 
                                Function f32* %80 = OpVariable Function 
                               Function f32* %111 = OpVariable Function 
                               Function f32* %139 = OpVariable Function 
                               Function f32* %171 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 3 
                                 Private f32* %26 = OpAccessChain %9 %24 
                                                      OpStore %26 %23 
                                 Private f32* %32 = OpAccessChain %9 %24 
                                          f32 %33 = OpLoad %32 
                                         bool %34 = OpFOrdLessThan %31 %33 
                                       bool_2 %35 = OpLoad %30 
                                       bool_2 %36 = OpCompositeInsert %34 %35 0 
                                                      OpStore %30 %36 
                                 Private f32* %39 = OpAccessChain %9 %24 
                                          f32 %40 = OpLoad %39 
                                         bool %42 = OpFOrdLessThan %40 %41 
                                                      OpStore %38 %42 
                   read_only Texture2DSampled %45 = OpLoad %44 
                                        f32_4 %46 = OpLoad %16 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 3 
                                        f32_4 %48 = OpImageSampleImplicitLod %45 %47 
                                          f32 %49 = OpCompositeExtract %48 0 
                                                      OpStore %43 %49 
                                          f32 %51 = OpLoad %43 
                                          f32 %52 = OpFNegate %51 
                                 Uniform f32* %59 = OpAccessChain %55 %57 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFAdd %52 %60 
                                                      OpStore %50 %61 
                                          f32 %65 = OpLoad %43 
                                          f32 %66 = OpFNegate %65 
                                          f32 %68 = OpFAdd %66 %67 
                                 Private f32* %69 = OpAccessChain %64 %24 
                                                      OpStore %69 %68 
                                       bool_2 %72 = OpLoad %30 
                                         bool %73 = OpCompositeExtract %72 0 
                                                      OpSelectionMerge %75 None 
                                                      OpBranchConditional %73 %74 %77 
                                              %74 = OpLabel 
                                          f32 %76 = OpLoad %50 
                                                      OpStore %71 %76 
                                                      OpBranch %75 
                                              %77 = OpLabel 
                                                      OpStore %71 %78 
                                                      OpBranch %75 
                                              %75 = OpLabel 
                                          f32 %79 = OpLoad %71 
                                                      OpStore %50 %79 
                                         bool %81 = OpLoad %38 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %81 %82 %86 
                                              %82 = OpLabel 
                                 Private f32* %84 = OpAccessChain %64 %24 
                                          f32 %85 = OpLoad %84 
                                                      OpStore %80 %85 
                                                      OpBranch %83 
                                              %86 = OpLabel 
                                          f32 %87 = OpLoad %50 
                                                      OpStore %80 %87 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %88 = OpLoad %80 
                                                      OpStore %50 %88 
                                          f32 %89 = OpLoad %50 
                                         bool %90 = OpFOrdLessThan %89 %78 
                                                      OpStore %38 %90 
                                 Uniform f32* %92 = OpAccessChain %55 %91 
                                          f32 %93 = OpLoad %92 
                                        f32_2 %94 = OpCompositeConstruct %93 %93 
                                        f32_2 %98 = OpFMul %94 %97 
                                        f32_3 %99 = OpLoad %64 
                                       f32_3 %100 = OpVectorShuffle %99 %98 3 4 2 
                                                      OpStore %64 %100 
                                Private f32* %101 = OpAccessChain %64 %24 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpLoad %50 
                                        bool %104 = OpFOrdLessThan %102 %103 
                                      bool_2 %105 = OpLoad %30 
                                      bool_2 %106 = OpCompositeInsert %104 %105 0 
                                                      OpStore %30 %106 
                                      bool_2 %107 = OpLoad %30 
                                        bool %108 = OpCompositeExtract %107 0 
                                        bool %109 = OpLoad %38 
                                        bool %110 = OpLogicalAnd %108 %109 
                                                      OpStore %38 %110 
                                        bool %112 = OpLoad %38 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                         f32 %117 = OpLoad %50 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                         f32 %118 = OpLoad %111 
                                Private f32* %120 = OpAccessChain %64 %119 
                                                      OpStore %120 %118 
                                       f32_3 %121 = OpLoad %64 
                                       f32_4 %122 = OpVectorShuffle %121 %121 2 1 2 2 
                                       f32_3 %123 = OpLoad %64 
                                       f32_4 %124 = OpVectorShuffle %123 %123 0 2 0 0 
                                      bool_4 %126 = OpFOrdLessThan %122 %124 
                                      bool_2 %127 = OpVectorShuffle %126 %126 0 1 
                                                      OpStore %30 %127 
                                      bool_2 %128 = OpLoad %30 
                                        bool %129 = OpCompositeExtract %128 1 
                                      bool_2 %130 = OpLoad %30 
                                        bool %131 = OpCompositeExtract %130 0 
                                        bool %132 = OpLogicalAnd %129 %131 
                                      bool_2 %133 = OpLoad %30 
                                      bool_2 %134 = OpCompositeInsert %132 %133 0 
                                                      OpStore %30 %134 
                                      bool_2 %135 = OpLoad %30 
                                        bool %136 = OpCompositeExtract %135 0 
                                        bool %137 = OpLoad %38 
                                        bool %138 = OpLogicalOr %136 %137 
                                                      OpStore %38 %138 
                                        bool %140 = OpLoad %38 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %143 
                                             %141 = OpLabel 
                                                      OpStore %139 %115 
                                                      OpBranch %142 
                                             %143 = OpLabel 
                                         f32 %144 = OpLoad %50 
                                                      OpStore %139 %144 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                         f32 %145 = OpLoad %139 
                                Private f32* %146 = OpAccessChain %64 %24 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %64 %24 
                                         f32 %148 = OpLoad %147 
                                Private f32* %150 = OpAccessChain %64 %149 
                                         f32 %151 = OpLoad %150 
                                        bool %152 = OpFOrdLessThan %148 %151 
                                      bool_2 %153 = OpLoad %30 
                                      bool_2 %154 = OpCompositeInsert %152 %153 0 
                                                      OpStore %30 %154 
                                Uniform f32* %156 = OpAccessChain %55 %91 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %64 %24 
                                         f32 %159 = OpLoad %158 
                                        bool %160 = OpFOrdLessThan %157 %159 
                                                      OpStore %155 %160 
                                        bool %161 = OpLoad %155 
                                      bool_2 %162 = OpLoad %30 
                                        bool %163 = OpCompositeExtract %162 0 
                                        bool %164 = OpLogicalAnd %161 %163 
                                      bool_2 %165 = OpLoad %30 
                                      bool_2 %166 = OpCompositeInsert %164 %165 0 
                                                      OpStore %30 %166 
                                      bool_2 %167 = OpLoad %30 
                                        bool %168 = OpCompositeExtract %167 0 
                                        bool %169 = OpLoad %38 
                                        bool %170 = OpLogicalOr %168 %169 
                                                      OpStore %38 %170 
                                        bool %172 = OpLoad %38 
                                                      OpSelectionMerge %174 None 
                                                      OpBranchConditional %172 %173 %175 
                                             %173 = OpLabel 
                                                      OpStore %171 %115 
                                                      OpBranch %174 
                                             %175 = OpLabel 
                                         f32 %176 = OpLoad %50 
                                                      OpStore %171 %176 
                                                      OpBranch %174 
                                             %174 = OpLabel 
                                         f32 %177 = OpLoad %171 
                                                      OpStore %50 %177 
                                         f32 %178 = OpLoad %50 
                                Uniform f32* %180 = OpAccessChain %55 %179 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                         f32 %183 = OpFAdd %178 %182 
                                                      OpStore %50 %183 
                                         f32 %184 = OpLoad %50 
                                        bool %185 = OpFOrdLessThan %184 %78 
                                                      OpStore %38 %185 
                                        bool %186 = OpLoad %38 
                                         i32 %189 = OpSelect %186 %188 %187 
                                         i32 %191 = OpIMul %189 %190 
                                        bool %192 = OpINotEqual %191 %187 
                                                      OpSelectionMerge %194 None 
                                                      OpBranchConditional %192 %193 %194 
                                             %193 = OpLabel 
                                                      OpKill
                                             %194 = OpLabel 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpLoad %197 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %9 %24 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %9 %24 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 31 %203 
                                Private f32* %205 = OpAccessChain %9 %24 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %9 %24 
                                         f32 %207 = OpLoad %206 
                                Uniform f32* %208 = OpAccessChain %55 %188 %24 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFAdd %207 %209 
                                Private f32* %211 = OpAccessChain %9 %24 
                                                      OpStore %211 %210 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 0 0 0 
                              Uniform f32_4* %215 = OpAccessChain %55 %187 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpVectorShuffle %216 %216 3 3 3 3 
                                       f32_4 %218 = OpFMul %213 %217 
                                                      OpStore %9 %218 
                                       f32_4 %221 = OpLoad %9 
                                                      OpStore %220 %221 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlatb9 = unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
    gl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
float u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
bool u_xlatb2;
vec2 u_xlat4;
bool u_xlatb4;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlatb0 = 0.300000012<u_xlat10_0.w;
    u_xlatb2 = u_xlat10_0.w<0.75;
    u_xlat10_1 = texture(_DissolveTex, vs_TEXCOORD1.zw);
    u_xlat4.x = (-u_xlat10_1.x) + _DissolvePower;
    u_xlat6 = (-u_xlat10_1.x) + 0.200000003;
    u_xlat0 = u_xlatb0 ? u_xlat4.x : float(0.0);
    u_xlat0 = (u_xlatb2) ? u_xlat6 : u_xlat0;
    u_xlatb2 = u_xlat0<0.0;
    u_xlat4.xy = vec2(vec2(_DissolveEmissionThickness, _DissolveEmissionThickness)) * vec2(0.333333343, 0.5);
    u_xlatb1 = u_xlat4.x<u_xlat0;
    u_xlatb2 = u_xlatb2 && u_xlatb1;
    u_xlat1 = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlatb4 = u_xlat1<u_xlat4.x;
    u_xlatb1 = u_xlat4.y<u_xlat1;
    u_xlatb4 = u_xlatb4 && u_xlatb1;
    u_xlatb2 = u_xlatb4 || u_xlatb2;
    u_xlat4.x = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlatb6 = u_xlat4.x<u_xlat4.y;
    u_xlatb4 = _DissolveEmissionThickness<u_xlat4.x;
    u_xlatb4 = u_xlatb4 && u_xlatb6;
    u_xlatb2 = u_xlatb4 || u_xlatb2;
    u_xlat0 = (u_xlatb2) ? 1.0 : u_xlat0;
    u_xlat0 = u_xlat0 + (-Zero);
    u_xlatb0 = u_xlat0<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 283
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %66 %227 %249 %250 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %66 Location 66 
                                                      OpMemberDecorate %225 0 BuiltIn 225 
                                                      OpMemberDecorate %225 1 BuiltIn 225 
                                                      OpMemberDecorate %225 2 BuiltIn 225 
                                                      OpDecorate %225 Block 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %250 Location 250 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 3 
                                          i32 %24 = OpConstant 0 
                                              %25 = OpTypePointer Uniform %7 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          i32 %34 = OpConstant 1 
                                          u32 %39 = OpConstant 1 
                                          i32 %42 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                 Private f32* %49 = OpVariable Private 
                               Private f32_4* %64 = OpVariable Private 
                                              %65 = OpTypePointer Input %7 
                                 Input f32_4* %66 = OpVariable Input 
                               Private f32_4* %93 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Uniform %6 
                                             %150 = OpTypeBool 
                                             %151 = OpTypePointer Private %150 
                               Private bool* %152 = OpVariable Private 
                                         f32 %155 = OpConstant 3.674022E-40 
                                             %157 = OpTypePointer Function %10 
                                         i32 %172 = OpConstant 4 
                                         u32 %199 = OpConstant 3 
                                         f32 %210 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
                                             %224 = OpTypeArray %6 %39 
                                             %225 = OpTypeStruct %7 %6 %224 
                                             %226 = OpTypePointer Output %225 
        Output struct {f32_4; f32; f32[1];}* %227 = OpVariable Output 
                                             %230 = OpTypePointer Output %7 
                                             %247 = OpTypePointer Output %6 
                               Output f32_4* %249 = OpVariable Output 
                                Input f32_4* %250 = OpVariable Input 
                                             %251 = OpTypeVector %6 2 
                                         i32 %254 = OpConstant 5 
                                         i32 %267 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %158 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_3 %28 = OpVectorShuffle %27 %27 0 1 2 
                                          f32 %29 = OpDot %13 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %12 
                               Uniform f32_4* %35 = OpAccessChain %21 %23 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                          f32 %38 = OpDot %33 %37 
                                 Private f32* %40 = OpAccessChain %9 %39 
                                                      OpStore %40 %38 
                                        f32_3 %41 = OpLoad %12 
                               Uniform f32_4* %43 = OpAccessChain %21 %23 %42 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                          f32 %46 = OpDot %41 %45 
                                 Private f32* %48 = OpAccessChain %9 %47 
                                                      OpStore %48 %46 
                                        f32_4 %50 = OpLoad %9 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                          f32 %54 = OpDot %51 %53 
                                                      OpStore %49 %54 
                                          f32 %55 = OpLoad %49 
                                          f32 %56 = OpExtInst %1 32 %55 
                                                      OpStore %49 %56 
                                          f32 %57 = OpLoad %49 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                                      OpStore %9 %63 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %21 %42 %34 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %68 %70 
                                                      OpStore %64 %71 
                               Uniform f32_4* %72 = OpAccessChain %21 %42 %24 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %66 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %64 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %64 %78 
                               Uniform f32_4* %79 = OpAccessChain %21 %42 %42 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %64 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %64 %85 
                               Uniform f32_4* %86 = OpAccessChain %21 %42 %23 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %64 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %64 %92 
                                        f32_4 %94 = OpLoad %64 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFNegate %95 
                               Uniform f32_4* %97 = OpAccessChain %21 %24 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 3 3 3 
                                       f32_3 %100 = OpFMul %96 %99 
                              Uniform f32_4* %101 = OpAccessChain %21 %24 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %100 %103 
                                       f32_4 %105 = OpLoad %93 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 6 3 
                                                      OpStore %93 %106 
                                       f32_4 %107 = OpLoad %93 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %93 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %49 %111 
                                         f32 %112 = OpLoad %49 
                                         f32 %113 = OpExtInst %1 32 %112 
                                                      OpStore %49 %113 
                                         f32 %114 = OpLoad %49 
                                       f32_3 %115 = OpCompositeConstruct %114 %114 %114 
                                       f32_4 %116 = OpLoad %93 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %93 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %93 %120 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %93 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %122 %124 
                                                      OpStore %49 %125 
                                         f32 %126 = OpLoad %49 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpLoad %49 
                                         f32 %129 = OpFMul %127 %128 
                                         f32 %131 = OpFAdd %129 %130 
                                                      OpStore %49 %131 
                                         f32 %132 = OpLoad %49 
                                         f32 %133 = OpExtInst %1 31 %132 
                                                      OpStore %49 %133 
                                         f32 %134 = OpLoad %49 
                                Uniform f32* %136 = OpAccessChain %21 %34 %47 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %134 %137 
                                                      OpStore %49 %138 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFNegate %140 
                                         f32 %142 = OpLoad %49 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %64 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %9 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %9 %149 
                                Uniform f32* %153 = OpAccessChain %21 %34 %47 
                                         f32 %154 = OpLoad %153 
                                        bool %156 = OpFOrdNotEqual %154 %155 
                                                      OpStore %152 %156 
                                        bool %159 = OpLoad %152 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %164 
                                             %160 = OpLabel 
                                       f32_4 %162 = OpLoad %9 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                                      OpStore %158 %163 
                                                      OpBranch %161 
                                             %164 = OpLabel 
                                       f32_4 %165 = OpLoad %64 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %158 %166 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                       f32_3 %167 = OpLoad %158 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
                                                      OpStore %9 %169 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 1 1 1 
                              Uniform f32_4* %173 = OpAccessChain %21 %172 %34 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpFMul %171 %174 
                                                      OpStore %93 %175 
                              Uniform f32_4* %176 = OpAccessChain %21 %172 %24 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 0 0 0 
                                       f32_4 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %93 
                                       f32_4 %182 = OpFAdd %180 %181 
                                                      OpStore %93 %182 
                              Uniform f32_4* %183 = OpAccessChain %21 %172 %42 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %93 
                                       f32_4 %189 = OpFAdd %187 %188 
                                                      OpStore %9 %189 
                              Uniform f32_4* %190 = OpAccessChain %21 %172 %23 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %64 
                                       f32_4 %193 = OpVectorShuffle %192 %192 3 3 3 3 
                                       f32_4 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_4 %196 = OpFAdd %194 %195 
                                                      OpStore %9 %196 
                                Uniform f32* %197 = OpAccessChain %21 %34 %30 
                                         f32 %198 = OpLoad %197 
                                Private f32* %200 = OpAccessChain %9 %199 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFDiv %198 %201 
                                Private f32* %203 = OpAccessChain %64 %30 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %64 %30 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpExtInst %1 37 %205 %155 
                                Private f32* %207 = OpAccessChain %64 %30 
                                                      OpStore %207 %206 
                                Private f32* %208 = OpAccessChain %64 %30 
                                         f32 %209 = OpLoad %208 
                                         f32 %211 = OpExtInst %1 40 %209 %210 
                                Private f32* %212 = OpAccessChain %64 %30 
                                                      OpStore %212 %211 
                                Private f32* %214 = OpAccessChain %9 %47 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %64 %30 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %9 %199 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpLoad %213 
                                         f32 %222 = OpExtInst %1 37 %220 %221 
                                Private f32* %223 = OpAccessChain %64 %30 
                                                      OpStore %223 %222 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 3 
                               Output f32_4* %231 = OpAccessChain %227 %24 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpVectorShuffle %232 %229 4 5 2 6 
                                                      OpStore %231 %233 
                                         f32 %234 = OpLoad %213 
                                         f32 %235 = OpFNegate %234 
                                Private f32* %236 = OpAccessChain %64 %30 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFAdd %235 %237 
                                Private f32* %239 = OpAccessChain %9 %30 
                                                      OpStore %239 %238 
                                Uniform f32* %240 = OpAccessChain %21 %34 %39 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %9 %30 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %241 %243 
                                         f32 %245 = OpLoad %213 
                                         f32 %246 = OpFAdd %244 %245 
                                 Output f32* %248 = OpAccessChain %227 %24 %47 
                                                      OpStore %248 %246 
                                       f32_4 %252 = OpLoad %250 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                              Uniform f32_4* %255 = OpAccessChain %21 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_2 %258 = OpFMul %253 %257 
                              Uniform f32_4* %259 = OpAccessChain %21 %254 
                                       f32_4 %260 = OpLoad %259 
                                       f32_2 %261 = OpVectorShuffle %260 %260 2 3 
                                       f32_2 %262 = OpFAdd %258 %261 
                                       f32_4 %263 = OpLoad %249 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
                                                      OpStore %249 %264 
                                       f32_4 %265 = OpLoad %250 
                                       f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                              Uniform f32_4* %268 = OpAccessChain %21 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %271 = OpFMul %266 %270 
                              Uniform f32_4* %272 = OpAccessChain %21 %267 
                                       f32_4 %273 = OpLoad %272 
                                       f32_2 %274 = OpVectorShuffle %273 %273 2 3 
                                       f32_2 %275 = OpFAdd %271 %274 
                                       f32_4 %276 = OpLoad %249 
                                       f32_4 %277 = OpVectorShuffle %276 %275 0 1 4 5 
                                                      OpStore %249 %277 
                                 Output f32* %278 = OpAccessChain %227 %24 %39 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFNegate %279 
                                 Output f32* %281 = OpAccessChain %227 %24 %39 
                                                      OpStore %281 %280 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 194
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %16 %191 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %12 RelaxedPrecision 
                                                    OpDecorate %12 DescriptorSet 12 
                                                    OpDecorate %12 Binding 12 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %16 Location 16 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %39 DescriptorSet 39 
                                                    OpDecorate %39 Binding 39 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %46 RelaxedPrecision 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpMemberDecorate %49 0 RelaxedPrecision 
                                                    OpMemberDecorate %49 0 Offset 49 
                                                    OpMemberDecorate %49 1 RelaxedPrecision 
                                                    OpMemberDecorate %49 1 Offset 49 
                                                    OpMemberDecorate %49 2 RelaxedPrecision 
                                                    OpMemberDecorate %49 2 Offset 49 
                                                    OpDecorate %49 Block 
                                                    OpDecorate %51 DescriptorSet 51 
                                                    OpDecorate %51 Binding 51 
                                                    OpDecorate %56 RelaxedPrecision 
                                                    OpDecorate %57 RelaxedPrecision 
                                                    OpDecorate %60 RelaxedPrecision 
                                                    OpDecorate %61 RelaxedPrecision 
                                                    OpDecorate %62 RelaxedPrecision 
                                                    OpDecorate %64 RelaxedPrecision 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %75 RelaxedPrecision 
                                                    OpDecorate %81 RelaxedPrecision 
                                                    OpDecorate %83 RelaxedPrecision 
                                                    OpDecorate %84 RelaxedPrecision 
                                                    OpDecorate %85 RelaxedPrecision 
                                                    OpDecorate %89 RelaxedPrecision 
                                                    OpDecorate %90 RelaxedPrecision 
                                                    OpDecorate %94 RelaxedPrecision 
                                                    OpDecorate %98 RelaxedPrecision 
                                                    OpDecorate %99 RelaxedPrecision 
                                                    OpDecorate %113 RelaxedPrecision 
                                                    OpDecorate %114 RelaxedPrecision 
                                                    OpDecorate %117 RelaxedPrecision 
                                                    OpDecorate %118 RelaxedPrecision 
                                                    OpDecorate %119 RelaxedPrecision 
                                                    OpDecorate %120 RelaxedPrecision 
                                                    OpDecorate %122 RelaxedPrecision 
                                                    OpDecorate %140 RelaxedPrecision 
                                                    OpDecorate %141 RelaxedPrecision 
                                                    OpDecorate %144 RelaxedPrecision 
                                                    OpDecorate %147 RelaxedPrecision 
                                                    OpDecorate %153 RelaxedPrecision 
                                                    OpDecorate %155 RelaxedPrecision 
                                                    OpDecorate %172 RelaxedPrecision 
                                                    OpDecorate %173 RelaxedPrecision 
                                                    OpDecorate %174 RelaxedPrecision 
                                                    OpDecorate %177 RelaxedPrecision 
                                                    OpDecorate %178 RelaxedPrecision 
                                                    OpDecorate %179 RelaxedPrecision 
                                                    OpDecorate %180 RelaxedPrecision 
                                                    OpDecorate %191 RelaxedPrecision 
                                                    OpDecorate %191 Location 191 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypePointer Private %6 
                                Private f32* %8 = OpVariable Private 
                                             %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %10 = OpTypeSampledImage %9 
                                            %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2DSampled* %12 = OpVariable UniformConstant 
                                            %14 = OpTypeVector %6 4 
                                            %15 = OpTypePointer Input %14 
                               Input f32_4* %16 = OpVariable Input 
                                            %17 = OpTypeVector %6 2 
                                            %21 = OpTypeInt 32 0 
                                        u32 %22 = OpConstant 3 
                                            %24 = OpTypeBool 
                                            %25 = OpTypeVector %24 2 
                                            %26 = OpTypePointer Private %25 
                            Private bool_2* %27 = OpVariable Private 
                                        f32 %28 = OpConstant 3.674022E-40 
                                            %33 = OpTypePointer Private %24 
                              Private bool* %34 = OpVariable Private 
                                        f32 %36 = OpConstant 3.674022E-40 
                               Private f32* %38 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %39 = OpVariable UniformConstant 
                                        u32 %44 = OpConstant 0 
                               Private f32* %46 = OpVariable Private 
                                            %49 = OpTypeStruct %6 %6 %6 
                                            %50 = OpTypePointer Uniform %49 
           Uniform struct {f32; f32; f32;}* %51 = OpVariable Uniform 
                                            %52 = OpTypeInt 32 1 
                                        i32 %53 = OpConstant 1 
                                            %54 = OpTypePointer Uniform %6 
                                            %58 = OpTypeVector %6 3 
                                            %59 = OpTypePointer Private %58 
                             Private f32_3* %60 = OpVariable Private 
                                        f32 %63 = OpConstant 3.674022E-40 
                                            %66 = OpTypePointer Function %6 
                                        f32 %74 = OpConstant 3.674022E-40 
                                        i32 %87 = OpConstant 0 
                                        f32 %91 = OpConstant 3.674022E-40 
                                        f32 %92 = OpConstant 3.674022E-40 
                                      f32_2 %93 = OpConstantComposite %91 %92 
                                       f32 %111 = OpConstant 3.674022E-40 
                                       u32 %115 = OpConstant 2 
                                           %121 = OpTypeVector %24 4 
                                       u32 %145 = OpConstant 1 
                             Private bool* %151 = OpVariable Private 
                                       i32 %175 = OpConstant 2 
                                       i32 %184 = OpConstant -1 
                                           %190 = OpTypePointer Output %14 
                             Output f32_4* %191 = OpVariable Output 
                                     f32_4 %192 = OpConstantComposite %74 %74 %74 %74 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                              Function f32* %67 = OpVariable Function 
                              Function f32* %76 = OpVariable Function 
                             Function f32* %107 = OpVariable Function 
                             Function f32* %135 = OpVariable Function 
                             Function f32* %167 = OpVariable Function 
                 read_only Texture2DSampled %13 = OpLoad %12 
                                      f32_4 %18 = OpLoad %16 
                                      f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                      f32_4 %20 = OpImageSampleImplicitLod %13 %19 
                                        f32 %23 = OpCompositeExtract %20 3 
                                                    OpStore %8 %23 
                                        f32 %29 = OpLoad %8 
                                       bool %30 = OpFOrdLessThan %28 %29 
                                     bool_2 %31 = OpLoad %27 
                                     bool_2 %32 = OpCompositeInsert %30 %31 0 
                                                    OpStore %27 %32 
                                        f32 %35 = OpLoad %8 
                                       bool %37 = OpFOrdLessThan %35 %36 
                                                    OpStore %34 %37 
                 read_only Texture2DSampled %40 = OpLoad %39 
                                      f32_4 %41 = OpLoad %16 
                                      f32_2 %42 = OpVectorShuffle %41 %41 2 3 
                                      f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                        f32 %45 = OpCompositeExtract %43 0 
                                                    OpStore %38 %45 
                                        f32 %47 = OpLoad %38 
                                        f32 %48 = OpFNegate %47 
                               Uniform f32* %55 = OpAccessChain %51 %53 
                                        f32 %56 = OpLoad %55 
                                        f32 %57 = OpFAdd %48 %56 
                                                    OpStore %46 %57 
                                        f32 %61 = OpLoad %38 
                                        f32 %62 = OpFNegate %61 
                                        f32 %64 = OpFAdd %62 %63 
                               Private f32* %65 = OpAccessChain %60 %44 
                                                    OpStore %65 %64 
                                     bool_2 %68 = OpLoad %27 
                                       bool %69 = OpCompositeExtract %68 0 
                                                    OpSelectionMerge %71 None 
                                                    OpBranchConditional %69 %70 %73 
                                            %70 = OpLabel 
                                        f32 %72 = OpLoad %46 
                                                    OpStore %67 %72 
                                                    OpBranch %71 
                                            %73 = OpLabel 
                                                    OpStore %67 %74 
                                                    OpBranch %71 
                                            %71 = OpLabel 
                                        f32 %75 = OpLoad %67 
                                                    OpStore %46 %75 
                                       bool %77 = OpLoad %34 
                                                    OpSelectionMerge %79 None 
                                                    OpBranchConditional %77 %78 %82 
                                            %78 = OpLabel 
                               Private f32* %80 = OpAccessChain %60 %44 
                                        f32 %81 = OpLoad %80 
                                                    OpStore %76 %81 
                                                    OpBranch %79 
                                            %82 = OpLabel 
                                        f32 %83 = OpLoad %46 
                                                    OpStore %76 %83 
                                                    OpBranch %79 
                                            %79 = OpLabel 
                                        f32 %84 = OpLoad %76 
                                                    OpStore %46 %84 
                                        f32 %85 = OpLoad %46 
                                       bool %86 = OpFOrdLessThan %85 %74 
                                                    OpStore %34 %86 
                               Uniform f32* %88 = OpAccessChain %51 %87 
                                        f32 %89 = OpLoad %88 
                                      f32_2 %90 = OpCompositeConstruct %89 %89 
                                      f32_2 %94 = OpFMul %90 %93 
                                      f32_3 %95 = OpLoad %60 
                                      f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                    OpStore %60 %96 
                               Private f32* %97 = OpAccessChain %60 %44 
                                        f32 %98 = OpLoad %97 
                                        f32 %99 = OpLoad %46 
                                      bool %100 = OpFOrdLessThan %98 %99 
                                    bool_2 %101 = OpLoad %27 
                                    bool_2 %102 = OpCompositeInsert %100 %101 0 
                                                    OpStore %27 %102 
                                    bool_2 %103 = OpLoad %27 
                                      bool %104 = OpCompositeExtract %103 0 
                                      bool %105 = OpLoad %34 
                                      bool %106 = OpLogicalAnd %104 %105 
                                                    OpStore %34 %106 
                                      bool %108 = OpLoad %34 
                                                    OpSelectionMerge %110 None 
                                                    OpBranchConditional %108 %109 %112 
                                           %109 = OpLabel 
                                                    OpStore %107 %111 
                                                    OpBranch %110 
                                           %112 = OpLabel 
                                       f32 %113 = OpLoad %46 
                                                    OpStore %107 %113 
                                                    OpBranch %110 
                                           %110 = OpLabel 
                                       f32 %114 = OpLoad %107 
                              Private f32* %116 = OpAccessChain %60 %115 
                                                    OpStore %116 %114 
                                     f32_3 %117 = OpLoad %60 
                                     f32_4 %118 = OpVectorShuffle %117 %117 2 1 2 2 
                                     f32_3 %119 = OpLoad %60 
                                     f32_4 %120 = OpVectorShuffle %119 %119 0 2 0 0 
                                    bool_4 %122 = OpFOrdLessThan %118 %120 
                                    bool_2 %123 = OpVectorShuffle %122 %122 0 1 
                                                    OpStore %27 %123 
                                    bool_2 %124 = OpLoad %27 
                                      bool %125 = OpCompositeExtract %124 1 
                                    bool_2 %126 = OpLoad %27 
                                      bool %127 = OpCompositeExtract %126 0 
                                      bool %128 = OpLogicalAnd %125 %127 
                                    bool_2 %129 = OpLoad %27 
                                    bool_2 %130 = OpCompositeInsert %128 %129 0 
                                                    OpStore %27 %130 
                                    bool_2 %131 = OpLoad %27 
                                      bool %132 = OpCompositeExtract %131 0 
                                      bool %133 = OpLoad %34 
                                      bool %134 = OpLogicalOr %132 %133 
                                                    OpStore %34 %134 
                                      bool %136 = OpLoad %34 
                                                    OpSelectionMerge %138 None 
                                                    OpBranchConditional %136 %137 %139 
                                           %137 = OpLabel 
                                                    OpStore %135 %111 
                                                    OpBranch %138 
                                           %139 = OpLabel 
                                       f32 %140 = OpLoad %46 
                                                    OpStore %135 %140 
                                                    OpBranch %138 
                                           %138 = OpLabel 
                                       f32 %141 = OpLoad %135 
                              Private f32* %142 = OpAccessChain %60 %44 
                                                    OpStore %142 %141 
                              Private f32* %143 = OpAccessChain %60 %44 
                                       f32 %144 = OpLoad %143 
                              Private f32* %146 = OpAccessChain %60 %145 
                                       f32 %147 = OpLoad %146 
                                      bool %148 = OpFOrdLessThan %144 %147 
                                    bool_2 %149 = OpLoad %27 
                                    bool_2 %150 = OpCompositeInsert %148 %149 0 
                                                    OpStore %27 %150 
                              Uniform f32* %152 = OpAccessChain %51 %87 
                                       f32 %153 = OpLoad %152 
                              Private f32* %154 = OpAccessChain %60 %44 
                                       f32 %155 = OpLoad %154 
                                      bool %156 = OpFOrdLessThan %153 %155 
                                                    OpStore %151 %156 
                                      bool %157 = OpLoad %151 
                                    bool_2 %158 = OpLoad %27 
                                      bool %159 = OpCompositeExtract %158 0 
                                      bool %160 = OpLogicalAnd %157 %159 
                                    bool_2 %161 = OpLoad %27 
                                    bool_2 %162 = OpCompositeInsert %160 %161 0 
                                                    OpStore %27 %162 
                                    bool_2 %163 = OpLoad %27 
                                      bool %164 = OpCompositeExtract %163 0 
                                      bool %165 = OpLoad %34 
                                      bool %166 = OpLogicalOr %164 %165 
                                                    OpStore %34 %166 
                                      bool %168 = OpLoad %34 
                                                    OpSelectionMerge %170 None 
                                                    OpBranchConditional %168 %169 %171 
                                           %169 = OpLabel 
                                                    OpStore %167 %111 
                                                    OpBranch %170 
                                           %171 = OpLabel 
                                       f32 %172 = OpLoad %46 
                                                    OpStore %167 %172 
                                                    OpBranch %170 
                                           %170 = OpLabel 
                                       f32 %173 = OpLoad %167 
                                                    OpStore %46 %173 
                                       f32 %174 = OpLoad %46 
                              Uniform f32* %176 = OpAccessChain %51 %175 
                                       f32 %177 = OpLoad %176 
                                       f32 %178 = OpFNegate %177 
                                       f32 %179 = OpFAdd %174 %178 
                                                    OpStore %46 %179 
                                       f32 %180 = OpLoad %46 
                                      bool %181 = OpFOrdLessThan %180 %74 
                                                    OpStore %34 %181 
                                      bool %182 = OpLoad %34 
                                       i32 %183 = OpSelect %182 %53 %87 
                                       i32 %185 = OpIMul %183 %184 
                                      bool %186 = OpINotEqual %185 %87 
                                                    OpSelectionMerge %188 None 
                                                    OpBranchConditional %186 %187 %188 
                                           %187 = OpLabel 
                                                    OpKill
                                           %188 = OpLabel 
                                                    OpStore %191 %192 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "RenderType" = "TransparentCutout" }
  Cull Off
  GpuProgramID 210017
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DissolveTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec4 vs_TEXCOORD0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	vec3 _DissolveEmissionColor;
uniform 	float _DissolveEmissionThickness;
uniform 	float _DissolvePower;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	float Zero;
uniform  sampler2D _MainTex;
uniform  sampler2D _DissolveTex;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
float u_xlat4;
bool u_xlatb4;
bool u_xlatb6;
bool u_xlatb8;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
    u_xlat4 = (-u_xlat10_0.x) + _DissolvePower;
    u_xlat0.x = (-u_xlat10_0.x) + 0.200000003;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlatb8 = 0.300000012<u_xlat10_1.w;
    u_xlat4 = u_xlatb8 ? u_xlat4 : float(0.0);
    u_xlatb8 = u_xlat10_1.w<0.75;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat1.w = (u_xlatb8) ? u_xlat0.x : u_xlat4;
    u_xlatb0 = u_xlat1.w<0.0;
    u_xlat2 = vec4(_DissolveEmissionThickness, _DissolveEmissionColor.x, _DissolveEmissionColor.y, _DissolveEmissionColor.z) * vec4(0.333333343, 300.0, 300.0, 300.0);
    u_xlatb4 = u_xlat2.x<u_xlat1.w;
    u_xlatb0 = u_xlatb4 && u_xlatb0;
    u_xlat3.xyz = _DissolveEmissionColor.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb0)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.yzw, vec3(bvec3(u_xlatb0)));
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlat2.x = _DissolveEmissionThickness * 0.5;
    u_xlatb6 = u_xlat2.x<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb6;
    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat1;
    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
    u_xlatb12 = u_xlat1.w<u_xlat2.x;
    u_xlatb2 = _DissolveEmissionThickness<u_xlat1.w;
    u_xlatb12 = u_xlatb12 && u_xlatb2;
    u_xlat1 = (bool(u_xlatb12)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat1;
    u_xlat12 = u_xlat1.w + (-Zero);
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat13 = unity_OneOverOutputBoost;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat1.w = 1.0;
    u_xlat1 = (unity_MetaFragmentControl.x) ? u_xlat1 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat0 : u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 210
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %176 %177 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %176 Location 176 
                                                      OpDecorate %177 Location 177 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                               Output f32_4* %176 = OpVariable Output 
                                Input f32_4* %177 = OpVariable Input 
                                         i32 %180 = OpConstant 5 
                                         i32 %193 = OpConstant 6 
                                             %204 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                              Uniform f32_4* %181 = OpAccessChain %42 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_2 %184 = OpFMul %179 %183 
                              Uniform f32_4* %185 = OpAccessChain %42 %180 
                                       f32_4 %186 = OpLoad %185 
                                       f32_2 %187 = OpVectorShuffle %186 %186 2 3 
                                       f32_2 %188 = OpFAdd %184 %187 
                                       f32_4 %189 = OpLoad %176 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 2 3 
                                                      OpStore %176 %190 
                                       f32_4 %191 = OpLoad %177 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                              Uniform f32_4* %194 = OpAccessChain %42 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                       f32_2 %197 = OpFMul %192 %196 
                              Uniform f32_4* %198 = OpAccessChain %42 %193 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 2 3 
                                       f32_2 %201 = OpFAdd %197 %200 
                                       f32_4 %202 = OpLoad %176 
                                       f32_4 %203 = OpVectorShuffle %202 %201 0 1 4 5 
                                                      OpStore %176 %203 
                                 Output f32* %205 = OpAccessChain %166 %120 %162 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                 Output f32* %208 = OpAccessChain %166 %120 %162 
                                                      OpStore %208 %207 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 379
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %16 %366 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %16 Location 16 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 RelaxedPrecision 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 RelaxedPrecision 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 RelaxedPrecision 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 RelaxedPrecision 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %165 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %366 Location 366 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypePointer Input %7 
                                 Input f32_4* %16 = OpVariable Input 
                                              %17 = OpTypeVector %6 2 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 0 
                                              %24 = OpTypePointer Private %6 
                               Private f32_4* %26 = OpVariable Private 
                                              %30 = OpTypeVector %6 3 
                                              %31 = OpTypeVector %21 4 
                                              %32 = OpTypeStruct %7 %30 %6 %6 %31 %6 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_4; f32_3; f32; f32; u32_4; f32; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Uniform %6 
                                              %42 = OpTypePointer Private %30 
                               Private f32_3* %43 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
  UniformConstant read_only Texture2DSampled* %50 = OpVariable UniformConstant 
                                              %55 = OpTypeBool 
                                              %56 = OpTypeVector %55 2 
                                              %57 = OpTypePointer Private %56 
                              Private bool_2* %58 = OpVariable Private 
                                          f32 %59 = OpConstant 3.674022E-40 
                                          u32 %60 = OpConstant 3 
                                              %66 = OpTypePointer Function %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                              %78 = OpTypePointer Private %55 
                                Private bool* %79 = OpVariable Private 
                                          f32 %82 = OpConstant 3.674022E-40 
                               Private f32_3* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %7 
                                         i32 %107 = OpConstant 2 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_2 %113 = OpConstantComposite %111 %112 
                                         f32 %132 = OpConstant 3.674022E-40 
                                         u32 %137 = OpConstant 2 
                                             %143 = OpTypeVector %55 4 
                               Private bool* %153 = OpVariable Private 
                              Private f32_4* %158 = OpVariable Private 
                                         u32 %170 = OpConstant 1 
                               Private bool* %174 = OpVariable Private 
                                             %183 = OpTypePointer Function %30 
                                         i32 %188 = OpConstant 1 
                                             %189 = OpTypePointer Uniform %30 
                                         f32 %199 = OpConstant 3.674022E-40 
                                       f32_3 %200 = OpConstantComposite %199 %199 %199 
                                             %214 = OpTypePointer Function %7 
                                       f32_4 %219 = OpConstantComposite %75 %75 %75 %132 
                                Private f32* %223 = OpVariable Private 
                                         i32 %226 = OpConstant 8 
                              Private f32_4* %231 = OpVariable Private 
                                         i32 %241 = OpConstant -1 
                              Private f32_3* %247 = OpVariable Private 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                       f32_3 %259 = OpConstantComposite %75 %75 %75 
                              Private f32_3* %274 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %280 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_3 %288 = OpConstantComposite %287 %287 %287 
                              Private f32_3* %290 = OpVariable Private 
                                       f32_4 %295 = OpConstantComposite %75 %75 %75 %75 
                                         i32 %296 = OpConstant 7 
                                Private f32* %313 = OpVariable Private 
                                         i32 %314 = OpConstant 5 
                                         i32 %327 = OpConstant 6 
                                         i32 %341 = OpConstant 4 
                                             %342 = OpTypePointer Uniform %31 
                                             %365 = OpTypePointer Output %7 
                               Output f32_4* %366 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %67 = OpVariable Function 
                                Function f32* %93 = OpVariable Function 
                               Function f32* %128 = OpVariable Function 
                               Function f32* %159 = OpVariable Function 
                             Function f32_3* %184 = OpVariable Function 
                             Function f32_3* %202 = OpVariable Function 
                             Function f32_4* %215 = OpVariable Function 
                             Function f32_3* %253 = OpVariable Function 
                             Function f32_3* %263 = OpVariable Function 
                             Function f32_3* %302 = OpVariable Function 
                             Function f32_3* %340 = OpVariable Function 
                               Function f32* %354 = OpVariable Function 
                             Function f32_4* %367 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_4 %18 = OpLoad %16 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 3 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %19 
                                          f32 %23 = OpCompositeExtract %20 0 
                                 Private f32* %25 = OpAccessChain %9 %22 
                                                      OpStore %25 %23 
                                 Private f32* %27 = OpAccessChain %9 %22 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFNegate %28 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpFAdd %29 %39 
                                 Private f32* %41 = OpAccessChain %26 %22 
                                                      OpStore %41 %40 
                                 Private f32* %44 = OpAccessChain %9 %22 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFNegate %45 
                                          f32 %48 = OpFAdd %46 %47 
                                 Private f32* %49 = OpAccessChain %43 %22 
                                                      OpStore %49 %48 
                   read_only Texture2DSampled %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %16 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                                      OpStore %9 %54 
                                 Private f32* %61 = OpAccessChain %9 %60 
                                          f32 %62 = OpLoad %61 
                                         bool %63 = OpFOrdLessThan %59 %62 
                                       bool_2 %64 = OpLoad %58 
                                       bool_2 %65 = OpCompositeInsert %63 %64 0 
                                                      OpStore %58 %65 
                                       bool_2 %68 = OpLoad %58 
                                         bool %69 = OpCompositeExtract %68 0 
                                                      OpSelectionMerge %71 None 
                                                      OpBranchConditional %69 %70 %74 
                                              %70 = OpLabel 
                                 Private f32* %72 = OpAccessChain %26 %22 
                                          f32 %73 = OpLoad %72 
                                                      OpStore %67 %73 
                                                      OpBranch %71 
                                              %74 = OpLabel 
                                                      OpStore %67 %75 
                                                      OpBranch %71 
                                              %71 = OpLabel 
                                          f32 %76 = OpLoad %67 
                                 Private f32* %77 = OpAccessChain %26 %22 
                                                      OpStore %77 %76 
                                 Private f32* %80 = OpAccessChain %9 %60 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdLessThan %81 %82 
                                                      OpStore %79 %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                               Uniform f32_4* %89 = OpAccessChain %34 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFMul %86 %91 
                                                      OpStore %84 %92 
                                         bool %94 = OpLoad %79 
                                                      OpSelectionMerge %96 None 
                                                      OpBranchConditional %94 %95 %99 
                                              %95 = OpLabel 
                                 Private f32* %97 = OpAccessChain %43 %22 
                                          f32 %98 = OpLoad %97 
                                                      OpStore %93 %98 
                                                      OpBranch %96 
                                              %99 = OpLabel 
                                Private f32* %100 = OpAccessChain %26 %22 
                                         f32 %101 = OpLoad %100 
                                                      OpStore %93 %101 
                                                      OpBranch %96 
                                              %96 = OpLabel 
                                         f32 %102 = OpLoad %93 
                                Private f32* %103 = OpAccessChain %26 %22 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %26 %22 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %105 %75 
                                                      OpStore %79 %106 
                                Uniform f32* %108 = OpAccessChain %34 %107 
                                         f32 %109 = OpLoad %108 
                                       f32_2 %110 = OpCompositeConstruct %109 %109 
                                       f32_2 %114 = OpFMul %110 %113 
                                       f32_3 %115 = OpLoad %43 
                                       f32_3 %116 = OpVectorShuffle %115 %114 3 4 2 
                                                      OpStore %43 %116 
                                Private f32* %117 = OpAccessChain %43 %22 
                                         f32 %118 = OpLoad %117 
                                Private f32* %119 = OpAccessChain %26 %22 
                                         f32 %120 = OpLoad %119 
                                        bool %121 = OpFOrdLessThan %118 %120 
                                      bool_2 %122 = OpLoad %58 
                                      bool_2 %123 = OpCompositeInsert %121 %122 0 
                                                      OpStore %58 %123 
                                        bool %124 = OpLoad %79 
                                      bool_2 %125 = OpLoad %58 
                                        bool %126 = OpCompositeExtract %125 0 
                                        bool %127 = OpLogicalAnd %124 %126 
                                                      OpStore %79 %127 
                                        bool %129 = OpLoad %79 
                                                      OpSelectionMerge %131 None 
                                                      OpBranchConditional %129 %130 %133 
                                             %130 = OpLabel 
                                                      OpStore %128 %132 
                                                      OpBranch %131 
                                             %133 = OpLabel 
                                Private f32* %134 = OpAccessChain %26 %22 
                                         f32 %135 = OpLoad %134 
                                                      OpStore %128 %135 
                                                      OpBranch %131 
                                             %131 = OpLabel 
                                         f32 %136 = OpLoad %128 
                                Private f32* %138 = OpAccessChain %43 %137 
                                                      OpStore %138 %136 
                                       f32_3 %139 = OpLoad %43 
                                       f32_4 %140 = OpVectorShuffle %139 %139 2 1 2 2 
                                       f32_3 %141 = OpLoad %43 
                                       f32_4 %142 = OpVectorShuffle %141 %141 0 2 0 0 
                                      bool_4 %144 = OpFOrdLessThan %140 %142 
                                      bool_2 %145 = OpVectorShuffle %144 %144 0 1 
                                                      OpStore %58 %145 
                                      bool_2 %146 = OpLoad %58 
                                        bool %147 = OpCompositeExtract %146 1 
                                      bool_2 %148 = OpLoad %58 
                                        bool %149 = OpCompositeExtract %148 0 
                                        bool %150 = OpLogicalAnd %147 %149 
                                      bool_2 %151 = OpLoad %58 
                                      bool_2 %152 = OpCompositeInsert %150 %151 0 
                                                      OpStore %58 %152 
                                        bool %154 = OpLoad %79 
                                      bool_2 %155 = OpLoad %58 
                                        bool %156 = OpCompositeExtract %155 0 
                                        bool %157 = OpLogicalOr %154 %156 
                                                      OpStore %153 %157 
                                        bool %160 = OpLoad %153 
                                                      OpSelectionMerge %162 None 
                                                      OpBranchConditional %160 %161 %163 
                                             %161 = OpLabel 
                                                      OpStore %159 %132 
                                                      OpBranch %162 
                                             %163 = OpLabel 
                                Private f32* %164 = OpAccessChain %26 %22 
                                         f32 %165 = OpLoad %164 
                                                      OpStore %159 %165 
                                                      OpBranch %162 
                                             %162 = OpLabel 
                                         f32 %166 = OpLoad %159 
                                Private f32* %167 = OpAccessChain %158 %60 
                                                      OpStore %167 %166 
                                Private f32* %168 = OpAccessChain %158 %60 
                                         f32 %169 = OpLoad %168 
                                Private f32* %171 = OpAccessChain %43 %170 
                                         f32 %172 = OpLoad %171 
                                        bool %173 = OpFOrdLessThan %169 %172 
                                                      OpStore %153 %173 
                                Uniform f32* %175 = OpAccessChain %34 %107 
                                         f32 %176 = OpLoad %175 
                                Private f32* %177 = OpAccessChain %158 %60 
                                         f32 %178 = OpLoad %177 
                                        bool %179 = OpFOrdLessThan %176 %178 
                                                      OpStore %174 %179 
                                        bool %180 = OpLoad %174 
                                        bool %181 = OpLoad %153 
                                        bool %182 = OpLogicalAnd %180 %181 
                                                      OpStore %153 %182 
                                        bool %185 = OpLoad %79 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %192 
                                             %186 = OpLabel 
                              Uniform f32_3* %190 = OpAccessChain %34 %188 
                                       f32_3 %191 = OpLoad %190 
                                                      OpStore %184 %191 
                                                      OpBranch %187 
                                             %192 = OpLabel 
                                       f32_3 %193 = OpLoad %84 
                                                      OpStore %184 %193 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                       f32_3 %194 = OpLoad %184 
                                       f32_4 %195 = OpLoad %26 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %26 %196 
                              Uniform f32_3* %197 = OpAccessChain %34 %188 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %201 = OpFMul %198 %200 
                                                      OpStore %84 %201 
                                      bool_2 %203 = OpLoad %58 
                                        bool %204 = OpCompositeExtract %203 0 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %208 
                                             %205 = OpLabel 
                                       f32_3 %207 = OpLoad %84 
                                                      OpStore %202 %207 
                                                      OpBranch %206 
                                             %208 = OpLabel 
                                       f32_4 %209 = OpLoad %26 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                                      OpStore %202 %210 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                       f32_3 %211 = OpLoad %202 
                                       f32_4 %212 = OpLoad %158 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %158 %213 
                                        bool %216 = OpLoad %153 
                                                      OpSelectionMerge %218 None 
                                                      OpBranchConditional %216 %217 %220 
                                             %217 = OpLabel 
                                                      OpStore %215 %219 
                                                      OpBranch %218 
                                             %220 = OpLabel 
                                       f32_4 %221 = OpLoad %158 
                                                      OpStore %215 %221 
                                                      OpBranch %218 
                                             %218 = OpLabel 
                                       f32_4 %222 = OpLoad %215 
                                                      OpStore %26 %222 
                                Private f32* %224 = OpAccessChain %26 %60 
                                         f32 %225 = OpLoad %224 
                                Uniform f32* %227 = OpAccessChain %34 %226 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFNegate %228 
                                         f32 %230 = OpFAdd %225 %229 
                                                      OpStore %223 %230 
                                       f32_4 %232 = OpLoad %26 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %234 = OpExtInst %1 30 %233 
                                       f32_4 %235 = OpLoad %231 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %223 
                                        bool %238 = OpFOrdLessThan %237 %75 
                                                      OpStore %153 %238 
                                        bool %239 = OpLoad %153 
                                         i32 %240 = OpSelect %239 %188 %87 
                                         i32 %242 = OpIMul %240 %241 
                                        bool %243 = OpINotEqual %242 %87 
                                                      OpSelectionMerge %245 None 
                                                      OpBranchConditional %243 %244 %245 
                                             %244 = OpLabel 
                                                      OpKill
                                             %245 = OpLabel 
                              Uniform f32_3* %248 = OpAccessChain %34 %188 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %247 %252 
                                        bool %254 = OpLoad %79 
                                                      OpSelectionMerge %256 None 
                                                      OpBranchConditional %254 %255 %258 
                                             %255 = OpLabel 
                                       f32_3 %257 = OpLoad %247 
                                                      OpStore %253 %257 
                                                      OpBranch %256 
                                             %258 = OpLabel 
                                                      OpStore %253 %259 
                                                      OpBranch %256 
                                             %256 = OpLabel 
                                       f32_3 %260 = OpLoad %253 
                                       f32_4 %261 = OpLoad %26 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %26 %262 
                                      bool_2 %264 = OpLoad %58 
                                        bool %265 = OpCompositeExtract %264 0 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %265 %266 %268 
                                             %266 = OpLabel 
                                                      OpStore %263 %259 
                                                      OpBranch %267 
                                             %268 = OpLabel 
                                       f32_4 %269 = OpLoad %26 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                                      OpStore %263 %270 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                       f32_3 %271 = OpLoad %263 
                                       f32_4 %272 = OpLoad %26 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %26 %273 
                                       f32_4 %275 = OpLoad %26 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %282 = OpFAdd %279 %281 
                                                      OpStore %274 %282 
                                       f32_4 %283 = OpLoad %26 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpLoad %274 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore %274 %289 
                                       f32_4 %291 = OpLoad %26 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpLoad %274 
                                       f32_3 %294 = OpFMul %292 %293 
                                                      OpStore %290 %294 
                                Uniform f32* %297 = OpAccessChain %34 %296 
                                         f32 %298 = OpLoad %297 
                                       f32_4 %299 = OpCompositeConstruct %298 %298 %298 %298 
                                      bool_4 %300 = OpFOrdNotEqual %295 %299 
                                        bool %301 = OpAny %300 
                                                      OpStore %79 %301 
                                        bool %303 = OpLoad %79 
                                                      OpSelectionMerge %305 None 
                                                      OpBranchConditional %303 %304 %308 
                                             %304 = OpLabel 
                                       f32_4 %306 = OpLoad %26 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                                      OpStore %302 %307 
                                                      OpBranch %305 
                                             %308 = OpLabel 
                                       f32_3 %309 = OpLoad %290 
                                                      OpStore %302 %309 
                                                      OpBranch %305 
                                             %305 = OpLabel 
                                       f32_3 %310 = OpLoad %302 
                                       f32_4 %311 = OpLoad %26 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %26 %312 
                                Uniform f32* %315 = OpAccessChain %34 %314 
                                         f32 %316 = OpLoad %315 
                                                      OpStore %313 %316 
                                         f32 %317 = OpLoad %313 
                                         f32 %318 = OpExtInst %1 43 %317 %75 %132 
                                                      OpStore %313 %318 
                                       f32_4 %319 = OpLoad %231 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                         f32 %321 = OpLoad %313 
                                       f32_3 %322 = OpCompositeConstruct %321 %321 %321 
                                       f32_3 %323 = OpFMul %320 %322 
                                                      OpStore %84 %323 
                                       f32_3 %324 = OpLoad %84 
                                       f32_3 %325 = OpExtInst %1 29 %324 
                                                      OpStore %84 %325 
                                       f32_3 %326 = OpLoad %84 
                                Uniform f32* %328 = OpAccessChain %34 %327 
                                         f32 %329 = OpLoad %328 
                                Uniform f32* %330 = OpAccessChain %34 %327 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %332 = OpAccessChain %34 %327 
                                         f32 %333 = OpLoad %332 
                                       f32_3 %334 = OpCompositeConstruct %329 %331 %333 
                                         f32 %335 = OpCompositeExtract %334 0 
                                         f32 %336 = OpCompositeExtract %334 1 
                                         f32 %337 = OpCompositeExtract %334 2 
                                       f32_3 %338 = OpCompositeConstruct %335 %336 %337 
                                       f32_3 %339 = OpExtInst %1 37 %326 %338 
                                                      OpStore %84 %339 
                              Uniform u32_4* %343 = OpAccessChain %34 %341 
                                       u32_4 %344 = OpLoad %343 
                                         u32 %345 = OpCompositeExtract %344 0 
                                        bool %346 = OpINotEqual %345 %22 
                                                      OpSelectionMerge %348 None 
                                                      OpBranchConditional %346 %347 %350 
                                             %347 = OpLabel 
                                       f32_3 %349 = OpLoad %84 
                                                      OpStore %340 %349 
                                                      OpBranch %348 
                                             %350 = OpLabel 
                                                      OpStore %340 %259 
                                                      OpBranch %348 
                                             %348 = OpLabel 
                                       f32_3 %351 = OpLoad %340 
                                       f32_4 %352 = OpLoad %231 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %231 %353 
                              Uniform u32_4* %355 = OpAccessChain %34 %341 
                                       u32_4 %356 = OpLoad %355 
                                         u32 %357 = OpCompositeExtract %356 0 
                                        bool %358 = OpINotEqual %357 %22 
                                                      OpSelectionMerge %360 None 
                                                      OpBranchConditional %358 %359 %361 
                                             %359 = OpLabel 
                                                      OpStore %354 %132 
                                                      OpBranch %360 
                                             %361 = OpLabel 
                                                      OpStore %354 %75 
                                                      OpBranch %360 
                                             %360 = OpLabel 
                                         f32 %362 = OpLoad %354 
                                Private f32* %363 = OpAccessChain %231 %60 
                                                      OpStore %363 %362 
                                Private f32* %364 = OpAccessChain %26 %60 
                                                      OpStore %364 %132 
                              Uniform u32_4* %368 = OpAccessChain %34 %341 
                                       u32_4 %369 = OpLoad %368 
                                         u32 %370 = OpCompositeExtract %369 1 
                                        bool %371 = OpINotEqual %370 %22 
                                                      OpSelectionMerge %373 None 
                                                      OpBranchConditional %371 %372 %375 
                                             %372 = OpLabel 
                                       f32_4 %374 = OpLoad %26 
                                                      OpStore %367 %374 
                                                      OpBranch %373 
                                             %375 = OpLabel 
                                       f32_4 %376 = OpLoad %231 
                                                      OpStore %367 %376 
                                                      OpBranch %373 
                                             %373 = OpLabel 
                                       f32_4 %377 = OpLoad %367 
                                                      OpStore %366 %377 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
}